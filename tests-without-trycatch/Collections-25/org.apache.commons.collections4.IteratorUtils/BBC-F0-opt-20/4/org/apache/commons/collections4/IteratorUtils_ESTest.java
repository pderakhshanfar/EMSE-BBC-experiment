/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 09:52:45 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Locale.FilteringMode>) listIterator0, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, Integer>(mapIterator0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer[] integerArray0 = new Integer[9];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integerArray0[1], true);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) objectArrayIterator0, (Iterator<? extends Integer>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) listIterator0, (Iterator<? extends SQLTransientException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) class0, 0, (-3415));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<DataTruncation, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLTransactionRollbackException>(orderedMapIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) abstractMapIteratorDecorator0;
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      vector0.add(sQLTransientConnectionException0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) vector0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) resettableListIterator0);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
      EntrySetMapIterator<BatchUpdateException, String> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, String>(hashMap0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) entrySetMapIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Factory<String> factory0 = ConstantFactory.constantFactory("~C=Ky\"J");
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      singletonListIterator0.next();
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OrderedMapIterator<SQLWarning, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) orderedMapIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0, class0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OrderedMapIterator<Properties, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) resettableListIterator0, 0L);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) skippingIterator0, (Iterator<? extends SQLRecoverableException>) resettableListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) singletonListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(hashSet0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) loopingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = IteratorUtils.get((Iterator<Locale.FilteringMode>) singletonListIterator0, 0);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[]");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IIOMetadataNode iIOMetadataNode1 = IteratorUtils.find((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      assertNotNull(iIOMetadataNode1);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Properties, SQLNonTransientConnectionException> hashMap0 = new HashMap<Properties, SQLNonTransientConnectionException>();
      EntrySetMapIterator<Properties, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<Properties, SQLNonTransientConnectionException>(hashMap0);
      MapIterator<Properties, SQLNonTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLNonTransientException>) entrySetMapIterator0);
      ListIteratorWrapper<Properties> listIteratorWrapper0 = new ListIteratorWrapper<Properties>(mapIterator0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 9);
      iteratorArray0[0] = (Iterator<Properties>) mapIterator0;
      iteratorArray0[1] = (Iterator<Properties>) entrySetMapIterator0;
      iteratorArray0[2] = (Iterator<Properties>) entrySetMapIterator0;
      iteratorArray0[3] = (Iterator<Properties>) listIteratorWrapper0;
      iteratorArray0[4] = (Iterator<Properties>) mapIterator0;
      iteratorArray0[5] = (Iterator<Properties>) listIteratorWrapper0;
      iteratorArray0[6] = (Iterator<Properties>) entrySetMapIterator0;
      iteratorArray0[7] = (Iterator<Properties>) mapIterator0;
      iteratorArray0[8] = (Iterator<Properties>) mapIterator0;
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<String> iterator0 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("x@b)MMB!b8j", "[", 215, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("x@b)MMB!b8j", "x@b)MMB!b8j", 0, sQLFeatureNotSupportedException0);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientException0);
      BoundedIterator<SQLTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (long) 215, (long) 215);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TreeSet<DataTruncation>[] treeSetArray0 = (TreeSet<DataTruncation>[]) Array.newInstance(TreeSet.class, 4);
      ResettableListIterator<TreeSet<DataTruncation>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[15];
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, Stack<SQLIntegrityConstraintViolationException>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<SQLNonTransientException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLNonTransientException) sQLDataException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ResettableIterator<Predicate<SQLNonTransientException>> resettableIterator0 = IteratorUtils.singletonIterator(predicate0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 5);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Aq{v.[", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Predicate<SQLNonTransientException>>) resettableIterator0, (Transformer<? super Predicate<SQLNonTransientException>, String>) invokerTransformer0, "", "", "nub");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'Aq{v.[' on 'class org.apache.commons.collections4.functors.ComparatorPredicate' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) priorityQueue0);
      SQLWarning sQLWarning0 = new SQLWarning("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "", sQLWarning0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "XE'@]}!7C94v:]B%", sQLNonTransientConnectionException0);
      priorityQueue0.add(sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.PriorityQueue$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Properties properties0 = new Properties();
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) objectArrayListIterator0, 10);
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(list0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 103);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("r t)xbQ$jeNNMz>f0", "r t)xbQ$jeNNMz>f0", hashtable0, sQLTransientException0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLClientInfoException0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLException>) singletonIterator0, (Predicate<? super SQLException>) nullIsExceptionPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Node must not be null", "List must not be null", mockThrowable0);
      Transformer<SQLTransientException, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.isEmpty(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLTransientConnectionException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Locale.FilteringMode>) null, 4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("9", "9", intArray0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(batchUpdateException0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLException>) singletonListIterator0, (Predicate<? super SQLException>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Boolean>) linkedList0);
      ListIterator<Predicate<SQLException>> listIterator0 = EmptyListIterator.emptyListIterator();
      List<Predicate<SQLException>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<SQLException>>) listIterator0, 17);
      Predicate<SQLTransientException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLTransientException>>) list0);
      PredicateTransformer<SQLTransactionRollbackException> predicateTransformer0 = new PredicateTransformer<SQLTransactionRollbackException>(predicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Boolean boolean0 = predicateTransformer0.transform(sQLTransactionRollbackException0);
      linkedList0.add(boolean0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Boolean>) resettableListIterator0, (Predicate<? super Boolean>) nullIsTruePredicate0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) null, 1L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Locale.LanguageRange[]) null, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[3];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, (-3591), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, (-1827));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResettableListIterator<Predicate<SQLFeatureNotSupportedException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, 91, 2630);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OrderedMapIterator<Properties, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0, 593);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("RooZ+pvYv<K!", "");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[13];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 10, (-4863));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(locale_FilteringModeArray0, 2532, (-1182));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Iterator<PriorityQueue<SQLTransientException>>[]) null, 2433);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(locale_FilteringModeArray0, 396);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((EnumSet<Locale.FilteringMode>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientException) sQLTransactionRollbackException0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLTransientException>) resettableIterator0, (Closure<? super SQLTransientException>) closure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableListIterator0);
      ResettableListIterator<SQLTransientException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<SQLTransientException>) resettableListIterator1, (Closure<? super SQLTransientException>) closure0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
      EntrySetMapIterator<BatchUpdateException, String> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, String>(hashMap0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("_nff=aQ7GZ2-.a");
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) entrySetMapIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "_nff=aQ7GZ2-.a", "_nff=aQ7GZ2-.a", "_nff=aQ7GZ2-.a");
      assertEquals("_nff=aQ7GZ2-.a_nff=aQ7GZ2-.a", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, (long) 10);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) boundedIterator0, (Transformer<? super BatchUpdateException, String>) null, "", "org.apache.commons.collections4.map.AbstractHashedMap$KeySet", "Iterator must not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException>[] arrayListArray0 = (ArrayList<SQLFeatureNotSupportedException>[]) Array.newInstance(ArrayList.class, 1);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      arrayListArray0[0] = arrayList0;
      ResettableIterator<ArrayList<SQLFeatureNotSupportedException>> resettableIterator0 = IteratorUtils.arrayIterator(arrayListArray0, 0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) arrayList0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ArrayList<SQLFeatureNotSupportedException>>) resettableIterator0, (Predicate<? super ArrayList<SQLFeatureNotSupportedException>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException>[] arrayListArray0 = (ArrayList<SQLFeatureNotSupportedException>[]) Array.newInstance(ArrayList.class, 1);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableIterator<ArrayList<SQLFeatureNotSupportedException>> resettableIterator0 = IteratorUtils.arrayIterator(arrayListArray0, 0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) arrayList0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ArrayList<SQLFeatureNotSupportedException>>) resettableIterator0, (Predicate<? super ArrayList<SQLFeatureNotSupportedException>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      UniquePredicate<SQLTransactionRollbackException> uniquePredicate0 = new UniquePredicate<SQLTransactionRollbackException>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) uniquePredicate0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ArrayList<SQLFeatureNotSupportedException>>) null, (Predicate<? super ArrayList<SQLFeatureNotSupportedException>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends String>) null, (-749));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (-2581L), (long) 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
      int[] intArray0 = new int[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("List must not be null", "", intArray0, sQLIntegrityConstraintViolationException0);
      hashMap0.put(batchUpdateException0, ":+.*h");
      EntrySetMapIterator<BatchUpdateException, String> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, String>(hashMap0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("_nff=aQ7GZ2-.a");
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) entrySetMapIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "_nff=aQ7GZ2-.a", "_nff=aQ7GZ2-.a", "_nff=aQ7GZ2-.a");
      assertEquals("_nff=aQ7GZ2-.a_nff=aQ7GZ2-.a_nff=aQ7GZ2-.a", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, String>) invokerTransformer0, "OT%rTT", "Already at start of list.", "Can't do that after next or hasNext has been called.");
      assertEquals("Already at start of list.Can't do that after next or hasNext has been called.", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "A", "hyt|-b", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
      EntrySetMapIterator<BatchUpdateException, String> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, String>(hashMap0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("JU=$Fk1SC");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) entrySetMapIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "dU7k/=P+(h}pY;6y.f", (String) null, "_nff=aQ7GZ2-.a");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
      EntrySetMapIterator<BatchUpdateException, String> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, String>(hashMap0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) entrySetMapIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, (String) null, "", "O");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstantiateFactory<SQLClientInfoException> instantiateFactory0 = new InstantiateFactory<SQLClientInfoException>(class0);
      Transformer<SQLException, SQLException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLException>) instantiateFactory0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLTimeoutException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      int int0 = IteratorUtils.size(zippingIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      IteratorUtils.get((Iterator<Locale.FilteringMode>) resettableIterator0, 4);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.singletonIterator((Boolean) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicateArray0[0], predicateArray0[1]);
      predicateArray0[2] = (Predicate<Object>) orPredicate0;
      predicateArray0[3] = predicateArray0[1];
      predicateArray0[4] = predicateArray0[0];
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      predicateArray0[5] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[6] = predicateArray0[1];
      Predicate<Boolean> predicate0 = OnePredicate.onePredicate((Predicate<? super Boolean>[]) predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Boolean>) resettableIterator0, (Predicate<? super Boolean>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Input Object must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("prefix may not be null", "prefix may not be null", (-1286));
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Object) sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLWarning0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      HashMap<Object, SQLTimeoutException> hashMap0 = new HashMap<Object, SQLTimeoutException>();
      Transformer<Object, SQLTimeoutException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTimeoutException>) hashMap0);
      SwitchTransformer<Object, SQLTimeoutException> switchTransformer0 = new SwitchTransformer<Object, SQLTimeoutException>(predicateArray0, (Transformer<? super Object, ? extends SQLTimeoutException>[]) null, transformer0);
      IfTransformer<Object, SQLTimeoutException> ifTransformer0 = new IfTransformer<Object, SQLTimeoutException>((Predicate<? super Object>) null, switchTransformer0, switchTransformer0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) ifTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLTimeoutException>) predicateArray0[3]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) null);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<Integer> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Integer>>) arrayDeque0);
      IteratorUtils.find((Iterator<Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      UniquePredicate<SQLTransactionRollbackException> uniquePredicate0 = new UniquePredicate<SQLTransactionRollbackException>();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) uniquePredicate0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) null);
      IteratorUtils.find((Iterator<Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate0);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertEquals(0, singletonListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      PriorityQueue<EnumSet> priorityQueue0 = IteratorUtils.find((Iterator<PriorityQueue<EnumSet>>) null, (Predicate<? super PriorityQueue<EnumSet>>) nullIsExceptionPredicate0);
      assertNull(priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MapIterator<Integer, Predicate<SQLException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Integer>) mapIterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<SQLTransientException> closure1 = ForClosure.forClosure(347, (Closure<? super SQLTransientException>) closure0);
      IteratorUtils.apply((Iterator<SQLTransientException>) resettableListIterator0, (Closure<? super SQLTransientException>) closure1);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-1827), (Closure<? super Object>) null);
      IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) null, (Closure<? super SQLInvalidAuthorizationSpecException>) forClosure0);
      assertEquals((-1827), forClosure0.getCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLTimeoutException>) resettableIterator0, (Closure<? super SQLTimeoutException>) chainedClosure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("amyPEDlnM(DT0q");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Hashtable<Integer, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<Integer, SQLFeatureNotSupportedException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-3801), true, true, (-3801), (-3801));
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) singletonIterator0, (-3801));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      UniquePredicate<SQLTransactionRollbackException> uniquePredicate0 = new UniquePredicate<SQLTransactionRollbackException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray(iterator0, class0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) stack0);
      Iterable<SQLTransactionRollbackException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends EnumSet<Locale.FilteringMode>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) linkedList0);
      Iterable<SQLNonTransientException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(2627, true, true, 2627, 2627, (Throwable) null);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableIterator0);
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0, (Collection<? super SQLWarning>) stack0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) null, (Collection<? super SQLWarning>) linkedHashSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("I");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<Stack<Integer>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      UniquePredicate<SQLTransactionRollbackException> uniquePredicate0 = new UniquePredicate<SQLTransactionRollbackException>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) uniquePredicate0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      UniquePredicate<SQLTransactionRollbackException> uniquePredicate0 = new UniquePredicate<SQLTransactionRollbackException>();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) uniquePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Predicate<? super Locale.FilteringMode>) predicateArray0[0]);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Stack<Predicate<SQLFeatureNotSupportedException>> stack0 = new Stack<Predicate<SQLFeatureNotSupportedException>>();
      Predicate<SQLFeatureNotSupportedException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLFeatureNotSupportedException>>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) listIterator0, (Transformer<? super Locale.FilteringMode, ? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("transformer may not be null");
      ConstantTransformer<Object, SQLInvalidAuthorizationSpecException> constantTransformer0 = new ConstantTransformer<Object, SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) null, (Transformer<? super Locale.FilteringMode, ? extends SQLInvalidAuthorizationSpecException>) constantTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      HashMap<Object, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Object, SQLInvalidAuthorizationSpecException>();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLInvalidAuthorizationSpecException>) hashMap0);
      IfTransformer<Object, SQLInvalidAuthorizationSpecException> ifTransformer0 = new IfTransformer<Object, SQLInvalidAuthorizationSpecException>(predicate0, transformer0, transformer0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Transformer<? super Locale.FilteringMode, ? extends SQLInvalidAuthorizationSpecException>) ifTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransientConnectionException>(orderedMapIterator0);
      MapIterator<SQLTransientException, SQLTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientException, ? extends SQLTransientException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTransientException>) mapIterator0, (-1712L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLNonTransientException, String> factoryTransformer0 = new FactoryTransformer<SQLNonTransientException, String>(factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Transformer<? super SQLSyntaxErrorException, String>) factoryTransformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1403, 1403);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      UniquePredicate<SQLTransactionRollbackException> uniquePredicate0 = new UniquePredicate<SQLTransactionRollbackException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Class<SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Properties, SQLNonTransientConnectionException> hashMap0 = new HashMap<Properties, SQLNonTransientConnectionException>();
      EntrySetMapIterator<Properties, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<Properties, SQLNonTransientConnectionException>(hashMap0);
      MapIterator<Properties, SQLNonTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLNonTransientException>) entrySetMapIterator0);
      MapIterator<Properties, SQLNonTransientException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertSame(mapIterator1, mapIterator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, Stack<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[6];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 6, 4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((ArrayList<DataTruncation>[]) null, 14, 14);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OrderedMapIterator<Properties, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      String string0 = IteratorUtils.toString((Iterator<Properties>) abstractOrderedMapIteratorDecorator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<String, String> invokerTransformer0 = new InvokerTransformer<String, String>("", classArray0, classArray0);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("PrototypeCloneFactory: Clone method threw an exception", (Transformer<? super String, ? extends String>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.size(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.lang.String' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) zippingIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 123, 123);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Object) sQLFeatureNotSupportedExceptionArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLException>) listIterator0, (Predicate<? super SQLException>) allPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Predicate<? super Locale.FilteringMode>) predicateArray0[0]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
