/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 02:27:09 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "b7", intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("", batchUpdateException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) singletonListIterator0, (Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      IteratorUtils.get((Iterator<SQLRecoverableException>) singletonListIterator0, 0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) singletonListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("phzO", "GREATER_OR_EQUAL", (Throwable) null);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      ListIteratorWrapper<SQLTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientException>(listIterator0);
      ListIterator<SQLTransientException> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientException>) listIteratorWrapper0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Object, Iterator<HashMap<SQLNonTransientException, String>>> hashMap0 = new HashMap<Object, Iterator<HashMap<SQLNonTransientException, String>>>();
      Transformer<Object, Iterator<HashMap<SQLNonTransientException, String>>> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Iterator<HashMap<SQLNonTransientException, String>>>) hashMap0);
      Iterator<Iterator<HashMap<SQLNonTransientException, String>>> iterator0 = IteratorUtils.objectGraphIterator((Iterator<HashMap<SQLNonTransientException, String>>) null, (Transformer<? super Iterator<HashMap<SQLNonTransientException, String>>, ? extends Iterator<HashMap<SQLNonTransientException, String>>>) transformer0);
      Iterator<Iterator<HashMap<SQLNonTransientException, String>>> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>((SQLWarning) null);
      Consumer<SQLException> consumer0 = (Consumer<SQLException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("eI#GbcY7q");
      String string0 = IteratorUtils.toString((Iterator<SQLWarning>) singletonIterator0, (Transformer<? super SQLWarning, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Hashtable<SQLTimeoutException, String> hashtable0 = new Hashtable<SQLTimeoutException, String>();
      EntrySetMapIterator<SQLTimeoutException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, String>(hashtable0);
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 3);
      Transformer<SQLTimeoutException, String> transformer0 = InvokerTransformer.invokerTransformer("wS2h]bFvP0+G33*`", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLTimeoutException>) entrySetMapIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, 560);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractReferenceMap$SoftRef", "org.apache.commons.collections4.map.AbstractReferenceMap$SoftRef", mockThrowable0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, class0);
      assertNotSame(sQLTransactionRollbackExceptionArray0, sQLTransactionRollbackExceptionArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) listIterator0, class0);
      assertEquals(0, sQLTransactionRollbackExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 3);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>((SQLRecoverableException) null, true);
      SQLRecoverableException sQLRecoverableException0 = IteratorUtils.get((Iterator<SQLRecoverableException>) singletonIterator0, 0);
      assertNull(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(") is the size of the list.");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLNonTransientException>) resettableIterator0, (Object) sQLFeatureNotSupportedException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      iteratorArray0[2] = (Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0;
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Factory<SQLRecoverableException> factory0 = ConstantFactory.constantFactory(sQLRecoverableException0);
      Transformer<Object, SQLRecoverableException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLRecoverableException>) factory0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) iterator0, 1L, 1L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0, 5);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[9];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("node must not be null!", "node must not be null!");
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<?>) null, (Iterator<?>) null, (Iterator<?>) singletonIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, SQLNonTransientException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.ArrayListIterator", ">(bbm ~D&3G\"/Rll>Q", (-1916));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[]", "5-MdakS_B:$C5>", sQLTransientConnectionException0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("[]", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) invokerTransformer0, "P ", "'", "org.apache.commons.collections4.iterators.ArrayListIterator");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '[]' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("The predicate collection must not be null", " `5W!`p,Rb", 100);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      DataTruncation dataTruncation0 = new DataTruncation(92, true, true, 92, 1979);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "Transformer must not be null", 92, dataTruncation0);
      stack0.add(sQLSyntaxErrorException0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) stack0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) stack0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      stack0.add(sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 100);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, (-117), sQLInvalidAuthorizationSpecException0);
      dataTruncationArray0[0] = dataTruncation0;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<Object, SQLClientInfoException> invokerTransformer0 = new InvokerTransformer<Object, SQLClientInfoException>("", classArray0, dataTruncationArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) objectArrayIterator0, (Transformer<? super DataTruncation, ? extends SQLClientInfoException>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) iterator0, 962);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.DataTruncation' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) stack0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 869);
      stack0.add(sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<?>) resettableIterator0, 987);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLException>) listIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) "Y/@[o*io?+!xKbw>17");
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) stack0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) stack0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", (-1));
      stack0.add(sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<Object>) resettableIterator0, 1L);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("2f#HUcI%g!v");
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLNonTransientConnectionException0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.size(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(", ", ", ", 0, dataTruncation0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("ICY=/,&CtQ>P", ", ", sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ICY=/,&CtQ>P", "ICY=/,&CtQ>P", sQLNonTransientException0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Object, SQLNonTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLNonTransientConnectionException>("4_$2(~qrrxnku}k7dF", classArray0, classArray0);
      Transformer<SQLException, SQLNonTransientConnectionException> transformer0 = IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends SQLNonTransientConnectionException>) invokerTransformer0, (Transformer<? super SQLException, ? extends SQLNonTransientConnectionException>) invokerTransformer0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLNonTransientException>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<LinkedList<Iterator<PriorityQueue>>>) null, 3494);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) null, (Iterator<? extends SQLWarning>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (-729L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object[]) null, 100, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0, (-3762));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 100, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, (-1141));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 3480);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((HashMap<SQLNonTransientException, String>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-993), 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) properties0, (-2622));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Properties[]) null, 1090, 1090);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 0, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, (-3613));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, (-536));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-1), 323);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) objectArrayListIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) listIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<ArrayList<SQLInvalidAuthorizationSpecException>, String> hashMap0 = new HashMap<ArrayList<SQLInvalidAuthorizationSpecException>, String>();
      EntrySetMapIterator<ArrayList<SQLInvalidAuthorizationSpecException>, String> entrySetMapIterator0 = new EntrySetMapIterator<ArrayList<SQLInvalidAuthorizationSpecException>, String>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>(hashMap0);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap1);
      String string0 = IteratorUtils.toString((Iterator<ArrayList<SQLInvalidAuthorizationSpecException>>) entrySetMapIterator0, (Transformer<? super ArrayList<SQLInvalidAuthorizationSpecException>, String>) transformer0, "A", "W,fg1gmA*]hWt:,E", "org.apache.commons.collections4.map.AbstractHashedMap$Values");
      assertEquals("W,fg1gmA*]hWt:,Eorg.apache.commons.collections4.map.AbstractHashedMap$Values", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      String string0 = IteratorUtils.toString((Iterator<ArrayList<SQLInvalidAuthorizationSpecException>>) null, (Transformer<? super ArrayList<SQLInvalidAuthorizationSpecException>, String>) transformer0, "aeX^;^R0C7e/r", "W,fg1gmA*]hWt:,E", "^G)Pxc'+6.u");
      assertEquals("W,fg1gmA*]hWt:,E^G)Pxc'+6.u", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException>[] arrayListArray0 = (ArrayList<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayList.class, 8);
      ResettableIterator<ArrayList<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.arrayIterator(arrayListArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<ArrayList<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Transformer<? super ArrayList<SQLInvalidAuthorizationSpecException>, String>) null, "", "1**P", "?C[qHJ>~{WO6r");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("C^o^(94zVy&vDQ!)j", true);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) singletonIterator0, (-2539L), (-2539L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<ArrayList<SQLInvalidAuthorizationSpecException>, String> hashMap0 = new HashMap<ArrayList<SQLInvalidAuthorizationSpecException>, String>();
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      hashMap0.put(arrayList0, "j2,N}R");
      EntrySetMapIterator<ArrayList<SQLInvalidAuthorizationSpecException>, String> entrySetMapIterator0 = new EntrySetMapIterator<ArrayList<SQLInvalidAuthorizationSpecException>, String>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>(hashMap0);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap1);
      String string0 = IteratorUtils.toString((Iterator<ArrayList<SQLInvalidAuthorizationSpecException>>) entrySetMapIterator0, (Transformer<? super ArrayList<SQLInvalidAuthorizationSpecException>, String>) transformer0, "A", "W,fg1gmA*]hWt:,E", "org.apache.commons.collections4.map.AbstractHashedMap$Values");
      assertEquals("W,fg1gmA*]hWt:,Ej2,N}Rorg.apache.commons.collections4.map.AbstractHashedMap$Values", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) stack0);
      String string0 = IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Transformer<SQLIntegrityConstraintViolationException, String> transformer0 = InvokerTransformer.invokerTransformer("Xr1In!^");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "UvX6", " `5W!`p,Rb", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) null, (Transformer<? super SQLNonTransientException, String>) factoryTransformer0, "Transformer must not be null", (String) null, "iterator");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OrderedMapIterator<String, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) abstractMapIteratorDecorator0, (Transformer<? super String, String>) factoryTransformer0, (String) null, "z:dUI5-`uS{gv[", ")Ctz");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("F3i5,Cs>{1a|mO");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableIterator0, (Transformer<? super IIOMetadataNode, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) stack0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("j-hroC%lw~nL6N?y;", "Node must not be null", 5618);
      stack0.add(sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.size(resettableListIterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "/<{&", 1039);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", sQLSyntaxErrorException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) singletonListIterator0, 1039);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1038
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Iterator must not be null", "The closure array must not be null", (-3877));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Iterator must not be null", "The closure array must not be null", (-1632), sQLTransactionRollbackException0);
      stack0.add(sQLRecoverableException0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) stack0);
      SkippingIterator<Object> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Object>) resettableIterator0, 1L);
      boolean boolean0 = IteratorUtils.isEmpty(skippingIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "6>?", 10, sQLNonTransientConnectionException0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      UniquePredicate<SQLTransientException> uniquePredicate0 = new UniquePredicate<SQLTransientException>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      DefaultEquator<SQLTimeoutException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLTimeoutException> equalPredicate0 = new EqualPredicate<SQLTimeoutException>(sQLTimeoutException0, defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) equalPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MapIterator<SQLRecoverableException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) mapIterator0, (Predicate<? super SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) orPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, (-87), 0);
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(dataTruncation0, comparator0, comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<DataTruncation>) objectArrayListIterator0, (Predicate<? super DataTruncation>) comparatorPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.WhileClosure", intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) singletonIterator0);
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLException>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("p600MZ$d%j=4*S", "|'Y0&", sQLNonTransientConnectionException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLFeatureNotSupportedException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedIterator<Locale.Category> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Locale.Category>) orderedIterator0, (Predicate<? super Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      long[] longArray0 = new long[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.iterators.PushbackIterator", (String) null, (-2085), longArray0, sQLRecoverableException0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, ":rgAh", batchUpdateException0);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      ObjectArrayListIterator<SQLTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientException>(sQLTransientExceptionArray0, 0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTransactionRollbackException0);
      IteratorUtils.find((Iterator<SQLTransientException>) objectArrayListIterator0, (Predicate<? super SQLTransientException>) equalPredicate0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(2, objectArrayListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Object object0 = IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedIterator<Stack<DataTruncation>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Stack<DataTruncation>>) orderedIterator0, (Predicate<? super Stack<DataTruncation>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      long[] longArray0 = new long[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.iterators.PushbackIterator", (String) null, (-2085), longArray0, sQLRecoverableException0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, ":rgAh", batchUpdateException0);
      ObjectArrayListIterator<SQLTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientException>(sQLTransientExceptionArray0, 0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTransactionRollbackException0);
      IteratorUtils.find((Iterator<SQLTransientException>) objectArrayListIterator0, (Predicate<? super SQLTransientException>) equalPredicate0);
      assertEquals(6, objectArrayListIterator0.previousIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<SQLException> closure1 = IfClosure.ifClosure((Predicate<? super SQLException>) comparatorPredicate0, (Closure<? super SQLException>) closure0, (Closure<? super SQLException>) closure0);
      IfClosure<SQLClientInfoException> ifClosure0 = new IfClosure<SQLClientInfoException>(comparatorPredicate0, closure1);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) null, (Closure<? super SQLClientInfoException>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResettableIterator<Boolean> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Boolean>) resettableIterator0, (Closure<? super Boolean>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(batchUpdateException0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientException0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) singletonListIterator0, (Closure<? super SQLClientInfoException>) closure0);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("bs$s7");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.TransformerClosure");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(stack0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("phzO", "GREATER_OR_EQUAL", (Throwable) null);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) null, 1038);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Class<SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      Factory<SQLTransactionRollbackException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLTransientException, SQLTransactionRollbackException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTransactionRollbackException>) factory0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<ArrayList<SQLInvalidAuthorizationSpecException>, String> hashMap0 = new HashMap<ArrayList<SQLInvalidAuthorizationSpecException>, String>();
      EntrySetMapIterator<ArrayList<SQLInvalidAuthorizationSpecException>, String> entrySetMapIterator0 = new EntrySetMapIterator<ArrayList<SQLInvalidAuthorizationSpecException>, String>(hashMap0);
      Iterable<Object> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<?>) entrySetMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterable<SQLIntegrityConstraintViolationException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) priorityQueue0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) hashSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      Enumeration<Properties> enumeration0 = stack0.elements();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) stack0);
      SkippingIterator<Object> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Object>) resettableIterator0, 1L);
      boolean boolean0 = IteratorUtils.isEmpty(skippingIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLException sQLException0 = new SQLException(",J 0-atV%S}", "}", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("}", "`", 4200, sQLException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) listIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(batchUpdateException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTransientException0, comparator0, comparatorPredicate_Criterion0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientException0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) singletonListIterator0, (Predicate<? super SQLClientInfoException>) comparatorPredicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.iterators.IteratorEnumeration", "org.apache.commons.collections4.iterators.IteratorEnumeration");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(" ", "5;e~M-y", 1472, sQLSyntaxErrorException0);
      Transformer<Object, SQLRecoverableException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(predicate0, predicate0);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Predicate<? super SQLRecoverableException>) orPredicate0);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) iterator1, (Iterator<? extends SQLRecoverableException>) iterator0, (Iterator<? extends SQLRecoverableException>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) resettableListIterator0, (Transformer<? super Integer, ? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) null, (Transformer<? super Integer, ? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<Object, SQLClientInfoException> invokerTransformer0 = new InvokerTransformer<Object, SQLClientInfoException>("", classArray0, dataTruncationArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) objectArrayIterator0, (Transformer<? super DataTruncation, ? extends SQLClientInfoException>) invokerTransformer0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) iterator0, 962);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.iterators.IteratorEnumeration", "org.apache.commons.collections4.iterators.IteratorEnumeration");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(" ", "5;e~M-y", 1472, sQLSyntaxErrorException0);
      Transformer<Object, SQLRecoverableException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Iterator<? extends SQLRecoverableException>) iterator0, (Iterator<? extends SQLRecoverableException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) zippingIterator0, 180);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MapIterator<StringTokenizer, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) mapIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<Properties>) null, 4880L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      SingletonIterator<ClientInfoStatus> singletonIterator0 = new SingletonIterator<ClientInfoStatus>(clientInfoStatus0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<ClientInfoStatus, String> invokerTransformer0 = new InvokerTransformer<ClientInfoStatus, String>(" `5W!`pb", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) singletonIterator0, (Transformer<? super ClientInfoStatus, String>) invokerTransformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method ' `5W!`pb' on 'class java.sql.ClientInfoStatus' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(object0, 4434, 4434);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[0];
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<?>) resettableIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator(" `5W!`p,Rb");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, EnumSet<ComparatorPredicate.Criterion>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, EnumSet<ComparatorPredicate.Criterion>>(orderedMapIterator0);
      MapIterator<SQLTransactionRollbackException, EnumSet<ComparatorPredicate.Criterion>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, EnumSet<ComparatorPredicate.Criterion>>) abstractMapIteratorDecorator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Predicate<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Comparator<SQLTransactionRollbackException> comparator0 = (Comparator<SQLTransactionRollbackException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 2, 2);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, (-199));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.WhileClosure", intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) singletonIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<ArrayList<SQLInvalidAuthorizationSpecException>, String> hashMap0 = new HashMap<ArrayList<SQLInvalidAuthorizationSpecException>, String>();
      EntrySetMapIterator<ArrayList<SQLInvalidAuthorizationSpecException>, String> entrySetMapIterator0 = new EntrySetMapIterator<ArrayList<SQLInvalidAuthorizationSpecException>, String>(hashMap0);
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("I");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, (-1573), (-1573));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLNonTransientException>) orderedMapIterator0, (Object) locale_Category0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 2746);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0;
      iteratorArray0[3] = (Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0;
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-1819));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0, 3);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }
}
