/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 07:39:17 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "t0gvygzW:QVt2/", sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(3318, true, true, 3318, (-1847), sQLTimeoutException0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 4);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[2] = class2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      classArray0[3] = class3;
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Hashtable<TreeSet, IIOMetadataNode>>) iterator0, 4);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.DataTruncation' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", sQLClientInfoException0);
      ClosureTransformer<SQLDataException> closureTransformer0 = new ClosureTransformer<SQLDataException>((Closure<? super SQLDataException>) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", (byte)100);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", ">", (byte)100);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("$@7G", "org.apache.commons.collections4.functors.FalsePredicate", "$WP$tQAUC8$\"&xRtu", (byte)14);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("6v~T%W", "Qf@%Fn=)U'ux: mX", "8/Xl:b", 32);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "", "", (byte)10);
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) closureTransformer0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) iterator0, (Iterator<? extends SQLDataException>) iterator0);
      Iterator<SQLDataException> iterator2 = IteratorUtils.unmodifiableIterator(iterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ClosureTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.getIterator(class0);
      String string0 = "`h_g1d(xa{;G?)./yh";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`h_g1d(xa{;G?)./yh", "`h_g1d(xa{;G?)./yh");
      Transformer<SQLException, SQLNonTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) transformer0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) iterator0, class1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Class<SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<String> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends String>) listIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("Map must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super String, String>) transformer0, "org.apache.commons.collections4.iterators.UnmodifiableListIterator", "%hh", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.getIterator("");
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      Predicate<SQLNonTransientException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.getIterator("");
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator");
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Class<Object> class7 = Object.class;
      classArray0[7] = class7;
      Class<Object> class8 = Object.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, classArray0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", (-1990));
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLDataException0);
      TransformedPredicate<String> transformedPredicate0 = new TransformedPredicate<String>(invokerTransformer0, identityPredicate0);
      ListIterator<String> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) transformedPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) listIterator1, (Transformer<? super String, String>) invokerTransformer0, "", "", "p;?V0A:5=UQ$m]");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 5);
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSetArray0);
      IteratorUtils.get((Iterator<Hashtable<TreeSet, IIOMetadataNode>>) objectArrayListIterator0, 3);
      MapIterator<DataTruncation, ArrayDeque<SQLIntegrityConstraintViolationException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) mapIterator0, (Transformer<? super DataTruncation, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 3);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(stack0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) loopingIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      HashMap<SQLException, String> hashMap0 = new HashMap<SQLException, String>(100, 100);
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) singletonIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, (String) null, (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 5);
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSetArray0);
      IteratorUtils.get((Iterator<Hashtable<TreeSet, IIOMetadataNode>>) objectArrayListIterator0, 3);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" Rj(Chb", "' J[P[", 3152);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("' J[P[", "' J[P[", 3, sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(" Rj(Chb", sQLDataException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLRecoverableException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(" Rj(Chb", " Rj(Chb", sQLDataException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      String string0 = "*&BO\\u]W&$:-Y@p";
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(string0, sQLNonTransientException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException((String) null);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 3);
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 6);
      SQLWarning sQLWarning0 = new SQLWarning(sQLNonTransientConnectionException2);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0, false);
      iteratorArray0[0] = (Iterator<SQLWarning>) singletonIterator0;
      Iterator<SQLWarning> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) singletonIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) iterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 5);
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSetArray0);
      IteratorUtils.get((Iterator<Hashtable<TreeSet, IIOMetadataNode>>) objectArrayListIterator0, 3);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "zqTwL6x:_;x1";
      stringArray0[1] = " UK7'deKhm=v`I%|{A";
      stringArray0[2] = "UZ";
      stringArray0[3] = "*.3(KL&#=3K5t6";
      IteratorUtils.arrayListIterator(stringArray0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 5);
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSetArray0);
      IteratorUtils.get((Iterator<LinkedHashSet<BatchUpdateException>>) objectArrayListIterator0, 3);
      IteratorUtils.emptyOrderedMapIterator();
      SQLException[] sQLExceptionArray0 = new SQLException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException0;
      SQLWarning sQLWarning0 = new SQLWarning("suffix may not be null", "suffix may not be null", sQLTransientConnectionException0);
      sQLExceptionArray0[1] = (SQLException) sQLWarning0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("suffix may not be null", "suffix may not be null", sQLExceptionArray0[1]);
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientConnectionException0;
      SQLException sQLException0 = new SQLException(">('b+", sQLExceptionArray0[2]);
      sQLExceptionArray0[3] = sQLException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, 3, (-1664));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(", ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("5Spl", "", 3, sQLNonTransientException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0;
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iteratorArray0[0], (Iterator<? extends SQLIntegrityConstraintViolationException>) iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) zippingIterator0;
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLNonTransientException>) null);
      IteratorUtils.getIterator("[]");
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BvT");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("eSO9?IqmAz_v%VT'v?");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("'?-vw1k1dgVR+1/+MQ6", "eSO9?IqmAz_v%VT'v?", (-4933), sQLTimeoutException0);
      linkedHashSet0.add(sQLTimeoutException1);
      Object object0 = new Object();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.getIterator("");
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      IteratorUtils.emptyOrderedIterator();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Predicate must not be null";
      stringArray0[1] = "rfudlV-L3q;7O8B4{'";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      Transformer<String, String> transformer0 = InvokerTransformer.invokerTransformer("eHD;)Ms;7VmI");
      ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) resettableIterator0, (Transformer<? super String, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'eHD;)Ms;7VmI' on 'class java.lang.String' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Closure<SQLDataException> closure0 = NOPClosure.nopClosure();
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.apply((Iterator<SQLDataException>) null, (Closure<? super SQLDataException>) closure0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 5);
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSetArray0);
      IteratorUtils.get((Iterator<LinkedHashSet<BatchUpdateException>>) objectArrayListIterator0, 3);
      SQLDataException sQLDataException0 = new SQLDataException("", "nYJ+[K^$9G.d1:4", (-77), (Throwable) null);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableIterator0);
      Closure<SQLDataException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLDataException>) listIterator0, (Closure<? super SQLDataException>) closure0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      stack0.listIterator();
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 5);
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[1] = linkedHashSet0;
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSetArray0);
      IteratorUtils.get((Iterator<LinkedHashSet<BatchUpdateException>>) objectArrayListIterator0, 3);
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("b-+@o+LW", "b-+@o+LW");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Node must not be null", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("ListIterator must not be null", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("Node must not be null", "!jq;2C:x'", (-1096));
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 3, (-1096));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 4);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<BatchUpdateException> linkedHashSet3 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[3] = linkedHashSet3;
      ResettableListIterator<LinkedHashSet<BatchUpdateException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedHashSetArray0, 3);
      ListIterator<LinkedHashSet<BatchUpdateException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<BatchUpdateException>>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<BatchUpdateException>>) listIterator0, 3);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("unA~~7+QG>~bzK");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLNonTransientException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0, false);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0, class0);
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      InvokerTransformer<SQLException, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTransientConnectionException>("org.apache.commons.collections4.map.AbstractHashedMap$Values", (Class<?>[]) null, (Object[]) null);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Transformer<? super SQLTimeoutException, ? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.map.AbstractHashedMap$EntrySet");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "org.apache.commons.collections4.map.AbstractHashedMap$EntrySet", "", "");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("wI$,s4yrv", "&+pfmzJsTU", 123, (long[]) null, sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?c1`w.uq^RG+Kh(g", "", batchUpdateException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "wI$,s4yrv", 123);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 123, sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("%\"X u$r_dH4IOebo*D%", "&+pfmzJsTU", sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("wI$,s4yrv", sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("delimiter may not be null");
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException((String) null, "org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", sQLIntegrityConstraintViolationException5);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException((String) null, "org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", 492, sQLSyntaxErrorException0);
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0, (long) 123, (long) 492);
      IteratorUtils.isEmpty(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      int[] intArray0 = new int[6];
      intArray0[0] = 94;
      intArray0[1] = 123;
      intArray0[2] = 1182;
      intArray0[3] = 125;
      intArray0[4] = (-1804);
      intArray0[5] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("::=WEix@*`'m", intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.toString((Iterator<Transformer<TreeSet, String>>) singletonIterator0, (Transformer<? super Transformer<TreeSet, String>, String>) transformer0, "org.apache.commons.collections4.map.AbstractIterableMap", "org.apache.commons.collections4.map.AbstractIterableMap", "::=WEix@*`'m");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(iterator0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(arrayDeque0);
      SingletonIterator<HashSet<SQLWarning>> singletonIterator0 = new SingletonIterator<HashSet<SQLWarning>>(linkedHashSet0, false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) singletonIterator0, comparator0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.matchesAny((Iterator<HashSet<SQLWarning>>) singletonIterator0, (Predicate<? super HashSet<SQLWarning>>) notPredicate0);
      Transformer<Object, Properties> transformer0 = InvokerTransformer.invokerTransformer("G$Se`h");
      Iterator<Properties> iterator1 = IteratorUtils.objectGraphIterator((Properties) null, (Transformer<? super Properties, ? extends Properties>) transformer0);
      MapIterator<SQLInvalidAuthorizationSpecException, ArrayList<String>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      IteratorUtils.pushbackIterator((Iterator<?>) iterator1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyIterator.emptyIterator();
      UniquePredicate.uniquePredicate();
      UniquePredicate.uniquePredicate();
      EmptyMapIterator.emptyMapIterator();
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("?P)BY&$", "", (-1), sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("?P)BY&$", "Node must not be null", (-3573), sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("Predicate must not be null", "?P)BY&$", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("?P)BY&$", "*>RBnhe=},4.6");
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("Predicate must not be null", "Node must not be null");
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (long) (-3573));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(iterator0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(arrayDeque0);
      SingletonIterator<HashSet<SQLWarning>> singletonIterator0 = new SingletonIterator<HashSet<SQLWarning>>(linkedHashSet0, false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) singletonIterator0, comparator0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.matchesAny((Iterator<HashSet<SQLWarning>>) singletonIterator0, (Predicate<? super HashSet<SQLWarning>>) notPredicate0);
      Transformer<Object, Properties> transformer0 = InvokerTransformer.invokerTransformer("G$Se`h");
      IteratorUtils.objectGraphIterator((Properties) null, (Transformer<? super Properties, ? extends Properties>) transformer0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MapIterator<Integer, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) reverseListIterator0, (Iterator<? extends SQLNonTransientException>) reverseListIterator0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(linkedHashSet0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) loopingIterator0);
      InvokerTransformer<SQLException, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTransientConnectionException>("::=WEix@*`'m", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) listIterator0, (Transformer<? super SQLTimeoutException, ? extends SQLTransientConnectionException>) invokerTransformer0);
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) treeSet0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      PriorityQueue<EnumSet<Locale.Category>> priorityQueue0 = new PriorityQueue<EnumSet<Locale.Category>>();
      LoopingIterator<EnumSet<Locale.Category>> loopingIterator1 = new LoopingIterator<EnumSet<Locale.Category>>(priorityQueue0);
      IteratorUtils.pushbackIterator((Iterator<? extends EnumSet<Locale.Category>>) loopingIterator1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EmptyIterator.emptyIterator();
      UniquePredicate.uniquePredicate();
      IteratorUtils.emptyMapIterator();
      EmptyMapIterator.emptyMapIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      SQLException sQLException0 = new SQLException("", "");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("", "");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.size(resettableIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<SQLClientInfoException> resettableIterator1 = IteratorUtils.singletonIterator((SQLClientInfoException) null);
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) iterator0, (Predicate<? super SQLException>) predicate0);
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 10);
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>((Properties) null);
      IteratorUtils.toString((Iterator<Properties>) singletonListIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      linkedHashSet0.clear();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(linkedHashSet0);
      InvokerTransformer<SQLException, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTransientConnectionException>("::=WEix@*`'m", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(linkedHashSet0);
      HashMap<SQLFeatureNotSupportedException, String> hashMap0 = new HashMap<SQLFeatureNotSupportedException, String>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, String>(hashMap0);
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) entrySetMapIterator0, 0L);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) skippingIterator0, (Predicate<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLClientInfoException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLRecoverableException0);
      linkedList0.add((SQLNonTransientException) sQLIntegrityConstraintViolationException0);
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(linkedList0);
      loopingListIterator0.previousIndex();
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLNonTransientException>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(linkedHashSet0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) loopingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("The closure array must not be null", "The closure array must not be null", 491);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("ze^8||1Z=", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("ze^8||1Z=", "<a_wZ$;KMTy7(bK", (-2075), sQLSyntaxErrorException1);
      IteratorUtils.isEmpty(listIterator0);
      IteratorUtils.toListIterator((Iterator<?>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 3986);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EmptyIterator.emptyIterator();
      Hashtable<SQLTransactionRollbackException, BatchUpdateException> hashtable0 = new Hashtable<SQLTransactionRollbackException, BatchUpdateException>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      hashtable0.elements();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null, (Collection<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 3, 93);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      IteratorUtils.toArray(iterator0);
      ArrayIterator<Locale.Category> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<Locale.Category>((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) linkedList0);
      IteratorUtils.getIterator(resettableIterator0);
      int int0 = 44;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("y2&/8nO6!Z<;GY)Yl", "y2&/8nO6!Z<;GY)Yl", 44);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("y2&/8nO6!Z<;GY)Yl", sQLSyntaxErrorException0);
      String string0 = null;
      String string1 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException((String) null, (String) null, 3, sQLSyntaxErrorException1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "Array class must not be null", 44, sQLSyntaxErrorException1);
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException((String) null, "y2&/8nO6!Z<;GY)Yl", 0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, (-3239), 1239);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) iterator0, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 91);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("bvaW@.Iv)_7V+g0IUA", "", 0, sQLIntegrityConstraintViolationException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Iterator contains no elements", "cLGO~GAb1", sQLFeatureNotSupportedException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("bvaW@.Iv)_7V+g0IUA");
      IteratorUtils.getIterator(stringTokenizer0);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      linkedHashSet0.clone();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedHashSet0);
      Predicate<SQLClientInfoException> predicate0 = ExceptionPredicate.exceptionPredicate();
      SingletonIterator<Predicate<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<Predicate<SQLClientInfoException>>(predicate0);
      IteratorUtils.emptyIterator();
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<Hashtable<IIOMetadataNode, Iterator>>) zippingIterator0, (Predicate<? super Hashtable<IIOMetadataNode, Iterator>>) predicate1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IteratorUtils.getIterator("");
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedHashSet<EnumSet>, SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.DefaultEquator", "org.apache.commons.collections4.functors.DefaultEquator", true);
      Stack<Properties> stack0 = new Stack<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) stack0);
      Stack<Properties> stack1 = new Stack<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(stack1);
      stack0.addAll((Collection<? extends Properties>) stack1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<Properties>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<Properties>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<Properties>) resettableListIterator0;
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) iteratorArray0);
      IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>[]) iteratorArray0);
      ArrayIterator<Properties> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<Properties>(stringTokenizer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Properties>) listIterator0, (Predicate<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      stack0.listIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "*3-@+u_ThX=l");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 1, 1);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, 701L);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonIterator((SQLClientInfoException) null);
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IteratorUtils.getIterator("");
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(linkedHashSet0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) loopingIterator0);
      InvokerTransformer<SQLException, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTransientConnectionException>("::=WEix@*`'m", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) listIterator0, (Transformer<? super SQLTimeoutException, ? extends SQLTransientConnectionException>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(linkedHashSet0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) loopingIterator0);
      InvokerTransformer<SQLException, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTransientConnectionException>("", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) listIterator0, (Predicate<? super SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Object) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-53));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "", sQLInvalidAuthorizationSpecException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("G#aSm.8Rh@B", "G#aSm.8Rh@B");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayListIterator0);
      UniquePredicate.uniquePredicate();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ArrayIterator<SQLSyntaxErrorException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLSyntaxErrorException>(sQLTransactionRollbackException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      OrderedMapIterator<Stack<Class<DataTruncation>>, TreeSet<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Stack<Class<DataTruncation>>>) orderedMapIterator0, (Transformer<? super Stack<Class<DataTruncation>>, String>) transformer0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      Integer integer0 = new Integer(526);
      Integer integer1 = new Integer(526);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      stack0.listIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedIterator<Locale.Category> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.skippingIterator((Iterator<Locale.Category>) orderedIterator0, 891L);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("_>ZZNc9)wPoYmtea~`k");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      DataTruncation dataTruncation0 = new DataTruncation(128, false, false, 128, 128);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator1, (Iterator<? extends DataTruncation>) objectArrayListIterator0, (Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("_>ZZNc9)wPoYmtea~`k");
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("_>ZZNc9)wPoYmtea~`k");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("'Go&gN;", sQLFeatureNotSupportedExceptionArray0[1]);
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) treeSet0);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.IteratorUtils");
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      UniquePredicate.uniquePredicate();
      int int0 = 1645;
      String string0 = "[Q*'P|YIejd[KIvx$V";
      String string1 = "2(hs*dfLB4!u";
      int[] intArray0 = new int[1];
      intArray0[0] = 1645;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[Q*'P|YIejd[KIvx$V", "2(hs*dfLB4!u", 1645, intArray0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      Hashtable<SQLTransactionRollbackException, BatchUpdateException> hashtable0 = new Hashtable<SQLTransactionRollbackException, BatchUpdateException>();
      Enumeration<BatchUpdateException> enumeration0 = hashtable0.elements();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedList0);
      ListIterator<BatchUpdateException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(listIterator1);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "[Q*'P|YIejd[KIvx$V");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      stack0.listIterator();
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 5);
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[1] = linkedHashSet0;
      linkedHashSetArray0[2] = linkedHashSet0;
      LinkedHashSet<SQLTimeoutException> linkedHashSet1 = new LinkedHashSet<SQLTimeoutException>();
      linkedHashSet1.clone();
      linkedHashSet1.add((SQLTimeoutException) null);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedHashSet1);
      Predicate<SQLClientInfoException> predicate0 = new UniquePredicate<SQLClientInfoException>();
      SingletonIterator<Predicate<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<Predicate<SQLClientInfoException>>(predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Predicate<SQLClientInfoException>>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Hashtable<Integer, SQLTransientConnectionException> hashtable0 = new Hashtable<Integer, SQLTransientConnectionException>();
      Enumeration<Integer> enumeration0 = hashtable0.keys();
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Hashtable<Integer, SQLTransientConnectionException> hashtable0 = new Hashtable<Integer, SQLTransientConnectionException>();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = null;
      Predicate<SQLIntegrityConstraintViolationException> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      stack0.listIterator();
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 5);
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[1] = linkedHashSet0;
      linkedHashSetArray0[2] = linkedHashSet0;
      linkedHashSetArray0[3] = linkedHashSet0;
      linkedHashSetArray0[4] = linkedHashSet0;
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSetArray0);
      IteratorUtils.get((Iterator<LinkedHashSet<BatchUpdateException>>) objectArrayListIterator0, 3);
      Properties properties0 = new Properties();
      EqualPredicate<Properties> equalPredicate0 = new EqualPredicate<Properties>(properties0);
      MapIterator<Properties, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.matchesAny((Iterator<Properties>) mapIterator0, (Predicate<? super Properties>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      UniquePredicate.uniquePredicate();
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) hashSet0);
      IteratorUtils.find((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      DataTruncation dataTruncation0 = new DataTruncation(1025, false, true, 1358, 1358);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      dataTruncationArray0[0] = dataTruncation0;
      dataTruncationArray0[1] = dataTruncation0;
      dataTruncationArray0[2] = dataTruncation0;
      dataTruncationArray0[3] = dataTruncation0;
      dataTruncationArray0[4] = dataTruncation0;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) objectArrayListIterator0, (Iterator<? extends DataTruncation>) objectArrayListIterator0);
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) objectArrayListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0, (Collection<? super SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      stack0.listIterator();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 5);
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray1 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 5);
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSetArray1);
      IteratorUtils.get((Iterator<LinkedHashSet<BatchUpdateException>>) objectArrayListIterator0, 3);
      Hashtable<SQLTransactionRollbackException, BatchUpdateException> hashtable0 = new Hashtable<SQLTransactionRollbackException, BatchUpdateException>();
      Enumeration<BatchUpdateException> enumeration0 = hashtable0.elements();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      EmptyListIterator.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ListIterator<InstanceofPredicate> listIterator0 = stack0.listIterator();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends InstanceofPredicate>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ListIterator<Properties> listIterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Hashtable<Integer, SQLTransientConnectionException> hashtable0 = new Hashtable<Integer, SQLTransientConnectionException>();
      Enumeration<Integer> enumeration0 = hashtable0.keys();
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      Iterator<BatchUpdateException> iterator0 = null;
      int int0 = 459;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null, 459);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MapIterator<Integer, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Transformer<SQLWarning, String> transformer0 = ConstantTransformer.constantTransformer("EPSEr^KnEAj}@");
      IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) transformer0, "RY?/JLV", "EPSEr^KnEAj}@", "EPSEr^KnEAj}@");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      int[] intArray0 = new int[21];
      intArray0[0] = 1;
      intArray0[1] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("EPSEr^KnEAj}@", "EPSEr^KnEAj}@EPSEr^KnEAj}@", (-7), intArray0);
      Hashtable<ArrayDeque<SQLTransientException>, InstanceofPredicate> hashtable0 = new Hashtable<ArrayDeque<SQLTransientException>, InstanceofPredicate>();
      EntrySetMapIterator<ArrayDeque<SQLTransientException>, InstanceofPredicate> entrySetMapIterator0 = new EntrySetMapIterator<ArrayDeque<SQLTransientException>, InstanceofPredicate>(hashtable0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) mapIterator0, (Equator<Object>) defaultEquator0);
      IteratorUtils.find((Iterator<ArrayDeque<SQLTransientException>>) entrySetMapIterator0, (Predicate<? super ArrayDeque<SQLTransientException>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableListIterator<Hashtable<SQLRecoverableException, SQLTimeoutException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSet0.addAll(linkedHashSet2);
      Properties properties0 = new Properties();
      DefaultEquator<Properties> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(properties0, (Equator<Properties>) defaultEquator0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 8);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[4] = class4;
      Class<DataTruncation> class5 = DataTruncation.class;
      classArray0[5] = class5;
      classArray0[6] = class1;
      Class<DataTruncation> class6 = DataTruncation.class;
      classArray0[7] = class6;
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>("", classArray0, objectArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) null, (Transformer<? super BatchUpdateException, ? extends Properties>) invokerTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResettableListIterator<Hashtable<SQLRecoverableException, SQLTimeoutException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      ResettableListIterator<SQLWarning> resettableListIterator1 = IteratorUtils.emptyListIterator();
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) resettableListIterator1);
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<SQLWarning>) listIterator0, (Transformer<? super SQLWarning, String>) transformer0, "psc?g>*sS. r=1agGe", "[:=Dlg", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-7);
      intArray0[1] = 224;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Node must not be null", "$", 14, intArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "Node must not be null", 2220);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Predicate<SQLDataException> predicate2 = NotPredicate.notPredicate((Predicate<? super SQLDataException>) predicate1);
      IteratorUtils.find((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) predicate2);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 2836);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) null, 239L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Estimated size must be greater than 0");
      iIOMetadataNode0.getNextSibling();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet3 = new LinkedHashSet<BatchUpdateException>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResettableListIterator<Hashtable<SQLRecoverableException, SQLTimeoutException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 6);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      InvokerTransformer<SQLException, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTransientConnectionException>("Node must not be null", classArray0, classArray0);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Transformer<? super SQLTimeoutException, ? extends SQLTransientConnectionException>) invokerTransformer0);
      Properties properties0 = new Properties();
      DefaultEquator<Properties> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Properties> predicate0 = EqualPredicate.equalPredicate(properties0, (Equator<Properties>) defaultEquator0);
      IteratorUtils.matchesAny((Iterator<Properties>) null, (Predicate<? super Properties>) predicate0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      OrderedMapIterator<Stack<Class<DataTruncation>>, TreeSet<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Stack<Class<DataTruncation>>>) orderedMapIterator0, (Transformer<? super Stack<Class<DataTruncation>>, String>) transformer0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      Integer integer0 = new Integer(526);
      Integer integer1 = new Integer(526);
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet3 = new LinkedHashSet<BatchUpdateException>();
      SQLWarning sQLWarning0 = new SQLWarning("[]", "[]", (-313));
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[]", (int[]) null, mockThrowable0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      batchUpdateExceptionArray0[2] = batchUpdateException0;
      batchUpdateExceptionArray0[3] = batchUpdateException0;
      batchUpdateExceptionArray0[4] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((int[]) null);
      batchUpdateExceptionArray0[5] = batchUpdateException1;
      batchUpdateExceptionArray0[6] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((int[]) null, batchUpdateException0);
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) batchUpdateException2);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate1, predicate1);
      mockThrowable0.getSuppressed();
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<Transformer<Object, Properties>>) null, (long) 526);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2002;
      longArray0[1] = (long) 2002;
      longArray0[2] = (long) 2002;
      longArray0[3] = 0L;
      longArray0[4] = (long) 2002;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Cannot use setValue() when the object being set is already in the map", "lMwF[<", 2002);
      int[] intArray0 = new int[5];
      intArray0[0] = 2002;
      intArray0[1] = 2002;
      intArray0[2] = 2002;
      intArray0[3] = 2002;
      intArray0[4] = 2002;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(";j%]wA", "GREATER", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(";j%]wA", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException1;
      int[] intArray1 = new int[8];
      intArray1[0] = 2002;
      intArray1[1] = 2002;
      intArray1[2] = 2002;
      intArray1[3] = 2002;
      intArray1[4] = 2002;
      intArray1[5] = 2002;
      intArray1[6] = 2002;
      intArray1[7] = 2707;
      int[] intArray2 = new int[7];
      intArray2[0] = 2707;
      intArray2[1] = 2707;
      intArray2[2] = 2002;
      intArray2[3] = 2002;
      intArray2[4] = 2002;
      intArray2[5] = 2707;
      intArray2[6] = 2002;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      BatchUpdateException batchUpdateException2 = IteratorUtils.find((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) batchUpdateException2);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate1, predicate0);
      IteratorUtils.matchesAll((Iterator<Transformer<Object, Properties>>) null, (Predicate<? super Transformer<Object, Properties>>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OrderedMapIterator<DataTruncation, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedIterator();
      Transformer<SQLWarning, String> transformer0 = new ConstantTransformer<SQLWarning, String>("N%Rl3i");
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLWarning> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) orderedMapIterator0, (Iterator<? extends SQLWarning>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLWarning, String>) transformer0, "EPSEr^KnEAj}@", (String) null, "equator may not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Transformer<SQLWarning, String> transformer0 = ConstantTransformer.constantTransformer("EPSEr^KnEAj}@");
      IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) transformer0, "RY?/JLV", "EPSEr^KnEAj}@", "EPSEr^KnEAj}@");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[F)1?", "[F)1?");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EPSEr^KnEAj}@EPSEr^KnEAj}@");
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSet0.add(batchUpdateException0);
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet3 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 7);
      linkedHashSetArray0[0] = linkedHashSet2;
      linkedHashSetArray0[1] = linkedHashSet2;
      linkedHashSetArray0[2] = linkedHashSet2;
      linkedHashSetArray0[3] = linkedHashSet1;
      linkedHashSetArray0[6] = linkedHashSet0;
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSetArray0);
      IteratorUtils.get((Iterator<LinkedHashSet<BatchUpdateException>>) objectArrayListIterator0, 5);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Transformer<SQLWarning, String> transformer0 = ConstantTransformer.constantTransformer("EPSEr^KnEAj}@");
      IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) transformer0, "RY?/JLV", "EPSEr^KnEAj}@", "EPSEr^KnEAj}@");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[F)1?", "[F)1?");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSet0.add(batchUpdateException0);
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet3 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 7);
      linkedHashSetArray0[0] = linkedHashSet2;
      linkedHashSetArray0[1] = linkedHashSet2;
      linkedHashSetArray0[2] = linkedHashSet2;
      linkedHashSetArray0[3] = linkedHashSet1;
      linkedHashSetArray0[6] = linkedHashSet0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1, 2836);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableListIterator<Hashtable<SQLRecoverableException, SQLTimeoutException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 6);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      stack0.listIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) stack0, (-188), (-188));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0, class0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      stack0.listIterator();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      IteratorUtils.isEmpty(listIterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation(463, true, true, 463, (-1007));
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-2955), false, false, 91, 1425);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(463, true, false, (-1007), (-2955), dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) objectArrayListIterator0, (Iterator<? extends DataTruncation>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 9);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>(treeSet0);
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<BatchUpdateException> linkedHashSet3 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<BatchUpdateException> linkedHashSet4 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<BatchUpdateException> linkedHashSet5 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[5] = linkedHashSet5;
      LinkedHashSet<BatchUpdateException> linkedHashSet6 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[6] = linkedHashSet6;
      LinkedHashSet<BatchUpdateException> linkedHashSet7 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[7] = linkedHashSet7;
      LinkedHashSet<BatchUpdateException> linkedHashSet8 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[8] = linkedHashSet8;
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSetArray0);
      IteratorUtils.get((Iterator<Hashtable<TreeSet, IIOMetadataNode>>) objectArrayListIterator0, 3);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      ConstantTransformer<IIOMetadataNode, SQLIntegrityConstraintViolationException> constantTransformer0 = new ConstantTransformer<IIOMetadataNode, SQLIntegrityConstraintViolationException>((SQLIntegrityConstraintViolationException) null);
      IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Transformer<? super IIOMetadataNode, ? extends SQLIntegrityConstraintViolationException>) constantTransformer0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("_>ZZNc9)wPoYmtea~`k");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException((String) null, sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException2);
      IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) singletonListIterator0, (Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Properties[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("cLGO~GAb1", "cLGO~GAb1", (-1618), sQLTransientConnectionException0);
      SQLException sQLException0 = new SQLException(sQLTransientConnectionException1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%", "%", sQLNonTransientException0);
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet1 = new LinkedHashSet<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedHashSet0);
      Predicate<SQLClientInfoException> predicate0 = ExceptionPredicate.exceptionPredicate();
      SingletonIterator<Predicate<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<Predicate<SQLClientInfoException>>(predicate0);
      IteratorUtils.emptyIterator();
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet3 = new LinkedHashSet<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      Predicate<Object> predicate1 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<Hashtable<IIOMetadataNode, Iterator>>) singletonIterator0, (Predicate<? super Hashtable<IIOMetadataNode, Iterator>>) predicate1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" is invalid for size ", " is invalid for size ", 100);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" is invalid for size ", "`rr*8Inak\"G![`ZDg5", 100, sQLIntegrityConstraintViolationException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("cLGO~GAb1", "", sQLIntegrityConstraintViolationException0);
      IteratorUtils.getIterator(sQLRecoverableException0);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      linkedHashSet0.clone();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedHashSet0);
      Iterator<Predicate<SQLClientInfoException>>[] iteratorArray0 = (Iterator<Predicate<SQLClientInfoException>>[]) Array.newInstance(Iterator.class, 1);
      Predicate<SQLClientInfoException> predicate0 = ExceptionPredicate.exceptionPredicate();
      SingletonIterator<Predicate<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<Predicate<SQLClientInfoException>>(predicate0);
      iteratorArray0[0] = (Iterator<Predicate<SQLClientInfoException>>) singletonIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends Predicate<SQLClientInfoException>>[]) iteratorArray0);
      IteratorUtils.emptyIterator();
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      HashSet<Properties>[] hashSetArray0 = (HashSet<Properties>[]) Array.newInstance(HashSet.class, 6);
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      hashSetArray0[0] = (HashSet<Properties>) linkedHashSet1;
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      hashSetArray0[1] = (HashSet<Properties>) linkedHashSet2;
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<Hashtable<IIOMetadataNode, Iterator>>) singletonIterator0, (Predicate<? super Hashtable<IIOMetadataNode, Iterator>>) predicate1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      arrayDeque0.clone();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 100);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" is invalid for size ", "`rr*8Inak\"G![`ZDg5", 100, sQLIntegrityConstraintViolationException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("cLGO6GAb1", "", sQLIntegrityConstraintViolationException0);
      IteratorUtils.getIterator(sQLRecoverableException0);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" is invalid for size ", "org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", sQLFeatureNotSupportedException0);
      linkedHashSet0.clone();
      linkedHashSet0.add(sQLTimeoutException0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedHashSet0);
      Iterator<Predicate<SQLClientInfoException>>[] iteratorArray0 = (Iterator<Predicate<SQLClientInfoException>>[]) Array.newInstance(Iterator.class, 1);
      Predicate<SQLClientInfoException> predicate0 = ExceptionPredicate.exceptionPredicate();
      SingletonIterator<Predicate<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<Predicate<SQLClientInfoException>>(predicate0);
      iteratorArray0[0] = (Iterator<Predicate<SQLClientInfoException>>) singletonIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends Predicate<SQLClientInfoException>>[]) iteratorArray0);
      IteratorUtils.emptyIterator();
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      HashSet<Properties>[] hashSetArray0 = (HashSet<Properties>[]) Array.newInstance(HashSet.class, 6);
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      hashSetArray0[0] = (HashSet<Properties>) linkedHashSet1;
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      hashSetArray0[1] = (HashSet<Properties>) linkedHashSet2;
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<Hashtable<IIOMetadataNode, Iterator>>) singletonIterator0, (Predicate<? super Hashtable<IIOMetadataNode, Iterator>>) predicate1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      arrayDeque0.clone();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" is invalid for size ", " is invalid for size ", 100);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 100, sQLIntegrityConstraintViolationException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")K)VbENrQbL :z~P", "nv:a)cj\"kMrI", sQLIntegrityConstraintViolationException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" is invalid for size ", "", hashMap0, sQLRecoverableException0);
      IteratorUtils.getIterator(sQLClientInfoException0);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Entry does not exist: ", "TAa0}Q#wNk_J3", sQLIntegrityConstraintViolationException0);
      linkedHashSet0.clone();
      linkedHashSet0.add(sQLTimeoutException0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedHashSet0);
      ExceptionPredicate.exceptionPredicate();
      SingletonIterator<Predicate<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<Predicate<SQLClientInfoException>>((Predicate<SQLClientInfoException>) null);
      Iterator<Predicate<SQLClientInfoException>>[] iteratorArray0 = (Iterator<Predicate<SQLClientInfoException>>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Predicate<SQLClientInfoException>>[]) iteratorArray0);
      IteratorUtils.emptyIterator();
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<Hashtable<IIOMetadataNode, Iterator>>) orderedMapIterator0, (Predicate<? super Hashtable<IIOMetadataNode, Iterator>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2002;
      longArray0[1] = (long) 2002;
      longArray0[2] = (long) 2002;
      longArray0[3] = 0L;
      longArray0[4] = (long) 2002;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Cannot use setValue() when the object being set is already in the map", "lMwF[<", 2002);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(";j%]wA", "GREATER", 2002, longArray0, sQLInvalidAuthorizationSpecException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[5];
      intArray0[0] = 2002;
      intArray0[1] = 2002;
      intArray0[2] = 2002;
      intArray0[3] = 2002;
      intArray0[4] = 2002;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(";j%]wA", "GREATER", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(";j%]wA", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      int[] intArray1 = new int[8];
      intArray1[0] = 2002;
      intArray1[1] = 2002;
      intArray1[2] = 2002;
      intArray1[3] = 2002;
      intArray1[4] = 2002;
      intArray1[5] = 2002;
      intArray1[6] = 2002;
      intArray1[7] = 2707;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("lMwF[<", ")(9L_d:XGh!(", 2002, intArray1, batchUpdateException0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      int[] intArray2 = new int[7];
      intArray2[0] = 2707;
      intArray2[1] = 2707;
      intArray2[2] = 2002;
      intArray2[3] = 2002;
      intArray2[4] = 2002;
      intArray2[5] = 2707;
      intArray2[6] = 2002;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException(";j%]wA", intArray2, batchUpdateException3);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      BatchUpdateException batchUpdateException5 = IteratorUtils.find((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) batchUpdateException5);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate1, predicate0);
      IteratorUtils.matchesAll((Iterator<Transformer<Object, Properties>>) null, (Predicate<? super Transformer<Object, Properties>>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<BatchUpdateException>>) null, 18);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("[?4");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      // Undeclared exception!
//      try { 
        IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Closures must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      MockThrowable mockThrowable0 = new MockThrowable("vYl)^vr9xj+9*M", sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      Transformer<SQLNonTransientException, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      sQLDataException0.spliterator();
      IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      Class<SQLDataException> class0 = SQLDataException.class;
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("vYl)^vr9xj+9*M", "vYl)^vr9xj+9*M");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // vYl)^vr9xj+9*M
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("_>ZZNc9)wPoYmtea~`k");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_>ZZNc9)wPoYmtea~`k", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "_>ZZNc9)wPoYmtea~`k");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      sQLFeatureNotSupportedException0.printStackTrace((PrintWriter) mockPrintWriter1);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Object) sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("G#aSm.8Rh@B");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("G#aSm.8Rh@B", sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("X}1NR PxR", "Mi)+2LZ", (-3117));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException2;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.isEmpty(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_>ZZNc9)wPoYmtea~`k");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("_>ZZNc9)wPoYmtea~`k");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("_>ZZNc9)wPoYmtea~`k", sQLFeatureNotSupportedException1);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException1;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Object) null);
      Predicate<SQLClientInfoException>[] predicateArray0 = (Predicate<SQLClientInfoException>[]) Array.newInstance(Predicate.class, 6);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLFeatureNotSupportedException2, (Equator<Object>) defaultEquator0);
      Predicate<SQLClientInfoException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLClientInfoException>) predicate0, (Predicate<? super SQLClientInfoException>) predicate0);
      predicateArray0[0] = predicate1;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLFeatureNotSupportedException0);
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<SQLClientInfoException> predicate2 = ComparatorPredicate.comparatorPredicate(sQLClientInfoException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[1] = predicate2;
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<SQLClientInfoException> predicate3 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLClientInfoException>>) linkedList0);
      predicateArray0[2] = predicate3;
      Predicate<SQLClientInfoException> predicate4 = NotPredicate.notPredicate((Predicate<? super SQLClientInfoException>) predicate2);
      predicateArray0[3] = predicate4;
      Predicate<SQLClientInfoException> predicate5 = EqualPredicate.equalPredicate(sQLClientInfoException0);
      predicateArray0[4] = predicate5;
      UniquePredicate<SQLClientInfoException> uniquePredicate0 = new UniquePredicate<SQLClientInfoException>();
      predicateArray0[5] = (Predicate<SQLClientInfoException>) uniquePredicate0;
      IteratorUtils.arrayIterator(predicateArray0, 2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("!D1rux3{.^(9)");
      int int0 = 0;
      int int1 = (-136);
      int int2 = 2832;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, (-136), 2832);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Iterator getValue() can only be called after next() and before remove()");
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Hashtable<IIOMetadataNode, Iterator>>) resettableIterator0, (Predicate<? super Hashtable<IIOMetadataNode, Iterator>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.find((Iterator<SQLNonTransientException>) orderedIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      Integer integer0 = new Integer(2563);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer((-3322));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer4 = new Integer(1);
      Integer integer5 = new Integer(2832);
      Integer[] integerArray0 = new Integer[1];
      Integer integer6 = new Integer(2);
      integerArray0[0] = integer6;
      IteratorUtils.arrayListIterator(integerArray0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      LinkedList<IIOMetadataNode>[] linkedListArray0 = (LinkedList<IIOMetadataNode>[]) Array.newInstance(LinkedList.class, 5);
      linkedListArray0[0] = linkedList0;
      LinkedList<IIOMetadataNode> linkedList1 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[1] = linkedList1;
      linkedListArray0[2] = linkedList0;
      linkedListArray0[4] = linkedList0;
      IteratorUtils.arrayIterator(linkedListArray0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[14];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("_>ZZNc9)wPoYmtea~`k");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("'Go&gN;", "'Go&gN;");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      HashSet<Properties>[] hashSetArray0 = (HashSet<Properties>[]) Array.newInstance(HashSet.class, 7);
      hashSetArray0[0] = (HashSet<Properties>) linkedHashSet1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) hashSetArray0[0], 1719);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.find((Iterator<SQLNonTransientException>) orderedIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1846);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      IteratorUtils.arrayListIterator(integerArray0);
      LinkedList<IIOMetadataNode>[] linkedListArray0 = (LinkedList<IIOMetadataNode>[]) Array.newInstance(LinkedList.class, 1);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[0] = linkedList0;
      IteratorUtils.arrayIterator(linkedListArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) listIterator0);
      OrderedMapIterator<Stack<Class<DataTruncation>>, TreeSet<Properties>> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Stack<Class<DataTruncation>>>) orderedMapIterator2, (Transformer<? super Stack<Class<DataTruncation>>, String>) transformer0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSet1.addAll(linkedHashSet2);
      int[] intArray0 = new int[8];
      intArray0[1] = 1547;
      intArray0[2] = 100;
      intArray0[4] = (-1000);
      intArray0[5] = (-1);
      intArray0[6] = (-380);
      intArray0[7] = 3412;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      linkedHashSet2.add(batchUpdateException0);
      LinkedHashSet<BatchUpdateException> linkedHashSet3 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet4 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet5 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 1);
      linkedHashSetArray0[0] = linkedHashSet2;
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSetArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<BatchUpdateException>>) objectArrayListIterator0, 6);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 5
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 6);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 6);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSet0.addAll(linkedHashSet2);
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      linkedHashSet2.add(batchUpdateException0);
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<BatchUpdateException> linkedHashSet3 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<BatchUpdateException> linkedHashSet4 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<BatchUpdateException> linkedHashSet5 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[5] = linkedHashSet5;
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSetArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<BatchUpdateException>>) objectArrayListIterator0, (-2010));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -2010
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PriorityQueue<Properties> priorityQueue0 = new PriorityQueue<Properties>();
      Iterator<Properties> iterator0 = priorityQueue0.iterator();
      int int0 = 6;
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) iterator0, 6);
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(list0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ArrayListIterator<Properties> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(sQLSyntaxErrorException0, 2548);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLNonTransientException>) null);
      UniquePredicate.uniquePredicate();
      Hashtable<SQLTransactionRollbackException, BatchUpdateException> hashtable0 = new Hashtable<SQLTransactionRollbackException, BatchUpdateException>();
      hashtable0.elements();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      InvokerTransformer<SQLException, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTransientConnectionException>((String) null, classArray0, classArray0);
      InvokerTransformer.invokerTransformer("E<#3jL\",5'/kD\"e<");
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      arrayList0.add(sQLNonTransientConnectionException0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) arrayList0);
      IteratorUtils.asIterable((Iterator<?>) resettableListIterator0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2281;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ArrayListIterator<SQLException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLException>(resettableListIterator0, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.DefaultEquator", "org.apache.commons.collections4.functors.DefaultEquator", true);
      Stack<Properties> stack0 = new Stack<Properties>();
      IteratorUtils.loopingListIterator((List<Properties>) stack0);
      List<Properties> list0 = new Stack<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(list0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ArrayListIterator<Properties> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<Properties>((Object) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 6);
      PriorityQueue<Properties> priorityQueue0 = new PriorityQueue<Properties>();
      Iterator<Properties> iterator0 = priorityQueue0.iterator();
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) iterator0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 6);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      Iterable<String> iterable0 = new Stack<String>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSet0.addAll(linkedHashSet2);
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      linkedHashSet2.add(batchUpdateException0);
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<BatchUpdateException> linkedHashSet3 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<BatchUpdateException> linkedHashSet4 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<BatchUpdateException> linkedHashSet5 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[5] = linkedHashSet5;
      Properties properties0 = new Properties();
      StringReader stringReader0 = new StringReader("JJ66B_qqg;vT|55");
      properties0.load((Reader) stringReader0);
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      Iterator<Properties> iterator0 = new SingletonListIterator<Properties>(properties0);
      IteratorUtils.toList((Iterator<? extends Properties>) listIterator0, 1182);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<?>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.size(listIterator0);
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Locale.Category>) resettableListIterator0, (-702));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OrderedMapIterator<Object, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Object, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, BatchUpdateException>(orderedMapIterator0);
      OrderedMapIterator<Object, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Object, ? extends SQLException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLException>) orderedMapIterator1);
      ArrayListIterator<DataTruncation> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<DataTruncation>(abstractOrderedMapIteratorDecorator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      stack0.listIterator();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      int[] intArray0 = new int[8];
      intArray0[0] = 1047;
      intArray0[1] = 1047;
      intArray0[2] = 1047;
      intArray0[3] = 1047;
      intArray0[4] = 1047;
      intArray0[5] = 1047;
      intArray0[6] = 1047;
      intArray0[7] = 1047;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("psxkA", "", 1047, intArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "psxkA", batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, (-1881));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("_>ZZNc9)wPoYmtea~`k");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("'Go&gN;", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("!D1rux3{.^(9)");
      iIOMetadataNode0.getNextSibling();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Transformer<SQLWarning, String> transformer0 = ConstantTransformer.constantTransformer("EPSEr^KnEAj}@");
      IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) transformer0, "RY?/JLV", "EPSEr^KnEAj}@", "EPSEr^KnEAj}@");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[F)1?", "[F)1?");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSet0.add(batchUpdateException0);
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet3 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 7);
      linkedHashSetArray0[0] = linkedHashSet2;
      linkedHashSetArray0[1] = linkedHashSet2;
      linkedHashSetArray0[2] = linkedHashSet2;
      linkedHashSetArray0[3] = linkedHashSet1;
      linkedHashSetArray0[5] = linkedHashSet0;
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSetArray0);
      LinkedHashSet<BatchUpdateException> linkedHashSet4 = new LinkedHashSet<BatchUpdateException>();
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("_>ZZNc9)wPoYmtea~`k");
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) iterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) listIterator0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) arrayList0);
      IteratorUtils.asIterable((Iterator<?>) orderedMapIterator0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-752);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      String string0 = "List must not be null";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("List must not be null", "List must not be null", 0, hashMap0, batchUpdateException0);
      ArrayListIterator<SQLException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLException>(sQLClientInfoException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) listIterator0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSet1.addAll(linkedHashSet2);
      int[] intArray0 = new int[2];
      intArray0[0] = 658;
      intArray0[1] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      linkedHashSet1.add(batchUpdateException0);
      LinkedHashSet<BatchUpdateException> linkedHashSet3 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet4 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet5 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 7);
      LinkedHashSet<BatchUpdateException> linkedHashSet6 = new LinkedHashSet<BatchUpdateException>();
      linkedHashSetArray0[0] = linkedHashSet6;
      linkedHashSetArray0[1] = linkedHashSet1;
      linkedHashSetArray0[2] = linkedHashSet4;
      linkedHashSetArray0[3] = linkedHashSet1;
      linkedHashSetArray0[4] = linkedHashSet1;
      linkedHashSetArray0[5] = linkedHashSet3;
      linkedHashSetArray0[6] = linkedHashSet0;
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>(linkedHashSetArray0);
      IteratorUtils.get((Iterator<LinkedHashSet<BatchUpdateException>>) objectArrayListIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      String string0 = "EPSEr^KnEAj}@";
      Transformer<SQLWarning, String> transformer0 = ConstantTransformer.constantTransformer("EPSEr^KnEAj}@");
      IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) transformer0, "RY?/JLV", "EPSEr^KnEAj}@", "EPSEr^KnEAj}@");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("f.7AFC,^0");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) anyPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", (String) null);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) nodeListIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[0] = predicate0;
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) anyPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<SQLNonTransientException>) null);
      Predicate<Iterator<TreeSet<SQLDataException>>> predicate0 = UniquePredicate.uniquePredicate();
      ArrayIterator<SQLSyntaxErrorException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLSyntaxErrorException>(predicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<SQLWarning> iterator0 = null;
      Transformer<SQLWarning, String> transformer0 = ConstantTransformer.constantTransformer("EPSEr^KnEAj}@");
      IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) transformer0, "RY?/JLV", "EPSEr^KnEAj}@", "EPSEr^KnEAj}@");
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[F)1?", "[F)1?");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException1.forEach(consumer0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("4HvN>4iQ?J", intArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends DataTruncation>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      stack0.listIterator();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      ListIterator<Properties> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      int[] intArray0 = new int[8];
      intArray0[0] = 1047;
      intArray0[1] = 1047;
      intArray0[2] = 1047;
      intArray0[3] = 1047;
      intArray0[4] = 1047;
      intArray0[5] = 1047;
      intArray0[6] = 1047;
      intArray0[7] = 1047;
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<Properties>) listIterator1;
      iteratorArray0[1] = (Iterator<Properties>) listIterator1;
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) listIterator0);
      iteratorArray0[2] = iterator1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 1047, (-1650));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) orderedIterator0);
      IteratorUtils.isEmpty(iterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLDataException sQLDataException0 = new SQLDataException("`SPL", "`SPL", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`SPL", "`SPL", sQLDataException0);
      DataTruncation dataTruncation0 = new DataTruncation(279, true, true, 279, 3997, sQLInvalidAuthorizationSpecException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1410, true, true, 3997, 279, sQLDataException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(1299, false, false, 0, 0, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, false, true, 1026, (-2984));
      dataTruncationArray0[3] = dataTruncation3;
      IteratorUtils.arrayIterator(dataTruncationArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashSet<IIOMetadataNode>[] hashSetArray0 = (HashSet<IIOMetadataNode>[]) Array.newInstance(HashSet.class, 0);
      IteratorUtils.arrayListIterator(hashSetArray0);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2929), 61);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ResettableListIterator<Hashtable<SQLRecoverableException, SQLTimeoutException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 2628;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 2628);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.DefaultEquator", "org.apache.commons.collections4.functors.DefaultEquator", true);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      SQLDataException sQLDataException0 = new SQLDataException("", ", ", 1664);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", ", ", sQLDataException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", ">NLG0L", sQLFeatureNotSupportedException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("mWD", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(2547, true, true, (-161), (-161), sQLTimeoutException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-1456), true, true, 361, 2547);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(1664, true, true, 1664, 2547, sQLFeatureNotSupportedException0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, (-816), 0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-1456), true, true, 361, (-1475));
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(9, true, true, 61, 0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(0, true, false, (-1475), 3745, dataTruncation1);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation((-1), true, true, 9, 2547, dataTruncation6);
      dataTruncationArray0[7] = dataTruncation7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 2547);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      ListIterator<InstanceofPredicate> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>) listIterator1, (Iterator<? extends Predicate<Object>>) listIterator0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      LoopingListIterator<SQLSyntaxErrorException> loopingListIterator0 = new LoopingListIterator<SQLSyntaxErrorException>(arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) loopingListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) null, "getValue() can only be called after next() and before remove()", (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EmptyIterator.emptyIterator();
      UniquePredicate.uniquePredicate();
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      UniquePredicate.uniquePredicate();
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) hashSet0);
      IteratorUtils.find((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      Integer integer0 = new Integer(1846);
      Integer integer1 = new Integer(100);
      Integer integer2 = new Integer(202);
      Integer integer3 = new Integer(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";TZ[?4T]DoU{K.^CZ:");
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<LinkedHashSet<BatchUpdateException>>((LinkedHashSet<BatchUpdateException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Transformer<SQLWarning, String> transformer0 = ConstantTransformer.constantTransformer("EPSEr^KnEAj}@");
      IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) transformer0, "RY?/JLV", "EPSEr^KnEAj}@", "EPSEr^KnEAj}@");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[F)1?", "[F)1?");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      int[] intArray0 = new int[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      UniquePredicate<SQLClientInfoException> uniquePredicate0 = new UniquePredicate<SQLClientInfoException>();
      SingletonIterator<Predicate<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<Predicate<SQLClientInfoException>>(uniquePredicate0);
      Iterator<Predicate<SQLClientInfoException>>[] iteratorArray0 = (Iterator<Predicate<SQLClientInfoException>>[]) Array.newInstance(Iterator.class, 8);
      ZippingIterator<Predicate<SQLClientInfoException>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Predicate<SQLClientInfoException>>) singletonIterator0, (Iterator<? extends Predicate<SQLClientInfoException>>) singletonIterator0);
      iteratorArray0[0] = (Iterator<Predicate<SQLClientInfoException>>) zippingIterator0;
      iteratorArray0[1] = (Iterator<Predicate<SQLClientInfoException>>) singletonIterator0;
      iteratorArray0[2] = (Iterator<Predicate<SQLClientInfoException>>) singletonIterator0;
      iteratorArray0[3] = (Iterator<Predicate<SQLClientInfoException>>) singletonIterator0;
      iteratorArray0[4] = (Iterator<Predicate<SQLClientInfoException>>) singletonIterator0;
      iteratorArray0[5] = (Iterator<Predicate<SQLClientInfoException>>) singletonIterator0;
      iteratorArray0[6] = (Iterator<Predicate<SQLClientInfoException>>) singletonIterator0;
      iteratorArray0[7] = (Iterator<Predicate<SQLClientInfoException>>) singletonIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends Predicate<SQLClientInfoException>>[]) iteratorArray0);
      IteratorUtils.emptyIterator();
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      SQLWarning sQLWarning0 = new SQLWarning("OeLlDQsi{rH=z[WG");
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      // Undeclared exception!
//      try { 
        arrayList0.addAll(125, (Collection<? extends BatchUpdateException>) treeSet0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 125, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "tp5 jE!NnqJX=A!y";
      SQLWarning sQLWarning0 = new SQLWarning("tp5 jE!NnqJX=A!y");
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) arrayList0);
      IteratorUtils.getIterator("tp5 jE!NnqJX=A!y");
      ArrayList<HashSet<SQLDataException>> arrayList1 = new ArrayList<HashSet<SQLDataException>>();
      ReverseListIterator<HashSet<SQLDataException>> reverseListIterator0 = new ReverseListIterator<HashSet<SQLDataException>>(arrayList1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) nonePredicate0, (Predicate<? super Object>) nonePredicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsFalsePredicate0;
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) nonePredicate0);
      predicateArray0[1] = predicate1;
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate2 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate2, nullIsFalsePredicate0);
      predicateArray0[3] = (Predicate<Object>) orPredicate0;
      // Undeclared exception!
//      try { 
        OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 4 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(">+IKx", ">+IKx");
      assertEquals(">+IKx", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(">+IKx", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >+IKx", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(3671, true, true, (-129), (-129), sQLFeatureNotSupportedException0);
      assertEquals(">+IKx", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(">+IKx", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >+IKx", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(2059, true, true, 1437, (-1), sQLFeatureNotSupportedException0);
      assertEquals(">+IKx", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(">+IKx", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >+IKx", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertNotNull(dataTruncation1);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(2059, true, true, 2059, 0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals("01004", dataTruncation2.getSQLState());
      assertNotNull(dataTruncation2);
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      
      dataTruncationArray0[2] = dataTruncation2;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      assertEquals(">+IKx", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(">+IKx", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >+IKx", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >+IKx", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLFeatureNotSupportedException: >+IKx", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, 0, 0, sQLSyntaxErrorException0);
      assertEquals(">+IKx", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(">+IKx", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >+IKx", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >+IKx", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLFeatureNotSupportedException: >+IKx", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation3.toString());
      assertEquals("01004", dataTruncation3.getSQLState());
      assertEquals("Data truncation", dataTruncation3.getMessage());
      assertEquals(0, dataTruncation3.getErrorCode());
      assertNotNull(dataTruncation3);
      assertFalse(dataTruncation3.equals((Object)dataTruncation0));
      assertFalse(dataTruncation3.equals((Object)dataTruncation2));
      assertFalse(dataTruncation3.equals((Object)dataTruncation1));
      
      dataTruncationArray0[3] = dataTruncation3;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(">+IKx", dataTruncation0);
      assertEquals(">+IKx", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(">+IKx", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >+IKx", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(">+IKx", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: >+IKx", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertNotNull(sQLSyntaxErrorException1);
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation0.equals((Object)dataTruncation3));
      assertFalse(dataTruncation0.equals((Object)dataTruncation2));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      DataTruncation dataTruncation4 = new DataTruncation((-1), true, true, (-457), 2059, sQLSyntaxErrorException1);
      assertEquals(">+IKx", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(">+IKx", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >+IKx", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(">+IKx", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: >+IKx", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("01004", dataTruncation4.getSQLState());
      assertEquals(0, dataTruncation4.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation4.toString());
      assertEquals("Data truncation", dataTruncation4.getMessage());
      assertNotNull(dataTruncation4);
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation0.equals((Object)dataTruncation3));
      assertFalse(dataTruncation0.equals((Object)dataTruncation2));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(dataTruncation4.equals((Object)dataTruncation2));
      assertFalse(dataTruncation4.equals((Object)dataTruncation1));
      assertFalse(dataTruncation4.equals((Object)dataTruncation0));
      assertFalse(dataTruncation4.equals((Object)dataTruncation3));
      
      dataTruncationArray0[4] = dataTruncation4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-129), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Predicate<IIOMetadataNode>[] predicateArray0 = (Predicate<IIOMetadataNode>[]) Array.newInstance(Predicate.class, 1);
      AllPredicate<IIOMetadataNode> allPredicate0 = new AllPredicate<IIOMetadataNode>(predicateArray0);
      assertNotNull(allPredicate0);
      assertEquals(1, predicateArray0.length);
      
      predicateArray0[0] = (Predicate<IIOMetadataNode>) allPredicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 7);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(transformer0);
      
      transformerArray0[0] = transformer0;
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Transformer<Object, String> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(transformer1);
      assertNotSame(transformer1, transformer0);
      assertFalse(transformer1.equals((Object)transformer0));
      
      transformerArray0[1] = transformer1;
      String string0 = "toIndex = ";
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 7);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      classArray0[0] = class0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      classArray0[1] = class1;
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      classArray0[2] = class2;
      Class<SQLTransactionRollbackException> class3 = SQLTransactionRollbackException.class;
      classArray0[3] = class3;
      Class<SQLTransactionRollbackException> class4 = SQLTransactionRollbackException.class;
      classArray0[4] = class4;
      Class<SQLTransactionRollbackException> class5 = SQLTransactionRollbackException.class;
      classArray0[5] = class5;
      Class<SQLTransactionRollbackException> class6 = SQLTransactionRollbackException.class;
      classArray0[6] = class6;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("toIndex = ", classArray0, predicateArray0);
      assertNotNull(invokerTransformer0);
      assertEquals(1, predicateArray0.length);
      assertEquals(7, classArray0.length);
      
      transformerArray0[2] = (Transformer<Object, String>) invokerTransformer0;
      String string1 = "B,t%#(S3Ha*;jE9e\"";
      Transformer<Object, String> transformer2 = ConstantTransformer.constantTransformer("B,t%#(S3Ha*;jE9e\"");
      assertNotNull(transformer2);
      assertFalse(transformer2.equals((Object)transformer1));
      assertFalse(transformer2.equals((Object)transformer0));
      
      transformerArray0[3] = transformer2;
      Transformer<Object, String> transformer3 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer3);
      assertFalse(transformer3.equals((Object)transformer0));
      assertFalse(transformer3.equals((Object)transformer2));
      assertFalse(transformer3.equals((Object)transformer1));
      
      transformerArray0[4] = transformer3;
      Transformer<Object, String> transformer4 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer4);
      assertNotSame(transformer4, transformer2);
      assertFalse(transformer4.equals((Object)transformer1));
      assertFalse(transformer4.equals((Object)transformer2));
      assertFalse(transformer4.equals((Object)transformer3));
      assertFalse(transformer4.equals((Object)transformer0));
      
      transformerArray0[5] = transformer4;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object>[] predicateArray2 = null;
      // Undeclared exception!
//      try { 
        AllPredicate.allPredicate((Predicate<? super Object>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1102;
      intArray0[2] = 1351;
      intArray0[3] = (-1);
      intArray0[4] = (-1258);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {0, 1102, 1351, (-1), (-1258)}, intArray0);
      assertEquals(5, intArray0.length);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("s%;", "s%;", batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: s%;", sQLNonTransientConnectionException0.toString());
      assertEquals("s%;", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("s%;", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      assertArrayEquals(new int[] {0, 1102, 1351, (-1), (-1258)}, intArray0);
      assertEquals(5, intArray0.length);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: s%;", sQLNonTransientConnectionException0.toString());
      assertEquals("s%;", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("s%;", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(iterator0);
      assertArrayEquals(new int[] {0, 1102, 1351, (-1), (-1258)}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      stack0.add(instanceofPredicate0);
      stack0.listIterator();
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 5);
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[1] = linkedHashSet0;
      linkedHashSetArray0[2] = linkedHashSet0;
      linkedHashSetArray0[3] = linkedHashSet0;
      linkedHashSetArray0[4] = linkedHashSet0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      HashMap<SQLException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLException, SQLIntegrityConstraintViolationException>();
      Transformer<SQLException, SQLIntegrityConstraintViolationException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) hashMap0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) instanceofPredicate0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("kIDHUWk:igitfW~UGD", "kIDHUWk:igitfW~UGD", (-133));
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("DMq._YQ0t{", (String) null, 0, sQLIntegrityConstraintViolationException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("DMq._YQ0t{", (String) null, 0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("kIDHUWk:igitfW~UGD");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, (-133), (-1162));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("_>ZZNc9)wPoYmtea~`k");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("'Go&gN;", sQLFeatureNotSupportedException1);
      int[] intArray0 = new int[8];
      intArray0[0] = (-475);
      intArray0[1] = (-475);
      intArray0[2] = (-475);
      intArray0[3] = (-475);
      intArray0[4] = (-475);
      intArray0[5] = (-475);
      intArray0[6] = 1381;
      intArray0[7] = (-475);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("_>ZZNc9)wPoYmtea~`k", "org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator", (-475), intArray0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedList0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(iterator0);
//      try { 
        listIteratorWrapper0.add(batchUpdateException0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // ListIteratorWrapper does not support optional operations of ListIterator.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ListIteratorWrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque1 = arrayDeque0.clone();
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(arrayDeque1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 100);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" is invalid for size ", "`rr*8Inak\"G![`ZDg5", 100, sQLIntegrityConstraintViolationException0);
      arrayDeque0.add(sQLFeatureNotSupportedException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      loopingIterator0.forEachRemaining(consumer0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) loopingIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("cLGO6GAb1", "", sQLIntegrityConstraintViolationException0);
      IteratorUtils.getIterator(sQLRecoverableException0);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedHashSet0);
      Iterator<Predicate<SQLClientInfoException>>[] iteratorArray0 = (Iterator<Predicate<SQLClientInfoException>>[]) Array.newInstance(Iterator.class, 1);
      Predicate<SQLClientInfoException> predicate0 = ExceptionPredicate.exceptionPredicate();
      SingletonIterator<Predicate<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<Predicate<SQLClientInfoException>>(predicate0);
      iteratorArray0[0] = (Iterator<Predicate<SQLClientInfoException>>) singletonIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends Predicate<SQLClientInfoException>>[]) iteratorArray0);
      IteratorUtils.emptyIterator();
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      HashSet<Properties>[] hashSetArray0 = (HashSet<Properties>[]) Array.newInstance(HashSet.class, 6);
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      hashSetArray0[0] = (HashSet<Properties>) linkedHashSet1;
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      hashSetArray0[1] = (HashSet<Properties>) linkedHashSet2;
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      hashSetArray0[2] = hashSet0;
      LinkedHashSet<Properties> linkedHashSet3 = new LinkedHashSet<Properties>();
      hashSetArray0[3] = (HashSet<Properties>) linkedHashSet3;
      HashSet<Properties> hashSet1 = new HashSet<Properties>();
      hashSetArray0[4] = hashSet1;
      LinkedHashSet<Properties> linkedHashSet4 = new LinkedHashSet<Properties>();
      hashSetArray0[5] = (HashSet<Properties>) linkedHashSet4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(hashSetArray0, 32, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Iterator<SQLNonTransientException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      int int0 = (-2141);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(locale_CategoryArray0, (-2141));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }
}
