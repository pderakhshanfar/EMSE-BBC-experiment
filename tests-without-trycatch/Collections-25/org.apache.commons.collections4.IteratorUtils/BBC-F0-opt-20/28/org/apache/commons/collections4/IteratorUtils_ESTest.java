/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 09:27:29 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0, 0);
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", "");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", "");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "", 125);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException(sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      SQLSyntaxErrorException sQLSyntaxErrorException8 = new SQLSyntaxErrorException("IG RMbS6BJa/?", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[8] = sQLSyntaxErrorException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 1764, (-457));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EmptyIterator.emptyIterator();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[5];
      SQLWarning sQLWarning0 = new SQLWarning("iterator");
      sQLWarningArray0[0] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("iterator");
      sQLWarningArray0[1] = sQLWarning1;
      String string0 = "|-Rg6u0C#!!p{";
      SQLWarning sQLWarning2 = new SQLWarning("|-Rg6u0C#!!p{");
      sQLWarningArray0[2] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning("");
      sQLWarningArray0[3] = sQLWarning3;
      DataTruncation dataTruncation0 = new DataTruncation(1196, false, true, 2158, 1073741824);
      dataTruncation0.getNextWarning();
      sQLWarningArray0[4] = null;
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>((Predicate<? super Object>[]) null, transformerArray0, factoryTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) resettableListIterator0, (Transformer<? super SQLWarning, String>) switchTransformer0, "", "iterator", "|-Rg6u0C#!!p{");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.iterators.EmptyIterator", "org.apache.commons.collections4.iterators.EmptyIterator");
      Transformer<SQLException, SQLIntegrityConstraintViolationException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 3173);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Class<SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("7Bm~:;}q<#cjKWRb-+", "No next() entry in the iteration", sQLNonTransientConnectionException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.size(listIterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(nullIsTruePredicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(notPredicate0, (Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLTransientConnectionException>) listIterator0, (Predicate<? super SQLTransientConnectionException>) orPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "The collections must not be null");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("The collections must not be null");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(nodeListIterator0, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) equalPredicate0);
      predicateArray0[1] = predicate0;
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      predicateArray0[3] = predicate2;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[4] = (Predicate<Object>) nonePredicate0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("There are no elements for this iterator to loop on", "}MX[", hashtable0, sQLInvalidAuthorizationSpecException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate3 = ComparatorPredicate.comparatorPredicate((Object) sQLClientInfoException0, comparator0);
      predicateArray0[5] = predicate3;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, anyPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) transformedPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'The collections must not be null' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      String string0 = "next() must have been called for remove() to function";
      int int0 = 0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "next() must have been called for remove() to function", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer((String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Vector<Hashtable>>) resettableIterator0, (Transformer<? super Vector<Hashtable>, String>) transformer0, (String) null, "next() must have been called for remove() to function", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) transformer0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.singletonListIterator(clientInfoStatus0);
      Transformer<Object, Properties> transformer1 = ExceptionTransformer.exceptionTransformer();
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends ClientInfoStatus>) listIterator0, (Transformer<? super ClientInfoStatus, ? extends Properties>) transformer1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>((SQLIntegrityConstraintViolationException) null);
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0, 0);
      EmptyIterator.resettableEmptyIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 8);
      Class<Boolean> class0 = Boolean.class;
      classArray0[0] = class0;
      Class<Boolean> class1 = Boolean.class;
      classArray0[1] = class1;
      Class<Boolean> class2 = Boolean.class;
      classArray0[2] = class2;
      Class<Boolean> class3 = Boolean.class;
      classArray0[3] = class3;
      Class<Boolean> class4 = Boolean.class;
      classArray0[4] = class4;
      Class<Boolean> class5 = Boolean.class;
      classArray0[5] = class5;
      Class<Boolean> class6 = Boolean.class;
      classArray0[6] = class6;
      Class<Boolean> class7 = Boolean.class;
      classArray0[7] = class7;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Up@x@+pI/", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<HashMap<TreeSet, Object>>) iterator0, (Transformer<? super HashMap<TreeSet, Object>, String>) transformer0, "O7\t", "Up@x@+pI/", "/@T9g1]U7Jr!}Mz#NO?");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'Up@x@+pI/' on 'class java.lang.Object' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator<SQLSyntaxErrorException> comparator0 = (Comparator<SQLSyntaxErrorException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("zO,=D\"8*s5N}d");
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0, (Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) list0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, 3254);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      FactoryTransformer<SQLTransientException, SQLTransientConnectionException> factoryTransformer0 = new FactoryTransformer<SQLTransientException, SQLTransientConnectionException>((Factory<? extends SQLTransientConnectionException>) null);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransientException) sQLTransientConnectionException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) factoryTransformer0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Transformer must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLTransientException, String>) transformer0, "dZ1q\"Odiv|p", "Equator must not be null.", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = new Object();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(object0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) onePredicate0;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[2] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) nullIsTruePredicate0);
      predicateArray0[3] = predicate1;
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Object>) singletonIterator0, (Predicate<? super Object>) predicate2);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      IteratorUtils.size(orderedMapIterator0);
      IteratorUtils.toString((Iterator<SQLTimeoutException>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLIntegrityConstraintViolationException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0, 767L, 767L);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) boundedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) transformer0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, BatchUpdateException> transformer1 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, BatchUpdateException> transformer2 = InvokerTransformer.invokerTransformer("[]");
      Transformer<Object, BatchUpdateException> transformer3 = IfTransformer.ifTransformer((Predicate<? super Object>) uniquePredicate0, (Transformer<? super Object, ? extends BatchUpdateException>) transformer1, (Transformer<? super Object, ? extends BatchUpdateException>) transformer2);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer3);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException("f", "|-~[R>`7:H", (-950), sQLTransactionRollbackException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLDataException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("f", sQLNonTransientConnectionException1);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("f", "|-~[R>`7:H", sQLNonTransientConnectionException1);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = (-950);
      intArray0[2] = (-950);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-950);
      intArray0[6] = 4690;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("|-~[R>`7:H", "|-~[R>`7:H", 0, intArray0, sQLIntegrityConstraintViolationException1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("|-~[R>`7:H", batchUpdateException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayListIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientConnectionException0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("clone");
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'clone' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[", "[");
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) singletonIterator0, 449);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("G^ixG6;?NwA4!D+");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableListIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'G^ixG6;?NwA4!D+' on 'class java.sql.SQLRecoverableException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      Throwable throwable0 = null;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("hn|),eC&P1J%}&", "hn|),eC&P1J%}&", intArray0, (Throwable) null);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, intArray0, batchUpdateException1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("'TVXX3n'|2~2", "", batchUpdateException2);
      stack0.add(sQLRecoverableException0);
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(stack0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLRecoverableException>) loopingListIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      IteratorUtils.isEmpty((Iterator<?>) null);
      Hashtable<SQLTransientException, String> hashtable0 = new Hashtable<SQLTransientException, String>();
      EntrySetMapIterator<SQLTransientException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientException, String>(hashtable0);
      MapIterator<SQLTransientException, String> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, String>) entrySetMapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(stack0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(priorityQueue0);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Enumeration must not be null");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) stringTokenizer0);
      predicateArray0[0] = predicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray1);
      predicateArray0[1] = (Predicate<Object>) anyPredicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicateArray0[1], predicate0);
      predicateArray0[2] = (Predicate<Object>) orPredicate0;
      Hashtable<Object, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<Object, SQLIntegrityConstraintViolationException>();
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLIntegrityConstraintViolationException>) hashtable0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) anyPredicate0);
      predicateArray0[3] = predicate1;
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      predicateArray0[4] = (Predicate<Object>) transformedPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(stack0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[5] = (Predicate<Object>) comparatorPredicate0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate2 = ComparatorPredicate.comparatorPredicate((Object) orPredicate0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate3 = EqualPredicate.equalPredicate((Object) predicate2);
      predicateArray0[6] = predicate3;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("@4A}Twybg");
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, transformer1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Integer>) loopingListIterator0, (Transformer<? super Integer, String>) switchTransformer0, "Enumeration must not be null", (String) null, "Enumeration must not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) null, (Transformer<? super SQLDataException, String>) transformer0, "[]", (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>((SQLIntegrityConstraintViolationException) null);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      int int0 = 9;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.getIterator(transformer0);
      Iterator<SQLDataException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, Closure<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, Closure<Object>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends Closure<Object>>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("cp\"T6'/%");
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<IIOMetadataNode> predicate0 = ComparatorPredicate.comparatorPredicate(iIOMetadataNode0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) iterator1);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.constantTransformer(sQLFeatureNotSupportedException0);
      IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T28@Xa1%VjL`;}NNH");
      IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Boolean[] booleanArray0 = new Boolean[13];
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      PredicateTransformer<SQLTransactionRollbackException> predicateTransformer0 = new PredicateTransformer<SQLTransactionRollbackException>(predicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.arrayIterator(booleanArray0, 1);
      IteratorUtils.apply((Iterator<Boolean>) resettableIterator0, (Closure<? super Boolean>) closure0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      UnaryOperator<SQLDataException> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 2506, (-353));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("");
      ConstantTransformer<Object, SQLTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLTransientConnectionException>(sQLTransientConnectionException1);
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLRecoverableException>) resettableListIterator0, (Closure<? super SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.getIterator(enumeration0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) linkedHashSet0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      ConstantTransformer<Object, SQLTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLTransientConnectionException>(sQLTransientConnectionException0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      IteratorUtils.apply((Iterator<SQLRecoverableException>) resettableIterator0, (Closure<? super SQLRecoverableException>) closure0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, class0);
      IteratorUtils.isEmpty(mapIterator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      AndPredicate<SQLTransientException> andPredicate0 = new AndPredicate<SQLTransientException>(predicate0, predicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      andPredicate0.evaluate(sQLTransientConnectionException0);
      IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) andPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(}r$u8)M)~1", "(}r$u8)M)~1", 1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLSyntaxErrorException0);
      IteratorUtils.singletonListIterator(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "529}%{TlL\")EUPxzi", (-1706));
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("\"1\"d?SD", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("529}%{TlL\")EUPxzi", (String) null);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("529}%{TlL\")EUPxzi", "The predicate and closure map must not be null", 2023);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("", "G=rIe'jE%:q:", sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException((String) null, ">uT=+", (-535), sQLFeatureNotSupportedException3);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException6);
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException8;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) resettableListIterator0);
      OrderedMapIterator<Closure<Object>, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Closure<Object>, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Closure<Object>, SQLRecoverableException>(orderedMapIterator0);
      OrderedMapIterator<Closure<Object>, SQLRecoverableException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Closure<Object>, ? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0);
      SkippingIterator<Closure<Object>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Closure<Object>>) orderedMapIterator1, 1L);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Closure<Object>>) skippingIterator0, (Transformer<? super Closure<Object>, String>) transformer0, "#j", "eh_)Ht)[mr7Cj0/}", "");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) transformer0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<SQLRecoverableException>) null, (Closure<? super SQLRecoverableException>) closure0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) linkedHashSet0);
      String string0 = null;
      ConstantTransformer.constantTransformer((String) null);
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 7);
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      Iterator<Locale.FilteringMode> iterator0 = treeSet0.descendingIterator();
      iteratorArray0[0] = iterator0;
      Locale.FilteringMode[] locale_FilteringModeArray0 = null;
      int int0 = 1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Locale.FilteringMode[]) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Predicate<? super SQLException>) transformedPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, class0);
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(orderedMapIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) listIteratorWrapper0, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EmptyListIterator.resettableEmptyListIterator();
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator", "org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("poevN)y(%6dpz!;", "H'BT 3Y$BU[|R9yD<");
      sQLRecoverableException0.initCause(sQLRecoverableException1);
      linkedHashSet0.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) linkedHashSet0);
      IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, 10, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EmptyListIterator.resettableEmptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 61);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 60
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 33);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 32
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      treeSet0.add(locale_FilteringMode0);
      TreeSet<Locale.FilteringMode> treeSet1 = new TreeSet<Locale.FilteringMode>((SortedSet<Locale.FilteringMode>) treeSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, class0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("(this Map)", intArray0);
      SQLDataException sQLDataException0 = new SQLDataException(batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("(this Map)", "IfY;} ", sQLDataException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "org.apache.commons.collections4.iterators.PeekingIterator", sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLTimeoutException0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, class1);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, class0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      IteratorUtils.getIterator((Object) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("8ET%dk,a");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode1, true);
      singletonIterator0.reset();
      singletonIterator0.reset();
      SingletonIterator<IIOMetadataNode> singletonIterator1 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode1, true);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) singletonIterator1);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      MapIterator<Boolean, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.find((Iterator<Boolean>) mapIterator0, (Predicate<? super Boolean>) predicate0);
      OrderedMapIterator<SQLRecoverableException, Stack<BatchUpdateException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Stack<BatchUpdateException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Stack<BatchUpdateException>>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLRecoverableException, Stack<BatchUpdateException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLRecoverableException, Stack<BatchUpdateException>>(abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedMapIterator0, (Transformer<? super SQLRecoverableException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      ResettableIterator<SQLException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.matchesAny((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) uniquePredicate0);
      SQLException sQLException0 = new SQLException();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<Vector<Hashtable>>) resettableListIterator0, (Transformer<? super Vector<Hashtable>, String>) transformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) orderedIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) list0);
      ConstantTransformer.constantTransformer("Si~]PQ|v4nzNo");
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) linkedHashSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) enumeration0, (-1547));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      MapIterator<Boolean, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.find((Iterator<Boolean>) mapIterator0, (Predicate<? super Boolean>) predicate0);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) linkedHashSet0);
      IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, class0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",@ECeq(O+(");
      iIOMetadataNode0.getLastChild();
      iIOMetadataNode0.setNodeValue(",@ECeq(O+(");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS(", ", ", ");
      IteratorUtils.nodeListIterator(nodeList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator((Properties) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableIterator0, (Transformer<? super Properties, ? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      TreeSet<Locale.FilteringMode> treeSet1 = new TreeSet<Locale.FilteringMode>();
      OrderedMapIterator<SQLRecoverableException, Vector<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLRecoverableException, Vector<SQLIntegrityConstraintViolationException>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends Vector<SQLIntegrityConstraintViolationException>>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) orderedMapIterator1, (Predicate<? super SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      PriorityQueue<SQLNonTransientException> priorityQueue0 = new PriorityQueue<SQLNonTransientException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null, (Collection<? super SQLNonTransientException>) priorityQueue0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("B|~Ce", "", (-226));
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) transformer0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Iterator<Properties> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      TreeSet<Locale.FilteringMode> treeSet1 = new TreeSet<Locale.FilteringMode>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{tD^70~$R*taF", "Factory must not be null", 246);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("!-", sQLIntegrityConstraintViolationException0);
      SQLWarning sQLWarning0 = new SQLWarning("", sQLNonTransientConnectionException0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLIntegrityConstraintViolationException0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Iterator<SQLException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLException>) singletonListIterator0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLException>) uniquePredicate0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLRecoverableException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) mapIterator0;
      iteratorArray0[2] = (Iterator<SQLRecoverableException>) mapIterator0;
      iteratorArray0[3] = (Iterator<SQLRecoverableException>) mapIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyIterator.emptyIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("%ryWZ=4]/< {eb-", "%ryWZ=4]/< {eb-", 100);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLTransactionRollbackException0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<SQLException>) null, (Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) enumeration0, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, class0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super String>) nullIsFalsePredicate0);
      MapIterator<Boolean, SQLSyntaxErrorException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) mapIterator1);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      Iterator<Boolean> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0, (Collection<? super Boolean>) priorityQueue0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Boolean>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) listIterator0);
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) set0);
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) iterator0, class0);
      ListIterator<Vector<SQLException>> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator1);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0, 10, 10);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("h%");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLTransactionRollbackException0);
      SQLWarning sQLWarning0 = new SQLWarning("%&.g6x2JITa*?=lo", sQLTransactionRollbackException0);
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      Properties properties0 = new Properties();
      Iterator<Properties> iterator0 = new SingletonListIterator<Properties>(properties0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",@ECeq(O+(");
      iIOMetadataNode0.item(100);
      iIOMetadataNode0.setNodeValue(",@ECeq(O+(");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS(", ", ", ");
      IteratorUtils.nodeListIterator(nodeList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(vector0);
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<DataTruncation, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) mapIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) vector0);
      IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) loopingListIterator0, (Iterator<? extends SQLWarning>) iterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Predicate<Object> predicate0 = null;
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, DataTruncation> ifTransformer0 = new IfTransformer<Object, DataTruncation>((Predicate<? super Object>) null, transformer0, transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) null, (Transformer<? super String, ?>) ifTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("h%");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLTransactionRollbackException0);
      SQLWarning sQLWarning0 = new SQLWarning("%&.g6x2JITa*?=lo", sQLTransactionRollbackException0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLTransactionRollbackException0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("prefix may not be null", (String) null, (-7), sQLTransactionRollbackException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator1 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) singletonListIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) singletonListIterator0, 1);
      LoopingListIterator<SQLException> loopingListIterator0 = new LoopingListIterator<SQLException>(list0);
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<SQLException>) loopingListIterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.iterators.NodeListIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap", (-27));
      Iterator<?> iterator0 = IteratorUtils.getIterator("org.apache.commons.collections4.bidimap.TreeBidiMap");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("z.C]5YCql-'K");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      singletonIterator0.reset();
      IteratorUtils.isEmpty(iterator0);
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, String> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      IteratorUtils.find((Iterator<Boolean>) orderedMapIterator0, (Predicate<? super Boolean>) uniquePredicate0);
      IteratorUtils.isEmpty(orderedMapIterator1);
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      IteratorUtils.find((Iterator<Boolean>) orderedMapIterator0, (Predicate<? super Boolean>) uniquePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyIterator.emptyIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, String> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super String>) uniquePredicate0);
      IteratorUtils.find((Iterator<Boolean>) orderedMapIterator0, (Predicate<? super Boolean>) uniquePredicate0);
      IteratorUtils.isEmpty(orderedMapIterator1);
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(vector0);
      IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) loopingListIterator0, (Iterator<? extends SQLWarning>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator((IIOMetadataNode) null, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) iterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) zippingIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nullIsExceptionPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("^Xb9qB0fvWo8`_jK", "^Xb9qB0fvWo8`_jK");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLInvalidAuthorizationSpecException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLSyntaxErrorException0);
      MapIterator<Boolean, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.find((Iterator<Boolean>) mapIterator0, (Predicate<? super Boolean>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.item(100);
      iIOMetadataNode0.setNodeValue("<PBffx-nr;oii2@B[P");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("1Ms<,JILKIbbF+U-CE", "<PBffx-nr;oii2@B[P");
      IteratorUtils.nodeListIterator(nodeList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super String>) nullIsFalsePredicate0);
      OrderedMapIterator<Predicate<Object>, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Predicate<Object>, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Predicate<Object>, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      AbstractMapIteratorDecorator<Predicate<Object>, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Predicate<Object>, SQLFeatureNotSupportedException>(orderedMapIterator1);
      IteratorUtils.unmodifiableIterator((Iterator<Predicate<Object>>) abstractMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",@ECeq(O+(");
      iIOMetadataNode0.item(100);
      iIOMetadataNode0.setNodeValue(",@ECeq(O+(");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS(", ", ", ");
      IteratorUtils.nodeListIterator(nodeList0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>(2589, 2589);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode0;
      iIOMetadataNodeArray0[5] = iIOMetadataNode0;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>) objectArrayListIterator0, (Iterator<? extends IIOMetadataNode>) objectArrayListIterator0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) objectArrayListIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) linkedHashSet0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Iterator must not be null", (Map<String, ClientInfoStatus>) null);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLClientInfoException1);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Iterator must not be null", "#H>", (-188), sQLClientInfoException1);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator1 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) singletonListIterator0);
      IteratorUtils.matchesAny((Iterator<SQLException>) singletonListIterator0, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.size(singletonListIterator1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Properties properties0 = new Properties();
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) null);
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      TreeSet<Locale.FilteringMode> treeSet1 = new TreeSet<Locale.FilteringMode>((SortedSet<Locale.FilteringMode>) treeSet0);
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) treeSet1);
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) singletonListIterator0, (Iterator<? extends Properties>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = ",@ECeq(O+(";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",@ECeq(O+(");
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("prefix may not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException0);
      String string0 = "s";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("s", sQLTransactionRollbackException0);
      String string1 = "%&.g6x2\\JITa*?=lo";
      SQLWarning sQLWarning0 = new SQLWarning("2q\"2r^", sQLTransientConnectionException0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLNonTransientConnectionException0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("%&.g6x2JITa*?=lo", "2q\"2r^", 227, sQLTransientConnectionException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("@0%[,^Kvt^z]7bvsK");
      Locale locale0 = null;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "%&.g6x2JITa*?=lo";
      objectArray0[1] = (Object) "prefix may not be null";
      objectArray0[2] = (Object) stack0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) sQLFeatureNotSupportedException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) null, 61);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Boolean, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Boolean, SQLTimeoutException>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends Boolean>) abstractMapIteratorDecorator0);
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      TreeSet<Locale.FilteringMode> treeSet1 = new TreeSet<Locale.FilteringMode>();
      TreeSet<Locale.FilteringMode> treeSet2 = new TreeSet<Locale.FilteringMode>((SortedSet<Locale.FilteringMode>) treeSet1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) uniquePredicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      IteratorUtils.find((Iterator<Boolean>) null, (Predicate<? super Boolean>) predicate0);
      OrderedMapIterator<SQLTransactionRollbackException, Integer> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTransactionRollbackException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) mapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator1, (Iterator<? extends SQLTransientException>) orderedMapIterator1);
      IteratorUtils.find((Iterator<SQLTransientException>) zippingIterator0, (Predicate<? super SQLTransientException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      TreeSet<Locale.FilteringMode> treeSet1 = new TreeSet<Locale.FilteringMode>((SortedSet<Locale.FilteringMode>) treeSet0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      IteratorUtils.find((Iterator<Boolean>) null, (Predicate<? super Boolean>) nullIsFalsePredicate0);
      OrderedMapIterator<SQLTransactionRollbackException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) orderedMapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0);
      IteratorUtils.find((Iterator<SQLTransientException>) zippingIterator0, (Predicate<? super SQLTransientException>) nullIsFalsePredicate0);
      MapIterator<SQLRecoverableException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLRecoverableException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      TreeSet<Locale.FilteringMode> treeSet1 = new TreeSet<Locale.FilteringMode>((SortedSet<Locale.FilteringMode>) treeSet0);
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) treeSet1);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<Vector<Hashtable>>) null, (Transformer<? super Vector<Hashtable>, String>) constantTransformer0, "F4O=", "F4O=", "|UW!");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 0, mockThrowable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0, 0);
      IteratorUtils.isEmpty(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
      IfTransformer<Object, SQLClientInfoException> ifTransformer0 = new IfTransformer<Object, SQLClientInfoException>(uniquePredicate1, transformer0, transformer0);
      IfTransformer.ifTransformer((Predicate<? super Object>) uniquePredicate1, (Transformer<? super Object, ? extends SQLClientInfoException>) ifTransformer0, (Transformer<? super Object, ? extends SQLClientInfoException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator0, 61);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 61
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 4);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      OrderedMapIterator<SQLIntegrityConstraintViolationException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator0;
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[2] = (Iterator<SQLIntegrityConstraintViolationException>) orderedIterator0;
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      int int0 = 2;
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) orderedIterator0, 2);
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0, (Collection<? super SQLIntegrityConstraintViolationException>) list0);
      iteratorArray0[3] = iterator1;
      Iterator<SQLIntegrityConstraintViolationException> iterator2 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator2, 2);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Boolean, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Boolean, SQLTimeoutException>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends Boolean>) abstractMapIteratorDecorator0);
      IteratorUtils.toListIterator((Iterator<? extends Boolean>) abstractMapIteratorDecorator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      int int0 = 2589;
      int int1 = 2424;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      LinkedHashSet<SQLException> linkedHashSet1 = new LinkedHashSet<SQLException>();
      Iterator<SQLException> iterator0 = linkedHashSet1.iterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) iterator0, (long) 2589, (-1382L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("-Zm8-Y'w", "llG(");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      Transformer<Object, SQLTransientConnectionException>[] transformerArray0 = (Transformer<Object, SQLTransientConnectionException>[]) Array.newInstance(Transformer.class, 4);
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      transformerArray0[0] = transformer0;
      Transformer<Object, SQLTransientConnectionException> transformer1 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.TruePredicate");
      transformerArray0[1] = transformer1;
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 3);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class2;
      InvokerTransformer<Object, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransientConnectionException>("", classArray0, predicateArray0);
      transformerArray0[2] = (Transformer<Object, SQLTransientConnectionException>) invokerTransformer0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Cannot remove element at index {0}.");
      ConstantTransformer<Object, SQLTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLTransientConnectionException>(sQLTransientConnectionException1);
      transformerArray0[3] = (Transformer<Object, SQLTransientConnectionException>) constantTransformer0;
      SwitchTransformer<SQLException, SQLTransientConnectionException> switchTransformer0 = new SwitchTransformer<SQLException, SQLTransientConnectionException>(predicateArray0, transformerArray0, transformer1);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) switchTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'org.apache.commons.collections4.functors.TruePredicate' on 'class java.sql.SQLTransientConnectionException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) linkedHashSet0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("a");
      IteratorUtils.toString((Iterator<Vector<Hashtable>>) orderedIterator0, (Transformer<? super Vector<Hashtable>, String>) transformer0, "v_", "v_", "a");
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[7] = locale_FilteringMode7;
      IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",@ECeq(vO+(");
      iIOMetadataNode0.item(100);
      iIOMetadataNode0.setNodeValue(",@ECeq(vO+(");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS(", ", ", ");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      int[] intArray0 = new int[2];
      intArray0[0] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      Iterator<SQLException> iterator0 = linkedHashSet0.iterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0);
      Iterator<Boolean> iterator1 = EmptyIterator.emptyIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) nodeListIterator0);
      IteratorUtils.find(iterator1, (Predicate<? super Boolean>) predicate0);
      OrderedMapIterator<SQLTransactionRollbackException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) orderedMapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0, (Iterator<? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Boolean, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Boolean, SQLTimeoutException>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends Boolean>) abstractMapIteratorDecorator0);
      IteratorUtils.toListIterator((Iterator<? extends Boolean>) abstractMapIteratorDecorator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      HashMap<String, SQLNonTransientException> hashMap0 = new HashMap<String, SQLNonTransientException>();
      EntrySetMapIterator<String, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLNonTransientException>(hashMap0);
      SQLException sQLException0 = new SQLException("MAe:%\u0001Fk7", "0>T8~p<'g6");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("0>T8~p<'g6", "MAe:%\u0001Fk7", sQLException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ListIterator<Boolean> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends Boolean>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      HashMap<String, SQLNonTransientException> hashMap0 = new HashMap<String, SQLNonTransientException>();
      EntrySetMapIterator<String, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLNonTransientException>(hashMap0);
      SQLException sQLException0 = new SQLException("MAe:%\u0001Fk7", (String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "The collections must not be null", sQLException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",@ECeq(O+(");
      iIOMetadataNode0.item(100);
      iIOMetadataNode0.setNodeValue(",@ECeq(O+(");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS(", ", ", ");
      IteratorUtils.nodeListIterator(nodeList0);
      int[] intArray0 = new int[2];
      intArray0[0] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(",@ECeq(O+(", ", ", intArray0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>(2589, 2589);
      linkedHashSet0.add(batchUpdateException0);
      Predicate<SQLFeatureNotSupportedException> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) null, (Object) predicate0);
      IteratorUtils.toString((Iterator<Boolean>) null);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) vector0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      TreeSet<Locale.FilteringMode> treeSet1 = new TreeSet<Locale.FilteringMode>((SortedSet<Locale.FilteringMode>) treeSet0);
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) treeSet1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
      Iterator<SQLException> iterator0 = hashSet0.iterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) iterator0, 0L, 0L);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>(1146, 986.32965F);
      int[] intArray0 = new int[4];
      intArray0[0] = 1146;
      intArray0[1] = 1146;
      intArray0[2] = 1146;
      intArray0[3] = 1146;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("4z@o7}{Uo");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.TransformerClosure", "org.apache.commons.collections4.functors.TransformerClosure", intArray0, sQLTransientConnectionException0);
      linkedHashSet0.add(batchUpdateException0);
      IteratorUtils.singletonListIterator((HashSet<BatchUpdateException>) linkedHashSet0);
      Properties properties0 = new Properties();
      int int0 = (-2305);
      DataTruncation dataTruncation0 = new DataTruncation((-2305), false, false, 1658, 1146, sQLTransientConnectionException0);
      String string0 = "Predicate must not be null";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Predicate must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 1402);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.getIterator(transformer0);
      Comparator<SQLNonTransientException> comparator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("@r", (String) null);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@r", sQLDataException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLDataException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      Transformer<SQLException, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer<SQLException, SQLIntegrityConstraintViolationException> ifTransformer0 = new IfTransformer<SQLException, SQLIntegrityConstraintViolationException>(instanceofPredicate0, transformer0, transformer0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) ifTransformer0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLNonTransientException>) instanceofPredicate0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      NotNullPredicate.notNullPredicate();
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Object) sQLInvalidAuthorizationSpecException0);
      IteratorUtils.toString((Iterator<Boolean>) null);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) vector0);
      Stack<Properties> stack0 = new Stack<Properties>();
      ListIterator<Properties> listIterator1 = stack0.listIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      Transformer<Object, SQLClientInfoException>[] transformerArray0 = (Transformer<Object, SQLClientInfoException>[]) Array.newInstance(Transformer.class, 4);
      Transformer<Object, SQLClientInfoException> transformer1 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, SQLClientInfoException> transformer2 = ConstantTransformer.nullTransformer();
      IfTransformer<Object, SQLClientInfoException> ifTransformer1 = new IfTransformer<Object, SQLClientInfoException>(predicateArray0[0], transformer1, transformer2);
      transformerArray0[0] = (Transformer<Object, SQLClientInfoException>) ifTransformer1;
      Transformer<Object, SQLClientInfoException> transformer3 = IfTransformer.ifTransformer((Predicate<? super Object>) instanceofPredicate0, (Transformer<? super Object, ? extends SQLClientInfoException>) transformer2, (Transformer<? super Object, ? extends SQLClientInfoException>) transformerArray0[0]);
      transformerArray0[1] = transformer3;
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 4);
      Class<SQLException> class2 = SQLException.class;
      classArray0[0] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[1] = class3;
      Class<SQLException> class4 = SQLException.class;
      classArray0[2] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[3] = class5;
      InvokerTransformer<Object, SQLClientInfoException> invokerTransformer0 = new InvokerTransformer<Object, SQLClientInfoException>("x!_", classArray0, transformerArray0);
      transformerArray0[2] = (Transformer<Object, SQLClientInfoException>) invokerTransformer0;
      IfTransformer<Object, SQLClientInfoException> ifTransformer2 = new IfTransformer<Object, SQLClientInfoException>(predicateArray0[0], transformer3, transformer3);
      transformerArray0[3] = (Transformer<Object, SQLClientInfoException>) ifTransformer2;
      SwitchTransformer<Object, SQLClientInfoException> switchTransformer0 = new SwitchTransformer<Object, SQLClientInfoException>(predicateArray0, transformerArray0, transformer3);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) listIterator1, (Transformer<? super Properties, ? extends SQLClientInfoException>) switchTransformer0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",@ECeq(O+(");
      SQLDataException sQLDataException0 = new SQLDataException("z.C]5YCql-'K");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      IteratorUtils.getIterator(iIOMetadataNode1);
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("org.apache.commons.collections4.iterators.NodeListIterator");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode1, true);
      singletonIterator0.reset();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",@ECeq(vO+(");
      iIOMetadataNode0.item(100);
      iIOMetadataNode0.setNodeValue(",@ECeq(vO+(");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS(", ", ", ");
      IteratorUtils.nodeListIterator(nodeList0);
      int[] intArray0 = new int[2];
      intArray0[0] = 100;
      int int0 = 2589;
      int int1 = 2424;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      float float0 = 0.0F;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      Iterator<SQLException> iterator0 = linkedHashSet0.iterator();
      linkedHashSet0.add(batchUpdateException0);
      Iterator<SQLException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) iterator1, (long) 100, (long) 100);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("h%", sQLTransientConnectionException0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, (-1), 123);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<Vector<Hashtable>>) listIterator0, (Transformer<? super Vector<Hashtable>, String>) transformer0, "org.apache.commons.collections4.functors.NotPredicate", "org.apache.commons.collections4.functors.NotPredicate", "F4O=");
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", "");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("<O\"B4%~4jA~_FXlI", ")''-.", 1073741824, sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("<MhmwL90Iymm/au#fb", "org.apache.commons.collections4.functors.NotPredicateF4O=", 1073741824, sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("", "PzSMD|E^N", 1073741824);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("9U/rtyd'3sagrG7\"X", "%5{_kjC5", sQLSyntaxErrorException4);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("%5{_kjC5");
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 1, (-1380));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JcV!8|m)>h4-@g", "JcV!8|m)>h4-@g", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("JcV!8|m)>h4-@g", "org.apache.commons.collections4.functors.IfTransformer", 19, sQLNonTransientConnectionException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientConnectionException1);
      sQLExceptionArray0[0] = (SQLException) sQLTransientException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JcV!8|m)>h4-@g", "JcV!8|m)>h4-@g", sQLNonTransientConnectionException0);
      sQLExceptionArray0[1] = (SQLException) sQLIntegrityConstraintViolationException0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.IfTransformer", "<NwZTb2o\"&-qX", 19, hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "JcV!8|m)>h4-@g", map0);
      sQLExceptionArray0[2] = (SQLException) sQLClientInfoException1;
      DataTruncation dataTruncation0 = new DataTruncation(19, true, false, (-2481), 128);
      sQLExceptionArray0[3] = (SQLException) dataTruncation0;
      SQLException sQLException0 = new SQLException();
      sQLExceptionArray0[4] = sQLException0;
      int[] intArray0 = new int[6];
      intArray0[0] = 128;
      intArray0[1] = 19;
      intArray0[2] = 19;
      intArray0[3] = 128;
      intArray0[4] = 25;
      intArray0[5] = 128;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("transformer may not be null", intArray0, sQLExceptionArray0[0]);
      sQLExceptionArray0[5] = (SQLException) batchUpdateException0;
      SQLWarning sQLWarning0 = new SQLWarning("transformer may not be null", "JcV!8|m)>h4-@g", 51, sQLNonTransientConnectionException1);
      sQLExceptionArray0[6] = (SQLException) sQLWarning0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("JcV!8|m)>h4-@g", "T`<i6MA", 128, intArray0);
      sQLExceptionArray0[7] = (SQLException) batchUpdateException1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, 128);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      TreeSet<Locale.FilteringMode> treeSet1 = new TreeSet<Locale.FilteringMode>((SortedSet<Locale.FilteringMode>) treeSet0);
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) treeSet1);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super String>) predicate0);
      IteratorUtils.find((Iterator<Boolean>) null, (Predicate<? super Boolean>) nullIsFalsePredicate0);
      OrderedMapIterator<SQLTransactionRollbackException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) orderedMapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0);
      IteratorUtils.find((Iterator<SQLTransientException>) zippingIterator0, (Predicate<? super SQLTransientException>) nullIsFalsePredicate0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.iterators.NodeListIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap", (-5));
      IteratorUtils.getIterator("org.apache.commons.collections4.bidimap.TreeBidiMap");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("z.C]5YCql-'K");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      singletonIterator0.reset();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",@ECeq(vO+(");
      iIOMetadataNode0.item(100);
      iIOMetadataNode0.setNodeValue(",@ECeq(vO+(");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS(", ", ", ");
      IteratorUtils.nodeListIterator(nodeList0);
      int[] intArray0 = new int[2];
      intArray0[0] = 100;
      int int0 = 2424;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      Iterator<SQLException> iterator0 = linkedHashSet0.iterator();
      Iterator<SQLException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) iterator1, (long) 100, (long) 100);
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = null;
//      try {
        linkedHashSet1 = new LinkedHashSet<BatchUpdateException>(2589, 0.0F);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal load factor: 0.0
//         //
//         verifyException("java.util.HashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "", (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("", "Enumeration must not be null", 203, (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, "Enumeration must not be null", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "List must not be null", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("List must not be null", sQLDataException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator");
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("prefix may not be null", "", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("Qv*/_}W1V>43<`", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator");
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("[kn1u3`6Q.<1j;");
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("\" p", sQLNonTransientConnectionException7);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException7;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 512, (-3823));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.iterators.NodeListIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap", (-38));
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",@ECeq(O+(");
      iIOMetadataNode0.item(100);
      iIOMetadataNode0.setNodeValue(",@ECeq(O+(");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS(", ", ", ");
      IteratorUtils.nodeListIterator(nodeList0);
      int[] intArray0 = new int[2];
      intArray0[0] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(",@ECeq(O+(", ", ", intArray0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>(2589, 2589);
      linkedHashSet0.add(batchUpdateException0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      String string0 = "{FC,2Lr:";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(",@ECeq(O+(", "{FC,2Lr:", batchUpdateException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 100, 2589);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) mapIterator0);
      OrderedMapIterator<SQLException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      predicateArray0[0] = predicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3616)).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[1] = predicate1;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate1, predicate0);
      predicateArray0[2] = (Predicate<Object>) orPredicate0;
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      predicateArray0[3] = predicate2;
      orPredicate0.evaluate(predicate0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate3 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[4] = predicate3;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<SQLException>) orderedMapIterator0, (Predicate<? super SQLException>) allPredicate0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) instanceofPredicate0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.toString((Iterator<Vector<Hashtable>>) iterator0, (Transformer<? super Vector<Hashtable>, String>) transformer0, "", "Iterator must not be null", "z*0`5VP3");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 3);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?C>AUGA7Nxs,cyBc3q", "?C>AUGA7Nxs,cyBc3q", batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) singletonListIterator0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("y", batchUpdateException0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<SQLException, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.nullTransformer();
      Factory<SQLIntegrityConstraintViolationException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends SQLIntegrityConstraintViolationException>) factory0);
      IfTransformer<SQLException, SQLIntegrityConstraintViolationException> ifTransformer0 = new IfTransformer<SQLException, SQLIntegrityConstraintViolationException>(instanceofPredicate0, transformer1, transformer1);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLIntegrityConstraintViolationException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLNonTransientException>) instanceofPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("09<YT(.%y?O+Q;n", "09<YT(.%y?O+Q;n", (-1), batchUpdateException0);
      IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      NotNullPredicate.notNullPredicate();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("B", "09<YT(.%y?O+Q;n");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("?C>AUGA7Nxs,cyBc3q");
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", sQLRecoverableException0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException1;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 2, 2);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<Vector<Hashtable>>) listIterator0, (Transformer<? super Vector<Hashtable>, String>) transformer0, "org.apache.commons.collections4.functors.NotPredicate", "org.apache.commons.collections4.functors.NotPredicate", "F4O=");
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null, 93);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, Locale.FilteringMode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, Locale.FilteringMode>(orderedMapIterator0);
      MapIterator<SQLNonTransientException, Locale.FilteringMode> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientException, ? extends Locale.FilteringMode>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) mapIterator0, 0L);
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", (Throwable) null);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (-308));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      int int0 = 2;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<?>) orderedMapIterator0, (-353));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      String string0 = "The transformer to call must not be null";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("The transformer to call must not be null", "The transformer to call must not be null");
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      TreeSet<Locale.FilteringMode> treeSet1 = new TreeSet<Locale.FilteringMode>((SortedSet<Locale.FilteringMode>) treeSet0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) vector0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super String>) predicate0);
      IteratorUtils.find((Iterator<Boolean>) null, (Predicate<? super Boolean>) nullIsFalsePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Boolean, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Boolean, SQLTimeoutException>(orderedMapIterator0);
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) abstractMapIteratorDecorator0);
      Iterator<Boolean> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0);
      IteratorUtils.toListIterator((Iterator<? extends Boolean>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      HashMap<String, SQLNonTransientException> hashMap0 = new HashMap<String, SQLNonTransientException>();
      EntrySetMapIterator<String, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLNonTransientException>(hashMap0);
      String string0 = "MAe:%\\1Fk7";
      SQLException sQLException0 = new SQLException("MAe:%\u0001Fk7", "0>T8~p<'g6");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("0>T8~p<'g6", "MAe:%\u0001Fk7", sQLException0);
      IteratorUtils.asIterable((Iterator<? extends String>) entrySetMapIterator0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      // Undeclared exception!
//      try { 
        linkedList0.removeFirst();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) mapIterator0);
      OrderedMapIterator<SQLException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      predicateArray0[0] = predicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(219).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[1] = predicate1;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate1, predicate0);
      predicateArray0[2] = (Predicate<Object>) orPredicate0;
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      predicateArray0[3] = predicate2;
      orPredicate0.evaluate(predicate0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate3 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[4] = predicate3;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<SQLException>) orderedMapIterator0, (Predicate<? super SQLException>) allPredicate0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("@f");
      IteratorUtils.toString((Iterator<Vector<Hashtable>>) listIterator0, (Transformer<? super Vector<Hashtable>, String>) transformer0, "", "And", "");
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (long) 219, (long) 219);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",@ECeq(vO+(");
      iIOMetadataNode0.item(100);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer((String) null);
      IteratorUtils.toString((Iterator<Vector<Hashtable>>) zippingIterator0, (Transformer<? super Vector<Hashtable>, String>) transformer0, "<^JKD2w\"xG", "org.apache.commons.collections4.map.AbstractHashedMap$Values", "");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedMapIterator<TreeSet<SQLFeatureNotSupportedException>, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<TreeSet<SQLFeatureNotSupportedException>, Locale.FilteringMode>) orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("^y`u2R8cW}r&9RPW", "No next() entry in the iteration", (Throwable) null);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("I='OMj?YZv#0B0w$NL", "org.apache.commons.collections4.functors.TruePredicate");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("Enumeration must not be null", "PZ&Sg5V$7q1E&)Kah", 4742);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("Enumeration must not be null", "PZ&Sg5V$7q1E&)Kah", 0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("^y`u2R8cW}r&9RPW", "CaThiRq:Ajv;0", 0, sQLIntegrityConstraintViolationException3);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.NOPTransformer", "C9frjS<ZTt~JhvJ8");
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException((String) null, (String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Vector<Hashtable>>) iterator0, (Transformer<? super Vector<Hashtable>, String>) null, "I='OMj?YZv#0B0w$NL", (String) null, "Enumeration must not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 104, 104);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      ConstantTransformer.constantTransformer("");
      MapIterator<IIOMetadataNode, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0);
      IteratorUtils.skippingIterator(iterator0, 1L);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("h%", sQLTransientConnectionException0);
      SQLWarning sQLWarning0 = new SQLWarning("", sQLNonTransientConnectionException0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLWarning0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      IteratorUtils.matchesAny((Iterator<SQLException>) singletonListIterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 3);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?C>AUGA7Nxs,cyBc3q", "?C>AUGA7Nxs,cyBc3q", batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) singletonListIterator0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("y", batchUpdateException0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<SQLException, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.nullTransformer();
      Factory<SQLIntegrityConstraintViolationException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends SQLIntegrityConstraintViolationException>) factory0);
      IfTransformer<SQLException, SQLIntegrityConstraintViolationException> ifTransformer0 = new IfTransformer<SQLException, SQLIntegrityConstraintViolationException>(instanceofPredicate0, transformer1, transformer1);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLIntegrityConstraintViolationException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLNonTransientException>) instanceofPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("09<YT(.%y?O+Q;n", "09<YT(.%y?O+Q;n", (-1), batchUpdateException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      NotNullPredicate.notNullPredicate();
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Object) "09<YT(.%y?O+Q;n");
      IteratorUtils.toString((Iterator<Boolean>) null);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) vector0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?Y>AGA7Nxs,cyB>q", "?Y>AGA7Nxs,cyB>q", batchUpdateException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("?Y>AGA7Nxs,cyB>q", sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("?Y>AGA7Nxs,cyB>q");
      arrayList0.add(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, class0);
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      Properties properties0 = new Properties();
      MapIterator<SQLRecoverableException, DataTruncation> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLRecoverableException>) mapIterator1);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "org.apache.commons.collections4.list.CursorableLinkedList$Cursor", 100);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", "");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("", "4qh", 100);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      BoundedIterator<SQLTransactionRollbackException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0, 1041L);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) boundedIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) linkedHashSet0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Object object0 = new Object();
      IteratorUtils.contains((Iterator<Properties>) listIterator0, object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractMapIteratorDecorator<Boolean, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Boolean, SQLTimeoutException>(orderedMapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) abstractMapIteratorDecorator0);
      assertNotNull(enumeration0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<Boolean> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<Boolean> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Boolean>) iterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      HashMap<String, SQLNonTransientException> hashMap0 = new HashMap<String, SQLNonTransientException>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      EntrySetMapIterator<String, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLNonTransientException>(hashMap0);
      assertNotNull(entrySetMapIterator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "MAe:%\\1Fk7";
      SQLException sQLException0 = new SQLException("MAe:%\u0001Fk7", "0>T8~p<'g6");
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLException: MAe:%\u0001Fk7", sQLException0.toString());
      assertEquals("0>T8~p<'g6", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("MAe:%\u0001Fk7", sQLException0.getMessage());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("0>T8~p<'g6", "MAe:%\u0001Fk7", sQLException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLException: MAe:%\u0001Fk7", sQLException0.toString());
      assertEquals("0>T8~p<'g6", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("MAe:%\u0001Fk7", sQLException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 0>T8~p<'g6", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("MAe:%\u0001Fk7", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("0>T8~p<'g6", sQLInvalidAuthorizationSpecException0.getMessage());
      
      // Undeclared exception!
//      try { 
        entrySetMapIterator0.setValue(sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Iterator setValue() can only be called after next() and before remove()
//         //
//         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractMapIteratorDecorator<Boolean, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Boolean, SQLTimeoutException>(orderedMapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) abstractMapIteratorDecorator0);
      assertNotNull(enumeration0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<Boolean> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<Boolean> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Boolean>) iterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      HashMap<String, SQLNonTransientException> hashMap0 = new HashMap<String, SQLNonTransientException>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      EntrySetMapIterator<String, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLNonTransientException>(hashMap0);
      assertNotNull(entrySetMapIterator0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "0>T8~p<'g6";
      SQLException sQLException0 = new SQLException("MAe:%\u0001Fk7", "0>T8~p<'g6");
      assertNotNull(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: MAe:%\u0001Fk7", sQLException0.toString());
      assertEquals("MAe:%\u0001Fk7", sQLException0.getMessage());
      assertEquals("0>T8~p<'g6", sQLException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("0>T8~p<'g6", "MAe:%\u0001Fk7", sQLException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: MAe:%\u0001Fk7", sQLException0.toString());
      assertEquals("MAe:%\u0001Fk7", sQLException0.getMessage());
      assertEquals("0>T8~p<'g6", sQLException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 0>T8~p<'g6", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("MAe:%\u0001Fk7", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("0>T8~p<'g6", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      Iterable<String> iterable0 = IteratorUtils.asIterable((Iterator<? extends String>) entrySetMapIterator0);
      assertNotNull(iterable0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
//      try { 
        linkedList0.removeFirst();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<Vector<Hashtable>>) listIterator0, (Transformer<? super Vector<Hashtable>, String>) transformer0, "org.apache.commons.collections4.functors.NotPredicate", "%", "F4O=");
      assertEquals("%F4O=", string0);
      assertNotNull(string0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      OrderedMapIterator<TreeSet<SQLFeatureNotSupportedException>, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<TreeSet<SQLFeatureNotSupportedException>, Locale.FilteringMode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<TreeSet<SQLFeatureNotSupportedException>, Locale.FilteringMode>) orderedMapIterator0);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Object[] objectArray1 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("^y`u2R8cW}r&9RPW", "No next() entry in the iteration", (Throwable) null);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("No next() entry in the iteration", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ^y`u2R8cW}r&9RPW", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("^y`u2R8cW}r&9RPW", sQLIntegrityConstraintViolationException0.getMessage());
      
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("I='OMj?YZv#0B0w$NL", "org.apache.commons.collections4.functors.TruePredicate");
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertEquals("org.apache.commons.collections4.functors.TruePredicate", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: I='OMj?YZv#0B0w$NL", sQLIntegrityConstraintViolationException1.toString());
      assertEquals("I='OMj?YZv#0B0w$NL", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("Enumeration must not be null", "PZ&Sg5V$7q1E&)Kah", 4742);
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      assertNotNull(sQLIntegrityConstraintViolationException2);
      assertEquals(4742, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertEquals("Enumeration must not be null", sQLIntegrityConstraintViolationException2.getMessage());
      assertEquals("PZ&Sg5V$7q1E&)Kah", sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Enumeration must not be null", sQLIntegrityConstraintViolationException2.toString());
      
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("Enumeration must not be null", "PZ&Sg5V$7q1E&)Kah", 0);
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertNotNull(sQLIntegrityConstraintViolationException3);
      assertEquals("PZ&Sg5V$7q1E&)Kah", sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Enumeration must not be null", sQLIntegrityConstraintViolationException3.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertEquals("Enumeration must not be null", sQLIntegrityConstraintViolationException3.getMessage());
      
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("^y`u2R8cW}r&9RPW", "CaThiRq:Ajv;0", 0, sQLIntegrityConstraintViolationException3);
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException1));
      assertNotNull(sQLIntegrityConstraintViolationException4);
      assertEquals("PZ&Sg5V$7q1E&)Kah", sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Enumeration must not be null", sQLIntegrityConstraintViolationException3.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertEquals("Enumeration must not be null", sQLIntegrityConstraintViolationException3.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException4.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ^y`u2R8cW}r&9RPW", sQLIntegrityConstraintViolationException4.toString());
      assertEquals("^y`u2R8cW}r&9RPW", sQLIntegrityConstraintViolationException4.getMessage());
      assertEquals("CaThiRq:Ajv;0", sQLIntegrityConstraintViolationException4.getSQLState());
      
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException();
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException4));
      assertNotNull(sQLIntegrityConstraintViolationException5);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException5.toString());
      assertNull(sQLIntegrityConstraintViolationException5.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException5.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException5.getErrorCode());
      
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.NOPTransformer", "C9frjS<ZTt~JhvJ8");
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException1));
      assertNotNull(sQLIntegrityConstraintViolationException6);
      assertEquals("C9frjS<ZTt~JhvJ8", sQLIntegrityConstraintViolationException6.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException6.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.NOPTransformer", sQLIntegrityConstraintViolationException6.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.apache.commons.collections4.functors.NOPTransformer", sQLIntegrityConstraintViolationException6.toString());
      
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException((String) null, (String) null);
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLIntegrityConstraintViolationException7);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException7.toString());
      assertNull(sQLIntegrityConstraintViolationException7.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException7.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException7.getMessage());
      
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "Enumeration must not be null", sQLIntegrityConstraintViolationException3);
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException7));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("Enumeration must not be null", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("PZ&Sg5V$7q1E&)Kah", sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Enumeration must not be null", sQLIntegrityConstraintViolationException3.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertEquals("Enumeration must not be null", sQLIntegrityConstraintViolationException3.getMessage());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException8 = new SQLIntegrityConstraintViolationException("^y`u2R8cW}r&9RPW", "^y`u2R8cW}r&9RPW", 0, sQLNonTransientConnectionException0);
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException7));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException7));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertNotNull(sQLIntegrityConstraintViolationException8);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("Enumeration must not be null", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("^y`u2R8cW}r&9RPW", sQLIntegrityConstraintViolationException8.getMessage());
      assertEquals("^y`u2R8cW}r&9RPW", sQLIntegrityConstraintViolationException8.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ^y`u2R8cW}r&9RPW", sQLIntegrityConstraintViolationException8.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException8.getErrorCode());
      assertEquals("PZ&Sg5V$7q1E&)Kah", sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Enumeration must not be null", sQLIntegrityConstraintViolationException3.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertEquals("Enumeration must not be null", sQLIntegrityConstraintViolationException3.getMessage());
      
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException8;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 0);
      assertEquals(9, sQLIntegrityConstraintViolationExceptionArray0.length);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      assertNotNull(constantTransformer0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3667;
      intArray0[1] = 128;
      intArray0[2] = 100;
      intArray0[3] = 0;
      intArray0[4] = 0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0, sQLRecoverableException0);
      assertArrayEquals(new int[] {3667, 128, 100, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      
      Transformer<Properties, BatchUpdateException> transformer0 = ConstantTransformer.constantTransformer(batchUpdateException0);
      assertArrayEquals(new int[] {3667, 128, 100, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(transformer0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) constantTransformer0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 128, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableListIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      assertNotNull(listIterator0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Locale.FilteringMode>) listIterator0);
      assertNotNull(iterator0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      String string0 = "I_\":U4";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("I_\":U4");
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("I_\":U4", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: I_\":U4", sQLTransactionRollbackException0.toString());
      
      // Undeclared exception!
//      try { 
        sQLTransactionRollbackException0.forEach((Consumer<? super Throwable>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((LinkedHashSet<SQLNonTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("z.C]5YCql-'K", "org.apache.commons.collections4.bidimap.TreeBidiMap", (-1));
      assertNotNull(sQLNonTransientException0);
      assertEquals((-1), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: z.C]5YCql-'K", sQLNonTransientException0.toString());
      assertEquals("z.C]5YCql-'K", sQLNonTransientException0.getMessage());
      assertEquals("org.apache.commons.collections4.bidimap.TreeBidiMap", sQLNonTransientException0.getSQLState());
      
      DataTruncation dataTruncation0 = new DataTruncation(1073741824, true, true, 0, 1, sQLNonTransientException0);
      assertNotNull(dataTruncation0);
      assertEquals((-1), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: z.C]5YCql-'K", sQLNonTransientException0.toString());
      assertEquals("z.C]5YCql-'K", sQLNonTransientException0.getMessage());
      assertEquals("org.apache.commons.collections4.bidimap.TreeBidiMap", sQLNonTransientException0.getSQLState());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(dataTruncation0);
      assertNotNull(iterator0);
      assertEquals((-1), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: z.C]5YCql-'K", sQLNonTransientException0.toString());
      assertEquals("z.C]5YCql-'K", sQLNonTransientException0.getMessage());
      assertEquals("org.apache.commons.collections4.bidimap.TreeBidiMap", sQLNonTransientException0.getSQLState());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.bidimap.TreeBidiMap");
      assertNotNull(iIOMetadataNode0);
      
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      assertNotNull(singletonIterator0);
      assertTrue(singletonIterator0.hasNext());
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) singletonIterator0);
      assertNotNull(enumeration0);
      assertTrue(singletonIterator0.hasNext());
      
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertNotNull(iterator1);
      assertTrue(singletonIterator0.hasNext());
      
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator(iterator1, (long) 1);
      assertNotNull(skippingIterator0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",@ECeq(O+(");
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getPreviousSibling();
      assertNull(node0);
      
      iIOMetadataNode0.setNodeValue(",@ECeq(O+(");
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      assertNotNull(predicate0);
      
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      assertFalse(linkedList0.contains(iIOMetadataNode0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(linkedList0);
      assertFalse(linkedList0.contains(iIOMetadataNode0));
      assertNotNull(reverseListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) reverseListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      assertFalse(linkedList0.contains(iIOMetadataNode0));
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean0 = IteratorUtils.isEmpty(reverseListIterator0);
      assertFalse(linkedList0.contains(iIOMetadataNode0));
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[4];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      assertEquals(4, locale_FilteringModeArray0.length);
      assertNotNull(resettableIterator0);
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      iIOMetadataNodeArray0[4] = iIOMetadataNode1;
      iIOMetadataNodeArray0[5] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0);
      assertEquals(6, iIOMetadataNodeArray0.length);
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      StackTraceElement[] stackTraceElementArray0 = sQLInvalidAuthorizationSpecException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      MockFile mockFile0 = new MockFile("k");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("prefix may not be null", "2${S+&1?bEqX7>'k@,#", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("k", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("k", mockFile0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/experiment/k", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/experiment/k/prefix may not be null02${S+&1?bEqX7>'k@,#", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals("prefix may not be null02${S+&1?bEqX7>'k@,#", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = new Locale("2${S+&1?bEqX7>'k@,#");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("2${s+&1?beqx7>'k@,#", locale0.toString());
      assertEquals("2${s+&1?beqx7>'k@,#", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse", (Object[]) stackTraceElementArray0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(13, stackTraceElementArray0.length);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(printStream0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("k", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("k", mockFile0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/experiment/k", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/experiment/k/prefix may not be null02${S+&1?bEqX7>'k@,#", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(59L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("prefix may not be null02${S+&1?bEqX7>'k@,#", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("2${s+&1?beqx7>'k@,#", locale0.toString());
      assertEquals("2${s+&1?beqx7>'k@,#", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      sQLInvalidAuthorizationSpecException0.printStackTrace(printStream0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(13, stackTraceElementArray0.length);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("k", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("k", mockFile0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/experiment/k", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1565L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/experiment/k/prefix may not be null02${S+&1?bEqX7>'k@,#", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals("prefix may not be null02${S+&1?bEqX7>'k@,#", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("2${s+&1?beqx7>'k@,#", locale0.toString());
      assertEquals("2${s+&1?beqx7>'k@,#", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Spliterator<Throwable> spliterator0 = sQLIntegrityConstraintViolationException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      assertEquals(1, sQLInvalidAuthorizationSpecExceptionArray0.length);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Attr attr0 = iIOMetadataNode0.getAttributeNodeNS("hdL^{zh/F<rIqS%sL6Y", "hdL^{zh/F<rIqS%sL6Y");
      assertNull(attr0);
      
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.setAttributeNodeNS((Attr) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = (-581);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-581));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "";
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("");
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) resettableListIterator0, (-2732L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      assertNotNull(enumeration0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) linkedHashSet0);
      assertNotNull(iterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      int int0 = (-801);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, (-801));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -801
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      String string0 = sQLTransientConnectionException0.getLocalizedMessage();
      assertNull(string0);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 1073741824;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.bidimap.TreeBidiMap");
      assertNotNull(iIOMetadataNode0);
      
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>((SQLIntegrityConstraintViolationException) null);
      assertNotNull(singletonListIterator0);
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ml[NqbUNlquge%>", "List must not be null");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ml[NqbUNlquge%>", sQLNonTransientConnectionException0.toString());
      assertEquals("List must not be null", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("ml[NqbUNlquge%>", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("List must not be null", "ml[NqbUNlquge%>", ">6eHrg,+oxpTI: lS", 0);
      assertNotNull(stackTraceElement0);
      assertEquals("ml[NqbUNlquge%>", stackTraceElement0.getMethodName());
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertEquals("List must not be null", stackTraceElement0.getClassName());
      assertEquals("List must not be null.ml[NqbUNlquge%>(>6eHrg,+oxpTI: lS:0)", stackTraceElement0.toString());
      assertEquals(">6eHrg,+oxpTI: lS", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("ml[NqbUNlquge%>", "Cannot use setValue() when the object being set is already in the map", ">6eHrg,+oxpTI: lS", 0);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      assertEquals("ml[NqbUNlquge%>", stackTraceElement1.getClassName());
      assertEquals("Cannot use setValue() when the object being set is already in the map", stackTraceElement1.getMethodName());
      assertEquals(0, stackTraceElement1.getLineNumber());
      assertEquals("ml[NqbUNlquge%>.Cannot use setValue() when the object being set is already in the map(>6eHrg,+oxpTI: lS:0)", stackTraceElement1.toString());
      assertEquals(">6eHrg,+oxpTI: lS", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("transformer may not be null", ">6eHrg,+oxpTI: lS", "ml[NqbUNlquge%>", (-335));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertNotNull(stackTraceElement2);
      assertEquals("ml[NqbUNlquge%>", stackTraceElement2.getFileName());
      assertEquals(">6eHrg,+oxpTI: lS", stackTraceElement2.getMethodName());
      assertEquals("transformer may not be null", stackTraceElement2.getClassName());
      assertEquals((-335), stackTraceElement2.getLineNumber());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("transformer may not be null.>6eHrg,+oxpTI: lS(ml[NqbUNlquge%>)", stackTraceElement2.toString());
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("ml[NqbUNlquge%>", "=,_)e?>9<]rks!K", "ml[NqbUNlquge%>", (-1351));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement3);
      assertEquals("ml[NqbUNlquge%>", stackTraceElement3.getFileName());
      assertEquals("ml[NqbUNlquge%>.=,_)e?>9<]rks!K(ml[NqbUNlquge%>)", stackTraceElement3.toString());
      assertEquals((-1351), stackTraceElement3.getLineNumber());
      assertEquals("ml[NqbUNlquge%>", stackTraceElement3.getClassName());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("=,_)e?>9<]rks!K", stackTraceElement3.getMethodName());
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("=,_)e?>9<]rks!K", "", "e7M,#q-H:LL4z", 3);
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement4);
      assertEquals("=,_)e?>9<]rks!K.(e7M,#q-H:LL4z:3)", stackTraceElement4.toString());
      assertEquals("", stackTraceElement4.getMethodName());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertEquals("=,_)e?>9<]rks!K", stackTraceElement4.getClassName());
      assertEquals(3, stackTraceElement4.getLineNumber());
      assertEquals("e7M,#q-H:LL4z", stackTraceElement4.getFileName());
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("9(8Sa6G!9|,", ">6eHrg,+oxpTI: lS", "List must not be null", 0);
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement1));
      assertNotNull(stackTraceElement5);
      assertEquals(0, stackTraceElement5.getLineNumber());
      assertEquals("List must not be null", stackTraceElement5.getFileName());
      assertEquals("9(8Sa6G!9|,.>6eHrg,+oxpTI: lS(List must not be null:0)", stackTraceElement5.toString());
      assertEquals("9(8Sa6G!9|,", stackTraceElement5.getClassName());
      assertEquals(">6eHrg,+oxpTI: lS", stackTraceElement5.getMethodName());
      assertFalse(stackTraceElement5.isNativeMethod());
      
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      assertEquals(6, stackTraceElementArray0.length);
      assertEquals("java.sql.SQLNonTransientConnectionException: ml[NqbUNlquge%>", sQLNonTransientConnectionException0.toString());
      assertEquals("List must not be null", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("ml[NqbUNlquge%>", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      BiFunction<Object, Object, DataTruncation> biFunction0 = (BiFunction<Object, Object, DataTruncation>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = properties0.computeIfPresent(sQLNonTransientConnectionException0, biFunction0);
      assertNull(object0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("java.sql.SQLNonTransientConnectionException: ml[NqbUNlquge%>", sQLNonTransientConnectionException0.toString());
      assertEquals("List must not be null", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("ml[NqbUNlquge%>", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) properties0, 2400, 4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "WS&qlcE@\\}=U6/|uI";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("WS&qlcE@}=U6/|uI");
      assertNotNull(iIOMetadataNode0);
      
      String string1 = null;
      iIOMetadataNode0.setNodeValue((String) null);
      int int0 = (-1600);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, 0, (-1600));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) null);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      MapIterator<Predicate<SQLSyntaxErrorException>, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("Transformer must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertEquals(0, classArray0.length);
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLException>) listIterator0, (Transformer<? super SQLException, String>) transformer0);
      assertEquals(0, classArray0.length);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("~gQK#r,k':HpG?x", "<|k'");
      assertNotNull(sQLTimeoutException0);
      assertEquals("<|k'", sQLTimeoutException0.getSQLState());
      assertEquals("~gQK#r,k':HpG?x", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ~gQK#r,k':HpG?x", sQLTimeoutException0.toString());
      
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~gQK#r,k':HpG?x");
      assertFalse(boolean0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNotNull(sQLTimeoutException1);
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getMessage());
      
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("<|k'");
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertNotNull(sQLTimeoutException2);
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: <|k'", sQLTimeoutException2.toString());
      assertEquals("<|k'", sQLTimeoutException2.getMessage());
      
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("U4Mm[/-G~6\"+!jIDuF", sQLTimeoutException2);
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertNotNull(sQLTimeoutException3);
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: <|k'", sQLTimeoutException2.toString());
      assertEquals("<|k'", sQLTimeoutException2.getMessage());
      assertEquals("U4Mm[/-G~6\"+!jIDuF", sQLTimeoutException3.getMessage());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: U4Mm[/-G~6\"+!jIDuF", sQLTimeoutException3.toString());
      assertNull(sQLTimeoutException3.getSQLState());
      
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException(sQLTimeoutException3);
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException2));
      assertNotNull(sQLTimeoutException4);
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: <|k'", sQLTimeoutException2.toString());
      assertEquals("<|k'", sQLTimeoutException2.getMessage());
      assertEquals("U4Mm[/-G~6\"+!jIDuF", sQLTimeoutException3.getMessage());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: U4Mm[/-G~6\"+!jIDuF", sQLTimeoutException3.toString());
      assertNull(sQLTimeoutException3.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTimeoutException: U4Mm[/-G~6\"+!jIDuF", sQLTimeoutException4.toString());
      assertNull(sQLTimeoutException4.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: U4Mm[/-G~6\"+!jIDuF", sQLTimeoutException4.getMessage());
      assertEquals(0, sQLTimeoutException4.getErrorCode());
      
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("<|k'");
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException2));
      assertNotNull(sQLTimeoutException5);
      assertNull(sQLTimeoutException5.getSQLState());
      assertEquals("<|k'", sQLTimeoutException5.getMessage());
      assertEquals("java.sql.SQLTimeoutException: <|k'", sQLTimeoutException5.toString());
      assertEquals(0, sQLTimeoutException5.getErrorCode());
      
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("~gQK#r,k':HpG?x", "U4Mm[/-G~6\"+!jIDuF", 106);
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException4));
      assertNotNull(sQLTimeoutException6);
      assertEquals("~gQK#r,k':HpG?x", sQLTimeoutException6.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ~gQK#r,k':HpG?x", sQLTimeoutException6.toString());
      assertEquals("U4Mm[/-G~6\"+!jIDuF", sQLTimeoutException6.getSQLState());
      assertEquals(106, sQLTimeoutException6.getErrorCode());
      
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException(sQLTimeoutException6);
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException6));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException4));
      assertNotNull(sQLTimeoutException7);
      assertNull(sQLTimeoutException7.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ~gQK#r,k':HpG?x", sQLTimeoutException7.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTimeoutException: ~gQK#r,k':HpG?x", sQLTimeoutException7.toString());
      assertEquals(0, sQLTimeoutException7.getErrorCode());
      assertEquals("~gQK#r,k':HpG?x", sQLTimeoutException6.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ~gQK#r,k':HpG?x", sQLTimeoutException6.toString());
      assertEquals("U4Mm[/-G~6\"+!jIDuF", sQLTimeoutException6.getSQLState());
      assertEquals(106, sQLTimeoutException6.getErrorCode());
      
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      SQLTimeoutException sQLTimeoutException8 = new SQLTimeoutException((String) null, "~gQK#r,k':HpG?x", (-3686), sQLTimeoutException6);
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException6));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException7));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException7));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException4));
      assertNotNull(sQLTimeoutException8);
      assertNull(sQLTimeoutException8.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException8.toString());
      assertEquals("~gQK#r,k':HpG?x", sQLTimeoutException8.getSQLState());
      assertEquals((-3686), sQLTimeoutException8.getErrorCode());
      assertEquals("~gQK#r,k':HpG?x", sQLTimeoutException6.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ~gQK#r,k':HpG?x", sQLTimeoutException6.toString());
      assertEquals("U4Mm[/-G~6\"+!jIDuF", sQLTimeoutException6.getSQLState());
      assertEquals(106, sQLTimeoutException6.getErrorCode());
      
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException8;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      assertEquals(9, sQLTimeoutExceptionArray0.length);
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableListIterator0);
      assertEquals(9, sQLTimeoutExceptionArray0.length);
      assertNotNull(list0);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(list0.isEmpty());
      assertEquals(9, list0.size());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      assertEquals(1, objectArray0.length);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      ResettableListIterator<Object> resettableListIterator1 = IteratorUtils.arrayListIterator(objectArray0);
      assertNotSame(resettableListIterator1, resettableListIterator0);
      assertEquals(1, objectArray0.length);
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
      assertNotNull(resettableListIterator1);
      assertTrue(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      
      Object[] objectArray1 = IteratorUtils.toArray((Iterator<?>) resettableListIterator1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(resettableListIterator1, resettableListIterator0);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertTrue(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      int int0 = (-1738);
      ArrayListIterator<DataTruncation> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<DataTruncation>((Object) null, (-1738));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      assertNotNull(enumeration0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) linkedHashSet0);
      assertNotNull(iterator0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      assertEquals(0, objectArray0.length);
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Object[] objectArray1 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Object[] objectArray2 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertNotSame(objectArray0, objectArray2);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertNotSame(objectArray2, objectArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray2.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertNotNull(objectArray2);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      int int0 = 2;
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) orderedMapIterator0, 2);
      assertFalse(list0.contains(2));
      assertNotNull(list0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 3);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?C>AUGA7Nxs,cyBc3q", "?C>AUGA7Nxs,cyBc3q", batchUpdateException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ?C>AUGA7Nxs,cyBc3q", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("?C>AUGA7Nxs,cyBc3q", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      assertNotNull(singletonListIterator0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ?C>AUGA7Nxs,cyBc3q", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("?C>AUGA7Nxs,cyBc3q", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) singletonListIterator0;
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) singletonListIterator0, 2);
      assertTrue(list0.contains(sQLTransactionRollbackException0));
      assertNotNull(list0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ?C>AUGA7Nxs,cyBc3q", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("?C>AUGA7Nxs,cyBc3q", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) list0);
      assertTrue(list0.contains(sQLTransactionRollbackException0));
      assertNotNull(resettableIterator0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("?C>AUGA7Nxs,cyBc3q", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ?C>AUGA7Nxs,cyBc3q", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("?C>AUGA7Nxs,cyBc3q", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      OrderedMapIterator<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>(orderedMapIterator1);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0;
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      assertEquals(3, iteratorArray0.length);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 7);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      
      enumSetArray0[0] = enumSet0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode0, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(enumSet1, enumSet0);
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertEquals(2, enumSet1.size());
      
      enumSetArray0[1] = enumSet1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.of(locale_FilteringMode2, locale_FilteringMode1, locale_FilteringMode3, locale_FilteringMode4);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode4);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertSame(locale_FilteringMode2, locale_FilteringMode4);
      assertSame(locale_FilteringMode2, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode4);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode4, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode4, locale_FilteringMode3);
      assertSame(locale_FilteringMode4, locale_FilteringMode2);
      assertSame(locale_FilteringMode4, locale_FilteringMode0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertTrue(enumSet2.contains(locale_FilteringMode3));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode4));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode4));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode4.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode4.equals((Object)locale_FilteringMode3));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet0));
      assertNotNull(enumSet2);
      assertEquals(3, enumSet2.size());
      
      enumSetArray0[2] = enumSet2;
      EnumSet<Locale.FilteringMode> enumSet3 = EnumSet.of(locale_FilteringMode0);
      assertSame(locale_FilteringMode0, locale_FilteringMode4);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode3);
      assertSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet0);
      assertNotSame(enumSet3, enumSet2);
      assertTrue(enumSet3.contains(locale_FilteringMode0));
      assertFalse(enumSet3.contains(locale_FilteringMode3));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertTrue(enumSet3.equals((Object)enumSet0));
      assertFalse(enumSet3.equals((Object)enumSet1));
      assertFalse(enumSet3.equals((Object)enumSet2));
      assertNotNull(enumSet3);
      assertEquals(1, enumSet3.size());
      
      enumSetArray0[3] = enumSet3;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode6;
      locale_FilteringModeArray0[3] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode7;
      locale_FilteringModeArray0[5] = locale_FilteringMode1;
      locale_FilteringModeArray0[6] = locale_FilteringMode2;
      EnumSet<Locale.FilteringMode> enumSet4 = EnumSet.of(locale_FilteringMode1, locale_FilteringModeArray0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode5);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode4);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode6);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode7);
      assertNotSame(enumSet4, enumSet0);
      assertNotSame(enumSet4, enumSet1);
      assertNotSame(enumSet4, enumSet3);
      assertNotSame(enumSet4, enumSet2);
      assertEquals(7, locale_FilteringModeArray0.length);
      assertTrue(enumSet4.contains(locale_FilteringMode6));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode5));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode4));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode6));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode7));
      assertFalse(enumSet4.equals((Object)enumSet0));
      assertFalse(enumSet4.equals((Object)enumSet1));
      assertFalse(enumSet4.equals((Object)enumSet3));
      assertFalse(enumSet4.equals((Object)enumSet2));
      assertNotNull(enumSet4);
      assertEquals(4, enumSet4.size());
      
      enumSetArray0[4] = enumSet4;
      EnumSet<Locale.FilteringMode> enumSet5 = EnumSet.copyOf(enumSet1);
      assertSame(locale_FilteringMode0, locale_FilteringMode7);
      assertSame(locale_FilteringMode0, locale_FilteringMode4);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode3);
      assertSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode6);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode5);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode5);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode4);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode6);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode7);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet4);
      assertNotSame(enumSet1, enumSet5);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet5, enumSet4);
      assertNotSame(enumSet5, enumSet3);
      assertNotSame(enumSet5, enumSet1);
      assertNotSame(enumSet5, enumSet0);
      assertNotSame(enumSet5, enumSet2);
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertFalse(enumSet1.contains(locale_FilteringMode6));
      assertFalse(enumSet5.contains(locale_FilteringMode6));
      assertTrue(enumSet5.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode5));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode6));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode5));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode4));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode6));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode7));
      assertFalse(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet4));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(enumSet1.equals((Object)enumSet3));
      assertFalse(enumSet5.equals((Object)enumSet4));
      assertFalse(enumSet5.equals((Object)enumSet3));
      assertFalse(enumSet5.equals((Object)enumSet0));
      assertFalse(enumSet5.equals((Object)enumSet2));
      assertTrue(enumSet5.equals((Object)enumSet1));
      assertNotNull(enumSet5);
      assertEquals(2, enumSet1.size());
      assertEquals(2, enumSet5.size());
      
      enumSetArray0[5] = enumSet5;
      EnumSet<Locale.FilteringMode> enumSet6 = EnumSet.copyOf((Collection<Locale.FilteringMode>) enumSet5);
      assertSame(locale_FilteringMode0, locale_FilteringMode7);
      assertSame(locale_FilteringMode0, locale_FilteringMode4);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode3);
      assertSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode6);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode5);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode5);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode4);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode6);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode7);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet4);
      assertNotSame(enumSet1, enumSet5);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet6);
      assertNotSame(enumSet5, enumSet6);
      assertNotSame(enumSet5, enumSet4);
      assertNotSame(enumSet5, enumSet3);
      assertNotSame(enumSet5, enumSet1);
      assertNotSame(enumSet5, enumSet0);
      assertNotSame(enumSet5, enumSet2);
      assertNotSame(enumSet6, enumSet3);
      assertNotSame(enumSet6, enumSet1);
      assertNotSame(enumSet6, enumSet2);
      assertNotSame(enumSet6, enumSet0);
      assertNotSame(enumSet6, enumSet5);
      assertNotSame(enumSet6, enumSet4);
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertFalse(enumSet1.contains(locale_FilteringMode6));
      assertFalse(enumSet5.contains(locale_FilteringMode6));
      assertTrue(enumSet5.contains(locale_FilteringMode0));
      assertTrue(enumSet6.contains(locale_FilteringMode0));
      assertFalse(enumSet6.contains(locale_FilteringMode6));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode5));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode6));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode5));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode4));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode6));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode7));
      assertTrue(enumSet1.equals((Object)enumSet5));
      assertFalse(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet4));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(enumSet1.equals((Object)enumSet3));
      assertFalse(enumSet5.equals((Object)enumSet4));
      assertFalse(enumSet5.equals((Object)enumSet3));
      assertFalse(enumSet5.equals((Object)enumSet0));
      assertFalse(enumSet5.equals((Object)enumSet2));
      assertTrue(enumSet5.equals((Object)enumSet1));
      assertTrue(enumSet6.equals((Object)enumSet5));
      assertFalse(enumSet6.equals((Object)enumSet3));
      assertFalse(enumSet6.equals((Object)enumSet2));
      assertFalse(enumSet6.equals((Object)enumSet0));
      assertFalse(enumSet6.equals((Object)enumSet4));
      assertTrue(enumSet6.equals((Object)enumSet1));
      assertNotNull(enumSet6);
      assertEquals(2, enumSet1.size());
      assertEquals(2, enumSet5.size());
      assertEquals(2, enumSet6.size());
      
      enumSetArray0[6] = enumSet6;
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.arrayIterator(enumSetArray0);
      assertEquals(7, enumSetArray0.length);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      assertEquals(0, iteratorArray0.length);
      assertNotNull(zippingIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",@ECeq(vO+(");
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.item(100);
      assertNull(node0);
      
      iIOMetadataNode0.setNodeValue(",@ECeq(vO+(");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS(", ", ", ");
      assertNotNull(nodeList0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
      
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[2];
      intArray0[0] = 100;
      intArray0[1] = 2589;
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(", ", ", ", sQLDataException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: , ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(", ", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(", ", sQLInvalidAuthorizationSpecException0.getMessage());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(",@ECeq(vO+(", intArray0, sQLInvalidAuthorizationSpecException0);
      assertArrayEquals(new int[] {100, 2589}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: , ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(", ", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(", ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ,@ECeq(vO+(", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(",@ECeq(vO+(", batchUpdateException0.getMessage());
      
      // Undeclared exception!
//      try { 
        sQLInvalidAuthorizationSpecException0.initCause(batchUpdateException0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Can't overwrite cause with java.sql.BatchUpdateException: ,@ECeq(vO+(
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "List must not be null";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("List must not be null", "}D*|v,|G_p");
      assertNotNull(sQLRecoverableException0);
      assertEquals("List must not be null", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: List must not be null", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("}D*|v,|G_p", sQLRecoverableException0.getSQLState());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("h%");
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("h%", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransientConnectionException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("h%", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransientConnectionException: h%", sQLTransactionRollbackException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("h%", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransientConnectionException: h%", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      SQLWarning sQLWarning0 = new SQLWarning("%&.g6x2JITa*?=lo", sQLTransactionRollbackException0);
      assertNotNull(sQLWarning0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("h%", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransientConnectionException: h%", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLWarning: %&.g6x2JITa*?=lo", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("%&.g6x2JITa*?=lo", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLTransactionRollbackException0);
      assertNotNull(singletonListIterator0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("h%", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransientConnectionException: h%", sQLTransactionRollbackException0.toString());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      
      String string0 = sQLTransientConnectionException0.getLocalizedMessage();
      assertEquals("h%", string0);
      assertNotNull(string0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("h%", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransientConnectionException0.toString());
      
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      Predicate<String> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super String>) predicate0);
      assertNotNull(predicate1);
      
      PredicateTransformer<SQLTransactionRollbackException> predicateTransformer0 = new PredicateTransformer<SQLTransactionRollbackException>(predicate0);
      assertNotNull(predicateTransformer0);
      
      Boolean boolean0 = predicateTransformer0.transform(sQLTransactionRollbackException0);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("h%", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransientConnectionException: h%", sQLTransactionRollbackException0.toString());
      
      SingletonListIterator<Boolean> singletonListIterator1 = new SingletonListIterator<Boolean>(boolean0);
      assertNotNull(singletonListIterator1);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("h%", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransientConnectionException: h%", sQLTransactionRollbackException0.toString());
      assertEquals((-1), singletonListIterator1.previousIndex());
      assertEquals(0, singletonListIterator1.nextIndex());
      assertTrue(singletonListIterator1.hasNext());
      assertFalse(singletonListIterator1.hasPrevious());
      
      Boolean boolean1 = IteratorUtils.find((Iterator<Boolean>) singletonListIterator1, (Predicate<? super Boolean>) predicate0);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("h%", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: h%", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransientConnectionException: h%", sQLTransactionRollbackException0.toString());
      assertFalse(singletonListIterator1.hasNext());
      assertEquals(0, singletonListIterator1.previousIndex());
      assertTrue(singletonListIterator1.hasPrevious());
      assertEquals(1, singletonListIterator1.nextIndex());
      
      OrderedMapIterator<SQLTransactionRollbackException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) orderedMapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SQLTransientException sQLTransientException0 = IteratorUtils.find((Iterator<SQLTransientException>) zippingIterator0, (Predicate<? super SQLTransientException>) predicate0);
      assertNull(sQLTransientException0);
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      assertNotNull(enumeration0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      assertFalse(stack0.contains(predicate0));
      assertNotNull(predicate0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(").3[]m]0G)u?[7", ").3[]m]0G)u?[7", (-771), (Throwable) null);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals((-771), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ).3[]m]0G)u?[7", sQLFeatureNotSupportedException0.toString());
      assertEquals(").3[]m]0G)u?[7", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(").3[]m]0G)u?[7", sQLFeatureNotSupportedException0.getSQLState());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      OrderedMapIterator<String, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLWarning", sQLTransientConnectionException0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation((-1216), false, true, 2052, 1, sQLTransientConnectionException0);
      assertNotNull(dataTruncation0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLWarning", sQLTransientConnectionException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, true, true, 1, 1, dataTruncation0);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertNotNull(dataTruncation1);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLWarning", sQLTransientConnectionException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(2675, true, true, 1795, 1);
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertNotNull(dataTruncation2);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals("01004", dataTruncation2.getSQLState());
      assertEquals(0, dataTruncation2.getErrorCode());
      
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(1795, true, false, 5, 0, dataTruncation0);
      assertFalse(dataTruncation0.equals((Object)dataTruncation2));
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation3.equals((Object)dataTruncation0));
      assertFalse(dataTruncation3.equals((Object)dataTruncation1));
      assertFalse(dataTruncation3.equals((Object)dataTruncation2));
      assertNotNull(dataTruncation3);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLWarning", sQLTransientConnectionException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("22001", dataTruncation3.getSQLState());
      assertEquals("Data truncation", dataTruncation3.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation3.toString());
      assertEquals(0, dataTruncation3.getErrorCode());
      
      dataTruncationArray0[3] = dataTruncation3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-340), (-1216));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) mapIterator0);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      OrderedMapIterator<SQLException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      assertFalse(vector0.contains(predicate0));
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      assertFalse(vector0.contains(predicate0));
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      predicateArray0[4] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      assertEquals(5, predicateArray0.length);
      assertNotNull(allPredicate0);
      
      SQLException sQLException0 = IteratorUtils.find((Iterator<SQLException>) orderedMapIterator0, (Predicate<? super SQLException>) allPredicate0);
      assertEquals(5, predicateArray0.length);
      assertNull(sQLException0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[kn1u3`6Q.<1j;", "[kn1u3`6Q.<1j;", (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: [kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.getMessage());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.getSQLState());
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLDataException sQLDataException0 = new SQLDataException("Enumeration must not be null", "[kn1u3`6Q.<1j;", 203, sQLNonTransientConnectionException0);
      assertNotNull(sQLDataException0);
      assertEquals("Enumeration must not be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Enumeration must not be null", sQLDataException0.toString());
      assertEquals(203, sQLDataException0.getErrorCode());
      assertEquals("[kn1u3`6Q.<1j;", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: [kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.getMessage());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("[kn1u3`6Q.<1j;", "[kn1u3`6Q.<1j;", sQLDataException0);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("Enumeration must not be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Enumeration must not be null", sQLDataException0.toString());
      assertEquals(203, sQLDataException0.getErrorCode());
      assertEquals("[kn1u3`6Q.<1j;", sQLDataException0.getSQLState());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException1.getMessage());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: [kn1u3`6Q.<1j;", sQLNonTransientConnectionException1.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: [kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.getMessage());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.getSQLState());
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "[kn1u3`6Q.<1j;", sQLDataException0);
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertNotNull(sQLNonTransientConnectionException2);
      assertEquals("Enumeration must not be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Enumeration must not be null", sQLDataException0.toString());
      assertEquals(203, sQLDataException0.getErrorCode());
      assertEquals("[kn1u3`6Q.<1j;", sQLDataException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException2.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException2.toString());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException2.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: [kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.getMessage());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.getSQLState());
      
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException1);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertNotNull(sQLNonTransientConnectionException3);
      assertEquals("Enumeration must not be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Enumeration must not be null", sQLDataException0.toString());
      assertEquals(203, sQLDataException0.getErrorCode());
      assertEquals("[kn1u3`6Q.<1j;", sQLDataException0.getSQLState());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException1.getMessage());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: [kn1u3`6Q.<1j;", sQLNonTransientConnectionException1.toString());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException3.getMessage());
      assertNull(sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: [kn1u3`6Q.<1j;", sQLNonTransientConnectionException3.toString());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: [kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.getMessage());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.getSQLState());
      
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("Enumeration must not be null");
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException4);
      assertEquals(0, sQLNonTransientConnectionException4.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Enumeration must not be null", sQLNonTransientConnectionException4.toString());
      assertNull(sQLNonTransientConnectionException4.getSQLState());
      assertEquals("Enumeration must not be null", sQLNonTransientConnectionException4.getMessage());
      
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("[kn1u3`6Q.<1j;", "prefix may not be null", sQLNonTransientConnectionException4);
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException2));
      assertNotNull(sQLNonTransientConnectionException5);
      assertEquals(0, sQLNonTransientConnectionException4.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Enumeration must not be null", sQLNonTransientConnectionException4.toString());
      assertNull(sQLNonTransientConnectionException4.getSQLState());
      assertEquals("Enumeration must not be null", sQLNonTransientConnectionException4.getMessage());
      assertEquals(0, sQLNonTransientConnectionException5.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: [kn1u3`6Q.<1j;", sQLNonTransientConnectionException5.toString());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException5.getMessage());
      assertEquals("prefix may not be null", sQLNonTransientConnectionException5.getSQLState());
      
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.MapTransformer", "[kn1u3`6Q.<1j;");
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException3));
      assertNotNull(sQLNonTransientConnectionException6);
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException6.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.MapTransformer", sQLNonTransientConnectionException6.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.functors.MapTransformer", sQLNonTransientConnectionException6.toString());
      assertEquals(0, sQLNonTransientConnectionException6.getErrorCode());
      
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("prefix may not be null");
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException4));
      assertNotNull(sQLNonTransientConnectionException7);
      assertEquals(0, sQLNonTransientConnectionException7.getErrorCode());
      assertEquals("prefix may not be null", sQLNonTransientConnectionException7.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: prefix may not be null", sQLNonTransientConnectionException7.toString());
      assertNull(sQLNonTransientConnectionException7.getSQLState());
      
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException7));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException7));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException2));
      assertNotNull(sQLNonTransientConnectionException8);
      assertEquals("java.sql.SQLNonTransientConnectionException: [kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.getMessage());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException8.getErrorCode());
      assertEquals("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException8.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: [kn1u3`6Q.<1j;", sQLNonTransientConnectionException8.toString());
      assertNull(sQLNonTransientConnectionException8.getSQLState());
      
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException8;
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, Locale.FilteringMode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, Locale.FilteringMode>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      MapIterator<SQLNonTransientException, Locale.FilteringMode> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientException, ? extends Locale.FilteringMode>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      BoundedIterator<SQLException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLException>) mapIterator0, 0L);
      assertNotNull(boundedIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      assertNotNull(treeSet0);
      
      TreeSet<Locale.FilteringMode> treeSet1 = new TreeSet<Locale.FilteringMode>((SortedSet<Locale.FilteringMode>) treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) treeSet1);
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(resettableIterator0);
      
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      assertNotNull(nullIsFalsePredicate0);
      
      Predicate<String> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super String>) predicate0);
      assertNotNull(predicate1);
      
      Boolean boolean0 = IteratorUtils.find((Iterator<Boolean>) null, (Predicate<? super Boolean>) nullIsFalsePredicate0);
      assertNull(boolean0);
      
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      assertNotNull(enumeration0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) listIterator0);
      assertNotNull(iterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) boundedIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "org.apache.commons.collections4.list.CursorableLinkedList$Cursor", 100);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", "");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "4qh", 100);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException3;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("9He8so\"ekmP@K", sQLTransactionRollbackException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("_0", "4qh", sQLTransactionRollbackException1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", "org.apache.commons.collections4.functors.MapTransformer");
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.MapTransformer");
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("oV#\"#P", sQLTransactionRollbackException3);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 100, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) mapIterator0);
      OrderedMapIterator<SQLException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      predicateArray0[0] = predicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[1] = predicate1;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate1, predicate0);
      predicateArray0[2] = (Predicate<Object>) orPredicate0;
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      predicateArray0[3] = predicate2;
      orPredicate0.evaluate(predicate0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate3 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[4] = predicate3;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<SQLException>) orderedMapIterator0, (Predicate<? super SQLException>) allPredicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[kn1u3`6Q.<1j;", "[kn1u3`6Q.<1j;", (Throwable) null);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLDataException sQLDataException0 = new SQLDataException("Enumeration must not be null", "[kn1u3`6Q.<1j;", 203, sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("[kn1u3`6Q.<1j;", "[kn1u3`6Q.<1j;", sQLDataException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "[kn1u3`6Q.<1j;", sQLDataException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("Enumeration must not be null");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("[kn1u3`6Q.<1j;", "prefix may not be null", sQLNonTransientConnectionException4);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.MapTransformer", "[kn1u3`6Q.<1j;");
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("prefix may not be null");
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("[kn1u3`6Q.<1j;", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 203, 203);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 100;
      Integer integer0 = new Integer(100);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(125);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(125);
      integerArray0[2] = integer2;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(integerArray0, int0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      IteratorUtils.singletonIterator(sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("*6 WNKEw*j=GY_@g", "*6 WNKEw*j=GY_@g");
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      ArrayIterator<Properties> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<Properties>(sQLFeatureNotSupportedException0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeValue();
      IteratorUtils.singletonIterator(iIOMetadataNode0);
      HashMap<Object, HashSet<IIOMetadataNode>> hashMap0 = new HashMap<Object, HashSet<IIOMetadataNode>>();
      EntrySetMapIterator<Object, HashSet<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<Object, HashSet<IIOMetadataNode>>(hashMap0);
      // Undeclared exception!
//      try { 
        entrySetMapIterator0.getKey();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Iterator getKey() can only be called after next() and before remove()
//         //
//         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      arrayList0.add(sQLInvalidAuthorizationSpecException0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      assertTrue(resettableListIterator0.hasPrevious());
  }
}
