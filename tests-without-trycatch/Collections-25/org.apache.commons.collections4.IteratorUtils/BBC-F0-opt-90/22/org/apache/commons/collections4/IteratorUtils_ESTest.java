/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 09:06:36 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("qX", "Closure must not be null");
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) resettableListIterator0, (Iterator<? extends SQLRecoverableException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("[GfWDi9~");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[GfWDi9~", sQLTransientException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      ListIterator<SQLSyntaxErrorException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertTrue(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0, class0);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) resettableListIterator0);
      ListIterator<Object> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MapIterator<Iterator<HashSet<SQLDataException>>, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLFeatureNotSupportedException>(orderedMapIterator0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) abstractMapIteratorDecorator0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 2);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableIterator0;
      iteratorArray0[1] = iteratorArray0[0];
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 1);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0, 1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 3);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<?>) null, (Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.Category>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Boolean>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) singletonIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(arrayDeque0);
      Iterator<Object> iterator0 = IteratorUtils.peekingIterator((Iterator<?>) loopingIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Object, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(23, true, true, 23, (-229));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(dataTruncation0);
      Transformer<SQLException, SQLSyntaxErrorException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("y@o");
      arrayDeque0.add(stringTokenizer0);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(arrayDeque0);
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) singletonListIterator0, (Iterator<? extends StringTokenizer>) loopingIterator0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<StringTokenizer>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 21);
      InvokerTransformer<Object, SQLSyntaxErrorException> invokerTransformer0 = new InvokerTransformer<Object, SQLSyntaxErrorException>((String) null, classArray0, classArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLException sQLException0 = new SQLException("Initial capacity must be a non negative number");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("W3J*OYd>iNN.am", sQLException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorExceptionArray0[0];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) list0);
      SkippingIterator<SQLSyntaxErrorException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) resettableIterator1, (long) 25);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("iterator");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) skippingIterator0, (Predicate<? super SQLSyntaxErrorException>) transformerPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.sql.SQLException$1 cannot be cast to java.lang.Boolean
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("y@o");
      arrayDeque0.add(stringTokenizer0);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(arrayDeque0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) loopingIterator0, 112);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("'Ped:yn", "'Ped:yn");
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Transformer<SQLSyntaxErrorException, SQLSyntaxErrorException> transformer0 = ClosureTransformer.closureTransformer((Closure<? super SQLSyntaxErrorException>) closure0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("}`");
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      arrayDeque0.add(stringTokenizer0);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(arrayDeque0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Q+7S", (Throwable) null);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 8);
      Transformer<SQLNonTransientException, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("Q+7S", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) listIteratorWrapper0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'Q+7S' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("} Y", "} Y");
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      arrayDeque0.add(stringTokenizer0);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(arrayDeque0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("} Y");
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      arrayDeque0.add(stringTokenizer0);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(arrayDeque0);
      arrayDeque0.add(stringTokenizer0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) loopingIterator0, class0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayDeque$DeqIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      Transformer<Object, EnumSet<Locale.Category>> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.objectGraphIterator(enumSet0, (Transformer<? super EnumSet<Locale.Category>, ? extends EnumSet<Locale.Category>>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[9];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, IIOMetadataNode>(orderedMapIterator0);
      AbstractMapIteratorDecorator<BatchUpdateException, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, IIOMetadataNode>(abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) abstractMapIteratorDecorator0, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      Transformer<Object, EnumSet<Locale.Category>> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.objectGraphIterator(enumSet0, (Transformer<? super EnumSet<Locale.Category>, ? extends EnumSet<Locale.Category>>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.size(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[", sQLDataException0);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      stack0.add(sQLFeatureNotSupportedException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) stack0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      OnePredicate<SQLTimeoutException> onePredicate0 = new OnePredicate<SQLTimeoutException>((Predicate<? super SQLTimeoutException>[]) null);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) onePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.size(iterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      Transformer<Object, EnumSet<Locale.Category>> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.objectGraphIterator(enumSet0, (Transformer<? super EnumSet<Locale.Category>, ? extends EnumSet<Locale.Category>>) transformer0);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_Category1, defaultEquator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super EnumSet<Locale.Category>>) equalPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("y@o");
      arrayDeque0.add(stringTokenizer0);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(arrayDeque0);
      // Undeclared exception!
      IteratorUtils.get((Iterator<StringTokenizer>) loopingIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("}`");
      arrayDeque0.add(stringTokenizer0);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(arrayDeque0);
      arrayDeque0.add(stringTokenizer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) loopingIterator0, 1913);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayDeque$DeqIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) null, 533);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) orderedIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, Hashtable<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (-2883L), (-3179L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) objectArrayListIterator0, (-1241L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[4];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(stringTokenizerArray0, 0, (-1406));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, (-3700), 44);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLInvalidAuthorizationSpecException[]) null, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(stringArray0, (-1153));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "0");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, 29, 691);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("}`");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null, 4750, 4750);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransientExceptionArray0, 0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(objectArray0, (-658), 14);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Predicate<SQLInvalidAuthorizationSpecException>[] predicateArray0 = (Predicate<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Predicate.class, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(predicateArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) listIterator0, 1326, 1256);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0, (-539));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", batchUpdateException0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("Entry does not exist: ");
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(uniquePredicate0, closure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLSyntaxErrorException>) ifClosure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'Entry does not exist: ' on 'class java.sql.SQLSyntaxErrorException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, chainedClosure0, chainedClosure0);
      closureArray0[0] = (Closure<Object>) ifClosure0;
      closureArray0[1] = (Closure<Object>) chainedClosure0;
      closureArray0[2] = closureArray0[1];
      Closure<SQLSyntaxErrorException> closure0 = ChainedClosure.chainedClosure((Closure<? super SQLSyntaxErrorException>[]) closureArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Closure<? super SQLSyntaxErrorException>) closure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>(10);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableListIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "", "", "");
      assertEquals("nullnull", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>(9);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedMapIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "zi~l'Y6,D.j3u", "zi~l'Y6,D.j3u", "");
      assertEquals("zi~l'Y6,D.j3u", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_Category0, defaultEquator0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<EnumSet<Locale.Category>>) singletonListIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("Iterator getValue() can only be called after next() and before remove()", "jBgO0'H=4mpW1");
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      arrayDeque0.add(stringTokenizer0);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(arrayDeque0);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) loopingIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("Iterator ");
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<Object>) listIterator0, (Predicate<? super Object>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(linkedList0);
      BoundedIterator<SQLTransactionRollbackException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) loopingListIterator0, 1L, 1L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ConstantTransformer<SQLWarning, String> constantTransformer0 = new ConstantTransformer<SQLWarning, String>("");
      String string0 = IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) constantTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>(1814);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      MapIterator<SQLRecoverableException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "No element at index ", "org.apache.commons.collections4.iterators.UnmodifiableListIterator", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MapIterator<String, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<Locale>[] classArray0 = (Class<Locale>[]) Array.newInstance(Class.class, 7);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) mapIterator0, (Transformer<? super String, String>) transformer0, "~YJDZN'\u0002=-`t^", (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>((SQLFeatureNotSupportedException) null, false);
      Transformer<SQLNonTransientException, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, (String) null, (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableIterator0, (Transformer<? super SQLRecoverableException, String>) null, "o4b-~8b<bKJ4EJF", "transformer may not be null", "transformer may not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("y@o");
      arrayDeque0.add(stringTokenizer0);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(arrayDeque0);
      StringTokenizer stringTokenizer1 = IteratorUtils.get((Iterator<StringTokenizer>) loopingIterator0, 112);
      assertEquals(1, stringTokenizer1.countTokens());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) singletonListIterator0, 1961);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1960
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("[GfWDi9~");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[GfWDi9~", sQLTransientException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) null);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.emptyIterator();
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) resettableIterator1, (Iterator<?>) resettableIterator0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Object>) zippingIterator0, (Predicate<? super Object>) predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) null);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.emptyIterator();
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) resettableIterator1, (Iterator<?>) resettableIterator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Object>) zippingIterator0, (Predicate<? super Object>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) properties0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Closure<Object>>) null, (Predicate<? super Closure<Object>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Object) sQLIntegrityConstraintViolationExceptionArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Transformer<Object, SQLTransactionRollbackException>>) null, (Predicate<? super Transformer<Object, SQLTransactionRollbackException>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.Category>, Predicate<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<EnumSet<Locale.Category>>) orderedMapIterator0, (Predicate<? super EnumSet<Locale.Category>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ListIterator<ArrayList<SQLTimeoutException>> listIterator0 = IteratorUtils.singletonListIterator(arrayList0);
      ArrayList<SQLTimeoutException> arrayList1 = IteratorUtils.find((Iterator<ArrayList<SQLTimeoutException>>) listIterator0, (Predicate<? super ArrayList<SQLTimeoutException>>) uniquePredicate0);
      assertNotNull(arrayList1);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Predicate<SQLFeatureNotSupportedException> predicate0 = ExceptionPredicate.exceptionPredicate();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertNull(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedMapIterator<ArrayList<SQLTimeoutException>, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<ArrayList<SQLTimeoutException>>) orderedMapIterator0, (Predicate<? super ArrayList<SQLTimeoutException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ListIterator<ArrayList<SQLTimeoutException>> listIterator0 = IteratorUtils.singletonListIterator(arrayList0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find((Iterator<ArrayList<SQLTimeoutException>>) listIterator0, (Predicate<? super ArrayList<SQLTimeoutException>>) instanceofPredicate0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) orderedMapIterator0, (Closure<? super SQLSyntaxErrorException>) closure0);
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) null, (Closure<? super SQLSyntaxErrorException>) closure0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 2005, sQLWarning0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) listIterator0, (Closure<? super SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("}`");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~}x3Y8j%<n", "qSfo]#EYbrzTl", 0, sQLTransientException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[9];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null, 1873);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Class<SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, class0);
      assertEquals(0, sQLTransactionRollbackExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(arrayDeque0);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) loopingIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("Iterator ");
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) listIterator0, (Predicate<? super Object>) identityPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MapIterator<ClientInfoStatus, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<ClientInfoStatus, Properties> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<ClientInfoStatus, Properties>(mapIterator0);
      Iterable<ClientInfoStatus> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends ClientInfoStatus>) abstractMapIteratorDecorator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterable<Object> iterable0 = IteratorUtils.asIterable((Iterator<?>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) singletonListIterator0);
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) vector0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null, (Collection<? super SQLNonTransientException>) vector0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("W/1lVBB(1`ytM&we'a");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(22, false, false, 22, 22);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0, 460);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("V3Zo5gs2(uQkL?i>^6Q", " lMrx=H` qsJTp4S+X", (-1));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLNonTransientException0, comparator0, comparatorPredicate_Criterion0);
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(comparatorPredicate0, closure0);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<DataTruncation>) resettableListIterator0, (Closure<? super DataTruncation>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) listIteratorWrapper0, (Predicate<? super SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(linkedList0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) loopingListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      loopingListIterator0.add(sQLTransactionRollbackException0);
      // Undeclared exception!
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, 1L, 1L);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("=}{/p>T({1su", "=}{/p>T({1su");
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLDataException0, defaultEquator0);
      Predicate<SQLException> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) equalPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) iterator0, (Transformer<? super DataTruncation, ? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Transformer<DataTruncation, SQLSyntaxErrorException> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) null, (Transformer<? super DataTruncation, ? extends SQLSyntaxErrorException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Transformer<Object, StringTokenizer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) objectArrayListIterator0, (Transformer<? super SQLNonTransientException, ? extends StringTokenizer>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 44);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) resettableIterator0, (Iterator<? extends StringTokenizer>) resettableIterator0, (Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 715, 61);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null, (-691));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MapIterator<DataTruncation, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLDataException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(arrayDeque0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) loopingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>) singletonIterator0, (Iterator<? extends IIOMetadataNode>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Locale.LanguageRange[]) null, 1535, 1056);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0, 0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MapIterator<String, TreeSet<SQLClientInfoException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<String, TreeSet<SQLClientInfoException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, TreeSet<SQLClientInfoException>>(mapIterator0);
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) abstractMapIteratorDecorator0, (long) 1913);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MapIterator<ArrayList<SQLTimeoutException>, EnumSet<Locale.Category>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1085), 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Object) sQLIntegrityConstraintViolationException0);
      assertFalse(objectArrayIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 42);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>((Factory<? extends String>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) listIterator0, (Transformer<? super SQLTransientConnectionException, String>) factoryTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }
}
