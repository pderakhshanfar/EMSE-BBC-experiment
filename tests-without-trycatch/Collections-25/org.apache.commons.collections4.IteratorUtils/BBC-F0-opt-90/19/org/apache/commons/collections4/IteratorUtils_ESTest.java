/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 05:06:08 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLDataException>) resettableListIterator0, 2143);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2143
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("]", "]", 1244);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("]", ".2XMb5CyEA ", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException(".2XMb5CyEA ", ".2XMb5CyEA ", 4);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      int int0 = (-3896);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 4, (-3896));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("U m_[)`g*(j5-xK", "U m_[)`g*(j5-xK", (-1395));
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 3);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      InvokerTransformer<SQLException, DataTruncation> invokerTransformer0 = new InvokerTransformer<SQLException, DataTruncation>("U m_[)`g*(j5-xK", classArray0, classArray0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.objectGraphIterator(sQLWarning0, (Transformer<? super SQLWarning, ? extends SQLWarning>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'U m_[)`g*(j5-xK' on 'class java.sql.SQLWarning' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[27];
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      IteratorUtils.get((Iterator<SQLDataException>) resettableIterator0, 18);
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLDataException>) resettableIterator0, (Closure<? super SQLDataException>) closure0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<Integer, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<Integer>) mapIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("&7z;", sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("&7z;", sQLFeatureNotSupportedException0);
      vector0.add(sQLTimeoutException0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) vector0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLTimeoutException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      String string0 = "org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator";
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator");
      SQLDataException sQLDataException1 = new SQLDataException("org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      sQLDataExceptionArray0[0] = sQLDataException1;
      sQLDataExceptionArray0[1] = sQLDataException1;
      sQLDataExceptionArray0[2] = sQLDataException1;
      sQLDataExceptionArray0[3] = sQLDataException1;
      sQLDataExceptionArray0[4] = sQLDataException0;
      sQLDataExceptionArray0[5] = sQLDataException1;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator");
      Iterator<SQLDataException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Transformer<? super SQLNonTransientException, ? extends SQLDataException>) transformer0);
      int int0 = 8;
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 8);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator' on 'class java.sql.SQLDataException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Iterator<Integer> iterator0 = stack0.iterator();
      Integer integer0 = new Integer(3148);
      stack0.add(integer0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Node must not be null", "Node must not be null");
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[19];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      IteratorUtils.get((Iterator<SQLDataException>) resettableIterator0, 8);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) iterator0, class0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("1Q", "F2E<S}{=w+s", true);
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.singletonIterator(stringTokenizer0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("1Q");
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      closureArray0[0] = (Closure<Object>) chainedClosure0;
      ForClosure<Object> forClosure0 = new ForClosure<Object>(10, chainedClosure0);
      closureArray0[1] = (Closure<Object>) forClosure0;
      ForClosure<Object> forClosure1 = new ForClosure<Object>(5, closureArray0[1]);
      closureArray0[2] = (Closure<Object>) forClosure1;
      HashSet<Closure<Object>> hashSet0 = new HashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) hashSet0);
      closureArray0[3] = closure0;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(identityPredicate0, closureArray0[0], closureArray0[2]);
      closureArray0[4] = (Closure<Object>) ifClosure0;
      Closure<Object> closure1 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      WhileClosure<StringTokenizer> whileClosure0 = new WhileClosure<StringTokenizer>(identityPredicate0, closure1, true);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<StringTokenizer>) resettableIterator0, (Closure<? super StringTokenizer>) whileClosure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) orderedIterator0, (Class<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.iterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[19];
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      IteratorUtils.get((Iterator<SQLDataException>) resettableIterator0, 8);
      Stack<StringTokenizer> stack1 = new Stack<StringTokenizer>();
      ListIterator<Vector<StringTokenizer>> listIterator0 = IteratorUtils.singletonListIterator((Vector<StringTokenizer>) stack1);
      IteratorUtils.contains((Iterator<Vector<StringTokenizer>>) listIterator0, (Object) stack1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode.values();
      IteratorUtils.getIterator(locale_FilteringMode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Boolean[]) null, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.iterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Node must not be null", "Node must not be null");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[19];
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      IteratorUtils.get((Iterator<SQLDataException>) resettableIterator0, 8);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIterator<Hashtable<SQLTimeoutException, Properties>> listIterator0 = IteratorUtils.singletonListIterator((Hashtable<SQLTimeoutException, Properties>) null);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = ForClosure.forClosure((-2726), (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<Hashtable<SQLTimeoutException, Properties>>) listIterator0, (Closure<? super Hashtable<SQLTimeoutException, Properties>>) closure1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "'M=&mO");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      SQLDataException sQLDataException0 = new SQLDataException("", "", 1, sQLRecoverableException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("'M=&mO", "B)8+a+$|HQ/}*~icx", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException();
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("'M=&mO", sQLDataException0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("'M=&mO", "Node must not be null", sQLDataException2);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException();
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("B)8+a+$|HQ/}*~icx", "Node must not be null");
      SQLDataException sQLDataException6 = new SQLDataException("'M=&mO", "B)8+a+$|HQ/}*~icx", sQLIntegrityConstraintViolationException0);
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException();
      sQLDataExceptionArray0[7] = sQLDataException7;
      SQLDataException sQLDataException8 = new SQLDataException("e>AoUty:rhIQ=", "e>AoUty:rhIQ=", 8);
      sQLDataExceptionArray0[8] = sQLDataException8;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      IteratorUtils.get((Iterator<SQLDataException>) resettableIterator0, 8);
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      int[] intArray0 = new int[3];
      intArray0[0] = (-1327);
      intArray0[1] = (-5);
      intArray0[2] = (-1327);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Enumeration must not be null");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("]hKbqh<hX*P{|}", "q0t$wP.9>#h", (-1327), intArray0, sQLRecoverableException0);
      SQLException sQLException0 = new SQLException("prefix may not be null", "]hKbqh<hX*P{|}", batchUpdateException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("q0t$wP.9>#h", "prefix may not be null", sQLException0);
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      batchUpdateException0.printStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("q0t$wP.9>#h", "Nk{&bd");
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      int int0 = 100;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("my$?dFLp*sCrgBkv", "prefix may not be null", 100);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("W^<4L6j");
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 7);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[2] = class2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      classArray0[3] = class3;
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      classArray0[4] = class4;
      Class<IIOMetadataNode> class5 = IIOMetadataNode.class;
      classArray0[5] = class5;
      Class<IIOMetadataNode> class6 = IIOMetadataNode.class;
      classArray0[6] = class6;
      InvokerTransformer<Object, SQLException> invokerTransformer0 = new InvokerTransformer<Object, SQLException>((String) null, classArray0, classArray0);
      Iterator<Object> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, ?>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Class<Object> class0 = Object.class;
      Integer[] integerArray0 = new Integer[0];
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0, 0, 0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Hashtable<SQLTimeoutException, Properties> hashtable0 = new Hashtable<SQLTimeoutException, Properties>();
      ListIterator<Hashtable<SQLTimeoutException, Properties>> listIterator0 = IteratorUtils.singletonListIterator(hashtable0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = ForClosure.forClosure(512, (Closure<? super Object>) closure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Hashtable<SQLTimeoutException, Properties>>) listIterator0, (Closure<? super Hashtable<SQLTimeoutException, Properties>>) closure1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      IteratorUtils.emptyIterator();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) null, 2511);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Node must not be null", "", 2);
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      SQLDataException sQLDataException1 = new SQLDataException("org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("ListIterator must not be null");
      IteratorUtils.toString((Iterator<PriorityQueue<SQLInvalidAuthorizationSpecException>>) null, (Transformer<? super PriorityQueue<SQLInvalidAuthorizationSpecException>, String>) constantTransformer0, "ListIterator must not be null", "ListIterator must not be null", "n:(!T");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ResettableIterator<Hashtable<SQLTimeoutException, Properties>> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Hashtable<SQLTimeoutException, Properties>>) resettableIterator0, (Closure<? super Hashtable<SQLTimeoutException, Properties>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.iterator();
      ResettableListIterator<PriorityQueue<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Vector<Closure<Object>> vector1 = new Vector<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) vector1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      WhileClosure.whileClosure((Predicate<? super Object>) uniquePredicate0, (Closure<? super Object>) closure0, false);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0, class0);
      SQLDataException sQLDataException0 = new SQLDataException("c%H2", (String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("c%H2", "Node must not be null", 8);
      SQLDataException sQLDataException1 = new SQLDataException("SjDWs8/pH~", (String) null, sQLDataException0);
      SQLDataException sQLDataException2 = new SQLDataException("SjDWs8/pH~", (String) null);
      SQLDataException sQLDataException3 = new SQLDataException(sQLDataException1);
      SQLDataException sQLDataException4 = new SQLDataException("org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator");
      SQLDataException sQLDataException5 = new SQLDataException("org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[17];
      sQLDataExceptionArray0[0] = sQLDataException5;
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException2;
      sQLDataExceptionArray0[3] = sQLDataException0;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      IteratorUtils.get((Iterator<SQLDataException>) resettableIterator0, 8);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.iterator();
      ResettableListIterator<PriorityQueue<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Vector<Closure<Object>> vector1 = new Vector<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) vector1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      WhileClosure.whileClosure((Predicate<? super Object>) uniquePredicate0, (Closure<? super Object>) closure0, false);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0, class0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException0 = new SQLDataException("c%H2", "c%H2");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Node must not be null", "org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", 8);
      SQLDataException sQLDataException1 = new SQLDataException("org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse", sQLRecoverableException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("", "delimiter may not be null");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(sQLDataException2);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("0dT0t~7");
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("");
      sQLDataExceptionArray0[5] = sQLDataException5;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLDataException>) resettableIterator0, 2530);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2524
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("^|vy\"V9>Q2M:e", "X[+*gx.T,qb&A,", 27);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("^|vy\"V9>Q2M:e", (String) null, sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", (String) null, 27, sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException((String) null);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("[H<5k");
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("", "[");
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) linkedHashSet0);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("|,o+q!:WL");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLTransientException, String>) transformer0, "The predicate collection must not contain a null predicate, index ", "X[+*gx.T,qb&A,", "%xF:J%(,CDzPX");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '|,o+q!:WL' on 'class java.sql.SQLTransientConnectionException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 5);
      Class<SQLWarning> class0 = SQLWarning.class;
      classArray0[0] = class0;
      Class<SQLWarning> class1 = SQLWarning.class;
      classArray0[1] = class1;
      Class<SQLWarning> class2 = SQLWarning.class;
      classArray0[2] = class2;
      Class<SQLWarning> class3 = SQLWarning.class;
      classArray0[3] = class3;
      Class<SQLWarning> class4 = SQLWarning.class;
      classArray0[4] = class4;
      InvokerTransformer<SQLException, Properties> invokerTransformer0 = new InvokerTransformer<SQLException, Properties>("]", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) null, (Transformer<? super SQLWarning, ? extends Properties>) invokerTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.load(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      IteratorUtils.matchesAny((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) null, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) andPredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("u", "u");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Class<Object> class0 = Object.class;
      int[] intArray0 = new int[7];
      intArray0[0] = 5436;
      intArray0[1] = (-434);
      intArray0[2] = 2110;
      intArray0[3] = 10;
      intArray0[4] = 790;
      intArray0[5] = 1;
      intArray0[6] = (-3053);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("' out of bounds for size '", "", intArray0);
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.BatchUpdateException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 2110, 2110);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector<ArrayDeque<SQLRecoverableException>> vector0 = new Vector<ArrayDeque<SQLRecoverableException>>();
      ReverseListIterator<ArrayDeque<SQLRecoverableException>> reverseListIterator0 = new ReverseListIterator<ArrayDeque<SQLRecoverableException>>(vector0);
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      vector0.add(arrayDeque0);
      reverseListIterator0.previousIndex();
      IteratorUtils.unmodifiableListIterator((ListIterator<ArrayDeque<SQLRecoverableException>>) reverseListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Class<SQLWarning> class1 = SQLWarning.class;
      ServiceLoader.loadInstalled(class1);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      SingletonIterator<PriorityQueue<SQLInvalidAuthorizationSpecException>> singletonIterator1 = new SingletonIterator<PriorityQueue<SQLInvalidAuthorizationSpecException>>(priorityQueue0, false);
      IteratorUtils.toString((Iterator<PriorityQueue<SQLInvalidAuthorizationSpecException>>) singletonIterator1, (Transformer<? super PriorityQueue<SQLInvalidAuthorizationSpecException>, String>) constantTransformer0, "", "", "");
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.iterator();
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
      EmptyListIterator.resettableEmptyListIterator();
      Vector<Closure<Object>> vector1 = new Vector<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) vector1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) closure0, true);
      ResettableIterator<Hashtable<SQLTimeoutException, Properties>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.apply((Iterator<Hashtable<SQLTimeoutException, Properties>>) resettableIterator0, (Closure<? super Hashtable<SQLTimeoutException, Properties>>) closure1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, LinkedList<InstanceofPredicate>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("List must not be null", "List must not be null", true);
      IteratorUtils.singletonIterator(stringTokenizer0);
      FactoryTransformer<StringTokenizer, DataTruncation> factoryTransformer0 = new FactoryTransformer<StringTokenizer, DataTruncation>((Factory<? extends DataTruncation>) null);
      IteratorUtils.emptyOrderedIterator();
      MapIterator<InstanceofPredicate, EnumSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<InstanceofPredicate, EnumSet<Locale.FilteringMode>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<InstanceofPredicate, EnumSet<Locale.FilteringMode>>(mapIterator0);
      MapIterator<InstanceofPredicate, EnumSet<Locale.FilteringMode>> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends InstanceofPredicate, ? extends EnumSet<Locale.FilteringMode>>) abstractMapIteratorDecorator0);
      IteratorUtils.asIterable((Iterator<? extends Predicate<Object>>) mapIterator1);
      Iterator<SQLException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLException>) orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate2);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate3 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      predicateArray0[1] = predicate3;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) nonePredicate0);
      IteratorUtils.contains(iterator0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) listIteratorWrapper0;
      iteratorArray0[3] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      iteratorArray0[4] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      iteratorArray0[5] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      iteratorArray0[6] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      iteratorArray0[7] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.objectGraphIterator((Predicate<Object>) uniquePredicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) null);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.load(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      NullPredicate.nullPredicate();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) singletonIterator0, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.emptyMapIterator();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.objectGraphIterator((Predicate<Object>) uniquePredicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) null);
      IteratorUtils.find(iterator0, (Predicate<? super Predicate<Object>>) uniquePredicate0);
      IteratorUtils.emptyIterator();
      ArrayList<Closure<Object>> arrayList0 = new ArrayList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayList0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) uniquePredicate0, (Closure<? super Object>) closure0, true);
      IteratorUtils.apply((Iterator<Hashtable<SQLTimeoutException, Properties>>) null, (Closure<? super Hashtable<SQLTimeoutException, Properties>>) closure1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, LinkedList<InstanceofPredicate>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0, class0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("43EMp5//}2=1St", "43EMp5//}2=1St", 31);
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Object) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FalsePredicate.falsePredicate();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonListIterator0);
      Class<Object> class1 = Object.class;
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0, class1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("r=?4+=foM");
      MapIterator<EnumSet<Locale.FilteringMode>, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asIterable((Iterator<? extends EnumSet<Locale.FilteringMode>>) mapIterator0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FalsePredicate.falsePredicate();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) arrayDeque0);
      MapIterator<SQLDataException, Hashtable<Hashtable, SQLException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) singletonIterator0, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) predicate0);
      ListIterator<Locale.FilteringMode> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) null, (Collection<? super InstanceofPredicate>) hashSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      int int0 = 4;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("u#d+}E>{5!p", "", 4, hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", map0, sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.emptyListIterator();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, uniquePredicate0);
      EmptyListIterator.emptyListIterator();
      ListIterator<Locale.FilteringMode> listIterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) null, (Predicate<? super Locale.FilteringMode>) uniquePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer((Boolean) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.objectGraphIterator((Predicate<Object>) transformerPredicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Predicate<Object>>) transformerPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Transformer must return an instanceof Boolean, it was a null object
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<PriorityQueue<SQLInvalidAuthorizationSpecException>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.objectGraphIterator(predicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) null);
      IteratorUtils.find(iterator0, (Predicate<? super Predicate<Object>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>((InstanceofPredicate) null);
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) singletonListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<SQLNonTransientException, Iterator<SQLTimeoutException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, InstanceofPredicate> transformer0 = ConstantTransformer.constantTransformer(instanceofPredicate0);
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.objectGraphIterator((Predicate<Object>) null, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Predicate<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      ResettableIterator<ServiceLoader<SQLNonTransientConnectionException>> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) resettableIterator0, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>((InstanceofPredicate) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Integer integer0 = new Integer(100);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      MapIterator<EnumSet<Locale.FilteringMode>, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) linkedList0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      Hashtable<Object, DataTruncation> hashtable0 = new Hashtable<Object, DataTruncation>();
      Transformer<Object, DataTruncation> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends DataTruncation>) hashtable0);
      Iterator<DataTruncation> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) iterator0, (Transformer<? super BatchUpdateException, ? extends DataTruncation>) transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = iterator1;
      iteratorArray0[1] = iterator1;
      iteratorArray0[2] = iterator1;
      Iterator<DataTruncation> iterator2 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) iterator1, (Iterator<? extends SQLWarning>) iterator2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) singletonListIterator0;
      iteratorArray0[1] = (Iterator<InstanceofPredicate>) singletonListIterator0;
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) singletonListIterator0;
      iteratorArray0[3] = (Iterator<InstanceofPredicate>) singletonListIterator0;
      iteratorArray0[4] = (Iterator<InstanceofPredicate>) singletonListIterator0;
      iteratorArray0[5] = (Iterator<InstanceofPredicate>) singletonListIterator0;
      iteratorArray0[6] = (Iterator<InstanceofPredicate>) singletonListIterator0;
      iteratorArray0[7] = (Iterator<InstanceofPredicate>) singletonListIterator0;
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MapIterator<SQLNonTransientException, Iterator<SQLTimeoutException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.emptyOrderedIterator();
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) singletonListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      ListIterator<Locale.FilteringMode> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      instanceofPredicateArray0[0] = null;
      instanceofPredicateArray0[1] = null;
      instanceofPredicateArray0[2] = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(instanceofPredicateArray0, 1, (-2456));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.iterator();
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
      EmptyListIterator.resettableEmptyListIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue1 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue2 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue3 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      PriorityQueue<SQLInvalidAuthorizationSpecException>[] priorityQueueArray0 = (PriorityQueue<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(PriorityQueue.class, 9);
      priorityQueueArray0[0] = priorityQueue3;
      priorityQueueArray0[1] = priorityQueue3;
      priorityQueueArray0[2] = priorityQueue1;
      priorityQueueArray0[3] = priorityQueue1;
      priorityQueueArray0[4] = priorityQueue2;
      priorityQueueArray0[5] = priorityQueue2;
      priorityQueueArray0[6] = priorityQueue2;
      priorityQueueArray0[7] = priorityQueue3;
      priorityQueueArray0[8] = priorityQueue2;
      ObjectArrayListIterator<PriorityQueue<SQLInvalidAuthorizationSpecException>> objectArrayListIterator0 = new ObjectArrayListIterator<PriorityQueue<SQLInvalidAuthorizationSpecException>>(priorityQueueArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<SQLInvalidAuthorizationSpecException>>) objectArrayListIterator0, (Transformer<? super PriorityQueue<SQLInvalidAuthorizationSpecException>, String>) null, "", "List must not be null", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      EmptyListIterator.resettableEmptyListIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue1 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue2 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue3 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      PriorityQueue<SQLInvalidAuthorizationSpecException>[] priorityQueueArray0 = (PriorityQueue<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(PriorityQueue.class, 4);
      priorityQueueArray0[0] = priorityQueue1;
      priorityQueueArray0[1] = priorityQueue0;
      priorityQueueArray0[2] = priorityQueue3;
      priorityQueueArray0[3] = priorityQueue3;
      ObjectArrayListIterator<PriorityQueue<SQLInvalidAuthorizationSpecException>> objectArrayListIterator0 = new ObjectArrayListIterator<PriorityQueue<SQLInvalidAuthorizationSpecException>>(priorityQueueArray0);
      IteratorUtils.toString((Iterator<PriorityQueue<SQLInvalidAuthorizationSpecException>>) objectArrayListIterator0, (Transformer<? super PriorityQueue<SQLInvalidAuthorizationSpecException>, String>) constantTransformer0, "F3wN^c(Wdr>!", "", "");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("_yf'Wg&>XK #hKmD,n");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "_yf'Wg&>XK #hKmD,n", 1, batchUpdateException0);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientException) sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (-3531L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.iterator();
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
      EmptyListIterator.resettableEmptyListIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      PriorityQueue<SQLInvalidAuthorizationSpecException>[] priorityQueueArray0 = (PriorityQueue<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(PriorityQueue.class, 4);
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue1 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue2 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue3 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      priorityQueueArray0[3] = priorityQueue3;
      ObjectArrayListIterator<PriorityQueue<SQLInvalidAuthorizationSpecException>> objectArrayListIterator0 = new ObjectArrayListIterator<PriorityQueue<SQLInvalidAuthorizationSpecException>>(priorityQueueArray0);
      IteratorUtils.toString((Iterator<PriorityQueue<SQLInvalidAuthorizationSpecException>>) objectArrayListIterator0, (Transformer<? super PriorityQueue<SQLInvalidAuthorizationSpecException>, String>) constantTransformer0, "", "List must not be null", "I<Y|blQr:CwE/<");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) loopingListIterator0, (Transformer<? super SQLWarning, ? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.clone();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) arrayList0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) resettableIterator0, 0L, 0L);
      MapIterator<EnumSet<Locale.FilteringMode>, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) arrayDeque0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator1);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      Hashtable<Object, DataTruncation> hashtable0 = new Hashtable<Object, DataTruncation>();
      Transformer<Object, DataTruncation> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends DataTruncation>) hashtable0);
      Iterator<DataTruncation> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) iterator0, (Transformer<? super BatchUpdateException, ? extends DataTruncation>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) iterator1, (Iterator<? extends SQLWarning>) iterator1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.clone();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) arrayList0);
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) resettableIterator0, 0L, 0L);
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) boundedIterator0, (Iterator<? extends String>) resettableIterator0);
      MapIterator<EnumSet<Locale.FilteringMode>, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<EnumSet<Locale.FilteringMode>, SQLTransientConnectionException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.asIterable((Iterator<? extends EnumSet<Locale.FilteringMode>>) mapIterator1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) arrayDeque0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator1);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      Hashtable<Object, DataTruncation> hashtable0 = new Hashtable<Object, DataTruncation>();
      Transformer<Object, DataTruncation> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends DataTruncation>) hashtable0);
      Iterator<DataTruncation> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) iterator0, (Transformer<? super BatchUpdateException, ? extends DataTruncation>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) iterator1, (Iterator<? extends SQLWarning>) iterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer((-1));
      ResettableListIterator<PriorityQueue<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("0\"?");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<SQLInvalidAuthorizationSpecException>>) resettableListIterator0, (Transformer<? super PriorityQueue<SQLInvalidAuthorizationSpecException>, String>) constantTransformer0, "", (String) null, "Transformer must not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer((-1));
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.singletonIterator(instanceofPredicate0);
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.size(resettableListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Transformer must not be null", "", 2334, sQLTimeoutException0);
      Integer integer3 = new Integer(1);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer3);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, predicate0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator((SQLDataException) null);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer((-1));
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.size(resettableListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Transformer must not be null", "", 2334, sQLTimeoutException0);
      Integer integer3 = new Integer(1);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer3);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, predicate0);
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) resettableIterator0, (Predicate<? super InstanceofPredicate>) andPredicate0);
      ListIterator<Locale.FilteringMode> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<Locale.FilteringMode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      IteratorUtils.unmodifiableListIterator(listIterator1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      Integer integer0 = new Integer(457);
      Integer integer1 = new Integer(5183);
      Integer integer2 = new Integer(457);
      Integer integer3 = new Integer(2);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) iterator0);
      IteratorUtils.size(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ejPXJ]", "org.apache.commons.collections4.functors.InstantiateTransformer", (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "", (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      sQLRecoverableException0.getLocalizedMessage();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "", 457, sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.InstantiateTransformer", "(-$$M)Wl0", 1, sQLTimeoutException0);
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Vector<SQLException>>) null, (Iterator<? extends Vector<SQLException>>) null, (Iterator<? extends Vector<SQLException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) singletonIterator0, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) predicate0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator1 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0, false);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends EnumSet<Locale.FilteringMode>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      int int0 = 4;
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer((-1));
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      IteratorUtils.arrayListIterator(integerArray0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Hashtable<EnumSet<Locale.FilteringMode>, SQLTransientConnectionException> hashtable0 = new Hashtable<EnumSet<Locale.FilteringMode>, SQLTransientConnectionException>();
      EntrySetMapIterator<EnumSet<Locale.FilteringMode>, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<EnumSet<Locale.FilteringMode>, SQLTransientConnectionException>(hashtable0);
      MapIterator<EnumSet<Locale.FilteringMode>, SQLTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<EnumSet<Locale.FilteringMode>, SQLTransientConnectionException>) entrySetMapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.asIterable((Iterator<? extends EnumSet<Locale.FilteringMode>>) entrySetMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.clone();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) arrayList0);
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) resettableIterator0, 0L, 0L);
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) boundedIterator0, (Iterator<? extends String>) resettableIterator0);
      MapIterator<EnumSet<Locale.FilteringMode>, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<EnumSet<Locale.FilteringMode>, SQLTransientConnectionException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.asIterable((Iterator<? extends EnumSet<Locale.FilteringMode>>) mapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.iterator();
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
      EmptyListIterator.resettableEmptyListIterator();
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asIterable((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      ArrayDeque<IIOMetadataNode>[] arrayDequeArray0 = (ArrayDeque<IIOMetadataNode>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<IIOMetadataNode> arrayDeque1 = new ArrayDeque<IIOMetadataNode>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<IIOMetadataNode> arrayDeque2 = new ArrayDeque<IIOMetadataNode>();
      arrayDequeArray0[2] = arrayDeque2;
      IteratorUtils.arrayIterator(arrayDequeArray0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Boolean>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) singletonIterator0, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) predicate0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("List must not be null");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Hi5OXRt\"UWV 1n", sQLNonTransientConnectionException0);
      IteratorUtils.singletonIterator(sQLTimeoutException1);
      IteratorUtils.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      Integer integer0 = new Integer(12);
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) null, (Predicate<? super Integer>) predicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, SQLException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Iterator<Boolean> iterator0 = null;
      IteratorUtils.isEmpty((Iterator<?>) null);
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends Boolean>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("?^ca&^D");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("?^ca&^D", "?^ca&^D");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_'i.$=");
      IteratorUtils.nodeListIterator(nodeList0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "?^ca&^D");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("?^ca&^D", "PFZ'(glY4@", 100, sQLTransientException0);
      sQLRecoverableException0.spliterator();
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_'i.$=", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      sQLDataException0.printStackTrace((PrintStream) mockPrintStream0);
      IteratorUtils.singletonListIterator((SQLNonTransientException) sQLDataException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[2];
      intArray0[0] = 100;
      intArray0[1] = (int) (byte)16;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Invalid map index: ", "Invalid map index: ", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("_'i.$=", (String) null, 91, intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)16;
      longArray0[2] = (long) 16;
      longArray0[3] = (long) 91;
      longArray0[4] = (long) 100;
      longArray0[5] = (long) 902;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("d# ,", "Predicate must not be null", 902, longArray0, sQLTransientException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0, batchUpdateException2);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException((String) null, "_'i.$=", intArray0, batchUpdateException2);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException(intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) objectArrayListIterator0, 100);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<Boolean>) resettableIterator0);
      FalsePredicate.falsePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator((InstanceofPredicate) null);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<?>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator((InstanceofPredicate) null);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      IteratorUtils.loopingIterator((Collection<?>) hashSet0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLWarning sQLWarning0 = new SQLWarning("&J,iF@9HVmn", "1wR|Rv3ENk'&\u001DUlB>", mockThrowable0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLWarning0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator((InstanceofPredicate) null);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.size(resettableIterator0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(128);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3373));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1477);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(128);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(604);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      UniquePredicate.uniquePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      integerArray0[3] = (Integer) int0;
      Integer integer3 = new Integer(5183);
      Integer integer4 = new Integer(1);
      Integer integer5 = new Integer(int0);
      Integer integer6 = new Integer(int0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      integerArray0[3] = (Integer) int0;
      Integer integer3 = new Integer(3336);
      integerArray0[4] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[5] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[6] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[7] = integer6;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(integer0);
      SQLDataException sQLDataException0 = new SQLDataException("", "|G;,yhBBhoI_TF=9p)", (int) integerArray0[4]);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) listIterator0);
      IteratorUtils.getIterator(enumeration0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MapIterator<SQLNonTransientException, Iterator<SQLTimeoutException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      IteratorUtils.emptyListIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&C");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("&C", ".E WvD4J8", (-1322), (Map<String, ClientInfoStatus>) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("&C", "&C", 1, sQLClientInfoException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("&C", "", sQLClientInfoException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("&C");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLException sQLException0 = new SQLException("", (String) null, sQLInvalidAuthorizationSpecException2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("&C", "e", 1, sQLException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException4);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, (-1120));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedIterator<InstanceofPredicate> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) orderedIterator0, (Transformer<? super InstanceofPredicate, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) singletonIterator0, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) predicate0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("List must not be null", "", 14);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.functors.FactoryTransformer", "List must not be null", sQLWarning0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must not be null", "List must not be null", 2334, sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.FactoryTransformer", "org.apache.commons.collections4.functors.FactoryTransformer", (-229), sQLRecoverableException0);
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) listIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Iterator<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) singletonIterator0, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) predicate0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0);
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) objectArrayIterator0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) resettableIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.getIterator(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) null, 3158L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      singletonIterator0.next();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>) singletonIterator0, (Iterator<? extends InstanceofPredicate>) singletonIterator0);
      LinkedList<Iterator<SQLTimeoutException>> linkedList0 = new LinkedList<Iterator<SQLTimeoutException>>();
      IteratorUtils.loopingIterator((Collection<? extends Iterator<SQLTimeoutException>>) linkedList0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) singletonIterator0, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) predicate0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>((InstanceofPredicate) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) singletonListIterator0, (Predicate<? super InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) singletonIterator0, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) predicate0);
      EmptyListIterator.emptyListIterator();
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<DataTruncation> class1 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      InstanceofPredicate.instanceOfPredicate(class0);
      Class<SQLException> class2 = SQLException.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class2);
      SQLWarning sQLWarning0 = new SQLWarning("3]", (String) null, (-746));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("3]", "3]", sQLWarning0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "3]", (-3290), sQLRecoverableException0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator((InstanceofPredicate) null);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.size(resettableIterator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, 1);
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      Iterator<Predicate<Object>> iterator1 = IteratorUtils.objectGraphIterator((Predicate<Object>) null, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) null);
      IteratorUtils.find(iterator1, (Predicate<? super Predicate<Object>>) predicate0);
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer integer0 = new Integer(1602);
      Integer integer1 = new Integer(1457);
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer(93);
      Integer integer4 = new Integer(2659);
      Integer integer5 = new Integer((-1));
      Integer integer6 = new Integer(5);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer5;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, LinkedList<InstanceofPredicate>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>) singletonIterator0, (Iterator<? extends InstanceofPredicate>) singletonIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (-905));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      int int0 = (-1483);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonListIterator0, (-1483));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer(4);
      Integer integer4 = new Integer((-1));
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer3;
      integerArray0[2] = integer0;
      IteratorUtils.arrayListIterator(integerArray0);
      Integer integer5 = new Integer(int0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer5);
      OrderedMapIterator<Integer, Class<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, Class<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, Class<SQLIntegrityConstraintViolationException>>(orderedMapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", (Throwable) null);
      sQLTimeoutException0.spliterator();
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Integer integer6 = new Integer(4);
      Integer integer7 = new Integer(10);
      IteratorUtils.arrayListIterator(integerArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate0);
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) treeSet0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer(377);
      Integer integer4 = new Integer(100);
      Integer integer5 = new Integer((-462));
      Integer integer6 = new Integer(2110);
      Integer integer7 = new Integer((-1));
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      integerArray0[1] = integer4;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      integerArray0[3] = (Integer) int0;
      Integer integer3 = new Integer(3336);
      integerArray0[4] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[5] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[6] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[7] = integer6;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(integer0);
      SQLDataException sQLDataException0 = new SQLDataException("", "|G;,yhBBhoI_TF=9p)", (int) integerArray0[4]);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator((InstanceofPredicate) null);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Integer integer0 = new Integer(1);
      int int0 = (-1165);
      Integer integer1 = new Integer((-1165));
      Integer integer2 = new Integer((-1165));
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer(2994);
      Integer integer5 = new Integer((-1165));
      Integer integer6 = new Integer(3336);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer1;
      integerArray0[1] = integer5;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer2;
      integerArray0[5] = integer6;
      Integer integer7 = new Integer((-1));
      integerArray0[6] = integer7;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator((Object) null);
      String string0 = ",DQsL$_odRDFK ";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",DQsL$_odRDFK ");
      iIOMetadataNode0.getNextSibling();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIterator0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(3183);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      IteratorUtils.arrayListIterator(integerArray0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) int0);
      OrderedMapIterator<Integer, Class<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, Class<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, Class<SQLIntegrityConstraintViolationException>>(orderedMapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, (int) integerArray0[1], (Throwable) null);
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("72D;2Muaz:c;#t+{", "", (Throwable) null);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      Integer integer5 = new Integer((int) integerArray0[1]);
      Integer integer6 = new Integer(10);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      PredicateTransformer<EnumSet<Locale.FilteringMode>> predicateTransformer0 = new PredicateTransformer<EnumSet<Locale.FilteringMode>>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform((EnumSet<Locale.FilteringMode>) null);
      ListIterator<Boolean> listIterator1 = IteratorUtils.singletonListIterator(boolean0);
      IteratorUtils.boundedIterator((Iterator<? extends Boolean>) listIterator1, (long) integerArray0[0]);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, LinkedList<InstanceofPredicate>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>) singletonIterator0, (Iterator<? extends InstanceofPredicate>) singletonIterator0);
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) orderedMapIterator0, 2110);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.iterator();
      IteratorUtils.loopingListIterator((List<Integer>) vector0);
      ResettableListIterator<PriorityQueue<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("0\"?");
      Iterator<PriorityQueue<SQLInvalidAuthorizationSpecException>> iterator0 = IteratorUtils.collatedIterator((Comparator<? super PriorityQueue<SQLInvalidAuthorizationSpecException>>) null, (Iterator<? extends PriorityQueue<SQLInvalidAuthorizationSpecException>>) resettableListIterator0, (Iterator<? extends PriorityQueue<SQLInvalidAuthorizationSpecException>>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super PriorityQueue<SQLInvalidAuthorizationSpecException>, String>) constantTransformer0, "XJm3Pm~<}#W", "", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      ServiceLoader<SQLNonTransientConnectionException>[] serviceLoaderArray0 = (ServiceLoader<SQLNonTransientConnectionException>[]) Array.newInstance(ServiceLoader.class, 0);
      ObjectArrayListIterator<ServiceLoader<SQLNonTransientConnectionException>> objectArrayListIterator0 = new ObjectArrayListIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoaderArray0);
      IteratorUtils.matchesAny((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) objectArrayListIterator0, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) predicate0);
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = EmptyListIterator.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator1, (Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.functors.FactoryTransformer", "List must not be null", 93);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "5'rx ^dlR<^st>+", sQLWarning0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "5'rx ^dlR<^st>+", 1398, sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "List must not be null", 31, sQLRecoverableException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 31, (-4138));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer(4);
      Integer integer4 = new Integer((-1));
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer3;
      integerArray0[2] = integer0;
      IteratorUtils.arrayListIterator(integerArray0);
      Integer integer5 = new Integer(int0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer5);
      OrderedMapIterator<Integer, Class<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, Class<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, Class<SQLIntegrityConstraintViolationException>>(orderedMapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", (Throwable) null);
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Integer integer6 = new Integer(4);
      Integer integer7 = new Integer(10);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.objectGraphIterator(predicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) null);
      IteratorUtils.find(iterator0, (Predicate<? super Predicate<Object>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("InstantiateFactory: Constructor threw an exception", batchUpdateException0);
      SQLDataException sQLDataException0 = new SQLDataException("InstantiateFactory: Constructor threw an exception", "InstantiateFactory: Constructor threw an exception", sQLNonTransientConnectionException0);
      arrayList0.add(sQLDataException0);
      IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.singletonIterator(instanceofPredicate0);
      int int0 = (-1520);
      Integer integer0 = new Integer((-1520));
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Integer[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIterator0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(3183);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      IteratorUtils.arrayListIterator(integerArray0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) int0);
      OrderedMapIterator<Integer, Class<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, Class<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, Class<SQLIntegrityConstraintViolationException>>(orderedMapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, (int) integerArray0[1], (Throwable) null);
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("72D;2Muaz:c;#t+{", "", (Throwable) null);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      Integer integer5 = new Integer((int) integerArray0[1]);
      Integer integer6 = new Integer(10);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) treeSet0);
      OrderedMapIterator<String, HashSet<SQLNonTransientException>> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      int[] intArray0 = new int[3];
      intArray0[0] = (-1327);
      intArray0[1] = (-5);
      intArray0[2] = (-1327);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Enumeration must not be null");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("]hKbqh<hX*P{|}", "q0t$wP.9>#h", (-1327), intArray0, sQLRecoverableException0);
      SQLException sQLException0 = new SQLException("prefix may not be null", "]hKbqh<hX*P{|}", batchUpdateException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("q0t$wP.9>#h", "prefix may not be null", sQLException0);
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("q0t$wP.9>#h", "Nk{&bd");
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("my$?dFLp*sCrgBkv", "prefix may not be null", 100);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 100, (-1327));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<HashSet<Integer>> linkedList0 = new LinkedList<HashSet<Integer>>();
      ReverseListIterator<HashSet<Integer>> reverseListIterator0 = new ReverseListIterator<HashSet<Integer>>(linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<HashSet<Integer>>) reverseListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLIntegrityConstraintViolationException>(orderedMapIterator1);
      SwitchTransformer<SQLDataException, String> switchTransformer0 = new SwitchTransformer<SQLDataException, String>((Predicate<? super SQLDataException>[]) null, (Transformer<? super SQLDataException, ? extends String>[]) null, (Transformer<? super SQLDataException, ? extends String>) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      InstanceofPredicate.instanceOfPredicate(class2);
      InstanceofPredicate.instanceOfPredicate(class1);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) resettableIterator0);
      IteratorUtils.matchesAll(iterator1, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      String string0 = "";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(";a/=%", (Throwable) null);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLDataException sQLDataException0 = new SQLDataException("", ";a/=%", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("EZ");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(".\"&LtQLh]9@+cuy", sQLDataException1);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("", ".\"&LtQLh]9@+cuy", 0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      IteratorUtils.arrayIterator(sQLDataExceptionArray0, 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) sQLDataException4, comparator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.objectGraphIterator((Predicate<Object>) uniquePredicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) null);
      IteratorUtils.find(iterator0, (Predicate<? super Predicate<Object>>) uniquePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(";a/=%", (Throwable) null);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionException0.getSuppressed();
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLDataException sQLDataException0 = new SQLDataException("", ";a/=%", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("EZ");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(".\"&LtQLh]9@+cuy", sQLDataException1);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("", ".\"&LtQLh]9@+cuy", 0);
      int int0 = (-1572);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Iterator<SQLTimeoutException>[]) null, 2512, (-1572));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<Boolean>) resettableIterator0);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OrderedMapIterator<HashSet<InstanceofPredicate>, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<HashSet<InstanceofPredicate>, SQLException>) orderedMapIterator0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      // Undeclared exception!
//      try { 
        linkedList0.listIterator(44);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 44, Size: 0
//         //
//         verifyException("java.util.LinkedList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.cloneNode(true);
      int int0 = (-928);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, (-928));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, LinkedList<InstanceofPredicate>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) orderedMapIterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<Boolean>) resettableIterator0);
      int int0 = 0;
      FalsePredicate.falsePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[0];
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("aNjaX+'.k9dbO", "", 0);
      DataTruncation dataTruncation0 = new DataTruncation(3020, false, false, 3020, 3020, sQLTransientConnectionException0);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLIntegrityConstraintViolationException>(orderedMapIterator1);
      MapIterator<SQLDataException, SQLIntegrityConstraintViolationException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0);
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) mapIterator0, 0L, 0L);
      SwitchTransformer<SQLDataException, String> switchTransformer0 = new SwitchTransformer<SQLDataException, String>((Predicate<? super SQLDataException>[]) null, (Transformer<? super SQLDataException, ? extends String>[]) null, (Transformer<? super SQLDataException, ? extends String>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) boundedIterator0, (Transformer<? super SQLDataException, String>) switchTransformer0, (String) null, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(";a/=%", (Throwable) null);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionException0.getSuppressed();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLDataException sQLDataException0 = new SQLDataException("", ";a/=%", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("EZ");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(".\"&LtQLh]9@+cuy", sQLDataException1);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("", ".\"&LtQLh]9@+cuy", 0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.arrayIterator(sQLDataExceptionArray0, 0);
      IteratorUtils.size(resettableIterator1);
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIterator0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(3183);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      ListIterator<Integer> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) resettableListIterator0);
      OrderedMapIterator<Integer, Class<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, Class<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, Class<SQLIntegrityConstraintViolationException>>(orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator1, (Iterator<? extends Integer>) resettableListIterator0, (Iterator<? extends Integer>) abstractOrderedMapIteratorDecorator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, (int) integerArray0[1], (Throwable) null);
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("72D;2Muaz:c;#t+{", "", (Throwable) null);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("}kqM[j]+]", (String) null, sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException(")'xGUaPo@FVt", "}kqM[j]+]", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException((String) null);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException((String) null, "xpsXzA ts,Z@W%&l#.", int0);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, (-1277), int0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) resettableIterator0);
      IteratorUtils.matchesAll(iterator1, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      String string0 = "";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 100, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Stack<Boolean> stack0 = new Stack<Boolean>();
      LoopingListIterator<Boolean> loopingListIterator0 = new LoopingListIterator<Boolean>(stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Boolean>) loopingListIterator0, 2869L, (-1938L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<DataTruncation> class1 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      Class<Integer> class2 = Integer.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class3);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class4);
      instanceofPredicateArray0[6] = instanceofPredicate6;
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0);
      InstanceofPredicate.instanceOfPredicate(class3);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) objectArrayIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) arrayDeque0);
      DataTruncation dataTruncation0 = new DataTruncation(1073741824, true, true, 1073741824, 9);
      dataTruncation0.getNextWarning();
      ArrayIterator<Properties> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<Properties>((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      SkippingIterator<SQLNonTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLNonTransientConnectionException>) zippingIterator0, 0L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) skippingIterator0, (Iterator<? extends SQLNonTransientConnectionException>) zippingIterator0);
      MapIterator<Iterator<SQLTimeoutException>, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<?, ? extends SQLSyntaxErrorException>) mapIterator0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
//      try { 
        InvokerTransformer.invokerTransformer("(WEJN[N|!", (Class<?>[]) classArray0, (Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The parameter types must match the arguments
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      int[] intArray0 = new int[0];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(0, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {}, intArray0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, batchUpdateException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, intArray0.length);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertArrayEquals(new int[] {}, intArray0);
      
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException((String) null, "=8w 1lM", 946);
      assertEquals(946, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("=8w 1lM", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException1);
      assertEquals(946, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("=8w 1lM", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertNull(sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException2.toString());
      assertEquals("", sQLIntegrityConstraintViolationException2.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException2);
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", (String) null, (-1));
      assertEquals("", sQLIntegrityConstraintViolationException3.getMessage());
      assertNull(sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals((-1), sQLIntegrityConstraintViolationException3.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException3.toString());
      assertNotNull(sQLIntegrityConstraintViolationException3);
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException((String) null);
      assertNull(sQLIntegrityConstraintViolationException4.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException4.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException4.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException4.toString());
      assertNotNull(sQLIntegrityConstraintViolationException4);
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException0));
      
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException5.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException5.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException5.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException5.toString());
      assertNotNull(sQLIntegrityConstraintViolationException5);
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException1));
      
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("", (String) null);
      assertEquals(0, sQLIntegrityConstraintViolationException6.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException6.toString());
      assertNull(sQLIntegrityConstraintViolationException6.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException6.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException6);
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException1));
      
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException("[9S2_S]+7", sQLIntegrityConstraintViolationException4);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: [9S2_S]+7", sQLIntegrityConstraintViolationException7.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException7.getErrorCode());
      assertEquals("[9S2_S]+7", sQLIntegrityConstraintViolationException7.getMessage());
      assertNull(sQLIntegrityConstraintViolationException7.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException4.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException4.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException4.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException4.toString());
      assertNotNull(sQLIntegrityConstraintViolationException7);
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException0));
      
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      assertFalse(resettableListIterator1.hasPrevious());
      assertTrue(resettableListIterator1.hasNext());
      assertEquals(8, sQLIntegrityConstraintViolationExceptionArray0.length);
      assertNotNull(resettableListIterator1);
      
      Transformer<SQLNonTransientException, String> transformer0 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.IteratorUtils");
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator1, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0);
      assertEquals("[org.apache.commons.collections4.IteratorUtils, org.apache.commons.collections4.IteratorUtils, org.apache.commons.collections4.IteratorUtils, org.apache.commons.collections4.IteratorUtils, org.apache.commons.collections4.IteratorUtils, org.apache.commons.collections4.IteratorUtils, org.apache.commons.collections4.IteratorUtils, org.apache.commons.collections4.IteratorUtils]", string0);
      assertTrue(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertEquals(8, sQLIntegrityConstraintViolationExceptionArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 6);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = null;
      int int0 = 100;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("T.hU4", (Throwable) null);
      assertEquals("java.sql.SQLTransactionRollbackException: T.hU4", sQLTransactionRollbackException0.toString());
      assertEquals("T.hU4", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: T.hU4", sQLTransactionRollbackException0.toString());
      assertEquals("T.hU4", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: T.hU4", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLTransactionRollbackException: T.hU4", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("delimiter may not be null", "", 9, sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLTransactionRollbackException: T.hU4", sQLTransactionRollbackException0.toString());
      assertEquals("T.hU4", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: T.hU4", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLTransactionRollbackException: T.hU4", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(9, sQLNonTransientException0.getErrorCode());
      assertEquals("delimiter may not be null", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: delimiter may not be null", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("itXV:Ix(+d2", sQLNonTransientException0);
      assertEquals("java.sql.SQLTransactionRollbackException: T.hU4", sQLTransactionRollbackException0.toString());
      assertEquals("T.hU4", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: T.hU4", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLTransactionRollbackException: T.hU4", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(9, sQLNonTransientException0.getErrorCode());
      assertEquals("delimiter may not be null", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: delimiter may not be null", sQLNonTransientException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("itXV:Ix(+d2", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: itXV:Ix(+d2", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "itXV:Ix(+d2", sQLTimeoutException0);
      assertEquals("java.sql.SQLTransactionRollbackException: T.hU4", sQLTransactionRollbackException0.toString());
      assertEquals("T.hU4", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: T.hU4", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLTransactionRollbackException: T.hU4", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(9, sQLNonTransientException0.getErrorCode());
      assertEquals("delimiter may not be null", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: delimiter may not be null", sQLNonTransientException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("itXV:Ix(+d2", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: itXV:Ix(+d2", sQLTimeoutException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("itXV:Ix(+d2", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("");
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException1.getMessage());
      assertNotNull(sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("2\"", "", 0);
      assertEquals("", sQLFeatureNotSupportedException2.getSQLState());
      assertEquals("2\"", sQLFeatureNotSupportedException2.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 2\"", sQLFeatureNotSupportedException2.toString());
      assertNotNull(sQLFeatureNotSupportedException2);
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException3.toString());
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertNull(sQLFeatureNotSupportedException3.getMessage());
      assertNotNull(sQLFeatureNotSupportedException3);
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(4, sQLFeatureNotSupportedExceptionArray0.length);
      assertNotNull(objectArrayListIterator0);
      
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) objectArrayListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertFalse(boolean0);
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(4, sQLFeatureNotSupportedExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Vector<IIOMetadataNode>>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, LinkedList<InstanceofPredicate>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      MapIterator<SQLDataException, Hashtable<Hashtable, SQLException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<SQLDataException>) mapIterator0;
      iteratorArray0[1] = (Iterator<SQLDataException>) mapIterator0;
      iteratorArray0[2] = (Iterator<SQLDataException>) mapIterator0;
      iteratorArray0[3] = (Iterator<SQLDataException>) mapIterator0;
      iteratorArray0[4] = (Iterator<SQLDataException>) mapIterator0;
      iteratorArray0[5] = (Iterator<SQLDataException>) mapIterator0;
      iteratorArray0[6] = (Iterator<SQLDataException>) mapIterator0;
      iteratorArray0[7] = (Iterator<SQLDataException>) mapIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      assertEquals(8, iteratorArray0.length);
      assertNotNull(iterator0);
      
      Iterable<SQLDataException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) iterator0);
      assertEquals(8, iteratorArray0.length);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<HashSet<Integer>> linkedList0 = new LinkedList<HashSet<Integer>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ReverseListIterator<HashSet<Integer>> reverseListIterator0 = new ReverseListIterator<HashSet<Integer>>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(reverseListIterator0);
      
      ListIterator<HashSet<Integer>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<HashSet<Integer>>) reverseListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[7];
      SQLDataException sQLDataException0 = new SQLDataException("Rt", "A/", 100);
      assertEquals("java.sql.SQLDataException: Rt", sQLDataException0.toString());
      assertEquals("Rt", sQLDataException0.getMessage());
      assertEquals(100, sQLDataException0.getErrorCode());
      assertEquals("A/", sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Rt", "9z", sQLNonTransientExceptionArray0[0]);
      assertEquals("Rt", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("9z", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Rt", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(7, sQLNonTransientExceptionArray0.length);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLDataException sQLDataException1 = new SQLDataException("9z", "A/", 100, sQLNonTransientExceptionArray0[1]);
      assertEquals("java.sql.SQLDataException: 9z", sQLDataException1.toString());
      assertEquals(100, sQLDataException1.getErrorCode());
      assertEquals("9z", sQLDataException1.getMessage());
      assertEquals("A/", sQLDataException1.getSQLState());
      assertEquals(7, sQLNonTransientExceptionArray0.length);
      assertNotNull(sQLDataException1);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLDataException1;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.NonePredicate", "org.apache.commons.collections4.functors.NonePredicate", (-2785));
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.functors.NonePredicate", sQLSyntaxErrorException0.toString());
      assertEquals((-2785), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.NonePredicate", sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.NonePredicate", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.LoopingIterator");
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.iterators.LoopingIterator", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.LoopingIterator", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLDataException1);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLDataException: 9z", sQLInvalidAuthorizationSpecException1.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLDataException: 9z", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: 9z", sQLDataException1.toString());
      assertEquals(100, sQLDataException1.getErrorCode());
      assertEquals("9z", sQLDataException1.getMessage());
      assertEquals("A/", sQLDataException1.getSQLState());
      assertEquals(7, sQLNonTransientExceptionArray0.length);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException1;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0, 1);
      assertEquals(1, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(7, objectArrayIterator0.getEndIndex());
      assertEquals(7, sQLNonTransientExceptionArray0.length);
      assertNotNull(objectArrayIterator0);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) objectArrayIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      assertTrue(boolean0);
      assertEquals(1, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(7, objectArrayIterator0.getEndIndex());
      assertEquals(7, sQLNonTransientExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Iterator<String> iterator0 = null;
      String string0 = IteratorUtils.toString((Iterator<String>) null);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(loopingIterator0);
      
      // Undeclared exception!
//      try { 
        loopingIterator0.next();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // There are no elements for this iterator to loop on
//         //
//         verifyException("org.apache.commons.collections4.iterators.LoopingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.sql.SQLNonTransientConnectionException]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLNonTransientConnectionException>>(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.sql.SQLNonTransientConnectionException]", serviceLoader0.toString());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) singletonIterator0, (Predicate<? super ServiceLoader<SQLNonTransientConnectionException>>) predicate0);
      assertFalse(boolean0);
      assertEquals("java.util.ServiceLoader[java.sql.SQLNonTransientConnectionException]", serviceLoader0.toString());
      assertFalse(singletonIterator0.hasNext());
      
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      SQLWarning sQLWarning0 = new SQLWarning("List must not be null", "", 14);
      assertEquals(14, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: List must not be null", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("List must not be null", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.functors.FactoryTransformer", "List must not be null", sQLWarning0);
      assertEquals(14, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: List must not be null", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("List must not be null", sQLWarning0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("List must not be null", sQLRecoverableException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.FactoryTransformer", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.FactoryTransformer", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must not be null", "", 2334, sQLRecoverableException0);
      assertEquals(14, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: List must not be null", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("List must not be null", sQLWarning0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("List must not be null", sQLRecoverableException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.FactoryTransformer", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.FactoryTransformer", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: List must not be null", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("List must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals(2334, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("List must not be null", "List must not be null", 93, sQLTransactionRollbackException0);
      assertEquals(14, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: List must not be null", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("List must not be null", sQLWarning0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("List must not be null", sQLRecoverableException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.FactoryTransformer", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.FactoryTransformer", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: List must not be null", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("List must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals(2334, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("List must not be null", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: List must not be null", sQLTransientConnectionException0.toString());
      assertEquals(93, sQLTransientConnectionException0.getErrorCode());
      assertEquals("List must not be null", sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 27, (-2270));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(1, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3336);
      assertEquals(3336, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertEquals(1, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertEquals(1, (int)integer6);
      assertNotNull(integer6);
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer1));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      assertEquals(0, (int)integer7);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      
      integerArray0[7] = integer7;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(8, integerArray0.length);
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      Iterator<Integer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(8, integerArray0.length);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, Vector<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, sQLTransactionRollbackExceptionArray0.length);
      assertNotNull(resettableListIterator0);
      
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashtable0.put("L>h#HZ\"65ZCPa", clientInfoStatus0);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      boolean boolean0 = linkedList0.add(sQLClientInfoException0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(linkedList0.contains(sQLClientInfoException0));
      
      boolean boolean1 = linkedList0.add((SQLClientInfoException) null);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(sQLClientInfoException0));
      assertTrue(boolean1 == boolean0);
      
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedList0);
      assertEquals(2, linkedList0.size());
      assertNotNull(resettableIterator0);
      assertTrue(linkedList0.contains(sQLClientInfoException0));
      
      ArrayList<Class<Object>>[] arrayListArray0 = (ArrayList<Class<Object>>[]) Array.newInstance(ArrayList.class, 6);
      ArrayList<Class<Object>> arrayList0 = new ArrayList<Class<Object>>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      arrayListArray0[0] = arrayList0;
      ArrayList<Class<Object>> arrayList1 = new ArrayList<Class<Object>>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      arrayListArray0[1] = arrayList1;
      ArrayList<Class<Object>> arrayList2 = new ArrayList<Class<Object>>();
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(arrayList2);
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      
      arrayListArray0[2] = arrayList2;
      ArrayList<Class<Object>> arrayList3 = new ArrayList<Class<Object>>();
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertNotNull(arrayList3);
      assertTrue(arrayList3.equals((Object)arrayList1));
      assertTrue(arrayList3.equals((Object)arrayList2));
      assertTrue(arrayList3.equals((Object)arrayList0));
      
      arrayListArray0[3] = arrayList3;
      ArrayList<Class<Object>> arrayList4 = new ArrayList<Class<Object>>();
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertNotNull(arrayList4);
      assertTrue(arrayList4.equals((Object)arrayList2));
      assertTrue(arrayList4.equals((Object)arrayList1));
      assertTrue(arrayList4.equals((Object)arrayList3));
      assertTrue(arrayList4.equals((Object)arrayList0));
      
      arrayListArray0[4] = arrayList4;
      ArrayList<Class<Object>> arrayList5 = new ArrayList<Class<Object>>();
      assertEquals(0, arrayList5.size());
      assertTrue(arrayList5.isEmpty());
      assertNotNull(arrayList5);
      assertTrue(arrayList5.equals((Object)arrayList1));
      assertTrue(arrayList5.equals((Object)arrayList3));
      assertTrue(arrayList5.equals((Object)arrayList0));
      assertTrue(arrayList5.equals((Object)arrayList2));
      assertTrue(arrayList5.equals((Object)arrayList4));
      
      arrayListArray0[5] = arrayList5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(arrayListArray0, 5829);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MapIterator<TreeSet<IIOMetadataNode>, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(687);
      assertEquals(687, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertEquals(2, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      assertEquals(0, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[0]);
      assertEquals(687, (int)integer6);
      assertEquals(7, integerArray0.length);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      
      integerArray0[6] = integer6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(integerArray0, (-2504), 5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("([g", "prefix may not be null");
      assertEquals("java.sql.SQLDataException: ([g", sQLDataException1.toString());
      assertEquals("([g", sQLDataException1.getMessage());
      assertEquals("prefix may not be null", sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNotNull(sQLDataException1);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("([g", sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("([g", sQLDataException2.getMessage());
      assertEquals("java.sql.SQLDataException: ([g", sQLDataException2.toString());
      assertNull(sQLDataException2.getSQLState());
      assertEquals(0, sQLDataException2.getErrorCode());
      assertNotNull(sQLDataException2);
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(sQLDataException1);
      assertEquals("java.sql.SQLDataException: ([g", sQLDataException1.toString());
      assertEquals("([g", sQLDataException1.getMessage());
      assertEquals("prefix may not be null", sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals(0, sQLDataException3.getErrorCode());
      assertEquals("java.sql.SQLDataException: ([g", sQLDataException3.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLDataException: ([g", sQLDataException3.toString());
      assertNull(sQLDataException3.getSQLState());
      assertNotNull(sQLDataException3);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertFalse(sQLDataException1.equals((Object)sQLDataException2));
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("([g");
      assertEquals("java.sql.SQLDataException: ([g", sQLDataException4.toString());
      assertNull(sQLDataException4.getSQLState());
      assertEquals("([g", sQLDataException4.getMessage());
      assertEquals(0, sQLDataException4.getErrorCode());
      assertNotNull(sQLDataException4);
      assertFalse(sQLDataException4.equals((Object)sQLDataException2));
      assertFalse(sQLDataException4.equals((Object)sQLDataException1));
      assertFalse(sQLDataException4.equals((Object)sQLDataException0));
      assertFalse(sQLDataException4.equals((Object)sQLDataException3));
      
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("-9y(T$:#D/5");
      assertEquals("java.sql.SQLDataException: -9y(T$:#D/5", sQLDataException5.toString());
      assertNull(sQLDataException5.getSQLState());
      assertEquals(0, sQLDataException5.getErrorCode());
      assertEquals("-9y(T$:#D/5", sQLDataException5.getMessage());
      assertNotNull(sQLDataException5);
      assertFalse(sQLDataException5.equals((Object)sQLDataException4));
      assertFalse(sQLDataException5.equals((Object)sQLDataException2));
      assertFalse(sQLDataException5.equals((Object)sQLDataException3));
      assertFalse(sQLDataException5.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException0));
      
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException(sQLDataException2);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("([g", sQLDataException2.getMessage());
      assertEquals("java.sql.SQLDataException: ([g", sQLDataException2.toString());
      assertNull(sQLDataException2.getSQLState());
      assertEquals(0, sQLDataException2.getErrorCode());
      assertEquals(0, sQLDataException6.getErrorCode());
      assertEquals("java.sql.SQLDataException: ([g", sQLDataException6.getMessage());
      assertNull(sQLDataException6.getSQLState());
      assertEquals("java.sql.SQLDataException: java.sql.SQLDataException: ([g", sQLDataException6.toString());
      assertNotNull(sQLDataException6);
      assertFalse(sQLDataException0.equals((Object)sQLDataException5));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException0.equals((Object)sQLDataException4));
      assertFalse(sQLDataException0.equals((Object)sQLDataException2));
      assertFalse(sQLDataException0.equals((Object)sQLDataException3));
      assertFalse(sQLDataException2.equals((Object)sQLDataException4));
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertFalse(sQLDataException2.equals((Object)sQLDataException5));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException3));
      assertFalse(sQLDataException6.equals((Object)sQLDataException3));
      assertFalse(sQLDataException6.equals((Object)sQLDataException4));
      assertFalse(sQLDataException6.equals((Object)sQLDataException1));
      assertFalse(sQLDataException6.equals((Object)sQLDataException0));
      assertFalse(sQLDataException6.equals((Object)sQLDataException5));
      assertFalse(sQLDataException6.equals((Object)sQLDataException2));
      
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("dx!~{wvo,\"<:~", "");
      assertEquals(0, sQLDataException7.getErrorCode());
      assertEquals("java.sql.SQLDataException: dx!~{wvo,\"<:~", sQLDataException7.toString());
      assertEquals("", sQLDataException7.getSQLState());
      assertEquals("dx!~{wvo,\"<:~", sQLDataException7.getMessage());
      assertNotNull(sQLDataException7);
      assertFalse(sQLDataException7.equals((Object)sQLDataException5));
      assertFalse(sQLDataException7.equals((Object)sQLDataException1));
      assertFalse(sQLDataException7.equals((Object)sQLDataException0));
      assertFalse(sQLDataException7.equals((Object)sQLDataException6));
      assertFalse(sQLDataException7.equals((Object)sQLDataException3));
      assertFalse(sQLDataException7.equals((Object)sQLDataException2));
      assertFalse(sQLDataException7.equals((Object)sQLDataException4));
      
      sQLDataExceptionArray0[7] = sQLDataException7;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0, 0);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(8, sQLDataExceptionArray0.length);
      assertNotNull(objectArrayListIterator0);
      
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) objectArrayListIterator0, (long) 0);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(8, sQLDataExceptionArray0.length);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.InstanceofPredicate", "org.apache.commons.collections4.functors.InstanceofPredicate", sQLTimeoutException0);
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(",X(oH}", "x`JXTku/", (Map<String, ClientInfoStatus>) null, sQLTimeoutException0);
      sQLTimeoutException0.addSuppressed(sQLClientInfoException1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 1032, 16);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MapIterator<SQLNonTransientException, Iterator<SQLTimeoutException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("_yf'Wg&>XK #hKmD,n");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("^3iz\"JR_U6q");
      IteratorUtils.nodeListIterator(nodeList0);
      PredicateTransformer<EnumSet<Locale.FilteringMode>> predicateTransformer0 = new PredicateTransformer<EnumSet<Locale.FilteringMode>>((Predicate<? super EnumSet<Locale.FilteringMode>>) null);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      // Undeclared exception!
//      try { 
        EnumSet.copyOf((Collection<Locale.FilteringMode>) linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Collection is empty
//         //
//         verifyException("java.util.EnumSet", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(".rucvbFWgK");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("qnbQD>BF", ".rucvbFWgK", 1216, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement(".rucvbFWgK", "qnbQD>BF", "B:&!9>+?gn|U_W7MLr", 1216);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("=tuH!yI", ".rucvbFWgK", "Cannot add to list until next() or previous() called", 1216);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "JytHE?(", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("Fuv4/RI]:q5:)o&nE", "[");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Fuv4/RI]:q5:)o&nE");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "[");
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException4, 1216);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PriorityQueue<Boolean>[] priorityQueueArray0 = (PriorityQueue<Boolean>[]) Array.newInstance(PriorityQueue.class, 6);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<Boolean> priorityQueue1 = new PriorityQueue<Boolean>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<Boolean> priorityQueue2 = new PriorityQueue<Boolean>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<Boolean> priorityQueue3 = new PriorityQueue<Boolean>();
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<Boolean> priorityQueue4 = new PriorityQueue<Boolean>();
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<Boolean> priorityQueue5 = new PriorityQueue<Boolean>();
      priorityQueueArray0[5] = priorityQueue5;
      ResettableIterator<PriorityQueue<Boolean>> resettableIterator0 = IteratorUtils.arrayIterator(priorityQueueArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(object0, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) comparator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }
}
