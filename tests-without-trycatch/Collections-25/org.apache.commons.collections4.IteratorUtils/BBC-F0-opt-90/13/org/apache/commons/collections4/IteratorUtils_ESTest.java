/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:49:15 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Predicate<? super Locale.FilteringMode>) equalPredicate0);
      Iterator<Locale.FilteringMode> iterator2 = IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) iterator1);
      assertFalse(iterator2.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Hashtable<SQLClientInfoException, BatchUpdateException> hashtable0 = new Hashtable<SQLClientInfoException, BatchUpdateException>();
      EntrySetMapIterator<SQLClientInfoException, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, BatchUpdateException>(hashtable0);
      MapIterator<SQLClientInfoException, BatchUpdateException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends BatchUpdateException>) entrySetMapIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(batchUpdateException0);
      IteratorUtils.apply((Iterator<Object>) singletonListIterator0, (Closure<? super Object>) closure0);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) listIterator0;
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) listIterator0;
      iteratorArray0[2] = (Iterator<SQLRecoverableException>) listIterator0;
      iteratorArray0[3] = (Iterator<SQLRecoverableException>) listIterator0;
      iteratorArray0[4] = (Iterator<SQLRecoverableException>) listIterator0;
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.set.AbstractSerializableSetDecorator", "org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.set.AbstractSerializableSetDecorator", "org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", 10, sQLTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.set.AbstractSerializableSetDecorator", sQLNonTransientException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      ListIterator<SQLTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MapIterator<Stack<Properties>, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<Stack<Properties>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Stack<Properties>>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) listIterator0, 32);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[7];
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) objectArrayIterator0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer(259);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      Integer[] integerArray0 = IteratorUtils.toArray((Iterator<? extends Integer>) resettableIterator0, class0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OrderedMapIterator<Integer, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray0 = IteratorUtils.toArray((Iterator<? extends Integer>) orderedMapIterator0, class0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayList<Class<SQLIntegrityConstraintViolationException>> arrayList0 = new ArrayList<Class<SQLIntegrityConstraintViolationException>>();
      ReverseListIterator<Class<SQLIntegrityConstraintViolationException>> reverseListIterator0 = new ReverseListIterator<Class<SQLIntegrityConstraintViolationException>>(arrayList0);
      SkippingIterator<Class<SQLIntegrityConstraintViolationException>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Class<SQLIntegrityConstraintViolationException>>) reverseListIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientException0);
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLDataException0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      int int0 = IteratorUtils.size(singletonListIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MapIterator<SQLTimeoutException, Class<SQLTransientConnectionException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>((SQLRecoverableException) null);
      SQLRecoverableException sQLRecoverableException0 = IteratorUtils.get((Iterator<SQLRecoverableException>) singletonIterator0, 0);
      assertNull(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(stack0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransientConnectionException>) reverseListIterator0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[2];
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0, 1, 1);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ServiceLoader<String>[] serviceLoaderArray0 = (ServiceLoader<String>[]) Array.newInstance(ServiceLoader.class, 4);
      ResettableListIterator<ServiceLoader<String>> resettableListIterator0 = IteratorUtils.arrayListIterator(serviceLoaderArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<IIOMetadataNode>[] linkedListArray0 = (LinkedList<IIOMetadataNode>[]) Array.newInstance(LinkedList.class, 0);
      ResettableListIterator<LinkedList<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, (Iterator<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<TreeSet<LinkedList>, SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("6ORixpp_RS;AS-@B;'");
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("?jLu[`#$5", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) objectArrayIterator0, (Transformer<? super SQLTransientException, String>) invokerTransformer0, "C(a`+o*~N2", "", "C(a`+o*~N2");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '?jLu[`#$5' on 'class java.sql.SQLTransientConnectionException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("6ORixpp_RS;AS-@B;'");
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) objectArrayIterator0, (Transformer<? super SQLTransientException, String>) invokerTransformer0, " ':W#cB|", "#@WeEsA88uVo5", " ':W#cB|");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0, 0, 1);
      Transformer<SQLWarning, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) objectArrayIterator0, (Transformer<? super SQLWarning, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0);
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>(list0);
      Properties properties0 = new Properties();
      arrayList0.add(properties0);
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends Properties>) arrayList0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(vector0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "#?fm@;v]Fn-_l^7+j");
      vector0.add(sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) null, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<IIOMetadataNode>[] linkedListArray0 = (LinkedList<IIOMetadataNode>[]) Array.newInstance(LinkedList.class, 7);
      ResettableListIterator<LinkedList<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, notPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<LinkedList<IIOMetadataNode>>) resettableListIterator0, (Predicate<? super LinkedList<IIOMetadataNode>>) transformedPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("NodeList must not be null", "NodeList must not be null", 123);
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLDataException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) singletonIterator0, (Predicate<? super SQLNonTransientException>) nonePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) transformerPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 2098);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Transformer must return an instanceof Boolean, it was a null object
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<TreeSet<EnumSet>>) null, 3343);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.functors.PrototypeFactory");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLRecoverableException0);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      Transformer<Object, SQLRecoverableException>[] transformerArray0 = (Transformer<Object, SQLRecoverableException>[]) Array.newInstance(Transformer.class, 0);
      HashMap<Object, SQLRecoverableException> hashMap0 = new HashMap<Object, SQLRecoverableException>();
      Transformer<Object, SQLRecoverableException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLRecoverableException>) hashMap0);
      SwitchTransformer<SQLRecoverableException, SQLRecoverableException> switchTransformer0 = new SwitchTransformer<SQLRecoverableException, SQLRecoverableException>(predicateArray0, transformerArray0, transformer0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) switchTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 6);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Object>) null, (Iterator<?>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "FLs\"gZAveE5XozS", (-3310), sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("FLs\"gZAveE5XozS", "", (-3310), sQLTransactionRollbackException0);
      Hashtable<Object, SQLTransientConnectionException> hashtable0 = new Hashtable<Object, SQLTransientConnectionException>();
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends SQLTransientConnectionException>) hashtable0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) iterator0, (long) (-3310), (-2668L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (-1843L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 10, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-333));
      integerArray0[5] = integer0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(integerArray0, 0, (int) integerArray0[5]);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer((-3310));
      Integer[] integerArray0 = new Integer[9];
      integerArray0[7] = integer0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(integerArray0, (int) integerArray0[7], 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[8];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 1283);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, (-3332), (-3696));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 1916);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 463, 733);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringArray0, 1, 54);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Locale.FilteringMode[]) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, (-527));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ArrayList<Class<SQLIntegrityConstraintViolationException>> arrayList0 = new ArrayList<Class<SQLIntegrityConstraintViolationException>>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) arrayList0, 2, (-842));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, classArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) objectArrayIterator0, (Transformer<? super SQLTransientException, String>) invokerTransformer0, " ':W#cB|", "#@WeEsA88uVo5", " ':W#cB|");
      assertEquals("#@WeEsA88uVo5null ':W#cB|null ':W#cB|null ':W#cB|null ':W#cB|", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 7);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, (Object[]) null);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) resettableIterator0, (Transformer<? super SQLTransientException, String>) invokerTransformer0, "&F^}(=xoq)Q *@_Fh/s", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) null, (Transformer<? super SQLTransientException, String>) invokerTransformer0, "aut", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("6ORixpp_RS;AS-@B;'", classArray0, sQLTransientExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) objectArrayIterator0, (Transformer<? super SQLTransientException, String>) invokerTransformer0, "5HPM/>9fXqp)epB<:5h", "TfhwL", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("wu2i;", classArray0, classArray0);
      OrderedIterator<SQLTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) orderedIterator0, (Transformer<? super SQLTransientException, String>) invokerTransformer0, "", (String) null, "Transformer must not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 7);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, (Object[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) resettableIterator0, (Transformer<? super SQLTransientException, String>) invokerTransformer0, (String) null, "", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) resettableIterator0, (Transformer<? super SQLTransientException, String>) null, "|S*+6dkT+gU", "|S*+6dkT+gU", "o@4t7#vU=t");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-75));
      linkedList0.add(integer0);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(linkedList0);
      // Undeclared exception!
      IteratorUtils.size(loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(linkedList0);
      int int0 = IteratorUtils.size(loopingListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("aH");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("aH", "B[shlD$*]`", sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) singletonIterator0, 2098);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2097
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLException>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, 123);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 123
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedIterator<Predicate<Object>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(orderedIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 923);
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLDataException0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) singletonIterator0, (Predicate<? super SQLNonTransientException>) identityPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("NodeList must not be null", "NodeList must not be null", 123);
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLDataException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(iIOMetadataNode0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      predicateArray0[1] = (Predicate<Object>) identityPredicate0;
      predicateArray0[2] = (Predicate<Object>) identityPredicate0;
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      predicateArray0[4] = (Predicate<Object>) identityPredicate0;
      predicateArray0[5] = (Predicate<Object>) identityPredicate0;
      predicateArray0[6] = (Predicate<Object>) identityPredicate0;
      predicateArray0[7] = (Predicate<Object>) identityPredicate0;
      predicateArray0[8] = (Predicate<Object>) identityPredicate0;
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) singletonIterator0, (Predicate<? super SQLNonTransientException>) nonePredicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedIterator<Predicate<Object>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(orderedIterator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) identityPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableIterator0);
      LoopingIterator<SQLNonTransientException> loopingIterator0 = new LoopingIterator<SQLNonTransientException>(list0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) loopingIterator0, (Predicate<? super SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<IIOMetadataNode>[] linkedListArray0 = (LinkedList<IIOMetadataNode>[]) Array.newInstance(LinkedList.class, 3);
      ResettableListIterator<LinkedList<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      Transformer<Object, Iterator<SQLNonTransientConnectionException>> transformer0 = ConstantTransformer.nullTransformer();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, notPredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedList<IIOMetadataNode>>) resettableListIterator0, (Predicate<? super LinkedList<IIOMetadataNode>>) transformedPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MapIterator<DataTruncation, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(mapIterator0);
      HashMap<LinkedList<IIOMetadataNode>, SQLDataException> hashMap0 = new HashMap<LinkedList<IIOMetadataNode>, SQLDataException>();
      EntrySetMapIterator<LinkedList<IIOMetadataNode>, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<LinkedList<IIOMetadataNode>, SQLDataException>(hashMap0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedList<IIOMetadataNode>>) entrySetMapIterator0, (Predicate<? super LinkedList<IIOMetadataNode>>) identityPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedList<IIOMetadataNode>>) null, (Predicate<? super LinkedList<IIOMetadataNode>>) identityPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ListIterator<LinkedList<IIOMetadataNode>> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<LinkedList<IIOMetadataNode>>) listIterator0, (Predicate<? super LinkedList<IIOMetadataNode>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("The object and transformer map must not be null", "", (int[]) null);
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) batchUpdateException0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      SQLException sQLException0 = IteratorUtils.find((Iterator<SQLException>) listIterator0, (Predicate<? super SQLException>) predicate0);
      assertNotNull(sQLException0);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) batchUpdateException0);
      IteratorUtils.find((Iterator<SQLException>) listIterator0, (Predicate<? super SQLException>) equalPredicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      Object object0 = IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) notPredicate0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLTimeoutException>) orderedMapIterator0, (Predicate<? super SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      ObjectArrayListIterator<Closure<Object>> objectArrayListIterator0 = new ObjectArrayListIterator<Closure<Object>>(closureArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Closure<Object>>) objectArrayListIterator0, (Predicate<? super Closure<Object>>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("HQ");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>((Predicate<? super Object>) null, transformer0, transformer0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) ifTransformer0);
      IteratorUtils.apply((Iterator<Properties>) null, (Closure<? super Properties>) closure0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Properties>) resettableIterator0, (Closure<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("WKiHz.kB^MZ=,!8*#");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLFeatureNotSupportedException0, comparator0, comparatorPredicate_Criterion0);
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(comparatorPredicate0, transformerClosure0, transformerClosure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) ifClosure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Estimated size must be greater than 0");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<LinkedList<IIOMetadataNode>, SQLDataException> hashMap0 = new HashMap<LinkedList<IIOMetadataNode>, SQLDataException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(";g+;)x\r2|`H8+q+p~", ";g+;)x\r2|`H8+q+p~");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LoopingListIterator<Boolean> loopingListIterator0 = new LoopingListIterator<Boolean>(linkedList0);
      SQLDataException sQLDataException0 = new SQLDataException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLDataException0, comparator0, comparatorPredicate_Criterion0);
      PredicateTransformer<SQLException> predicateTransformer0 = new PredicateTransformer<SQLException>(comparatorPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(sQLDataException0);
      linkedList0.add(boolean0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Boolean>) loopingListIterator0, 1);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLTransientException>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) abstractMapIteratorDecorator0, (-1933));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) null, 3792);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<Integer, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) orderedMapIterator0, (Class<Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OrderedMapIterator<Integer, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterable<Object> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<?>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) treeSet0);
      Iterable<SQLInvalidAuthorizationSpecException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<SQLClientInfoException, BatchUpdateException> hashMap0 = new HashMap<SQLClientInfoException, BatchUpdateException>();
      EntrySetMapIterator<SQLClientInfoException, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, BatchUpdateException>(hashMap0);
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(entrySetMapIterator0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) listIteratorWrapper0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null, (Collection<? super SQLNonTransientConnectionException>) linkedHashSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) resettableListIterator0, 733);
      Hashtable<SQLClientInfoException, BatchUpdateException> hashtable0 = new Hashtable<SQLClientInfoException, BatchUpdateException>();
      EntrySetMapIterator<SQLClientInfoException, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, BatchUpdateException>(hashtable0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) entrySetMapIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) list0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) vector0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(stack0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("ik&.UCNUiWB>r");
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, predicate0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) reverseListIterator0, (Predicate<? super SQLTransientConnectionException>) transformedPredicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Predicate<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) uniquePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      BoundedIterator<Locale.FilteringMode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) singletonIterator0, 1L, 1L);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) boundedIterator0, (Transformer<? super Locale.FilteringMode, ? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 7);
      Transformer<Locale.FilteringMode, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) null, (Transformer<? super Locale.FilteringMode, ? extends SQLTransientConnectionException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Hashtable<SQLNonTransientConnectionException, SQLWarning> hashtable0 = new Hashtable<SQLNonTransientConnectionException, SQLWarning>();
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLWarning>(hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<?>) resettableIterator0, (Iterator<?>) entrySetMapIterator0, (Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<Object, IIOMetadataNode>("6l+[ |ec5hEX[", classArray0, classArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '6l+[ |ec5hEX[' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("#R)lNZqA_b", "c'r)^qn V:~ R*'odf");
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, SQLTransientException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransientException>("Entry does not exist: ", classArray0, classArray0);
      Iterator<SQLException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, ? extends SQLException>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, (long) 3303);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'Entry does not exist: ' on 'class java.sql.SQLTransientConnectionException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 716, 716);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      AllPredicate<IIOMetadataNode> allPredicate0 = new AllPredicate<IIOMetadataNode>((Predicate<? super IIOMetadataNode>[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) allPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("[]");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<ArrayList<SQLException>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Locale[] localeArray0 = new Locale[9];
      ResettableIterator<Locale> resettableIterator0 = IteratorUtils.arrayIterator(localeArray0);
      Predicate<Locale> predicate0 = ExceptionPredicate.exceptionPredicate();
      OrPredicate<Locale> orPredicate0 = new OrPredicate<Locale>(predicate0, predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Locale>) resettableIterator0, (Predicate<? super Locale>) orPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Locale.LanguageRange, BatchUpdateException>[] hashMapArray0 = (HashMap<Locale.LanguageRange, BatchUpdateException>[]) Array.newInstance(HashMap.class, 3);
      ResettableListIterator<HashMap<Locale.LanguageRange, BatchUpdateException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashMapArray0, 0, 3);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[2];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 1, (-1974));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(vector0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) loopingListIterator0, (Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("$m!_zL");
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 2);
      Transformer<SQLRecoverableException, SQLRecoverableException> transformer0 = InvokerTransformer.invokerTransformer("$m!_zL", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '$m!_zL' on 'class java.sql.SQLRecoverableException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) resettableIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) treeSet0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) orderedIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>(1615);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) arrayDeque0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1972, 31);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 3651);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      SingletonIterator<Vector<DataTruncation>> singletonIterator0 = new SingletonIterator<Vector<DataTruncation>>(stack0);
      boolean boolean0 = IteratorUtils.contains((Iterator<Vector<DataTruncation>>) singletonIterator0, (Object) stack0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 12);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, true, (-1), 3139, sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", dataTruncation0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) listIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0);
      assertTrue(listIterator0.hasPrevious());
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[7];
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLWarning>) resettableListIterator0, (Predicate<? super SQLWarning>) anyPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }
}
