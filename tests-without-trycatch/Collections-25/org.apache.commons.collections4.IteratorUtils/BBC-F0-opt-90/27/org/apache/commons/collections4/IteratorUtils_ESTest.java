/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 18:09:38 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<DataTruncation, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLFeatureNotSupportedException>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector<ClientInfoStatus> vector0 = new Vector<ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      vector0.add(clientInfoStatus0);
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ClientInfoStatus>) vector0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<ClientInfoStatus>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>((SQLTimeoutException) null);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) singletonListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>((Predicate<? super SQLException>) null);
      ListIterator<SQLException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) reverseListIterator0, (Predicate<? super SQLException>) nullIsTruePredicate0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("start");
      String string0 = IteratorUtils.toString((Iterator<SQLException>) listIterator0, (Transformer<? super SQLException, String>) constantTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MapIterator<Locale.Category, Stack<Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<Locale.Category, Stack<Object>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.Category, Stack<Object>>(mapIterator0);
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category[] locale_CategoryArray0 = IteratorUtils.toArray((Iterator<? extends Locale.Category>) abstractMapIteratorDecorator0, class0);
      assertEquals(0, locale_CategoryArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("!Y91/M-", "!Y91/M-", (-519));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      linkedList0.add(sQLIntegrityConstraintViolationException0);
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.objectGraphIterator(enumSet0, (Transformer<? super EnumSet<Locale.Category>, ? extends EnumSet<Locale.Category>>) null);
      SkippingIterator<EnumSet<Locale.Category>> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 1513L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) loopingListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(") > toIndex(");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Transformer must not be null", "Transformer must not be null", sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLTransactionRollbackException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) singletonListIterator0);
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      ObjectArrayListIterator<Locale.Category> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.Category>(locale_CategoryArray0);
      IteratorUtils.get((Iterator<Locale.Category>) objectArrayListIterator0, 0);
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertEquals(1, objectArrayListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate(object0, comparator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLTransientException sQLTransientException0 = new SQLTransientException("A");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("A", "A", 37, sQLTransientException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0);
      SQLRecoverableException sQLRecoverableException1 = IteratorUtils.find((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertEquals("A", sQLRecoverableException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>((SQLTimeoutException) null);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTimeoutException>) singletonListIterator0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, 237L, 237L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(arrayList0);
      BoundedIterator<SQLException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLException>) reverseListIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      ResettableListIterator<Closure<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(closureArray0, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[0];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Transformer<Object, ArrayDeque<SQLNonTransientException>>>) null, (Iterator<? extends Transformer<Object, ArrayDeque<SQLNonTransientException>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(25);
      integerArray0[0] = integer0;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      IfTransformer<Integer, String> ifTransformer0 = new IfTransformer<Integer, String>(predicate0, invokerTransformer0, invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Integer>) objectArrayListIterator0, (Transformer<? super Integer, String>) ifTransformer0, "", "", "))idI<:xWiQ");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.lang.Integer' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("hLi*iayF?-");
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 4);
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIteratorWrapper0, 97);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, sQLDataException0);
      Transformer<SQLException, SQLTimeoutException> transformer0 = InvokerTransformer.invokerTransformer("NIl3ed9:");
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'NIl3ed9:' on 'class java.sql.SQLTimeoutException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>(linkedList0);
      LoopingListIterator<Locale.Category> loopingListIterator0 = new LoopingListIterator<Locale.Category>(vector0);
      vector0.add(locale_Category0);
      Class<Locale.Category> class0 = Locale.Category.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends Locale.Category>) loopingListIterator0, class0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "5v!3V1_RGw|");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      linkedList0.add(sQLIntegrityConstraintViolationException0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) linkedList0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      Transformer<Object, EnumSet<Locale.Category>> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.objectGraphIterator(enumSet0, (Transformer<? super EnumSet<Locale.Category>, ? extends EnumSet<Locale.Category>>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, 751L);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", " +2G {DJK%ifl>@9", 70);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLRecoverableException0);
      IfTransformer<Object, SQLNonTransientConnectionException> ifTransformer0 = new IfTransformer<Object, SQLNonTransientConnectionException>(predicate0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) null, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) null);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) ifTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("!Y91/M-", "!Y91/M-", (-519));
      Transformer<SQLException, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer(")ik_4;9V7{q@aFyE6");
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLFeatureNotSupportedException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.isEmpty(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method ')ik_4;9V7{q@aFyE6' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Transformer<Locale.Category, Locale.Category> transformer0 = InvokerTransformer.invokerTransformer("V{x");
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 16);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'V{x' on 'class java.util.Locale$Category' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Locale.Category>) null, 2649);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<Locale.Category>) objectArrayIterator0;
      iteratorArray0[1] = (Iterator<Locale.Category>) objectArrayIterator0;
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 1076);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // You must invoke setComparator() to set a comparator first.
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("InstantiateFactory: Constructor must be public", "InstantiateFactory: Constructor must be public");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLIntegrityConstraintViolationException0);
      arrayList0.add(sQLTimeoutException0);
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(arrayList0);
      // Undeclared exception!
      IteratorUtils.contains((Iterator<SQLTimeoutException>) loopingIterator0, (Object) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PriorityQueue<ClientInfoStatus> priorityQueue0 = new PriorityQueue<ClientInfoStatus>(1248);
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends ClientInfoStatus>) priorityQueue0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>) resettableIterator0, (Iterator<? extends ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Iterator<Locale.Category> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) iterator0, 916L, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, 69, 69);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(instanceofPredicateArray0, 1, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 9, 9);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((ArrayDeque<SQLNonTransientException>[]) null, 4465);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ServiceLoader<SQLTransactionRollbackException>[] serviceLoaderArray0 = (ServiceLoader<SQLTransactionRollbackException>[]) Array.newInstance(ServiceLoader.class, 4);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(serviceLoaderArray0, (-2516));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Transformer<Object, ArrayDeque<SQLNonTransientException>>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-519), (-519));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1226));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((String[]) null, 488, 488);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 402, 402);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 56);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, 960, 960);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("'[$L(!+HX_", sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("vVg-@L;", "vVg-@L;", sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(".8QTUpF:P%SHfl`}");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0);
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(list0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<SQLException> closure0 = ChainedClosure.chainedClosure((Closure<? super SQLException>[]) closureArray0);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) loopingIterator0, (Closure<? super SQLSyntaxErrorException>) closure0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>((Factory<? extends SQLTimeoutException>) null);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(factoryTransformer0);
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 0, 0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<DataTruncation>) singletonIterator0, (Closure<? super DataTruncation>) transformerClosure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = new Integer(100);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Integer>) singletonIterator0, (Transformer<? super Integer, String>) null, (String) null, (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) allPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      SingletonIterator<ArrayDeque<SQLNonTransientException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLNonTransientException>>(arrayDeque0, false);
      List<ArrayDeque<SQLNonTransientException>> list0 = IteratorUtils.toList((Iterator<? extends ArrayDeque<SQLNonTransientException>>) singletonIterator0, 3);
      assertTrue(list0.contains(arrayDeque0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MapIterator<ArrayDeque<SQLNonTransientException>, Boolean> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<ArrayDeque<SQLNonTransientException>> list0 = IteratorUtils.toList((Iterator<? extends ArrayDeque<SQLNonTransientException>>) mapIterator0, 100);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends ArrayDeque<SQLNonTransientException>>) null, 91);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("J:-O 'zWJ5?8#", "1;E}GF6*HGK64' k-A", 125);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("1;E}GF6*HGK64' k-A");
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (long) 125, (long) 125);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '1;E}GF6*HGK64' k-A' on 'class java.sql.SQLTransactionRollbackException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      IfTransformer<Integer, String> ifTransformer0 = new IfTransformer<Integer, String>(predicate0, invokerTransformer0, invokerTransformer0);
      String string0 = IteratorUtils.toString((Iterator<Integer>) objectArrayListIterator0, (Transformer<? super Integer, String>) ifTransformer0, "", "", "))idI<:xWiQ");
      assertEquals("null))idI<:xWiQ", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) mapIterator0);
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) transformer0, "!Y91/M-", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      String string0 = IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) factoryTransformer0, ", ", "", "toIndex = ");
      assertEquals("toIndex = ", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedHashSet<SQLTimeoutException>[] linkedHashSetArray0 = (LinkedHashSet<SQLTimeoutException>[]) Array.newInstance(LinkedHashSet.class, 1);
      ResettableListIterator<LinkedHashSet<SQLTimeoutException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedHashSetArray0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<SQLTimeoutException>>) resettableListIterator0, (Transformer<? super LinkedHashSet<SQLTimeoutException>, String>) transformer0, "*m", "*m", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ArrayDeque<SQLWarning> arrayDeque0 = new ArrayDeque<SQLWarning>();
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLException>) arrayDeque0);
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) transformer0, "", (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Stack<SQLException> stack0 = new Stack<SQLException>();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) stack0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) transformer0, (String) null, (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[20];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      int int0 = IteratorUtils.size(objectArrayIterator0);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<IIOMetadataNode, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("transformer may not be null");
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.size(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'transformer may not be null' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[16];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      IteratorUtils.get((Iterator<Locale.Category>) objectArrayIterator0, 14);
      assertTrue(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Locale.Category>) objectArrayIterator0, 1076);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1068
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 2);
      ResettableListIterator<Locale.Category> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[0] = (Iterator<Locale.Category>) resettableListIterator0;
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) iteratorArray0[0], (Iterator<? extends Locale.Category>) iteratorArray0[0], (Iterator<? extends Locale.Category>) iteratorArray0[0]);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Locale.Category>) zippingIterator0, 240);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 240
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<DataTruncation>) orderedIterator0;
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) zippingIterator0, (Iterator<? extends SQLWarning>) orderedIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Transformer must not be null", "Transformer must not be null", 0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(") > toIndex(");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Transformer must not be null", "Transformer must not be null", sQLTransientConnectionException0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ConstantTransformer.constantTransformer(sQLTransactionRollbackException0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLNonTransientConnectionException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer(536);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate(integer0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) singletonIterator0, (Predicate<? super Integer>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("pTC~jwg&ix+tq9", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Node must not be null", "Node must not be null", 10, sQLInvalidAuthorizationSpecException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLRecoverableException0, (Equator<Object>) defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLNonTransientException>>) null, (Predicate<? super ArrayDeque<SQLNonTransientException>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = new Integer(536);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) singletonIterator0, (Predicate<? super Integer>) uniquePredicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTimeoutException>) null, (Object) arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Properties>) null, (Predicate<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(70, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate(object0, comparator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0);
      SQLRecoverableException sQLRecoverableException0 = IteratorUtils.find((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertNull(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Hashtable<SQLRecoverableException, BatchUpdateException> hashtable0 = new Hashtable<SQLRecoverableException, BatchUpdateException>();
      EntrySetMapIterator<SQLRecoverableException, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, BatchUpdateException>(hashtable0);
      Properties properties0 = new Properties();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) properties0, comparator0);
      Predicate<SQLRecoverableException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLRecoverableException>) predicate0, (Predicate<? super SQLRecoverableException>) predicate0);
      SQLRecoverableException sQLRecoverableException0 = IteratorUtils.find((Iterator<SQLRecoverableException>) entrySetMapIterator0, (Predicate<? super SQLRecoverableException>) predicate1);
      assertNull(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, SQLRecoverableException>[] transformerArray0 = (Transformer<Object, SQLRecoverableException>[]) Array.newInstance(Transformer.class, 3);
      SwitchTransformer<Object, SQLRecoverableException> switchTransformer0 = new SwitchTransformer<Object, SQLRecoverableException>(predicateArray0, transformerArray0, transformerArray0[0]);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, (Transformer<? super BatchUpdateException, ? extends SQLRecoverableException>) switchTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) arrayList0, comparator0);
      SQLRecoverableException sQLRecoverableException0 = IteratorUtils.find((Iterator<SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate0);
      assertNull(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Factory<SQLTimeoutException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(factoryTransformer0);
      IteratorUtils.apply((Iterator<DataTruncation>) resettableListIterator0, (Closure<? super DataTruncation>) transformerClosure0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<DataTruncation>) null, (Closure<? super DataTruncation>) closure0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) null, (Closure<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<TreeSet<Closure>>) iterator0, (Closure<? super TreeSet<Closure>>) ifClosure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("=h!eO_XGJVKGz", sQLWarning0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[18];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(objectArrayIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MapIterator<ArrayDeque<SQLNonTransientException>, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends ArrayDeque<SQLNonTransientException>>) mapIterator0, (-519));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[18];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends Locale.Category>) objectArrayIterator0, (Class<Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends Locale.Category>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category[] locale_CategoryArray1 = IteratorUtils.toArray((Iterator<? extends Locale.Category>) objectArrayIterator0, class0);
      assertNotSame(locale_CategoryArray0, locale_CategoryArray1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Iterator<SQLException> iterator0 = EmptyIterator.emptyIterator();
      Iterable<SQLException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLException>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("Xtart", false);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) singletonIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null, (Collection<? super String>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0, 0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MapIterator<DataTruncation, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) mapIterator0);
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Class to instantiate must not be null");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) arrayList0);
      Iterable<BatchUpdateException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) reverseListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) null, (Predicate<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>((Predicate<? super SQLException>) null);
      ListIterator<SQLException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) reverseListIterator0, (Predicate<? super SQLException>) nullIsTruePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLException>) listIterator0, (Predicate<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedMapIterator<Locale.Category, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) orderedMapIterator0, (Predicate<? super Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) null, (Predicate<? super SQLDataException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      SingletonIterator<ArrayDeque<SQLNonTransientException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLNonTransientException>>(arrayDeque0, false);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Iterator<ArrayDeque<SQLNonTransientException>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends ArrayDeque<SQLNonTransientException>>) singletonIterator0, (Predicate<? super ArrayDeque<SQLNonTransientException>>) allPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) null, (Transformer<? super SQLTransientException, ? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) resettableListIterator0, (Transformer<? super SQLTransientException, ? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 9);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.objectGraphIterator(enumSet0, (Transformer<? super EnumSet<Locale.Category>, ? extends EnumSet<Locale.Category>>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, (-524L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Transformer<? super SQLSyntaxErrorException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 10, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 3366);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.Category, SQLWarning>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator((Integer) null);
      Iterator<Integer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Integer>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLWarning[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(predicateArray0, 0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, (-383));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("71hVnoe", "Transformer must not be null", (-3611));
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(stack0);
      OrderedMapIterator<DataTruncation, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) reverseListIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("");
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) listIterator0, (-3648L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iterator0, (-2207), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("v");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 0, 2035);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Closure must not be null", "Predicate must not be null", 0, (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 123, 123, sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Closure must not be null", dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, 0, (-3779));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0, 2);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "", 0, sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")3vd?~@", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(")3vd?~@", sQLRecoverableException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("71hVnoe", "Transformer must not be null", (-3611));
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 159);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, (Transformer<? super Object, ? extends String>[]) null, transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) switchTransformer0, "H/DVv9EY", "", "H/DVv9EY");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Vector<ClientInfoStatus> vector0 = new Vector<ClientInfoStatus>();
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ClientInfoStatus>) vector0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<ClientInfoStatus>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }
}
