/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 06:46:01 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) objectArrayIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commonsB^ollections4.map.AbstractLinkedMap$LinkIterator", "org.apache.commonsB^ollections4.map.AbstractLinkedMap$LinkIterator", (Throwable) null);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) zippingIterator0, 32);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      IteratorUtils.emptyIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Enumeration must not be null", "Enumeration must not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Enumeration must not be null", "Array class must not be null", sQLInvalidAuthorizationSpecException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLDataException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException((String) null, sQLInvalidAuthorizationSpecException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException(";Jx=?I[='OM", "", sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "", hashMap0, sQLSyntaxErrorException2);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("2cECG:MF*v)Ut\"8", "Array class must not be null", 1, sQLClientInfoException1);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 10, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedMapIterator0, class0);
      IteratorUtils.getIterator(class0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends SQLException>) orderedMapIterator1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      IteratorUtils.size(orderedMapIterator2);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0, (byte)1);
      IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) objectArrayIterator0, 4L, 1L);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Object>) listIterator0, (Transformer<? super Object, String>) transformer0, "", "h", "List must not be null");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.getIterator(class0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Predicate<Object>>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, PriorityQueue<Properties>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.getIterator(class0);
      IteratorUtils.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      IteratorUtils.singletonIterator(sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      SQLWarning[] sQLWarningArray0 = IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedMapIterator0, class0);
      IteratorUtils.getIterator(class0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends SQLException>) orderedMapIterator1);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      IteratorUtils.singletonListIterator((ArrayDeque<EnumSet>) arrayDeque0);
      Properties properties0 = new Properties();
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>("", (Class<?>[]) null, sQLWarningArray0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.util.Properties' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Iterator<Boolean> iterator0 = null;
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends Boolean>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Factory<SQLTransactionRollbackException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<StringTokenizer, SQLTransactionRollbackException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTransactionRollbackException>) factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) null, (Transformer<? super StringTokenizer, ? extends SQLTransactionRollbackException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(vector0);
      IteratorUtils.asIterable((Iterator<? extends SQLTransientException>) reverseListIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      InvokerTransformer.invokerTransformer("9CZ");
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) listIterator0, (Transformer<? super StringTokenizer, ? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>(1999);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("List must not be null");
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) listIterator0, (Transformer<? super StringTokenizer, ? extends SQLTransactionRollbackException>) transformer0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      IteratorUtils.singletonListIterator("org.apache.commons.collections4.functors.TransformerClosure");
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 859;
      SQLDataException sQLDataException0 = new SQLDataException("List must not be null", "", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLDataException0);
      ConstantTransformer<Object, BatchUpdateException> constantTransformer0 = new ConstantTransformer<Object, BatchUpdateException>(batchUpdateException0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) constantTransformer0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      Predicate<Object> predicate3 = AndPredicate.andPredicate((Predicate<? super Object>) predicate2, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator1, (Predicate<? super BatchUpdateException>) predicate3);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'List must not be null' on 'class java.sql.BatchUpdateException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, Locale.Category> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      Closure<Object> closure0 = WhileClosure.whileClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) transformerClosure0, true);
      IteratorUtils.apply((Iterator<PriorityQueue<Boolean>>) null, (Closure<? super PriorityQueue<Boolean>>) closure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) predicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.getIterator(class0);
      Transformer<Object, Object> transformer0 = InvokerTransformer.invokerTransformer("underlying nodeList has no more elements");
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.apply((Iterator<PriorityQueue<Boolean>>) null, (Closure<? super PriorityQueue<Boolean>>) transformerClosure0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(mapIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Rt[Aj9l,VW");
      DataTruncation dataTruncation0 = new DataTruncation(987, true, false, 10, 16);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) resettableIterator0, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("I'i^g1o`@@:<f'[gm{", sQLTransientConnectionException0);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<Object, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("Rt[Aj9l,VW");
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) orderedIterator0, (Transformer<? super StringTokenizer, ? extends SQLTransactionRollbackException>) transformer0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLNonTransientException, SQLDataException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toArray((Iterator<?>) mapIterator1);
      Object object0 = null;
      int int0 = 2107;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 2107);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Vector<Properties> vector0 = new Vector<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) vector0);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>(0);
      IteratorUtils.singletonListIterator((ArrayDeque<EnumSet>) arrayDeque0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      IteratorUtils.matchesAny((Iterator<Integer>) singletonListIterator0, (Predicate<? super Integer>) uniquePredicate0);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLWarning sQLWarning0 = new SQLWarning("[^5-ZT2:1", "[^5-ZT2:1");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0, sQLWarning0);
      arrayDeque0.add(sQLFeatureNotSupportedException0);
      ArrayDeque<SQLTimeoutException> arrayDeque1 = new ArrayDeque<SQLTimeoutException>();
      IteratorUtils.singletonListIterator((ArrayDeque<EnumSet>) arrayDeque0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 100, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Transformer<Object, Locale.Category> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      PriorityQueue<Boolean>[] priorityQueueArray0 = (PriorityQueue<Boolean>[]) Array.newInstance(PriorityQueue.class, 2);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<Boolean> priorityQueue1 = new PriorityQueue<Boolean>();
      priorityQueueArray0[1] = priorityQueue1;
      ObjectArrayIterator<PriorityQueue<Boolean>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<Boolean>>(priorityQueueArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<PriorityQueue<Boolean>>) objectArrayIterator0, (Closure<? super PriorityQueue<Boolean>>) transformerClosure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      OrderedMapIterator<SQLNonTransientConnectionException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties>(orderedMapIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) orderedMapIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, "", "", "U(.K6}");
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      IteratorUtils.singletonListIterator((ArrayDeque<EnumSet>) arrayDeque0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 6);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 58);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLDataException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) resettableIterator1;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator2 = IteratorUtils.emptyIterator();
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) resettableIterator2;
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<Object, SQLTransactionRollbackException> transformer1 = InvokerTransformer.invokerTransformer("U(.K6}");
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) orderedIterator0, (Transformer<? super StringTokenizer, ? extends SQLTransactionRollbackException>) transformer1);
      iteratorArray0[3] = iterator0;
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      iteratorArray0[4] = iterator1;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException[]) null, 32);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLDataException sQLDataException0 = new SQLDataException("orgRapache.commons.collections4.functors.StringValueTransformer");
      IteratorUtils.getIterator("uR-s8ez,-boZ_vc");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedMapIterator<Locale.Category, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Locale.Category>) orderedMapIterator0, (Predicate<? super Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commonsB^ollections4.map.AbstractLinkedMap$LinkIterator", "org.apache.commonsB^ollections4.map.AbstractLinkedMap$LinkIterator", (Throwable) null);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLInvalidAuthorizationSpecException0);
      NotPredicate<Locale.Category> notPredicate0 = new NotPredicate<Locale.Category>(predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.Category>) notPredicate0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ListIterator<Locale.Category> listIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      IteratorUtils.matchesAll((Iterator<Locale.Category>) listIterator0, (Predicate<? super Locale.Category>) predicate0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 1);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.CloneTransformer", sQLInvalidAuthorizationSpecException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.CloneTransformer", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("LESS", "org.apache.commons.collections4.functors.CloneTransformer");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Entry does not exist: ", "");
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.CloneTransformer", "3aC", (-1224), sQLSyntaxErrorException0);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 2245);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLDataException sQLDataException0 = new SQLDataException("orgRapache.commons.collections4.functors.StringValueTransformer");
      IteratorUtils.getIterator("uR-s8ez-boZ_vc");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLClientInfoException0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<ClientInfoStatus>) null, (Predicate<? super ClientInfoStatus>) comparatorPredicate0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commonsB^ollections4.map.AbstractLinkedMap$LinkIterator", "org.apache.commonsB^ollections4.map.AbstractLinkedMap$LinkIterator", (Throwable) null);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) zippingIterator0, 0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commonsB^ollections4.map.AbstractLinkedMap$LinkIterator", "org.apache.commonsB^ollections4.map.AbstractLinkedMap$LinkIterator", sQLInvalidAuthorizationSpecException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      Iterator<SQLNonTransientConnectionException> iterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, "org.apache.commonsB^ollections4.map.AbstractLinkedMap$LinkIterator", "", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      OrderedMapIterator<SQLNonTransientConnectionException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends Properties>) orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties>(orderedMapIterator1);
      ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) orderedMapIterator1, (Transformer<? super SQLNonTransientConnectionException, String>) null, "Je}WXMvvtrS", "", "Je}WXMvvtrS");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTimeoutException0, false);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      SingletonIterator<SQLTransientException> singletonIterator1 = new SingletonIterator<SQLTransientException>(sQLTimeoutException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator1.forEachRemaining(consumer0);
      SingletonIterator<SQLTransientException> singletonIterator2 = new SingletonIterator<SQLTransientException>(sQLTimeoutException0, false);
      IteratorUtils.matchesAny((Iterator<SQLTransientException>) singletonIterator2, (Predicate<? super SQLTransientException>) predicate0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("M");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, sQLNonTransientException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLTransientConnectionException0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.Category>) orPredicate0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.matchesAll((Iterator<Locale.Category>) listIterator0, (Predicate<? super Locale.Category>) orPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.emptyListIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate1);
      TreeSet<Object>[] treeSetArray0 = (TreeSet<Object>[]) Array.newInstance(TreeSet.class, 7);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSetArray0[0] = treeSet0;
      TreeSet<Object> treeSet1 = new TreeSet<Object>();
      treeSetArray0[1] = treeSet1;
      TreeSet<Object> treeSet2 = new TreeSet<Object>();
      treeSetArray0[2] = treeSet2;
      TreeSet<Object> treeSet3 = new TreeSet<Object>();
      treeSetArray0[3] = treeSet3;
      TreeSet<Object> treeSet4 = new TreeSet<Object>();
      treeSetArray0[4] = treeSet4;
      TreeSet<Object> treeSet5 = new TreeSet<Object>();
      treeSetArray0[5] = treeSet5;
      TreeSet<Object> treeSet6 = new TreeSet<Object>();
      treeSetArray0[6] = treeSet6;
      ResettableListIterator<TreeSet<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0);
      Predicate<Object> predicate2 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<TreeSet<Object>>) resettableListIterator0, (Predicate<? super TreeSet<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      IteratorUtils.getIterator("org.apache.commons.collec8ions4.functors.StringValueTransformer");
      MapIterator<SQLNonTransientConnectionException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties>(mapIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) abstractMapIteratorDecorator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, "", (String) null, "jv52hYcLTN#");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties>(orderedMapIterator0);
      ConstantTransformer.nullTransformer();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) orderedMapIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, "org.apache.commons.collections4.IteratorUtils", (String) null, "Transformer collection must not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedMapIterator0, class0);
      IteratorUtils.emptyOrderedMapIterator();
      Vector<ArrayDeque<Locale.Category>> vector0 = new Vector<ArrayDeque<Locale.Category>>();
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      vector0.add(arrayDeque0);
      IteratorUtils.loopingListIterator((List<ArrayDeque<Locale.Category>>) vector0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("vj[(Kb 6~VCc");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vj[(Kb 6~VCc");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 3466, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 859);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      MapIterator<SQLNonTransientConnectionException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties>(mapIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) abstractMapIteratorDecorator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, (String) null, (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      SQLDataException sQLDataException0 = new SQLDataException("oo%2", "kd,q:nT:");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "aI2^XV*u'M&\"3Q", sQLDataException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTimeoutException0);
      Consumer<SQLTransientException> consumer0 = (Consumer<SQLTransientException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      SingletonIterator<SQLTransientException> singletonIterator1 = new SingletonIterator<SQLTransientException>(sQLTimeoutException0, false);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>((Predicate<? super SQLException>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLTransientException>) singletonIterator1, (Predicate<? super SQLTransientException>) notPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      SQLDataException sQLDataException0 = new SQLDataException("]");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",Z", "", 859);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      IteratorUtils.getIterator(stringTokenizer0);
      MapIterator<SQLNonTransientConnectionException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties>(mapIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) abstractMapIteratorDecorator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, ",Z", "", ",Z");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((LinkedHashSet<SQLTransientException>[]) null, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) priorityQueue0);
      IteratorUtils.toListIterator((Iterator<? extends Integer>) iterator0);
      SQLDataException sQLDataException0 = new SQLDataException("[");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Iterator<?> iterator1 = IteratorUtils.getIterator(enumeration0);
      IteratorUtils.size(iterator1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Predicate<StringTokenizer>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("SP?a(fc<o Z", "org.apache.commons.collections4.functors.StringValueTransformer");
      IteratorUtils.size(orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(mapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.functors.StringValueTransformer", "");
      IteratorUtils.size(mapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("j!LL1", sQLTransientConnectionException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) singletonIterator0, (Iterator<? extends SQLTransientException>) singletonIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLTransientException>) zippingIterator0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SingletonListIterator<LinkedList<Integer>> singletonListIterator0 = new SingletonListIterator<LinkedList<Integer>>(linkedList0);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedHashSet0);
      HashSet<Properties> hashSet1 = new HashSet<Properties>();
      HashSet<Properties>[] hashSetArray0 = (HashSet<Properties>[]) Array.newInstance(HashSet.class, 5);
      hashSetArray0[0] = (HashSet<Properties>) linkedHashSet0;
      HashSet<Properties> hashSet2 = new HashSet<Properties>();
      hashSetArray0[1] = hashSet2;
      hashSetArray0[2] = (HashSet<Properties>) linkedHashSet0;
      hashSetArray0[3] = hashSet0;
      hashSetArray0[4] = (HashSet<Properties>) linkedHashSet0;
      ResettableIterator<HashSet<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(hashSetArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      MapIterator<ArrayDeque<Iterator<ServiceLoader<SQLTransientException>>>, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("PrototypeCloneFactory: Clone method must be public");
      IteratorUtils.find((Iterator<ArrayDeque<Iterator<ServiceLoader<SQLTransientException>>>>) mapIterator0, (Predicate<? super ArrayDeque<Iterator<ServiceLoader<SQLTransientException>>>>) identityPredicate0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "Entry does not exist: ", 1617, hashtable0);
      IdentityPredicate.identityPredicate(sQLClientInfoException0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(identityPredicate0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) nullIsTruePredicate0, (Closure<? super Object>) closure0, false);
      IteratorUtils.apply((Iterator<HashSet<Properties>>) resettableIterator0, (Closure<? super HashSet<Properties>>) closure1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Predicate<StringTokenizer>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.size(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(mapIterator0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Predicate must not be null");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("Predicate must not be null");
      Node node0 = iIOMetadataNode0.removeChild(iIOMetadataNode1);
      Node node1 = iIOMetadataNode0.appendChild(node0);
      iIOMetadataNode0.insertBefore(node1, iIOMetadataNode1);
      iIOMetadataNode0.getChildNodes();
      SQLDataException sQLDataException0 = new SQLDataException("?");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("50C`\"!7=9<8y", "AA>~w", (-1393));
      IteratorUtils.getIterator(listIteratorWrapper0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      ReverseListIterator<SQLTransientException> reverseListIterator0 = new ReverseListIterator<SQLTransientException>(stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) reverseListIterator0, (Transformer<? super SQLTransientException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.Category>) predicate0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.matchesAll((Iterator<Locale.Category>) listIterator0, (Predicate<? super Locale.Category>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedHashSet0);
      HashSet<Properties> hashSet1 = new HashSet<Properties>();
      HashSet<Properties>[] hashSetArray0 = (HashSet<Properties>[]) Array.newInstance(HashSet.class, 8);
      hashSetArray0[0] = hashSet0;
      hashSetArray0[1] = hashSet0;
      hashSetArray0[2] = hashSet0;
      HashSet<Properties> hashSet2 = new HashSet<Properties>();
      hashSetArray0[3] = hashSet2;
      hashSetArray0[4] = hashSet1;
      hashSetArray0[5] = hashSet0;
      hashSetArray0[7] = hashSet0;
      ResettableIterator<HashSet<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(hashSetArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashSetArray0[6], defaultEquator0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(equalPredicate0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) equalPredicate0, (Closure<? super Object>) closure0, false);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<HashSet<Properties>>) resettableIterator0, (Closure<? super HashSet<Properties>>) closure1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("&~");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0, false);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      IteratorUtils.matchesAny((Iterator<SQLTransientException>) singletonIterator0, (Predicate<? super SQLTransientException>) predicate0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("&~");
      IteratorUtils.matchesAll((Iterator<Locale.Category>) null, (Predicate<? super Locale.Category>) predicate0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedHashSet0);
      HashSet<Properties> hashSet1 = new HashSet<Properties>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.Category>) instanceofPredicate0);
      IteratorUtils.matchesAll((Iterator<Locale.Category>) null, (Predicate<? super Locale.Category>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Locale.Category>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(mapIterator0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Predicate<Locale.Category> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.Category>) orPredicate0);
      IteratorUtils.matchesAll((Iterator<Locale.Category>) listIteratorWrapper0, (Predicate<? super Locale.Category>) predicate1);
      HashMap<SQLTransactionRollbackException, Locale.Category> hashMap0 = new HashMap<SQLTransactionRollbackException, Locale.Category>();
      EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category>(hashMap0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
      entrySetMapIterator0.reset();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("U&(9~[*QM");
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("U&(9~[*QM");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Estimated size must be greater than 0");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) orPredicate0);
      IteratorUtils.toString(iterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) constantTransformer0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SingletonListIterator<LinkedList<Integer>> singletonListIterator0 = new SingletonListIterator<LinkedList<Integer>>(linkedList0);
      HashSet<Properties>[] hashSetArray0 = (HashSet<Properties>[]) Array.newInstance(HashSet.class, 9);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      hashSetArray0[0] = (HashSet<Properties>) linkedHashSet0;
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      hashSetArray0[1] = (HashSet<Properties>) linkedHashSet1;
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      hashSetArray0[2] = hashSet0;
      HashSet<Properties> hashSet1 = new HashSet<Properties>();
      hashSetArray0[3] = hashSet1;
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      hashSetArray0[4] = (HashSet<Properties>) linkedHashSet2;
      LinkedHashSet<Properties> linkedHashSet3 = new LinkedHashSet<Properties>();
      hashSetArray0[5] = (HashSet<Properties>) linkedHashSet3;
      LinkedHashSet<Properties> linkedHashSet4 = new LinkedHashSet<Properties>();
      hashSetArray0[6] = (HashSet<Properties>) linkedHashSet4;
      HashSet<Properties> hashSet2 = new HashSet<Properties>(hashSetArray0[1]);
      hashSetArray0[7] = hashSet2;
      HashSet<Properties> hashSet3 = new HashSet<Properties>();
      hashSetArray0[8] = hashSet3;
      ResettableIterator<HashSet<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(hashSetArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashSet1, defaultEquator0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(equalPredicate0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) nullIsTruePredicate0, (Closure<? super Object>) closure0, false);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<HashSet<Properties>>) resettableIterator0, (Closure<? super HashSet<Properties>>) closure1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(mapIterator0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Predicate must not be null");
      iIOMetadataNode0.getChildNodes();
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(".W6[&A", "50C`\"!7=9<8y", (-1393));
      IteratorUtils.getIterator("e");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      HashMap<SQLTransactionRollbackException, Locale.Category> hashMap0 = new HashMap<SQLTransactionRollbackException, Locale.Category>();
      EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category>(hashMap0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
      entrySetMapIterator0.reset();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) iterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Boolean>) null, (-1L), 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.iterators.NodeListIterator", sQLWarning0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLWarning0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("org.apache.commons.collections4.iterators.NodeListIterator", "org.apache.commons.collections4.iterators.NodeListIterator", 834, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      ListIterator<SQLRecoverableException> listIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 6);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) resettableListIterator0);
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) iterator0, (long) 834);
      iteratorArray0[0] = (Iterator<SQLDataException>) boundedIterator0;
      Iterator<SQLDataException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) iterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      iteratorArray0[1] = iterator1;
      Iterator<SQLDataException> iterator2 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) iterator0);
      iteratorArray0[2] = iterator2;
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) iterator2, (Iterator<? extends SQLDataException>) resettableListIterator0);
      iteratorArray0[3] = (Iterator<SQLDataException>) zippingIterator0;
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      iteratorArray0[4] = (Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0;
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(vector0);
      iteratorArray0[5] = (Iterator<SQLDataException>) reverseListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "n}ItbzwFB";
      int int0 = 5475;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) null, 5475);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("&~");
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 4);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("u.Hz~i:0XjT@fhj#", classArray0, classArray0);
      OrderedIterator<LinkedList<Integer>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<LinkedList<Integer>>) orderedIterator0, (Transformer<? super LinkedList<Integer>, String>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.emptyOrderedMapIterator();
      Vector<ArrayDeque<Locale.Category>> vector0 = new Vector<ArrayDeque<Locale.Category>>();
      IteratorUtils.loopingListIterator((List<ArrayDeque<Locale.Category>>) vector0);
      String string0 = "1_4{$=r8)A\"C";
      Factory<SQLDataException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) factory0);
      String string1 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends DataTruncation>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("[[");
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<SQLTransactionRollbackException, Locale.Category> hashtable0 = new Hashtable<SQLTransactionRollbackException, Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      hashtable0.remove((Object) locale_Category0, (Object) sQLTimeoutException0);
      EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category>(hashtable0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
      entrySetMapIterator0.reset();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) iterator0, class0);
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      IteratorUtils.arrayListIterator(propertiesArray0, 5, 5);
      MapIterator<Integer, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Integer, SQLWarning> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(linkedHashSet0);
      HashSet<Properties> hashSet1 = new HashSet<Properties>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      TreeSet<Object>[] treeSetArray0 = (TreeSet<Object>[]) Array.newInstance(TreeSet.class, 1);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSetArray0[0] = treeSet0;
      ResettableListIterator<TreeSet<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      TreeSet<Object> treeSet1 = IteratorUtils.find((Iterator<TreeSet<Object>>) resettableListIterator0, (Predicate<? super TreeSet<Object>>) orPredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ArrayIterator<SQLTransientConnectionException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLTransientConnectionException>(treeSet1, (-828), (-828));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      TreeSet<Object>[] treeSetArray0 = (TreeSet<Object>[]) Array.newInstance(TreeSet.class, 9);
      treeSetArray0[0] = treeSet0;
      treeSetArray0[1] = treeSet0;
      TreeSet<Object> treeSet1 = new TreeSet<Object>();
      treeSetArray0[3] = treeSet0;
      treeSetArray0[4] = treeSet0;
      TreeSet<Object> treeSet2 = new TreeSet<Object>();
      treeSetArray0[5] = treeSet2;
      treeSetArray0[6] = treeSet0;
      treeSetArray0[7] = treeSet0;
      treeSetArray0[8] = treeSet0;
      ResettableListIterator<TreeSet<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find((Iterator<TreeSet<Object>>) resettableListIterator0, (Predicate<? super TreeSet<Object>>) instanceofPredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ArrayIterator<SQLTransientConnectionException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLTransientConnectionException>(treeSet0, (-828), 25);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(mapIterator0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      TreeSet<Object>[] treeSetArray0 = (TreeSet<Object>[]) Array.newInstance(TreeSet.class, 0);
      ResettableListIterator<TreeSet<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find((Iterator<TreeSet<Object>>) resettableListIterator0, (Predicate<? super TreeSet<Object>>) orPredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      int int0 = (-836);
      ArrayIterator<SQLTransientConnectionException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLTransientConnectionException>(sQLIntegrityConstraintViolationException0, (-836), (-836));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(mapIterator0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      TreeSet<Object>[] treeSetArray0 = (TreeSet<Object>[]) Array.newInstance(TreeSet.class, 0);
      ResettableListIterator<TreeSet<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find((Iterator<TreeSet<Object>>) resettableListIterator0, (Predicate<? super TreeSet<Object>>) orPredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      LinkedList<ArrayDeque<Locale.Category>> linkedList1 = new LinkedList<ArrayDeque<Locale.Category>>();
      IteratorUtils.loopingListIterator((List<ArrayDeque<Locale.Category>>) linkedList1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedIterator0;
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      SQLDataException sQLDataException0 = new SQLDataException("I", "I");
      Factory<SQLDataException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, SQLDataException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) factory0);
      IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("I", "I", sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException1;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Object) iteratorArray0[0]);
      InvokerTransformer.invokerTransformer("Predicate must not be null.");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      hashSet0.stream();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("qo6irU", (String) null, 2720);
      IteratorUtils.getIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("[[");
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<SQLTransactionRollbackException, Locale.Category> hashtable0 = new Hashtable<SQLTransactionRollbackException, Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("+O>ksaQ`K*oZ:`Pn");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[[", "[[", 100, sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "End index must not be less than start index", sQLRecoverableException0);
      DataTruncation dataTruncation0 = new DataTruncation((-446), false, false, 16, 100, sQLTransactionRollbackException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "[[", sQLTransactionRollbackException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException1;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Object) sQLTransientConnectionException1);
      InvokerTransformer.invokerTransformer("End index must not be less than start index");
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      SQLDataException sQLDataException0 = new SQLDataException("List must not be null", "org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", 16, sQLTransientConnectionException1);
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLDataException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      Integer integer1 = new Integer(0);
      uniquePredicate0.evaluate(integer1);
      IteratorUtils.matchesAny((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) uniquePredicate0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.Category>) predicate0);
      ListIterator<Locale.Category> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 4);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) priorityQueue0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) iterator0);
      iteratorArray0[0] = (Iterator<Integer>) listIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) priorityQueue0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("&~");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0, false);
      NotNullPredicate.notNullPredicate();
      OrderedMapIterator<Integer, Class<SQLNonTransientConnectionException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedMapIterator0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) orderedMapIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) list0);
      IteratorUtils.toListIterator((Iterator<? extends Integer>) iterator0);
      DataTruncation dataTruncation0 = new DataTruncation(747, false, false, 197, 197);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) stack0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedMapIterator0, class0);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLFeatureNotSupportedException0);
      Integer integer0 = new Integer(859);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      SingletonListIterator<LinkedList<Integer>> singletonListIterator0 = new SingletonListIterator<LinkedList<Integer>>(linkedList0);
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<SQLTransactionRollbackException, Locale.Category> hashMap0 = new HashMap<SQLTransactionRollbackException, Locale.Category>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("A<2^g<i&xr6]\"-l", sQLRecoverableException0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      hashMap0.put(sQLTransactionRollbackException0, locale_Category0);
      EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category>(hashMap0);
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0, 859);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("delimiter may not be null", " B_eB ", 10);
      SQLWarning sQLWarning1 = new SQLWarning(sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("delimiter may not be null", sQLWarning0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLWarning0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ResettableListIterator<SQLRecoverableException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) resettableListIterator1, (Predicate<? super SQLRecoverableException>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<SQLTransactionRollbackException, Locale.Category> hashMap0 = new HashMap<SQLTransactionRollbackException, Locale.Category>();
      Hashtable<SQLTransactionRollbackException, Locale.Category> hashtable0 = new Hashtable<SQLTransactionRollbackException, Locale.Category>();
      EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category>(hashtable0);
      int int0 = 128;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 128);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(mapIterator0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Predicate<Locale.Category> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.Category>) orPredicate0);
      IteratorUtils.matchesAll((Iterator<Locale.Category>) listIteratorWrapper0, (Predicate<? super Locale.Category>) predicate1);
      HashMap<SQLTransactionRollbackException, Locale.Category> hashMap0 = new HashMap<SQLTransactionRollbackException, Locale.Category>();
      EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category>(hashMap0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
      entrySetMapIterator0.reset();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 12);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedMapIterator0, class0);
      String string0 = null;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 859);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      MapIterator<SQLNonTransientConnectionException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, Properties>(mapIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) abstractMapIteratorDecorator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, "", "", "a5U\":.{/>-$6h");
      int int0 = 88;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((LinkedHashSet<SQLTransientException>[]) null, 88);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      hashSet0.stream();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLFeatureNotSupportedException0);
      Integer integer0 = new Integer(853);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(853);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SingletonListIterator<LinkedList<Integer>> singletonListIterator0 = new SingletonListIterator<LinkedList<Integer>>(linkedList0);
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<SQLTransactionRollbackException, Locale.Category> hashMap0 = new HashMap<SQLTransactionRollbackException, Locale.Category>();
      EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category>(hashMap0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 859);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      String string0 = "7`M)>r=kX";
      SQLDataException sQLDataException0 = new SQLDataException("7`M)>r=kX", "");
      Factory<SQLDataException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) factory0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("E;N");
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Properties, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Properties, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      MapIterator<Properties, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, SQLFeatureNotSupportedException>) orderedMapIterator1);
      AbstractMapIteratorDecorator<Properties, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, SQLFeatureNotSupportedException>(mapIterator0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) abstractMapIteratorDecorator0);
      IteratorUtils.loopingIterator((Collection<? extends Properties>) list0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      String string0 = "i";
      int int0 = (-649);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.functors.TransformerClosure", "i", (-649));
      IteratorUtils.getIterator(sQLDataException0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 9);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableIterator0;
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      String string1 = "";
      int[] intArray0 = new int[5];
      intArray0[0] = (-649);
      intArray0[1] = (-649);
      intArray0[2] = (-649);
      intArray0[3] = (-649);
      intArray0[4] = (-649);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLTransientConnectionException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) iteratorArray0[0], (Iterator<? extends BatchUpdateException>) objectArrayIterator0);
      iteratorArray0[1] = iterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(mapIterator0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Predicate<Locale.Category> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.Category>) orPredicate0);
      IteratorUtils.matchesAll((Iterator<Locale.Category>) listIteratorWrapper0, (Predicate<? super Locale.Category>) predicate1);
      HashMap<SQLTransactionRollbackException, Locale.Category> hashMap0 = new HashMap<SQLTransactionRollbackException, Locale.Category>();
      EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category>(hashMap0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
      entrySetMapIterator0.reset();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ListIterator<EnumSet<Locale.Category>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      IteratorUtils.toString((Iterator<EnumSet<Locale.Category>>) listIterator0);
      OrderedMapIterator<SQLTransactionRollbackException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Vector<ArrayDeque<Locale.Category>> vector0 = new Vector<ArrayDeque<Locale.Category>>();
      IteratorUtils.loopingListIterator((List<ArrayDeque<Locale.Category>>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Predicate<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.emptyListIterator();
      MapIterator<HashSet<Transformer<Object, SQLSyntaxErrorException>>, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      int int0 = 100;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((EnumSet<Locale.Category>[]) null, 100, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SingletonListIterator<LinkedList<Integer>> singletonListIterator0 = new SingletonListIterator<LinkedList<Integer>>(linkedList0);
      HashSet<Properties>[] hashSetArray0 = (HashSet<Properties>[]) Array.newInstance(HashSet.class, 9);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      hashSetArray0[0] = (HashSet<Properties>) linkedHashSet0;
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      hashSetArray0[1] = (HashSet<Properties>) linkedHashSet1;
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      hashSetArray0[2] = hashSet0;
      HashSet<Properties> hashSet1 = new HashSet<Properties>();
      hashSetArray0[3] = hashSet1;
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      hashSetArray0[4] = (HashSet<Properties>) linkedHashSet2;
      LinkedHashSet<Properties> linkedHashSet3 = new LinkedHashSet<Properties>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("PrototypeCloneFactory: Clone method must be public", "PrototypeCloneFactory: Clone method must be public");
      IteratorUtils.size(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ResettableListIterator<LinkedList<ArrayDeque>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedList<ArrayDeque>>) arrayList0);
      IteratorUtils.size(resettableListIterator0);
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      ArrayListIterator<SQLTransientConnectionException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransientConnectionException>(resettableListIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(mapIterator0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Predicate<Locale.Category> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.Category>) orPredicate0);
      IteratorUtils.matchesAll((Iterator<Locale.Category>) listIteratorWrapper0, (Predicate<? super Locale.Category>) predicate1);
      String string0 = "y=Q$g";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("y=Q$g", "y=Q$g", 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null, (-457));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.iterators.NodeListIterator", sQLWarning0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      Properties[] propertiesArray0 = new Properties[0];
      IteratorUtils.arrayListIterator(propertiesArray0);
      SQLException[] sQLExceptionArray0 = new SQLException[0];
      IteratorUtils.arrayIterator(sQLExceptionArray0, 0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedIterator0;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      SQLDataException sQLDataException0 = new SQLDataException("I", "I");
      Factory<SQLDataException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, SQLDataException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) factory0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("I");
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator1);
      IteratorUtils.toList((Iterator<? extends SQLException>) iterator0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      LoopingListIterator<SQLSyntaxErrorException> loopingListIterator0 = new LoopingListIterator<SQLSyntaxErrorException>(arrayList0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, ServiceLoader<Stack>>) orderedMapIterator0);
      Stack<Integer> stack0 = new Stack<Integer>();
      Stack<Integer>[] stackArray0 = (Stack<Integer>[]) Array.newInstance(Stack.class, 2);
      stackArray0[0] = stack0;
      stackArray0[1] = stack0;
      IteratorUtils.arrayListIterator(stackArray0, 0);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      propertiesArray0[3] = properties0;
      Properties properties3 = new Properties();
      propertiesArray0[4] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[5] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[6] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[7] = properties6;
      Properties properties7 = new Properties();
      Properties properties8 = new Properties();
      properties2.put(properties8, properties2);
      propertiesArray0[8] = properties7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 0, 2959);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedMapIterator0, class0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      Properties properties6 = new Properties();
      Properties properties7 = new Properties();
      Stack<Integer>[] stackArray0 = (Stack<Integer>[]) Array.newInstance(Stack.class, 4);
      Stack<Integer> stack0 = new Stack<Integer>();
      stackArray0[0] = stack0;
      Stack<Integer> stack1 = new Stack<Integer>();
      stackArray0[1] = stack1;
      Stack<Integer> stack2 = new Stack<Integer>();
      stackArray0[2] = stack2;
      Stack<Integer> stack3 = new Stack<Integer>();
      stackArray0[3] = stack3;
      IteratorUtils.arrayListIterator(stackArray0, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Properties[]) null, 1640, 2959);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedIterator0;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) iteratorArray0[0], (Iterator<? extends BatchUpdateException>) iterator0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(linkedHashSet0);
      Integer integer0 = new Integer(859);
      linkedList0.add(integer0);
      SingletonListIterator<LinkedList<Integer>> singletonListIterator0 = new SingletonListIterator<LinkedList<Integer>>(linkedList0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<SQLTransactionRollbackException, Locale.Category> hashMap0 = new HashMap<SQLTransactionRollbackException, Locale.Category>();
      EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category>(hashMap0);
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0, 128);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("&~");
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0);
      HashSet<Properties> hashSet0 = new HashSet<Properties>(list0);
      HashSet<Properties> hashSet1 = new HashSet<Properties>();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((TreeSet<Object>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedMapIterator0, class0);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      IteratorUtils.arrayListIterator(propertiesArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) iterator0, (-824L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ListIterator<EnumSet<Locale.Category>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      IteratorUtils.toString((Iterator<EnumSet<Locale.Category>>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Vector<ArrayDeque<Locale.Category>> vector0 = new Vector<ArrayDeque<Locale.Category>>();
      IteratorUtils.loopingListIterator((List<ArrayDeque<Locale.Category>>) vector0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      MockThrowable mockThrowable0 = new MockThrowable();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null, mockThrowable0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((int[]) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[]", "!^%#wnmVga96#FvQLGV", batchUpdateException1);
      Stack<Integer> stack0 = new Stack<Integer>();
      Stack<Integer> stack1 = new Stack<Integer>();
      Stack<Integer> stack2 = new Stack<Integer>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getLastChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(mapIterator0);
      listIteratorWrapper0.hasNext();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Predicate<Locale.Category> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.Category>) orPredicate0);
      IteratorUtils.matchesAll((Iterator<Locale.Category>) listIteratorWrapper0, (Predicate<? super Locale.Category>) predicate1);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("y=Q$g", "y=Q$g", 0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("y=Q$g", sQLTimeoutException0);
      Vector<String> vector0 = new Vector<String>();
      IteratorUtils.loopingListIterator((List<String>) vector0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      IteratorUtils.arrayIterator(propertiesArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      HashMap<StringTokenizer, Integer> hashMap0 = new HashMap<StringTokenizer, Integer>();
      HashMap<StringTokenizer, Integer> hashMap1 = new HashMap<StringTokenizer, Integer>();
      HashMap<StringTokenizer, Integer> hashMap2 = new HashMap<StringTokenizer, Integer>();
      HashMap<StringTokenizer, Integer> hashMap3 = new HashMap<StringTokenizer, Integer>();
      HashMap<StringTokenizer, Integer> hashMap4 = new HashMap<StringTokenizer, Integer>();
      HashMap<StringTokenizer, Integer>[] hashMapArray0 = (HashMap<StringTokenizer, Integer>[]) Array.newInstance(HashMap.class, 0);
      ObjectArrayListIterator<HashMap<StringTokenizer, Integer>> objectArrayListIterator0 = new ObjectArrayListIterator<HashMap<StringTokenizer, Integer>>(hashMapArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<HashMap<StringTokenizer, Integer>>) objectArrayListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("2(1t9");
      iIOMetadataNode1.getLastChild();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-826));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Iterator<SQLTransactionRollbackException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.boundedIterator((Iterator<? extends Iterator<SQLTransactionRollbackException>>) orderedIterator0, 0L);
      int int0 = 930;
      int int1 = 2032;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) fileSystemHandling0, 930, 2032);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", "org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator((SQLInvalidAuthorizationSpecException) null);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) zippingIterator0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ListIterator<EnumSet<Locale.Category>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      IteratorUtils.toString((Iterator<EnumSet<Locale.Category>>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Vector<ArrayDeque<Locale.Category>> vector0 = new Vector<ArrayDeque<Locale.Category>>();
      Throwable throwable0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "[]", (Throwable) null);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, 860);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 859
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Predicate<Object>>) resettableListIterator0);
      int int0 = 0;
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) resettableListIterator0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.Category>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      HashMap<StringTokenizer, Integer> hashMap0 = new HashMap<StringTokenizer, Integer>();
      HashMap<StringTokenizer, Integer> hashMap1 = new HashMap<StringTokenizer, Integer>();
      HashMap<StringTokenizer, Integer> hashMap2 = new HashMap<StringTokenizer, Integer>();
      HashMap<StringTokenizer, Integer> hashMap3 = new HashMap<StringTokenizer, Integer>();
      HashMap<StringTokenizer, Integer> hashMap4 = new HashMap<StringTokenizer, Integer>();
      HashMap<StringTokenizer, Integer>[] hashMapArray0 = (HashMap<StringTokenizer, Integer>[]) Array.newInstance(HashMap.class, 0);
      ObjectArrayListIterator<HashMap<StringTokenizer, Integer>> objectArrayListIterator0 = new ObjectArrayListIterator<HashMap<StringTokenizer, Integer>>(hashMapArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<HashMap<StringTokenizer, Integer>>) objectArrayListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("2(1t9");
      iIOMetadataNode1.getLastChild();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>(0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, (-680), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (Throwable) null);
      MockThrowable mockThrowable0 = new MockThrowable(sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, mockThrowable0);
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 44);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, 0);
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      IteratorUtils.singletonListIterator((ArrayDeque<EnumSet>) arrayDeque0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLTransactionRollbackException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.UnmodifiableIterator", "org.apache.commons.collections4.iterators.UnmodifiableIterator");
      IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (Throwable) null);
      MockThrowable mockThrowable0 = new MockThrowable(sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, mockThrowable0);
      sQLNonTransientConnectionException0.getStackTrace();
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 44);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, 0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) objectArrayListIterator0);
      objectArrayListIterator0.next();
      ListIterator<SQLTransactionRollbackException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator1);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, "List must not be null", 187, sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(mapIterator0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Predicate<Locale.Category> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.Category>) orPredicate0);
      IteratorUtils.matchesAll((Iterator<Locale.Category>) listIteratorWrapper0, (Predicate<? super Locale.Category>) predicate1);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("y=Q$g", "y=Q$g", 0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("y=Q$g", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("y=Q$g", "y=Q$g", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      String string0 = "org.apache.commons.collections4.set.AbstractSetDecorator";
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("org.apache.commons.collections4.set.AbstractSetDecorator", "Fe?");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0, 0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) objectArrayListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>(0);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(propertiesArray0, (-595), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      String string0 = "delimiter may not be null";
      DataTruncation dataTruncation0 = new DataTruncation(100, true, false, (-1813), 1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("delimiter may not be null", "delimiter may not be null", 292, dataTruncation0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("yjw2", "_RHyP=S+7", sQLRecoverableException0);
      DataTruncation dataTruncation1 = new DataTruncation(0, false, true, 761, 0, sQLTransactionRollbackException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("NLd#R7OS4P+<.Jo%S^", "n}ItbzwFB", dataTruncation1);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      sQLTransientConnectionException1.getLocalizedMessage();
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Object) sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1Ifj$Ff");
      int int0 = (-3370);
      Transformer<Object, SQLSyntaxErrorException>[] transformerArray0 = (Transformer<Object, SQLSyntaxErrorException>[]) Array.newInstance(Transformer.class, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(transformerArray0, (-1581), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("#o{!eB|)Q", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      String string0 = "]ty<43HzS{3YoX&+C8[";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "]ty<43HzS{3YoX&+C8[", 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Map.Entry.setValue is not supported", sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("Io;tT`E", "Map.Entry.setValue is not supported", (-1), sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ListIterator<EnumSet<Locale.Category>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      IteratorUtils.toString((Iterator<EnumSet<Locale.Category>>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Vector<ArrayDeque<Locale.Category>> vector0 = new Vector<ArrayDeque<Locale.Category>>();
      IteratorUtils.loopingListIterator((List<ArrayDeque<Locale.Category>>) vector0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      MockThrowable mockThrowable0 = new MockThrowable();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null, mockThrowable0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((int[]) null);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2010;
      longArray0[1] = (long) 2010;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, 2010);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2010
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (Throwable) null);
      MockThrowable mockThrowable0 = new MockThrowable(sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, mockThrowable0);
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 44);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, 0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) objectArrayListIterator0);
      ListIterator<SQLTransactionRollbackException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      OrderedIterator<Vector<IIOMetadataNode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      long long0 = (-1L);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<Vector<IIOMetadataNode>>) orderedIterator0, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      String string0 = "caS).Q3gQj9$Yr[8vN";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "caS).Q3gQj9$Yr[8vN", 1704, (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("rSz$5YAx{O3^n$h(", (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("2p7vzli=<", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("caS).Q3gQj9$Yr[8vN", "2p7vzli=<", (-7), (Map<String, ClientInfoStatus>) null, sQLClientInfoException3);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      Factory<String> factory0 = ConstantFactory.constantFactory("J?NgjE@-r7]KKp_g");
      FactoryTransformer<SQLNonTransientConnectionException, String> factoryTransformer0 = new FactoryTransformer<SQLNonTransientConnectionException, String>(factory0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, String>) factoryTransformer0, "T++wC1y4G", "J?NgjE@-r7]KKp_g", "T++wC1y4G");
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      ArrayDeque<SQLRecoverableException> arrayDeque1 = new ArrayDeque<SQLRecoverableException>();
      IteratorUtils.singletonListIterator((ArrayDeque<EnumSet>) arrayDeque1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>((SQLTimeoutException[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLNonTransientException, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      String string0 = "";
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 8);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class4;
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      classArray0[5] = class5;
      Class<SQLIntegrityConstraintViolationException> class6 = SQLIntegrityConstraintViolationException.class;
      classArray0[6] = class6;
      Class<SQLIntegrityConstraintViolationException> class7 = SQLIntegrityConstraintViolationException.class;
      classArray0[7] = class7;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) orderedMapIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "", "", "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS("", "");
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.iterators.NodeListIterator", sQLWarning0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((Throwable) null);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      int int0 = 834;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("org.apache.commons.collections4.iterators.NodeListIterator", "org.apache.commons.collections4.iterators.NodeListIterator", 834, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      IteratorUtils.matchesAny((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) uniquePredicate0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<Predicate<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("[[");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0, 338);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SingletonListIterator<LinkedList<Integer>> singletonListIterator0 = new SingletonListIterator<LinkedList<Integer>>(linkedList0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 4);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("n}ItbzwFB", classArray0, sQLTransientConnectionExceptionArray0);
      IteratorUtils.isEmpty(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SingletonListIterator<LinkedList<Integer>> singletonListIterator0 = new SingletonListIterator<LinkedList<Integer>>(linkedList0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 4);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("n}ItbzwFB", classArray0, sQLTransientConnectionExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<LinkedList<Integer>>) singletonListIterator0, (Transformer<? super LinkedList<Integer>, String>) invokerTransformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'n}ItbzwFB' on 'class java.util.LinkedList' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(mapIterator0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.Category>) orPredicate0);
      HashMap<SQLTransactionRollbackException, Locale.Category> hashMap0 = new HashMap<SQLTransactionRollbackException, Locale.Category>();
      EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, Locale.Category>(hashMap0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
      entrySetMapIterator0.reset();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) iterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Predicate<StringTokenizer>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedIterator0;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) iteratorArray0[0], (Iterator<? extends BatchUpdateException>) iterator0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(linkedHashSet0);
      SingletonListIterator<LinkedList<Integer>> singletonListIterator0 = new SingletonListIterator<LinkedList<Integer>>(linkedList0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, (Object[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<LinkedList<Integer>>) singletonListIterator0, (Transformer<? super LinkedList<Integer>, String>) invokerTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      IteratorUtils.toListIterator((Iterator<? extends Integer>) resettableListIterator0);
      Hashtable<SQLTransactionRollbackException, Locale.Category> hashtable0 = new Hashtable<SQLTransactionRollbackException, Locale.Category>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "org.apache.commons.collections4.functors.EqualPredicate");
      ResettableListIterator<SQLClientInfoException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator1);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) resettableListIterator1);
      IteratorUtils.size(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(4443);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(4443);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1168);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      IteratorUtils.arrayIterator(integerArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) integerArray0[4]);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("${ :");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("${ :");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.unmodifiableIterator((Iterator<Stack<EnumSet>>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      IteratorUtils.emptyIterator();
      int int0 = 65;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Closure<String>[]) null, 65);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "6qx";
      stringArray0[1] = "' threw an exception";
      stringArray0[2] = "kd-";
      stringArray0[3] = "ceT;:mN:!?|";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = (-3183);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLTransientException[]) null, (-3183));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.ComparatorPredicate", "org.apache.commons.collections4.functors.ComparatorPredicate", (Throwable) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.collections4.functors.ComparatorPredicate");
      PrintWriter printWriter0 = mockPrintWriter0.append('a');
      sQLDataException0.printStackTrace(printWriter0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Predicate<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "prefix may not be null";
      StringTokenizer stringTokenizer0 = new StringTokenizer("prefix may not be null", "prefix may not be null");
      IteratorUtils.singletonIterator(stringTokenizer0);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      Iterator<String> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends String>) listIterator0, (Predicate<? super String>) identityPredicate0);
      Iterable<String> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) iterator0);
      IteratorUtils.emptyMapIterator();
      ArrayListIterator<IIOMetadataNode> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<IIOMetadataNode>(iterable0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Predicate<Object>>) resettableListIterator0);
      HashMap<StringTokenizer, Integer> hashMap0 = new HashMap<StringTokenizer, Integer>();
      HashMap<StringTokenizer, Integer> hashMap1 = new HashMap<StringTokenizer, Integer>();
      HashMap<StringTokenizer, Integer> hashMap2 = new HashMap<StringTokenizer, Integer>();
      HashMap<StringTokenizer, Integer> hashMap3 = new HashMap<StringTokenizer, Integer>();
      HashMap<StringTokenizer, Integer>[] hashMapArray0 = (HashMap<StringTokenizer, Integer>[]) Array.newInstance(HashMap.class, 7);
      hashMapArray0[0] = hashMap1;
      hashMapArray0[1] = hashMap2;
      hashMapArray0[2] = hashMap3;
      hashMapArray0[3] = hashMap2;
      hashMapArray0[4] = hashMap0;
      hashMapArray0[5] = hashMap0;
      hashMapArray0[6] = hashMap0;
      ObjectArrayListIterator<HashMap<StringTokenizer, Integer>> objectArrayListIterator0 = new ObjectArrayListIterator<HashMap<StringTokenizer, Integer>>(hashMapArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<HashMap<StringTokenizer, Integer>>) objectArrayListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Predicate<Object>>) resettableListIterator0);
      int int0 = 93;
      OrderedIterator<SQLTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransientException>) orderedIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLFeatureNotSupportedException0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLTransientException>) predicate0);
      int int1 = 1925;
      StringTokenizer stringTokenizer0 = null;
//      try {
        stringTokenizer0 = new StringTokenizer((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.StringTokenizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.iterators.NodeListIterator", sQLWarning0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>(12);
      String string0 = null;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Estimated size must be greater than 0");
      iIOMetadataNode0.getChildNodes();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      IteratorUtils.isEmpty(iterator0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<SQLNonTransientException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) stack0);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      stack0.toArray(propertiesArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Predicate<Object>>) resettableListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("?Nd|WF2=", "rM{UH>r");
      Factory<SQLDataException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) factory0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      Hashtable<SQLTimeoutException, Vector<Object>> hashtable0 = new Hashtable<SQLTimeoutException, Vector<Object>>();
      EntrySetMapIterator<SQLTimeoutException, Vector<Object>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, Vector<Object>>(hashtable0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) entrySetMapIterator0;
      Iterator<SQLTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, String>(orderedMapIterator0);
      OrderedMapIterator<SQLTransactionRollbackException, String> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends String>) abstractOrderedMapIteratorDecorator0);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>(0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      String string0 = "qo6irU";
      SQLDataException sQLDataException0 = new SQLDataException("qo6irU");
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      // Undeclared exception!
//      try { 
        singletonIterator0.remove();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.SingletonIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<EnumSet<Locale.Category>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      IteratorUtils.toString((Iterator<EnumSet<Locale.Category>>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Vector<ArrayDeque<Locale.Category>> vector0 = new Vector<ArrayDeque<Locale.Category>>();
      IteratorUtils.loopingListIterator((List<ArrayDeque<Locale.Category>>) vector0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 9);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      MockThrowable mockThrowable0 = new MockThrowable();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null, mockThrowable0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((int[]) null);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2010;
      longArray0[1] = (long) 2010;
      longArray0[2] = (long) 2010;
      longArray0[3] = (long) 2010;
      longArray0[4] = (-1L);
      longArray0[5] = 0L;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("[]", "!Rp8h", 2010, (int[]) null, mockThrowable0);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("F;)", "F;)", 2010, longArray0, batchUpdateException2);
      batchUpdateExceptionArray0[2] = batchUpdateException3;
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableListIterator1;
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) iteratorArray0[0]);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<BatchUpdateException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<BatchUpdateException>) orderedMapIterator0;
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator1, (Iterator<? extends BatchUpdateException>) resettableListIterator1, (Iterator<? extends BatchUpdateException>) iterator0);
      iteratorArray0[3] = (Iterator<BatchUpdateException>) zippingIterator0;
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) resettableListIterator1, (Predicate<? super BatchUpdateException>) predicate0);
      iteratorArray0[4] = iterator1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("!Rp8h");
      ArrayIterator<BatchUpdateException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<BatchUpdateException>(sQLFeatureNotSupportedException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("y=Q$g", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException((String) null, (String) null, sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException((String) null, (String) null);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException3;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException2;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0, 0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) objectArrayListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      int int0 = 0;
      SQLDataException sQLDataException0 = new SQLDataException("I", "I");
      Factory<SQLDataException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, SQLDataException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) factory0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("I");
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedMapIterator0, class0);
      IteratorUtils.getIterator(class0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends SQLException>) orderedMapIterator1);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<Integer>) null, (Predicate<? super Integer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      DataTruncation dataTruncation0 = new DataTruncation(100, true, false, (-1813), 1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("delimiter may not be null", "delimiter may not be null", 292, dataTruncation0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("yjw2", "_RHyP=S+7", sQLRecoverableException0);
      DataTruncation dataTruncation1 = new DataTruncation(0, false, true, 761, 0, sQLTransactionRollbackException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("NLd#R7OS4P+<.Jo%S^", "n}ItbzwFB", dataTruncation1);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Object) sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1Ifj$Ff");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, (-3370));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("&~");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0, false);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      IteratorUtils.matchesAny((Iterator<SQLTransientException>) singletonIterator0, (Predicate<? super SQLTransientException>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) singletonIterator0, (Predicate<? super SQLException>) predicate0);
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      Factory<SQLDataException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, SQLDataException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) factory0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      String string0 = "tk6{uY";
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("tk6{uY", "~;$TC1 KV");
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      assertNotNull(resettableIterator0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>(0);
      IteratorUtils.singletonListIterator((ArrayDeque<EnumSet>) arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<StringTokenizer, Integer>[] hashMapArray0 = (HashMap<StringTokenizer, Integer>[]) Array.newInstance(HashMap.class, 8);
      HashMap<StringTokenizer, Integer> hashMap0 = new HashMap<StringTokenizer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      hashMapArray0[0] = hashMap0;
      HashMap<StringTokenizer, Integer> hashMap1 = new HashMap<StringTokenizer, Integer>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      hashMapArray0[1] = hashMap1;
      HashMap<StringTokenizer, Integer> hashMap2 = new HashMap<StringTokenizer, Integer>();
      assertNotNull(hashMap2);
      assertTrue(hashMap2.equals((Object)hashMap0));
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      
      hashMapArray0[2] = hashMap2;
      HashMap<StringTokenizer, Integer> hashMap3 = new HashMap<StringTokenizer, Integer>();
      assertNotNull(hashMap3);
      assertTrue(hashMap3.equals((Object)hashMap2));
      assertTrue(hashMap3.equals((Object)hashMap1));
      assertTrue(hashMap3.equals((Object)hashMap0));
      assertTrue(hashMap3.isEmpty());
      assertEquals(0, hashMap3.size());
      
      hashMapArray0[3] = hashMap3;
      HashMap<StringTokenizer, Integer> hashMap4 = new HashMap<StringTokenizer, Integer>();
      assertNotNull(hashMap4);
      assertTrue(hashMap4.equals((Object)hashMap0));
      assertTrue(hashMap4.equals((Object)hashMap3));
      assertTrue(hashMap4.equals((Object)hashMap2));
      assertTrue(hashMap4.equals((Object)hashMap1));
      assertTrue(hashMap4.isEmpty());
      assertEquals(0, hashMap4.size());
      
      hashMapArray0[4] = hashMap4;
      HashMap<StringTokenizer, Integer> hashMap5 = new HashMap<StringTokenizer, Integer>();
      assertNotNull(hashMap5);
      assertTrue(hashMap5.equals((Object)hashMap4));
      assertTrue(hashMap5.equals((Object)hashMap0));
      assertTrue(hashMap5.equals((Object)hashMap3));
      assertTrue(hashMap5.equals((Object)hashMap2));
      assertTrue(hashMap5.equals((Object)hashMap1));
      assertTrue(hashMap5.isEmpty());
      assertEquals(0, hashMap5.size());
      
      hashMapArray0[5] = hashMap5;
      HashMap<StringTokenizer, Integer> hashMap6 = new HashMap<StringTokenizer, Integer>();
      assertNotNull(hashMap6);
      assertTrue(hashMap6.equals((Object)hashMap4));
      assertTrue(hashMap6.equals((Object)hashMap3));
      assertTrue(hashMap6.equals((Object)hashMap0));
      assertTrue(hashMap6.equals((Object)hashMap1));
      assertTrue(hashMap6.equals((Object)hashMap2));
      assertTrue(hashMap6.equals((Object)hashMap5));
      assertTrue(hashMap6.isEmpty());
      assertEquals(0, hashMap6.size());
      
      hashMapArray0[6] = hashMap6;
      HashMap<StringTokenizer, Integer> hashMap7 = new HashMap<StringTokenizer, Integer>();
      assertNotNull(hashMap7);
      assertTrue(hashMap7.equals((Object)hashMap1));
      assertTrue(hashMap7.equals((Object)hashMap2));
      assertTrue(hashMap7.equals((Object)hashMap5));
      assertTrue(hashMap7.equals((Object)hashMap4));
      assertTrue(hashMap7.equals((Object)hashMap6));
      assertTrue(hashMap7.equals((Object)hashMap3));
      assertTrue(hashMap7.equals((Object)hashMap0));
      assertTrue(hashMap7.isEmpty());
      assertEquals(0, hashMap7.size());
      
      hashMapArray0[7] = hashMap7;
      ObjectArrayListIterator<HashMap<StringTokenizer, Integer>> objectArrayListIterator0 = new ObjectArrayListIterator<HashMap<StringTokenizer, Integer>>(hashMapArray0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(8, hashMapArray0.length);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      
      ListIterator<HashMap<StringTokenizer, Integer>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<HashMap<StringTokenizer, Integer>>) objectArrayListIterator0);
      assertNotNull(listIterator0);
      assertEquals(8, hashMapArray0.length);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Properties[]) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, (Throwable) null);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("6JW;Z|>NDT8s7", "_^xZr{", sQLWarning0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6JW;Z|>NDT8s7", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("_^xZr{", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("6JW;Z|>NDT8s7", sQLInvalidAuthorizationSpecException0.getMessage());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLInvalidAuthorizationSpecException0);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6JW;Z|>NDT8s7", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("_^xZr{", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("6JW;Z|>NDT8s7", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6JW;Z|>NDT8s7", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLInvalidAuthorizationSpecException: 6JW;Z|>NDT8s7", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      assertNotNull(singletonListIterator0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6JW;Z|>NDT8s7", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("_^xZr{", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("6JW;Z|>NDT8s7", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6JW;Z|>NDT8s7", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLInvalidAuthorizationSpecException: 6JW;Z|>NDT8s7", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      
      singletonListIterator0.reset();
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6JW;Z|>NDT8s7", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("_^xZr{", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("6JW;Z|>NDT8s7", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6JW;Z|>NDT8s7", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLInvalidAuthorizationSpecException: 6JW;Z|>NDT8s7", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(object0, 14);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      SQLDataException sQLDataException0 = new SQLDataException("");
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      assertNotNull(sQLDataException1);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertNull(sQLDataException1.getSQLState());
      assertNull(sQLDataException1.getMessage());
      
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("");
      assertNotNull(sQLDataException2);
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertNull(sQLDataException2.getSQLState());
      assertEquals(0, sQLDataException2.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException2.toString());
      assertEquals("", sQLDataException2.getMessage());
      
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(" is invalid for size ", "org.apache.commons.collections4.functors.TransformedPredicate", 2756, sQLDataException0);
      assertNotNull(sQLDataException3);
      assertFalse(sQLDataException0.equals((Object)sQLDataException2));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.TransformedPredicate", sQLDataException3.getSQLState());
      assertEquals("java.sql.SQLDataException:  is invalid for size ", sQLDataException3.toString());
      assertEquals(2756, sQLDataException3.getErrorCode());
      assertEquals(" is invalid for size ", sQLDataException3.getMessage());
      
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException(" is invalid for size ");
      assertNotNull(sQLDataException4);
      assertFalse(sQLDataException4.equals((Object)sQLDataException3));
      assertFalse(sQLDataException4.equals((Object)sQLDataException1));
      assertFalse(sQLDataException4.equals((Object)sQLDataException0));
      assertFalse(sQLDataException4.equals((Object)sQLDataException2));
      assertEquals(" is invalid for size ", sQLDataException4.getMessage());
      assertNull(sQLDataException4.getSQLState());
      assertEquals(0, sQLDataException4.getErrorCode());
      assertEquals("java.sql.SQLDataException:  is invalid for size ", sQLDataException4.toString());
      
      sQLDataExceptionArray0[4] = sQLDataException4;
      int[] intArray0 = new int[8];
      intArray0[0] = 2756;
      intArray0[1] = 2756;
      intArray0[2] = 2756;
      intArray0[3] = 2756;
      intArray0[4] = 2756;
      intArray0[5] = 2756;
      intArray0[6] = 2756;
      intArray0[7] = 2756;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" is invalid for size ");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException:  is invalid for size ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(" is invalid for size ", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLTimeoutException0);
      assertArrayEquals(new int[] {2756, 2756, 2756, 2756, 2756, 2756, 2756, 2756}, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(8, intArray0.length);
      assertEquals("java.sql.SQLTimeoutException:  is invalid for size ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(" is invalid for size ", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      SQLDataException sQLDataException5 = new SQLDataException(batchUpdateException0);
      assertArrayEquals(new int[] {2756, 2756, 2756, 2756, 2756, 2756, 2756, 2756}, intArray0);
      assertNotNull(sQLDataException5);
      assertEquals(8, intArray0.length);
      assertFalse(sQLDataException5.equals((Object)sQLDataException2));
      assertFalse(sQLDataException5.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException3));
      assertFalse(sQLDataException5.equals((Object)sQLDataException0));
      assertFalse(sQLDataException5.equals((Object)sQLDataException4));
      assertEquals("java.sql.SQLTimeoutException:  is invalid for size ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(" is invalid for size ", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.BatchUpdateException: ", sQLDataException5.toString());
      assertNull(sQLDataException5.getSQLState());
      assertEquals(0, sQLDataException5.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", sQLDataException5.getMessage());
      
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("", "", sQLDataException4);
      assertNotNull(sQLDataException6);
      assertFalse(sQLDataException6.equals((Object)sQLDataException2));
      assertFalse(sQLDataException6.equals((Object)sQLDataException5));
      assertFalse(sQLDataException6.equals((Object)sQLDataException1));
      assertFalse(sQLDataException6.equals((Object)sQLDataException3));
      assertFalse(sQLDataException6.equals((Object)sQLDataException0));
      assertFalse(sQLDataException6.equals((Object)sQLDataException4));
      assertFalse(sQLDataException4.equals((Object)sQLDataException5));
      assertFalse(sQLDataException4.equals((Object)sQLDataException3));
      assertFalse(sQLDataException4.equals((Object)sQLDataException1));
      assertFalse(sQLDataException4.equals((Object)sQLDataException0));
      assertFalse(sQLDataException4.equals((Object)sQLDataException2));
      assertEquals("", sQLDataException6.getMessage());
      assertEquals("", sQLDataException6.getSQLState());
      assertEquals(0, sQLDataException6.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException6.toString());
      assertEquals(" is invalid for size ", sQLDataException4.getMessage());
      assertNull(sQLDataException4.getSQLState());
      assertEquals(0, sQLDataException4.getErrorCode());
      assertEquals("java.sql.SQLDataException:  is invalid for size ", sQLDataException4.toString());
      
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("org.apache.commons.collections4.functors.TransformedPredicate", "],w<}gr(p2'E4Kg^a", 2756, sQLDataException1);
      assertNotNull(sQLDataException7);
      assertFalse(sQLDataException1.equals((Object)sQLDataException3));
      assertFalse(sQLDataException1.equals((Object)sQLDataException4));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertFalse(sQLDataException1.equals((Object)sQLDataException5));
      assertFalse(sQLDataException1.equals((Object)sQLDataException6));
      assertFalse(sQLDataException1.equals((Object)sQLDataException2));
      assertFalse(sQLDataException7.equals((Object)sQLDataException2));
      assertFalse(sQLDataException7.equals((Object)sQLDataException5));
      assertFalse(sQLDataException7.equals((Object)sQLDataException1));
      assertFalse(sQLDataException7.equals((Object)sQLDataException6));
      assertFalse(sQLDataException7.equals((Object)sQLDataException0));
      assertFalse(sQLDataException7.equals((Object)sQLDataException4));
      assertFalse(sQLDataException7.equals((Object)sQLDataException3));
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertNull(sQLDataException1.getSQLState());
      assertNull(sQLDataException1.getMessage());
      assertEquals(2756, sQLDataException7.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.TransformedPredicate", sQLDataException7.getMessage());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.TransformedPredicate", sQLDataException7.toString());
      assertEquals("],w<}gr(p2'E4Kg^a", sQLDataException7.getSQLState());
      
      sQLDataExceptionArray0[7] = sQLDataException7;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      assertNotNull(resettableListIterator0);
      assertEquals(8, sQLDataExceptionArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Predicate<SQLDataException> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Transformer<SQLDataException, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super SQLDataException>) predicate0, (Transformer<? super SQLDataException, ? extends String>) transformer0, (Transformer<? super SQLDataException, ? extends String>) transformer0);
      assertNotNull(transformer1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) resettableListIterator0, (Transformer<? super SQLDataException, String>) transformer1, "", "g|EioN'*j0", "Enumeration must not be null");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(mapIterator0);
      assertNotNull(listIteratorWrapper0);
      assertFalse(listIteratorWrapper0.hasPrevious());
      
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      assertNotNull(predicate0);
      assertFalse(linkedList0.contains(predicate0));
      assertEquals(0, linkedList0.size());
      
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      assertNotNull(orPredicate0);
      assertFalse(linkedList0.contains(predicate0));
      assertEquals(0, linkedList0.size());
      
      Predicate<Locale.Category> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.Category>) orPredicate0);
      assertNotNull(predicate1);
      assertFalse(linkedList0.contains(predicate0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Locale.Category>) listIteratorWrapper0, (Predicate<? super Locale.Category>) predicate1);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(predicate0));
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertEquals(0, linkedList0.size());
      
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("y=Q$g", "y=Q$g", 0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("y=Q$g", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: y=Q$g", sQLTimeoutException0.toString());
      assertEquals("y=Q$g", sQLTimeoutException0.getSQLState());
      
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("y=Q$g", sQLTimeoutException0);
      assertNotNull(sQLTimeoutException1);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("y=Q$g", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: y=Q$g", sQLTimeoutException0.toString());
      assertEquals("y=Q$g", sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("y=Q$g", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: y=Q$g", sQLTimeoutException1.toString());
      
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("y=Q$g", "y=Q$g", sQLTimeoutException1);
      assertNotNull(sQLTimeoutException2);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("y=Q$g", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: y=Q$g", sQLTimeoutException0.toString());
      assertEquals("y=Q$g", sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("y=Q$g", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: y=Q$g", sQLTimeoutException1.toString());
      assertEquals("y=Q$g", sQLTimeoutException2.getMessage());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("y=Q$g", sQLTimeoutException2.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: y=Q$g", sQLTimeoutException2.toString());
      
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("org.apache.commons.collections4.set.AbstractSetDecorator", "Fe?");
      assertNotNull(sQLTimeoutException3);
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.apache.commons.collections4.set.AbstractSetDecorator", sQLTimeoutException3.toString());
      assertEquals("org.apache.commons.collections4.set.AbstractSetDecorator", sQLTimeoutException3.getMessage());
      assertEquals("Fe?", sQLTimeoutException3.getSQLState());
      
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(4, sQLTimeoutExceptionArray0.length);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) objectArrayListIterator0);
      assertNotNull(enumeration0);
      assertEquals(4, sQLTimeoutExceptionArray0.length);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      assertNotNull(iterator0);
      assertEquals(4, sQLTimeoutExceptionArray0.length);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Entry does not exist: ", "InstantiateTransformer: Constructor threw an exception", 816);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("Entry does not exist: ", sQLTransactionRollbackException0.getMessage());
      assertEquals(816, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("InstantiateTransformer: Constructor threw an exception", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Entry does not exist: ", sQLTransactionRollbackException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("& }$8]'-#D .", "Entry does not exist: ", sQLTransactionRollbackException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("Entry does not exist: ", sQLTransactionRollbackException0.getMessage());
      assertEquals(816, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("InstantiateTransformer: Constructor threw an exception", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Entry does not exist: ", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: & }$8]'-#D .", sQLFeatureNotSupportedException0.toString());
      assertEquals("& }$8]'-#D .", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Entry does not exist: ", sQLFeatureNotSupportedException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("Entry does not exist: ", sQLTransactionRollbackException0.getMessage());
      assertEquals(816, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("InstantiateTransformer: Constructor threw an exception", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Entry does not exist: ", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: & }$8]'-#D .", sQLFeatureNotSupportedException0.toString());
      assertEquals("& }$8]'-#D .", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Entry does not exist: ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLFeatureNotSupportedException: & }$8]'-#D .", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: & }$8]'-#D .", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, (-58), sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("Entry does not exist: ", sQLTransactionRollbackException0.getMessage());
      assertEquals(816, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("InstantiateTransformer: Constructor threw an exception", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Entry does not exist: ", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: & }$8]'-#D .", sQLFeatureNotSupportedException0.toString());
      assertEquals("& }$8]'-#D .", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Entry does not exist: ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLFeatureNotSupportedException: & }$8]'-#D .", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: & }$8]'-#D .", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals((-58), sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", (String) null, 1317, sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertEquals("Entry does not exist: ", sQLTransactionRollbackException0.getMessage());
      assertEquals(816, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("InstantiateTransformer: Constructor threw an exception", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Entry does not exist: ", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: & }$8]'-#D .", sQLFeatureNotSupportedException0.toString());
      assertEquals("& }$8]'-#D .", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Entry does not exist: ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLFeatureNotSupportedException: & }$8]'-#D .", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: & }$8]'-#D .", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals((-58), sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(1317, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException1.toString());
      assertEquals("", sQLNonTransientConnectionException1.getMessage());
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null, "");
      assertNotNull(sQLNonTransientConnectionException2);
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertEquals("", sQLNonTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException2.toString());
      assertNull(sQLNonTransientConnectionException2.getMessage());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("ME*^<sAcecI");
      assertNotNull(sQLNonTransientConnectionException3);
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertEquals("ME*^<sAcecI", sQLNonTransientConnectionException3.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ME*^<sAcecI", sQLNonTransientConnectionException3.toString());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertNull(sQLNonTransientConnectionException3.getSQLState());
      
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("InstantiateTransformer: Constructor threw an exception", "n)TmSSV", (-58), sQLNonTransientConnectionException2);
      assertNotNull(sQLNonTransientConnectionException4);
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      assertEquals("", sQLNonTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException2.toString());
      assertNull(sQLNonTransientConnectionException2.getMessage());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("InstantiateTransformer: Constructor threw an exception", sQLNonTransientConnectionException4.getMessage());
      assertEquals("n)TmSSV", sQLNonTransientConnectionException4.getSQLState());
      assertEquals((-58), sQLNonTransientConnectionException4.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: InstantiateTransformer: Constructor threw an exception", sQLNonTransientConnectionException4.toString());
      
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      assertNotNull(resettableListIterator0);
      assertEquals(5, sQLNonTransientConnectionExceptionArray0.length);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterator0);
      assertEquals(5, sQLNonTransientConnectionExceptionArray0.length);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      assertNotNull(enumeration0);
      assertEquals(5, sQLNonTransientConnectionExceptionArray0.length);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", "org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) zippingIterator0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("uJyNCn", "uJyNCn", 0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(")e.2t", "", 0, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      sQLTimeoutException0.addSuppressed(sQLTimeoutException2);
      sQLTimeoutException0.getLocalizedMessage();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("juT9>g_", "5?T##!\"X}\" j7HL<v9", "uJyNCn", (-1896));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("<C+p,0pg``l!,:tO", "juT9>g_", "juT9>g_", (-1896));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("rc+8HZ~wEzph7e", "", "}Y", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("iBgNET?pgqV", "", "uJyNCn", 1828);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("}Y", "", "suffix may not be null", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("SR9Eq'IK", "Me ?u>n&6", "h|1sg%D9\"t\"^KBF=>", 2095);
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLTimeoutException2.setStackTrace(stackTraceElementArray0);
      int int0 = (-614);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, (-614));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }
}
