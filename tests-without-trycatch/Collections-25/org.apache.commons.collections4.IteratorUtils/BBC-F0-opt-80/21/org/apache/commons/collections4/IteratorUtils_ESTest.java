/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 18:04:41 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("]", "]", 0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("{d>~v_/!UJ.ck1-v0\"A", "", 487, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("{d>~v_/!UJ.ck1-v0\"A", "^`f}/~~~", (-1576));
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      DataTruncation dataTruncation0 = new DataTruncation((-3219), true, false, 100, 0);
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) listIteratorWrapper0, 834);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SQLException sQLException0 = new SQLException("", "' cannot be accessed", 1, sQLSyntaxErrorException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("BX", "BX", hashtable0, sQLException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (int[]) null, sQLClientInfoException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("tlIZ29Q|1}1I.#p", "}!#8zbrF-fd .{Z", (int[]) null, (Throwable) null);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(list0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) loopingIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      IteratorUtils.contains((Iterator<HashSet<LinkedList>>) iterator0, (Object) locale_Category0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) orderedIterator0, (Predicate<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[11];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(objectArrayListIterator0);
      IteratorUtils.get((Iterator<Object>) listIteratorWrapper0, 9);
      IteratorUtils.unmodifiableListIterator((ListIterator<HashMap<LinkedList, SQLException>>) listIteratorWrapper0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[11];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(objectArrayListIterator0);
      IteratorUtils.get((Iterator<Object>) listIteratorWrapper0, 9);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransientException0);
      predicateArray0[0] = predicate0;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(locale_Category0);
      predicateArray0[1] = (Predicate<Object>) identityPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      predicateArray0[2] = (Predicate<Object>) notPredicate0;
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[3] = predicate1;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[4] = (Predicate<Object>) uniquePredicate0;
      Transformer<Object, SQLRecoverableException>[] transformerArray0 = (Transformer<Object, SQLRecoverableException>[]) Array.newInstance(Transformer.class, 4);
      Factory<SQLRecoverableException> factory0 = ConstantFactory.constantFactory(sQLRecoverableException0);
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(factory0);
      transformerArray0[0] = (Transformer<Object, SQLRecoverableException>) factoryTransformer0;
      Transformer<Object, SQLRecoverableException> transformer0 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[1] = transformer0;
      Transformer<Object, SQLRecoverableException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) uniquePredicate0, (Transformer<? super Object, ? extends SQLRecoverableException>) transformer0, (Transformer<? super Object, ? extends SQLRecoverableException>) transformer0);
      transformerArray0[2] = transformer1;
      Transformer<Object, SQLRecoverableException> transformer2 = ConstantTransformer.constantTransformer(sQLRecoverableException0);
      transformerArray0[3] = transformer2;
      SwitchTransformer<Object, SQLRecoverableException> switchTransformer0 = new SwitchTransformer<Object, SQLRecoverableException>(predicateArray0, transformerArray0, transformer0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) switchTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-30);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonIterator(iIOMetadataNode0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("H=G^Psr)m3CZ", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("H=G^Psr)m3CZ", "H=G^Psr)m3CZ", sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(sQLDataException1);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("H=G^Psr)m3CZ", "-9L`@uNb>Oqa", 1);
      sQLDataExceptionArray0[4] = sQLDataException4;
      sQLDataException2.spliterator();
      SQLDataException sQLDataException5 = new SQLDataException();
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("2$It`Aj$pB");
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("H=G^Psr)m3CZ");
      sQLDataExceptionArray0[7] = sQLDataException7;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0, 1, 4);
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) objectArrayIterator0, (Iterator<? extends SQLDataException>) objectArrayIterator0);
      Integer integer0 = new Integer(40);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) singletonIterator0, 1);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Integer>) loopingListIterator0, (Transformer<? super Integer, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[11];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(objectArrayListIterator0);
      IteratorUtils.get((Iterator<Object>) listIteratorWrapper0, 2);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) arrayDeque0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[9];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("i3PmZ(L(", "i3PmZ(L(", sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLRecoverableException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("i3PmZ(L(");
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("i3PmZ(L(");
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientExceptionArray0[3]);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLNonTransientConnectionException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("y(W97YD=Wrstudp", "", sQLSyntaxErrorException1);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("");
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLSyntaxErrorException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("i3PmZ(L(", sQLInvalidAuthorizationSpecException0);
      sQLNonTransientExceptionArray0[8] = (SQLNonTransientException) sQLNonTransientConnectionException2;
      IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Integer integer0 = new Integer(23);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Start index must not be greater than the array length", "Start index must not be greater than the array length", 0);
      sQLFeatureNotSupportedException0.getStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException("Start index must not be greater than the array length", "Start index must not be greater than the array length", 0);
      sQLFeatureNotSupportedException0.printStackTrace();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Object[] objectArray0 = new Object[6];
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(singletonListIterator0);
      sQLDataException0.getLocalizedMessage();
      IteratorUtils.get((Iterator<Object>) listIteratorWrapper0, 0);
      listIteratorWrapper0.reset();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      PredicateTransformer<Locale.Category> predicateTransformer0 = new PredicateTransformer<Locale.Category>(predicate0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Boolean boolean0 = predicateTransformer0.transform(locale_Category0);
      IteratorUtils.getIterator(boolean0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) listIteratorWrapper0, classArray0[0]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("C[", (String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 115, sQLTransientConnectionException0);
      arrayList0.add((SQLException) sQLInvalidAuthorizationSpecException0);
      LoopingListIterator<SQLException> loopingListIterator0 = new LoopingListIterator<SQLException>(arrayList0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyIterator();
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      ResettableIterator<Locale.LanguageRange> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.LanguageRange>) linkedHashSet0);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.LanguageRange>) resettableIterator0, (Iterator<? extends Locale.LanguageRange>) resettableIterator0, (Iterator<? extends Locale.LanguageRange>) resettableIterator0);
      Boolean[] booleanArray0 = new Boolean[2];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      DefaultEquator<Locale.Category> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Locale.Category> equalPredicate0 = new EqualPredicate<Locale.Category>(locale_Category0, defaultEquator0);
      PredicateTransformer<Locale.Category> predicateTransformer0 = new PredicateTransformer<Locale.Category>(equalPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(locale_Category0);
      booleanArray0[0] = boolean0;
      PredicateTransformer<Locale.Category> predicateTransformer1 = new PredicateTransformer<Locale.Category>(equalPredicate0);
      Boolean boolean1 = predicateTransformer1.transform(locale_Category0);
      booleanArray0[1] = boolean1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(booleanArray0, 1, (-2239));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      int int0 = 668;
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(arrayList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      arrayList0.add(iIOMetadataNode0);
      arrayList0.add(iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) loopingIterator0, (long) 668);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      String string0 = "";
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator");
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator' on 'class java.lang.String' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ListIterator<Iterator<SQLDataException>> listIterator0 = IteratorUtils.singletonListIterator((Iterator<SQLDataException>) null);
      InvokerTransformer<Object, SQLFeatureNotSupportedException> invokerTransformer0 = new InvokerTransformer<Object, SQLFeatureNotSupportedException>("", (Class<?>[]) null, (Object[]) null);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(invokerTransformer0);
      IteratorUtils.apply((Iterator<Iterator<SQLDataException>>) listIterator0, (Closure<? super Iterator<SQLDataException>>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MapIterator<SQLDataException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLDataException, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLSyntaxErrorException>(mapIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<SQLDataException>) mapIterator0;
      iteratorArray0[1] = (Iterator<SQLDataException>) mapIterator0;
      iteratorArray0[2] = (Iterator<SQLDataException>) abstractMapIteratorDecorator0;
      iteratorArray0[3] = (Iterator<SQLDataException>) resettableListIterator0;
      iteratorArray0[4] = (Iterator<SQLDataException>) resettableListIterator0;
      ResettableIterator<Iterator<SQLDataException>> resettableIterator0 = IteratorUtils.arrayIterator(iteratorArray0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) onePredicate0, (Closure<? super Object>) closure0, false);
      Closure<Object> closure2 = IfClosure.ifClosure((Predicate<? super Object>) onePredicate0, (Closure<? super Object>) closure1);
      Closure<Object> closure3 = ForClosure.forClosure(2192, (Closure<? super Object>) closure2);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Iterator<SQLDataException>>) resettableIterator0, (Closure<? super Iterator<SQLDataException>>) closure3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      objectArrayListIterator0.hasNext();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) objectArrayListIterator0, (Predicate<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 4);
      MapIterator<SQLDataException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLDataException, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLSyntaxErrorException>(mapIterator0);
      iteratorArray0[0] = (Iterator<SQLDataException>) abstractMapIteratorDecorator0;
      SQLWarning sQLWarning0 = new SQLWarning("", "", (-449));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 27, sQLWarning0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLTimeoutException0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      iteratorArray0[1] = (Iterator<SQLDataException>) resettableIterator0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[2] = (Iterator<SQLDataException>) resettableListIterator0;
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      ResettableIterator<Iterator<SQLDataException>> resettableIterator1 = IteratorUtils.arrayIterator(iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Iterator<SQLDataException>>) resettableIterator1, (Closure<? super Iterator<SQLDataException>>) transformerClosure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) null, "6 xSx[KLPL2", "remove() can not be called before calling next()", "remove() can not be called before calling next()");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      int int0 = 1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException((String) null, (String) null, 1903);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("ListIterator must not be null", "p=NbC;OrN&f");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("p=NbC;OrN&f");
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("utGggm;k%JyX3p~]", (String) null, (-1), sQLTransientConnectionException4);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException((String) null, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(objectArrayListIterator0);
      IteratorUtils.get((Iterator<Object>) listIteratorWrapper0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedMapIterator<Iterator<SQLDataException>, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<SQLDataException>, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<SQLDataException>, SQLFeatureNotSupportedException>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Iterator<SQLDataException>>) abstractOrderedMapIteratorDecorator0, (Closure<? super Iterator<SQLDataException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[13];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(objectArrayListIterator0);
      IteratorUtils.get((Iterator<Object>) listIteratorWrapper0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      ResettableIterator<TreeSet<Boolean>> resettableIterator0 = IteratorUtils.singletonIterator(treeSet0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<TreeSet<Boolean>>) resettableIterator0, (Transformer<? super TreeSet<Boolean>, String>) transformer0, "", "Iterable must not be null", "Estimated size must be greater than 0");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[15];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      TruePredicate.truePredicate();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      Hashtable<String, SQLNonTransientException> hashtable0 = new Hashtable<String, SQLNonTransientException>();
      EntrySetMapIterator<String, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLNonTransientException>(hashtable0);
      iteratorArray0[0] = (Iterator<String>) entrySetMapIterator0;
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) iterator0, 2104);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) resettableListIterator0, (Iterator<? extends String>) entrySetMapIterator0, (Iterator<? extends String>) iterator0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) mapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("3sv^i^");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("3sv^i^", "3sv^i^", sQLTransactionRollbackException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLIntegrityConstraintViolationException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("&L+k9d-iL3_");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator("&L+k9d-iL3_");
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[13];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      TruePredicate.truePredicate();
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(objectArrayListIterator0);
      IteratorUtils.get((Iterator<Object>) listIteratorWrapper0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) listIteratorWrapper0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("List must not be null", "List must not be null", 91, sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "List must not be null", 5, sQLNonTransientConnectionException0);
      ConstantTransformer.constantTransformer(sQLTransientConnectionException0);
      IteratorUtils.toString((Iterator<TreeSet<Boolean>>) null, (Transformer<? super TreeSet<Boolean>, String>) constantTransformer0, "UY`?#?p|q51A", "org.apache.commons.collections4.functors.PredicateTransformer", "");
      IteratorUtils.isEmpty((Iterator<?>) null);
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      TreeSet<Boolean>[] treeSetArray0 = (TreeSet<Boolean>[]) Array.newInstance(TreeSet.class, 2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>(comparator0);
      treeSetArray0[0] = treeSet0;
      TreeSet<Boolean> treeSet1 = new TreeSet<Boolean>();
      treeSetArray0[1] = treeSet1;
      ObjectArrayIterator<TreeSet<Boolean>> objectArrayIterator0 = new ObjectArrayIterator<TreeSet<Boolean>>(treeSetArray0, 1, 1);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<TreeSet<Boolean>>) objectArrayIterator0, (Transformer<? super TreeSet<Boolean>, String>) transformer0, "", "", "");
      IteratorUtils.isEmpty(objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) stack0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>(" V) +c#fvLqfT");
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) singletonIterator0, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 16;
      Integer integer0 = new Integer(16);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(16);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(16);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer2, defaultEquator0);
      IteratorUtils.matchesAny((Iterator<Integer>) objectArrayIterator0, (Predicate<? super Integer>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("Transformer must not be null");
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      SingletonIterator<TreeSet<Boolean>> singletonIterator0 = new SingletonIterator<TreeSet<Boolean>>(treeSet0, false);
      IteratorUtils.toString((Iterator<TreeSet<Boolean>>) null, (Transformer<? super TreeSet<Boolean>, String>) constantTransformer0, "5_jY@M", "List must not be null", "");
      IteratorUtils.isEmpty(iterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) stack0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      TreeSet<Boolean> treeSet1 = new TreeSet<Boolean>();
      SingletonListIterator<TreeSet<Boolean>> singletonListIterator0 = new SingletonListIterator<TreeSet<Boolean>>(treeSet1);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) resettableListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Y5L@08-2_p", sQLDataException0);
      SQLWarning sQLWarning0 = new SQLWarning("Y5L@08-2_p", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Y5L@08-2_p", "Y5L@08-2_p", sQLWarning0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLSyntaxErrorException1);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLRecoverableException>) equalPredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Predicate<? super SQLFeatureNotSupportedException>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTransactionRollbackException0, defaultEquator0);
      String string0 = "ePe@it}Fy1<$s>f-";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ePe@it}Fy1<$s>f-");
      IdentityPredicate<IIOMetadataNode> identityPredicate0 = new IdentityPredicate<IIOMetadataNode>(iIOMetadataNode0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<SQLException>) null, (Predicate<? super SQLException>) predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedMapIterator<DataTruncation, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) orderedMapIterator0);
      Locale.LanguageRange[] locale_LanguageRangeArray0 = new Locale.LanguageRange[6];
      Locale.LanguageRange locale_LanguageRange0 = null;
//      try {
        locale_LanguageRange0 = new Locale.LanguageRange("NAC|>$Y&:4K[x", (-42.8179867261));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // weight=-42.8179867261
//         //
//         verifyException("java.util.Locale$LanguageRange", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer integer0 = new Integer(23);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Start index must not be greater than the array length", "Start index must not be greater than the array length", 0);
      SQLDataException sQLDataException0 = new SQLDataException("Start index must not be greater than the array length", "Start index must not be greater than the array length", 0);
      sQLFeatureNotSupportedException0.printStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, (String) null, sQLDataException0);
      sQLFeatureNotSupportedException1.setNextException(sQLFeatureNotSupportedException0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("&k");
      MapIterator<TreeSet<Boolean>, Locale.LanguageRange> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<TreeSet<Boolean>>) mapIterator0, (Transformer<? super TreeSet<Boolean>, String>) constantTransformer0, "JRY*", (String) null, "JRY*");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      PriorityQueue<IIOMetadataNode> priorityQueue0 = new PriorityQueue<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) priorityQueue0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      priorityQueue0.add(iIOMetadataNode0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<IIOMetadataNode> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.PriorityQueue$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OrderedMapIterator<SQLException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLException, ? extends DataTruncation>) orderedMapIterator0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>((SQLException) null, defaultEquator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("T");
      ResettableIterator<TreeSet<Boolean>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<TreeSet<Boolean>>) resettableIterator0, (Transformer<? super TreeSet<Boolean>, String>) constantTransformer0, "T", "", "~mX5Redy8?o-N431");
      IteratorUtils.isEmpty(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) stack0, (Equator<Object>) null);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OrderedMapIterator<SQLException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLException, ? extends DataTruncation>) orderedMapIterator0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>((SQLException) null, defaultEquator0);
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      TreeSet<Boolean> treeSet1 = new TreeSet<Boolean>();
      TreeSet<Boolean> treeSet2 = new TreeSet<Boolean>();
      TreeSet<Boolean>[] treeSetArray0 = (TreeSet<Boolean>[]) Array.newInstance(TreeSet.class, 0);
      ResettableListIterator<TreeSet<Boolean>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("eiZay@;-fHJ");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<TreeSet<Boolean>>) resettableListIterator0, (Transformer<? super TreeSet<Boolean>, String>) constantTransformer0, (String) null, "BkWY?Ez9*A", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) mapIterator0);
      IteratorUtils.isEmpty(mapIterator0);
      int[] intArray0 = new int[8];
      intArray0[0] = 706;
      intArray0[1] = 210;
      intArray0[2] = 210;
      intArray0[3] = 2624;
      intArray0[4] = 210;
      intArray0[5] = 706;
      intArray0[6] = 210;
      intArray0[7] = 706;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "0tpAe~?|^_i-V", 210, intArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 706, sQLNonTransientConnectionException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      ConstantTransformer<SQLRecoverableException, String> constantTransformer0 = new ConstantTransformer<SQLRecoverableException, String>("`^)z.2f-K{]mlO");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, String>) constantTransformer0, "", "", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OrderedMapIterator<SQLException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLException, ? extends DataTruncation>) orderedMapIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) singletonListIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) listIterator0);
      IteratorUtils.isEmpty(orderedMapIterator1);
      TreeSet<Boolean>[] treeSetArray0 = (TreeSet<Boolean>[]) Array.newInstance(TreeSet.class, 7);
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      treeSetArray0[0] = treeSet0;
      TreeSet<Boolean> treeSet1 = new TreeSet<Boolean>();
      treeSetArray0[1] = treeSet1;
      TreeSet<Boolean> treeSet2 = new TreeSet<Boolean>();
      treeSetArray0[2] = treeSet2;
      TreeSet<Boolean> treeSet3 = new TreeSet<Boolean>();
      treeSetArray0[3] = treeSet3;
      TreeSet<Boolean> treeSet4 = new TreeSet<Boolean>();
      treeSetArray0[4] = treeSet4;
      TreeSet<Boolean> treeSet5 = new TreeSet<Boolean>();
      treeSetArray0[5] = treeSet5;
      TreeSet<Boolean> treeSet6 = new TreeSet<Boolean>();
      treeSetArray0[6] = treeSet6;
      ResettableListIterator<TreeSet<Boolean>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("VViwT8N9 DZ");
      IteratorUtils.toString((Iterator<TreeSet<Boolean>>) resettableListIterator0, (Transformer<? super TreeSet<Boolean>, String>) constantTransformer0, "VViwT8N9 DZ", "VViwT8N9 DZ", "Predicate must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "VViwT8N9 DZ", 10, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) mapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("R}l74*sTHu%", "R}l74*sTHu%");
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLNonTransientConnectionException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("v1jrjFKLp");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLSyntaxErrorException0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicateArray0[0]);
      predicateArray0[3] = (Predicate<Object>) nullIsFalsePredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) anyPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) predicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) mapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("R}l74*sTHu%", "& kf0>s_hD&");
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLNonTransientConnectionException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("v1jrjFKLp");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLSyntaxErrorException0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicateArray0[0]);
      predicateArray0[3] = (Predicate<Object>) nullIsFalsePredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) anyPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Q");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) comparatorPredicate0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<IIOMetadataNode> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) arrayList0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("YwD}GIV]R%jraU");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) iterator0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(objectArray0[0], (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate1);
      objectArray0[1] = null;
      objectArray0[2] = (Object) locale_Category0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[4] = (Object) locale_Category0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) resettableIterator0, (-1));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -1
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) stack0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) arrayList0);
      SQLException sQLException0 = new SQLException("wMVg1cEZ/$cMvhuk\"", "wMVg1cEZ/$cMvhuk\"");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLException0, false);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.find((Iterator<SQLException>) singletonIterator0, (Predicate<? super SQLException>) predicate0);
      ArrayListIterator<StringTokenizer> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<StringTokenizer>(predicate0, 1473);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) mapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("R}l74*sTHu%", "& kf0>s_hD&");
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLNonTransientConnectionException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("v1jrjFKLp");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLSyntaxErrorException0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicateArray0[0]);
      predicateArray0[3] = (Predicate<Object>) nullIsFalsePredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) anyPredicate0);
      IteratorUtils.find((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) predicate1);
      ArrayListIterator<StringTokenizer> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<StringTokenizer>(mapIterator0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      IteratorUtils.emptyIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("3sv^i^");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Iterator<?> iterator0 = new SingletonIterator<String>("3sv^i^");
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.emptyIterator();
      Transformer<SQLDataException, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator((SQLDataException) null, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("transformer may not be null");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 8);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedException0.printStackTrace();
      String string0 = "ListIterator must not be null";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("AM-)i6asW\"Qw", "ListIterator must not be null", 1);
      Integer integer0 = new Integer((-1471));
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.contains(iterator0, (Object) "ListIterator must not be null");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 0);
      sQLFeatureNotSupportedException0.printStackTrace();
      sQLFeatureNotSupportedException0.printStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 0);
      IteratorUtils.contains((Iterator<Integer>) singletonListIterator0, (Object) sQLTransactionRollbackException0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 2);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      predicateArray0[0] = (Predicate<SQLException>) uniquePredicate0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      EqualPredicate.equalPredicate(iIOMetadataNode0);
      ResettableListIterator<SQLException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLException>) resettableListIterator0, (Predicate<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterable<SQLTransientException> iterable0 = new LinkedList<SQLTransientException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<?>) mapIterator0, (Transformer<? super Object, ? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      String string0 = "03*~8=Yl|L!9Ng.TRN";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("03*~8=Yl|L!9Ng.TRN");
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLRecoverableException0, defaultEquator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ePe@it}Fy1<$s>f-");
      EqualPredicate.equalPredicate(iIOMetadataNode0);
      Factory<SQLClientInfoException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) factory0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLRecoverableException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLException>) equalPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Hashtable<SQLSyntaxErrorException, SQLDataException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLDataException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) resettableIterator0;
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) resettableIterator0;
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) resettableIterator0;
      iteratorArray0[3] = (Iterator<SQLTimeoutException>) resettableIterator0;
      iteratorArray0[4] = (Iterator<SQLTimeoutException>) resettableIterator0;
      iteratorArray0[6] = (Iterator<SQLTimeoutException>) resettableIterator0;
      iteratorArray0[7] = (Iterator<SQLTimeoutException>) resettableIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Factory<SQLDataException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) factory0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) factory0, comparator0);
      PredicateTransformer<Locale.Category> predicateTransformer0 = new PredicateTransformer<Locale.Category>(predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("`lUQ(_n2{WeEA7ltW");
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator(iIOMetadataNode0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 125);
      IteratorUtils.getIterator(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      OrderedMapIterator<Iterator<SQLDataException>, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<SQLDataException>, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<SQLDataException>, SQLFeatureNotSupportedException>(orderedMapIterator0);
      IteratorUtils.apply((Iterator<Iterator<SQLDataException>>) orderedMapIterator0, (Closure<? super Iterator<SQLDataException>>) transformerClosure0);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      IteratorUtils.toString((Iterator<ClientInfoStatus>) null);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Properties> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Properties>) predicate0);
      IteratorUtils.matchesAll((Iterator<Properties>) null, (Predicate<? super Properties>) predicate1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Factory<SQLDataException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, SQLDataException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) factory0);
      IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends SQLNonTransientException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 0);
      sQLFeatureNotSupportedException0.printStackTrace();
      sQLFeatureNotSupportedException0.printStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLDataException0);
      IteratorUtils.contains((Iterator<Integer>) singletonListIterator0, (Object) sQLTransactionRollbackException0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 2);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      predicateArray0[0] = (Predicate<SQLException>) uniquePredicate0;
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      predicateArray0[1] = predicate0;
      AnyPredicate.anyPredicate((Predicate<? super SQLException>[]) predicateArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) singletonIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.isEmpty(singletonIterator0);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>(0);
      vector0.add((IIOMetadataNode) null);
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(vector0);
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) loopingIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedMapIterator<SQLException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLException, ? extends DataTruncation>) orderedMapIterator0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>((SQLException) null, defaultEquator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ePe@it}Fy1<$s>f-");
      EqualPredicate.equalPredicate(iIOMetadataNode0);
      IteratorUtils.find((Iterator<SQLException>) orderedMapIterator1, (Predicate<? super SQLException>) equalPredicate0);
      ArrayListIterator<StringTokenizer> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<StringTokenizer>("ePe@it}Fy1<$s>f-", 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 1073741823;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object[]) null, 1073741823);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      EmptyIterator.resettableEmptyIterator();
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      predicateArray1[0] = predicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray1[1] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      predicateArray1[2] = predicate1;
      Predicate<Object> predicate2 = NotNullPredicate.notNullPredicate();
      predicateArray1[3] = predicate2;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate1);
      predicateArray1[4] = (Predicate<Object>) equalPredicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate1);
      predicateArray1[5] = (Predicate<Object>) nullIsExceptionPredicate0;
      Predicate<Object> predicate3 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicateArray1[5]);
      predicateArray1[6] = predicate3;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray1);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Stack<Integer>>) equalPredicate0);
      Predicate<Object> predicate4 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) allPredicate0);
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate4, predicateArray1[4]);
      predicateArray0[0] = (Predicate<SQLException>) andPredicate0;
      Predicate<SQLException> predicate5 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate5;
      Predicate<SQLException> predicate6 = AnyPredicate.anyPredicate((Predicate<? super SQLException>[]) predicateArray0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Predicate<? super SQLTimeoutException>) predicate6);
      IteratorUtils.isEmpty(iterator0);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>(745);
      vector0.add((IIOMetadataNode) null);
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) loopingIterator0, (Predicate<? super IIOMetadataNode>) predicateArray1[5]);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Input Object must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Start index must not be greater than the array length", "Start index must not be greater than the array length", 0);
      SQLDataException sQLDataException0 = new SQLDataException("Start index must not be greater than the array length", "Start index must not be greater than the array length", 0);
      sQLFeatureNotSupportedException0.printStackTrace();
      sQLFeatureNotSupportedException0.printStackTrace();
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 0);
      sQLFeatureNotSupportedException0.printStackTrace();
      sQLFeatureNotSupportedException0.printStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLDataException0);
      IteratorUtils.contains((Iterator<Integer>) singletonListIterator0, (Object) sQLTransactionRollbackException0);
      Hashtable<SQLSyntaxErrorException, SQLDataException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLDataException>();
      EntrySetMapIterator<SQLSyntaxErrorException, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, SQLDataException>(hashtable0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) objectArrayListIterator0, (Predicate<? super SQLException>) predicate0);
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 7);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) orderedIterator0;
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (long) 9, (long) 9);
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) boundedIterator0;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "Collection must not be null");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("`");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashSet<SQLTimeoutException> hashSet0 = new LinkedHashSet<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-762));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 0);
      sQLFeatureNotSupportedException0.printStackTrace();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null, (Collection<? super SQLDataException>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "t ZlJ(qtchiM']D<00";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t ZlJ(qtchiM']D<00");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 0);
      sQLFeatureNotSupportedException0.printStackTrace();
      sQLFeatureNotSupportedException0.printStackTrace();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      ListIterator<IIOMetadataNode> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) listIterator1, 707);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 706
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      MapIterator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) mapIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IteratorUtils.emptyIterator();
      String string0 = "3sv^i^";
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("3sv^i^");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category.values();
      IteratorUtils.getIterator(locale_Category0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      OrderedMapIterator<Iterator<SQLDataException>, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<SQLDataException>, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<SQLDataException>, SQLFeatureNotSupportedException>(orderedMapIterator0);
      OrderedMapIterator<Iterator<SQLDataException>, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Iterator<SQLDataException>, ? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.apply((Iterator<Iterator<SQLDataException>>) orderedMapIterator1, (Closure<? super Iterator<SQLDataException>>) transformerClosure0);
      MapIterator<InstanceofPredicate, Integer> mapIterator0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o>cOU$Krl%QK ;Z$D:'");
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<InstanceofPredicate, Integer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 0);
      sQLFeatureNotSupportedException0.printStackTrace();
      sQLFeatureNotSupportedException0.printStackTrace();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Object[] objectArray0 = new Object[6];
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(singletonListIterator0);
      Object object0 = IteratorUtils.get((Iterator<Object>) listIteratorWrapper0, 0);
      objectArray0[0] = object0;
      objectArray0[1] = (Object) sQLDataException0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) sQLFeatureNotSupportedException0;
      objectArray0[5] = (Object) sQLDataException0;
      InvokerTransformer<Object, Object> invokerTransformer0 = new InvokerTransformer<Object, Object>("", classArray0, objectArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(invokerTransformer0);
      OrderedMapIterator<Iterator<SQLDataException>, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<SQLDataException>, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<SQLDataException>, SQLFeatureNotSupportedException>(orderedMapIterator0);
      OrderedMapIterator<Iterator<SQLDataException>, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Iterator<SQLDataException>, ? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.apply((Iterator<Iterator<SQLDataException>>) orderedMapIterator1, (Closure<? super Iterator<SQLDataException>>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("3sv^i^");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      IteratorUtils.isEmpty(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Transformer<Object, Integer>>) null, (Transformer<? super Transformer<Object, Integer>, ? extends String>) constantTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("3sv^i^");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(locale_Category0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      OrderedMapIterator<Iterator<SQLDataException>, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<SQLDataException>, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<SQLDataException>, SQLFeatureNotSupportedException>(orderedMapIterator0);
      OrderedMapIterator<Iterator<SQLDataException>, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Iterator<SQLDataException>, ? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.apply((Iterator<Iterator<SQLDataException>>) orderedMapIterator1, (Closure<? super Iterator<SQLDataException>>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends Integer>) orderedMapIterator0);
      Integer integer0 = new Integer(10);
      ConstantTransformer.constantTransformer(integer0);
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0);
      sQLFeatureNotSupportedException0.printStackTrace();
      sQLFeatureNotSupportedException0.printStackTrace();
      Hashtable<SQLSyntaxErrorException, SQLDataException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLDataException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("d,2");
      IteratorUtils.size(singletonListIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLFeatureNotSupportedException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("List must not be null", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "d,2");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException((String) null);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("List must not be null", (String) null, sQLTimeoutException2);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException((String) null, "d,2", (-1));
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException((String) null, (String) null, 1, sQLTimeoutException1);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 1);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      StringTokenizer stringTokenizer0 = new StringTokenizer("AiOV'Y*J$", "AiOV'Y*J$", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      IteratorUtils.isEmpty(iterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>> hashtable0 = new Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>>();
      hashtable0.keySet();
      hashtable0.keySet();
      hashtable0.clear();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "", intArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = "";
      String string1 = "Iterator getKey() can only be called after next() and before remove()";
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Iterator getKey() can only be called after next() and before remove()", "", 1456, intArray0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0, batchUpdateException1);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, 1456, 1456);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      hashSet0.iterator();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Factory<SQLDataException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) factory0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>> hashtable0 = new Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>>();
      hashtable0.keySet();
      hashtable0.clear();
      String string0 = "";
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "", intArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLWarning> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLWarning>(orderedMapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) abstractMapIteratorDecorator0, (Predicate<? super SQLClientInfoException>) comparatorPredicate0);
      HashMap<InstanceofPredicate, SQLClientInfoException> hashMap0 = new HashMap<InstanceofPredicate, SQLClientInfoException>();
      EntrySetMapIterator<InstanceofPredicate, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<InstanceofPredicate, SQLClientInfoException>(hashMap0);
      IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) entrySetMapIterator0, (Iterator<? extends InstanceofPredicate>) entrySetMapIterator0, (Iterator<? extends InstanceofPredicate>) entrySetMapIterator0);
      OrderedMapIterator<Vector<SQLTransientException>, SQLFeatureNotSupportedException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Vector<SQLTransientException>, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Vector<SQLTransientException>, SQLFeatureNotSupportedException>(orderedMapIterator1);
      OrderedMapIterator<Vector<SQLTransientException>, SQLFeatureNotSupportedException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Vector<SQLTransientException>, ? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      long long0 = 5031L;
      IteratorUtils.skippingIterator((Iterator<Vector<SQLTransientException>>) orderedMapIterator2, 5031L);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) resettableListIterator0, (Predicate<? super SQLTransientException>) comparatorPredicate0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLTransientException>) listIterator0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.singletonIterator((SQLTimeoutException) null);
      ResettableListIterator<SQLRecoverableException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) resettableListIterator1);
      int int0 = 19;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) resettableListIterator1, 19);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 19
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) null);
      IteratorUtils.transformedIterator((Iterator<?>) orderedIterator0, (Transformer<? super Object, ? extends SQLNonTransientException>) transformer0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("!C&");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("!C&", "d", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("9Qv7m vyo/3LzDmO~", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("9Qv7m vyo/3LzDmO~", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("!C&", "47;pK6s8f@", sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("d", "4cEWk");
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) objectArrayListIterator0, (Predicate<? super SQLException>) instanceofPredicate0);
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLRecoverableException>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends Integer>) orderedMapIterator0);
      Integer integer0 = new Integer(10);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<Iterator<SQLDataException>>) null, (Closure<? super Iterator<SQLDataException>>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("u08*Mx", "u08*Mx", 3329);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/(/Fc {3M fq", "org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", 12);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 0);
      sQLFeatureNotSupportedException0.printStackTrace();
      sQLFeatureNotSupportedException0.printStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLDataException0);
      IteratorUtils.contains((Iterator<Integer>) singletonListIterator0, (Object) sQLTransactionRollbackException0);
      Hashtable<SQLSyntaxErrorException, SQLDataException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLDataException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) resettableIterator0;
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) resettableIterator0;
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) resettableIterator0;
      iteratorArray0[3] = (Iterator<SQLTimeoutException>) resettableIterator0;
      iteratorArray0[4] = (Iterator<SQLTimeoutException>) resettableIterator0;
      iteratorArray0[5] = (Iterator<SQLTimeoutException>) resettableIterator0;
      iteratorArray0[6] = (Iterator<SQLTimeoutException>) resettableIterator0;
      iteratorArray0[7] = (Iterator<SQLTimeoutException>) resettableIterator0;
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) zippingIterator0, (Predicate<? super SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.emptyIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collectons4.iterators.Unmodifiable~istIterator");
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) orderedIterator0, (-1394));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collectons4.iterators.Unmodifiable~istIterator");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(constantTransformer0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.emptyIterator();
      IteratorUtils.size((Iterator<?>) null);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) instanceofPredicate0);
      IteratorUtils.toString(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>> hashtable0 = new Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Set<IIOMetadataNode> set0 = hashtable0.keySet();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      hashtable0.clear();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1218;
      intArray0[1] = 1456;
      intArray0[2] = (-962);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, intArray0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {1218, 1456, (-962)}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", 100, intArray0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertEquals("", batchUpdateException1.getSQLState());
      assertEquals(100, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertEquals("", batchUpdateException1.getMessage());
      assertArrayEquals(new int[] {1218, 1456, (-962)}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(batchUpdateException1);
      
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0, batchUpdateException0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertNull(batchUpdateException2.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException2.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException", batchUpdateException2.toString());
      assertArrayEquals(new int[] {1218, 1456, (-962)}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(batchUpdateException2);
      
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      BatchUpdateException batchUpdateException3 = new BatchUpdateException();
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertNull(batchUpdateException3.getMessage());
      assertNull(batchUpdateException3.getSQLState());
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException3.toString());
      assertNotNull(batchUpdateException3);
      
      batchUpdateExceptionArray0[0] = batchUpdateException3;
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ResettableIterator<BatchUpdateException> resettableIterator1 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      assertEquals(2, batchUpdateExceptionArray0.length);
      assertNotNull(resettableIterator1);
      
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      BatchUpdateException[] batchUpdateExceptionArray1 = IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableIterator1, class0);
      assertNotSame(batchUpdateExceptionArray1, batchUpdateExceptionArray0);
      assertNotSame(batchUpdateExceptionArray0, batchUpdateExceptionArray1);
      assertFalse(batchUpdateExceptionArray1.equals((Object)batchUpdateExceptionArray0));
      assertEquals(2, batchUpdateExceptionArray1.length);
      assertEquals(2, batchUpdateExceptionArray0.length);
      assertNotNull(batchUpdateExceptionArray1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>(9);
      assertEquals(0, vector0.size());
      assertEquals(9, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getPreviousSibling();
      assertNull(node0);
      
      boolean boolean0 = vector0.add(iIOMetadataNode0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(9, vector0.capacity());
      assertTrue(boolean0);
      assertTrue(vector0.contains(iIOMetadataNode0));
      
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(9, vector0.capacity());
      assertTrue(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(vector0.contains(iIOMetadataNode0));
      assertNotNull(resettableListIterator0);
      
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>(1);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(1, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(1, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator1, (-2389L), (long) 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) singletonIterator0, 10);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 9
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(enumeration0);
      
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(instanceofPredicate0));
      assertNotNull(priorityQueue0);
      
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) priorityQueue0);
      assertTrue(singletonIterator0.hasNext());
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(instanceofPredicate0));
      assertNotNull(iterator0);
      
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, (Throwable) null);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((Throwable) null);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNotNull(sQLTransientConnectionException1);
      
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException((Throwable) null);
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException1));
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException2.toString());
      assertEquals(0, sQLTransientConnectionException2.getErrorCode());
      assertNull(sQLTransientConnectionException2.getSQLState());
      assertNull(sQLTransientConnectionException2.getMessage());
      assertNotNull(sQLTransientConnectionException2);
      
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException((String) null, "", sQLTransientConnectionException0);
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException0));
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException3.getErrorCode());
      assertEquals("", sQLTransientConnectionException3.getSQLState());
      assertNull(sQLTransientConnectionException3.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException3.toString());
      assertNotNull(sQLTransientConnectionException3);
      
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException();
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException0));
      assertNull(sQLTransientConnectionException4.getMessage());
      assertNull(sQLTransientConnectionException4.getSQLState());
      assertEquals(0, sQLTransientConnectionException4.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException4.toString());
      assertNotNull(sQLTransientConnectionException4);
      
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException();
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException4));
      assertNull(sQLTransientConnectionException5.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException5.toString());
      assertNull(sQLTransientConnectionException5.getSQLState());
      assertEquals(0, sQLTransientConnectionException5.getErrorCode());
      assertNotNull(sQLTransientConnectionException5);
      
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException();
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException4));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException5));
      assertEquals(0, sQLTransientConnectionException6.getErrorCode());
      assertNull(sQLTransientConnectionException6.getMessage());
      assertNull(sQLTransientConnectionException6.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException6.toString());
      assertNotNull(sQLTransientConnectionException6);
      
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException((String) null, "");
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException6));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException5));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException4));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException3));
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException7.toString());
      assertEquals(0, sQLTransientConnectionException7.getErrorCode());
      assertEquals("", sQLTransientConnectionException7.getSQLState());
      assertNull(sQLTransientConnectionException7.getMessage());
      assertNotNull(sQLTransientConnectionException7);
      
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(8, sQLTransientConnectionExceptionArray0.length);
      assertNotNull(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      SQLWarning sQLWarning0 = new SQLWarning("Array class must not be null");
      assertNull(sQLWarning0.getSQLState());
      assertEquals("Array class must not be null", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: Array class must not be null", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      DataTruncation dataTruncation0 = new DataTruncation(12, false, true, 12, 1417, sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("Array class must not be null", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: Array class must not be null", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(dataTruncation0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("Array class must not be null", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: Array class must not be null", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(iterator1);
      
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      Iterable<Integer> iterable0 = IteratorUtils.asIterable((Iterator<? extends Integer>) orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("NE0h\"tjF&*8NR`;l");
      assertNotNull(iIOMetadataNode0);
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      assertNotNull(resettableIterator0);
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains(iIOMetadataNode0));
      assertNotNull(list0);
      
      SQLDataException sQLDataException0 = new SQLDataException("NE0h\"tjF&*8NR`;l", "NE0h\"tjF&*8NR`;l", (Throwable) null);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: NE0h\"tjF&*8NR`;l", sQLDataException0.toString());
      assertEquals("NE0h\"tjF&*8NR`;l", sQLDataException0.getMessage());
      assertEquals("NE0h\"tjF&*8NR`;l", sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: NE0h\"tjF&*8NR`;l", sQLDataException0.toString());
      assertEquals("NE0h\"tjF&*8NR`;l", sQLDataException0.getMessage());
      assertEquals("NE0h\"tjF&*8NR`;l", sQLDataException0.getSQLState());
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<Integer, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null, 60);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLTimeoutException>) orderedIterator0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Boolean>) null, 2149);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(resettableIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLTimeoutException>) resettableIterator0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      assertNotNull(treeSet0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Attr attr0 = iIOMetadataNode0.getAttributeNodeNS("\"", "\"");
      assertNull(attr0);
      
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      int[] intArray0 = new int[1];
      intArray0[0] = 1473;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("\"", "j[", 1473, intArray0, (Throwable) null);
      assertEquals(1473, batchUpdateException0.getErrorCode());
      assertEquals("\"", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: \"", batchUpdateException0.toString());
      assertEquals("j[", batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {1473}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNull(batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertArrayEquals(new int[] {1473}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(batchUpdateException1);
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1473;
      intArray1[1] = 1473;
      intArray1[2] = 1473;
      intArray1[3] = 1473;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "j[", intArray1);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("", batchUpdateException2.getMessage());
      assertEquals("j[", batchUpdateException2.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException2.toString());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertArrayEquals(new int[] {1473, 1473, 1473, 1473}, intArray1);
      assertEquals(4, intArray1.length);
      assertNotNull(batchUpdateException2);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "", 60, intArray1);
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("", batchUpdateException3.getSQLState());
      assertEquals("", batchUpdateException3.getMessage());
      assertEquals(60, batchUpdateException3.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException3.toString());
      assertArrayEquals(new int[] {1473, 1473, 1473, 1473}, intArray1);
      assertEquals(4, intArray1.length);
      assertNotNull(batchUpdateException3);
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException(intArray0, batchUpdateException2);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("", batchUpdateException2.getMessage());
      assertEquals("j[", batchUpdateException2.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException2.toString());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertNull(batchUpdateException4.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: ", batchUpdateException4.toString());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException4.getMessage());
      assertEquals(0, batchUpdateException4.getErrorCode());
      assertArrayEquals(new int[] {1473}, intArray0);
      assertArrayEquals(new int[] {1473, 1473, 1473, 1473}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(batchUpdateException4);
      
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      assertEquals(5, batchUpdateExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      BatchUpdateException[] batchUpdateExceptionArray1 = IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableIterator0, class0);
      assertNotSame(batchUpdateExceptionArray0, batchUpdateExceptionArray1);
      assertNotSame(batchUpdateExceptionArray1, batchUpdateExceptionArray0);
      assertFalse(batchUpdateExceptionArray1.equals((Object)batchUpdateExceptionArray0));
      assertEquals(5, batchUpdateExceptionArray0.length);
      assertEquals(5, batchUpdateExceptionArray1.length);
      assertNotNull(batchUpdateExceptionArray1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Integer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      assertNotNull(treeSet0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Attr attr0 = iIOMetadataNode0.getAttributeNodeNS("\"", "\"");
      assertNull(attr0);
      
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      int[] intArray0 = new int[1];
      intArray0[0] = 1473;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("\"", "j[", 1473, intArray0, (Throwable) null);
      assertEquals("java.sql.BatchUpdateException: \"", batchUpdateException0.toString());
      assertEquals("\"", batchUpdateException0.getMessage());
      assertEquals(1473, batchUpdateException0.getErrorCode());
      assertEquals("j[", batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {1473}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertNull(batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertArrayEquals(new int[] {1473}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(batchUpdateException1);
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1473;
      intArray1[1] = 1473;
      intArray1[2] = 1473;
      intArray1[3] = 1473;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "j[", intArray1);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException2.toString());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertEquals("", batchUpdateException2.getMessage());
      assertEquals("j[", batchUpdateException2.getSQLState());
      assertArrayEquals(new int[] {1473, 1473, 1473, 1473}, intArray1);
      assertEquals(4, intArray1.length);
      assertNotNull(batchUpdateException2);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "", 60, intArray1);
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(60, batchUpdateException3.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException3.toString());
      assertEquals("", batchUpdateException3.getMessage());
      assertEquals("", batchUpdateException3.getSQLState());
      assertArrayEquals(new int[] {1473, 1473, 1473, 1473}, intArray1);
      assertEquals(4, intArray1.length);
      assertNotNull(batchUpdateException3);
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException(intArray0, batchUpdateException2);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException2.toString());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertEquals("", batchUpdateException2.getMessage());
      assertEquals("j[", batchUpdateException2.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: ", batchUpdateException4.toString());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException4.getMessage());
      assertNull(batchUpdateException4.getSQLState());
      assertEquals(0, batchUpdateException4.getErrorCode());
      assertArrayEquals(new int[] {1473}, intArray0);
      assertArrayEquals(new int[] {1473, 1473, 1473, 1473}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(batchUpdateException4);
      
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = (BatchUpdateException)batchUpdateException3.initCause(batchUpdateException2);
      assertNotSame(batchUpdateException2, batchUpdateException3);
      assertNotSame(batchUpdateException2, batchUpdateException4);
      assertNotSame(batchUpdateException2, batchUpdateException0);
      assertNotSame(batchUpdateException2, batchUpdateException1);
      assertNotSame(batchUpdateException2, batchUpdateException5);
      assertSame(batchUpdateException3, batchUpdateException5);
      assertNotSame(batchUpdateException3, batchUpdateException2);
      assertNotSame(batchUpdateException3, batchUpdateException4);
      assertNotSame(batchUpdateException3, batchUpdateException1);
      assertNotSame(batchUpdateException3, batchUpdateException0);
      assertSame(batchUpdateException5, batchUpdateException3);
      assertNotSame(batchUpdateException5, batchUpdateException1);
      assertNotSame(batchUpdateException5, batchUpdateException0);
      assertNotSame(batchUpdateException5, batchUpdateException2);
      assertNotSame(batchUpdateException5, batchUpdateException4);
      assertNotSame(intArray1, intArray0);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException4));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException2.toString());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertEquals("", batchUpdateException2.getMessage());
      assertEquals("j[", batchUpdateException2.getSQLState());
      assertEquals(60, batchUpdateException3.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException3.toString());
      assertEquals("", batchUpdateException3.getMessage());
      assertEquals("", batchUpdateException3.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException5.toString());
      assertEquals(60, batchUpdateException5.getErrorCode());
      assertEquals("", batchUpdateException5.getSQLState());
      assertEquals("", batchUpdateException5.getMessage());
      assertArrayEquals(new int[] {1473, 1473, 1473, 1473}, intArray1);
      assertEquals(4, intArray1.length);
      assertNotNull(batchUpdateException5);
      
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      assertEquals(5, batchUpdateExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      BatchUpdateException[] batchUpdateExceptionArray1 = IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableIterator0, class0);
      assertNotSame(batchUpdateExceptionArray0, batchUpdateExceptionArray1);
      assertNotSame(batchUpdateExceptionArray1, batchUpdateExceptionArray0);
      assertFalse(batchUpdateExceptionArray1.equals((Object)batchUpdateExceptionArray0));
      assertEquals(5, batchUpdateExceptionArray0.length);
      assertEquals(5, batchUpdateExceptionArray1.length);
      assertNotNull(batchUpdateExceptionArray1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      MapIterator<String, SQLNonTransientConnectionException> mapIterator1 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      MapIterator<String, SQLNonTransientConnectionException> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      assertFalse(mapIterator2.equals((Object)mapIterator1));
      assertNotNull(mapIterator2);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) mapIterator2, (Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(enumeration0);
      
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(instanceofPredicate0));
      assertNotNull(priorityQueue0);
      
      String string0 = "/R";
      SQLDataException sQLDataException0 = new SQLDataException("/R", "/R");
      assertEquals("/R", sQLDataException0.getMessage());
      assertEquals("/R", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: /R", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      ConstantFactory<SQLDataException> constantFactory0 = new ConstantFactory<SQLDataException>(sQLDataException0);
      assertEquals("/R", sQLDataException0.getMessage());
      assertEquals("/R", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: /R", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(constantFactory0);
      
      Factory<SQLDataException> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      Transformer<Object, SQLDataException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) factory0);
      assertNotNull(transformer0);
      
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) singletonIterator0, (Transformer<? super Object, ? extends SQLNonTransientException>) transformer0);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(iterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4uZQpk}{");
      assertFalse(boolean0);
      
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate1);
      
      instanceofPredicateArray0[1] = instanceofPredicate1;
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertNotNull(singletonListIterator0);
      
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      Class<Object> class0 = Object.class;
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) orderedIterator0, (Iterator<? extends SQLRecoverableException>) orderedIterator0);
      assertNotNull(zippingIterator0);
      
      SQLException sQLException0 = new SQLException("TF");
      assertEquals("TF", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: TF", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      Hashtable<SQLNonTransientConnectionException, Integer> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Integer>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<SQLNonTransientConnectionException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Integer>(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(entrySetMapIterator0);
      
      Hashtable<SQLNonTransientConnectionException, Integer> hashtable1 = new Hashtable<SQLNonTransientConnectionException, Integer>();
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertNotNull(hashtable1);
      
      EntrySetMapIterator<SQLNonTransientConnectionException, Integer> entrySetMapIterator1 = new EntrySetMapIterator<SQLNonTransientConnectionException, Integer>(hashtable1);
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertFalse(entrySetMapIterator1.equals((Object)entrySetMapIterator0));
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertNotNull(entrySetMapIterator1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Integer integer0 = new Integer(155);
      assertEquals(155, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashtable0.replace(sQLNonTransientConnectionException0, integer0);
      assertNotSame(hashtable0, hashtable1);
      assertTrue(hashtable0.equals((Object)hashtable1));
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(integer1);
      
      Integer integer2 = hashtable0.put(sQLNonTransientConnectionException0, integer0);
      assertNotSame(hashtable0, hashtable1);
      assertFalse(hashtable0.equals((Object)hashtable1));
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(integer2);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      entrySetMapIterator1.forEachRemaining(consumer0);
      assertNotSame(hashtable1, hashtable0);
      assertNotSame(entrySetMapIterator1, entrySetMapIterator0);
      assertFalse(hashtable1.equals((Object)hashtable0));
      assertFalse(entrySetMapIterator1.equals((Object)entrySetMapIterator0));
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) entrySetMapIterator1, (Iterator<? extends SQLNonTransientConnectionException>) entrySetMapIterator0);
      assertNotSame(hashtable0, hashtable1);
      assertNotSame(entrySetMapIterator0, entrySetMapIterator1);
      assertNotSame(hashtable1, hashtable0);
      assertNotSame(entrySetMapIterator1, entrySetMapIterator0);
      assertFalse(hashtable0.equals((Object)hashtable1));
      assertFalse(entrySetMapIterator0.equals((Object)entrySetMapIterator1));
      assertFalse(hashtable1.equals((Object)hashtable0));
      assertFalse(entrySetMapIterator1.equals((Object)entrySetMapIterator0));
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertNotNull(iterator0);
      
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Spn.NTqV%;,KqK6,,W", sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: Spn.NTqV%;,KqK6,,W", sQLTransientConnectionException0.toString());
      assertEquals("Spn.NTqV%;,KqK6,,W", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 9);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Attr attr0 = iIOMetadataNode0.getAttributeNodeNS("\"", "");
      assertNull(attr0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      ResettableIterator<SQLNonTransientException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertSame(resettableIterator1, resettableIterator0);
      assertNotNull(resettableIterator1);
      
      int int0 = IteratorUtils.size(resettableIterator1);
      assertSame(resettableIterator1, resettableIterator0);
      assertEquals(0, int0);
      
      HashMap<PriorityQueue<SQLDataException>, SQLTransientException> hashMap0 = new HashMap<PriorityQueue<SQLDataException>, SQLTransientException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      EntrySetMapIterator<PriorityQueue<SQLDataException>, SQLTransientException> entrySetMapIterator0 = new EntrySetMapIterator<PriorityQueue<SQLDataException>, SQLTransientException>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(enumeration0);
      
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      Iterator<Integer> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Integer>) resettableListIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(iterator1);
      
      Iterator<?> iterator2 = IteratorUtils.getIterator(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(iterator2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) orderedIterator0, (Iterator<? extends SQLRecoverableException>) orderedIterator0);
      assertNotNull(zippingIterator0);
      
      SQLException sQLException0 = new SQLException("TF");
      assertEquals("java.sql.SQLException: TF", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("TF", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("The collections must not be null", "TF", (-130), sQLException0);
      assertEquals("java.sql.SQLException: TF", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("TF", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("The collections must not be null", sQLDataException0.getMessage());
      assertEquals((-130), sQLDataException0.getErrorCode());
      assertEquals("TF", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: The collections must not be null", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      ConstantFactory<SQLDataException> constantFactory0 = new ConstantFactory<SQLDataException>(sQLDataException0);
      assertEquals("java.sql.SQLException: TF", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("TF", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("The collections must not be null", sQLDataException0.getMessage());
      assertEquals((-130), sQLDataException0.getErrorCode());
      assertEquals("TF", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: The collections must not be null", sQLDataException0.toString());
      assertNotNull(constantFactory0);
      
      ConstantFactory<SQLDataException> constantFactory1 = new ConstantFactory<SQLDataException>(sQLDataException0);
      assertFalse(constantFactory1.equals((Object)constantFactory0));
      assertEquals("java.sql.SQLException: TF", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("TF", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("The collections must not be null", sQLDataException0.getMessage());
      assertEquals((-130), sQLDataException0.getErrorCode());
      assertEquals("TF", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: The collections must not be null", sQLDataException0.toString());
      assertNotNull(constantFactory1);
      
      Transformer<Object, SQLDataException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) constantFactory1);
      assertNotSame(constantFactory1, constantFactory0);
      assertFalse(constantFactory1.equals((Object)constantFactory0));
      assertEquals("java.sql.SQLException: TF", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("TF", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("The collections must not be null", sQLDataException0.getMessage());
      assertEquals((-130), sQLDataException0.getErrorCode());
      assertEquals("TF", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: The collections must not be null", sQLDataException0.toString());
      assertNotNull(transformer0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("3sv^i^");
      assertNotNull(constantTransformer0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Class<Properties> class0 = Properties.class;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      assertNotNull(instanceofPredicate0);
      
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class2);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate1);
      
      Class<Integer> class3 = Integer.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class3);
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate2);
      
      Class<String> class4 = String.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class4);
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate1));
      assertNotNull(instanceofPredicate3);
      
      Class<InstanceofPredicate> class5 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class5);
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate3));
      assertNotNull(instanceofPredicate4);
      
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class0);
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate4));
      assertNotNull(instanceofPredicate5);
      
      instanceofPredicateArray0[0] = instanceofPredicate5;
      instanceofPredicateArray0[1] = instanceofPredicate2;
      instanceofPredicateArray0[2] = instanceofPredicate0;
      instanceofPredicateArray0[3] = instanceofPredicate0;
      instanceofPredicateArray0[4] = instanceofPredicate4;
      instanceofPredicateArray0[5] = instanceofPredicate2;
      instanceofPredicateArray0[6] = instanceofPredicate4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(instanceofPredicateArray0, 0, (-2434));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4uZQpk}{");
      assertFalse(boolean0);
      
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate1);
      
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<Properties> class2 = Properties.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate2);
      
      instanceofPredicateArray0[2] = instanceofPredicate2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class3);
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate1));
      assertNotNull(instanceofPredicate3);
      
      instanceofPredicateArray0[3] = instanceofPredicate3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class4);
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate4);
      
      instanceofPredicateArray0[4] = instanceofPredicate4;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class4);
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate1));
      assertNotNull(instanceofPredicate5);
      
      instanceofPredicateArray0[5] = instanceofPredicate5;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class0);
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate5));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate3));
      assertNotNull(instanceofPredicate6);
      
      instanceofPredicateArray0[6] = instanceofPredicate6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(instanceofPredicateArray0, 954, 7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterable<SQLTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) mapIterator0);
      assertNotNull(iterable0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 1);
      assertEquals(1, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("", sQLFeatureNotSupportedException0);
      assertEquals(1, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      sQLFeatureNotSupportedException0.printStackTrace();
      assertEquals(1, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      
      sQLFeatureNotSupportedException0.printStackTrace();
      assertEquals(1, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLFeatureNotSupportedException0);
      assertEquals(1, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[1];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      ResettableIterator<SQLTransientException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      assertEquals(1, sQLTransientExceptionArray0.length);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>> hashtable0 = new Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>>(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(entrySetMapIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(iterator0);
      
      Set<IIOMetadataNode> set0 = hashtable0.keySet();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      hashtable0.clear();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "Array class must not be null", 3529);
      assertEquals(3529, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("Array class must not be null", sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("Array class must not be null", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: Array class must not be null", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      sQLFeatureNotSupportedException0.printStackTrace();
      assertEquals(3529, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      
      sQLFeatureNotSupportedException0.printStackTrace();
      assertEquals(3529, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Array class must not be null", (String) null, sQLFeatureNotSupportedException0);
      assertEquals(3529, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("Array class must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Array class must not be null", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Array class must not be null");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Array class must not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Array class must not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<Integer>) null, (Object) sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Array class must not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Array class must not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertFalse(boolean0);
      
      Hashtable<SQLSyntaxErrorException, SQLDataException> hashtable1 = new Hashtable<SQLSyntaxErrorException, SQLDataException>();
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(hashtable1);
      
      boolean boolean1 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(boolean1 == boolean0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterable<SQLTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) mapIterator0);
      assertNotNull(iterable0);
      
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
      
      SQLException sQLException0 = new SQLException("f;3q");
      assertNull(sQLException0.getSQLState());
      assertEquals("f;3q", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: f;3q", sQLException0.toString());
      assertNotNull(sQLException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("E2izj,&\"", "E2izj,&\"", 91, sQLException0);
      assertNull(sQLException0.getSQLState());
      assertEquals("f;3q", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: f;3q", sQLException0.toString());
      assertEquals("E2izj,&\"", sQLDataException0.getMessage());
      assertEquals("E2izj,&\"", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: E2izj,&\"", sQLDataException0.toString());
      assertEquals(91, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      ConstantFactory<SQLDataException> constantFactory0 = new ConstantFactory<SQLDataException>(sQLDataException0);
      assertNull(sQLException0.getSQLState());
      assertEquals("f;3q", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: f;3q", sQLException0.toString());
      assertEquals("E2izj,&\"", sQLDataException0.getMessage());
      assertEquals("E2izj,&\"", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: E2izj,&\"", sQLDataException0.toString());
      assertEquals(91, sQLDataException0.getErrorCode());
      assertNotNull(constantFactory0);
      
      Transformer<Object, SQLDataException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) constantFactory0);
      assertNull(sQLException0.getSQLState());
      assertEquals("f;3q", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: f;3q", sQLException0.toString());
      assertEquals("E2izj,&\"", sQLDataException0.getMessage());
      assertEquals("E2izj,&\"", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: E2izj,&\"", sQLDataException0.toString());
      assertEquals(91, sQLDataException0.getErrorCode());
      assertNotNull(transformer0);
      
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) mapIterator0, (Transformer<? super Object, ? extends SQLNonTransientException>) transformer0);
      assertNull(sQLException0.getSQLState());
      assertEquals("f;3q", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: f;3q", sQLException0.toString());
      assertEquals("E2izj,&\"", sQLDataException0.getMessage());
      assertEquals("E2izj,&\"", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: E2izj,&\"", sQLDataException0.toString());
      assertEquals(91, sQLDataException0.getErrorCode());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("P");
      assertNotNull(constantTransformer0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      assertNotNull(iterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterable<SQLTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) mapIterator0);
      assertNotNull(iterable0);
      
      Hashtable<InstanceofPredicate, SQLClientInfoException> hashtable0 = new Hashtable<InstanceofPredicate, SQLClientInfoException>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<InstanceofPredicate, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<InstanceofPredicate, SQLClientInfoException>(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(entrySetMapIterator0);
      
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) entrySetMapIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(enumeration0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>> hashtable0 = new Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EntrySetMapIterator<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>>(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(entrySetMapIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(iterator0);
      
      Set<IIOMetadataNode> set0 = hashtable0.keySet();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      hashtable0.clear();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("", sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      sQLFeatureNotSupportedException0.printStackTrace();
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      sQLFeatureNotSupportedException0.printStackTrace();
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLDataException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean1 = IteratorUtils.contains((Iterator<Integer>) listIterator0, (Object) sQLTransactionRollbackException0);
      assertFalse(boolean1 == boolean0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertFalse(boolean1);
      
      Hashtable<SQLSyntaxErrorException, SQLDataException> hashtable1 = new Hashtable<SQLSyntaxErrorException, SQLDataException>();
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertNotNull(hashtable1);
      
      boolean boolean2 = IteratorUtils.isEmpty(resettableListIterator0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(boolean2);
      
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0, 0);
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertEquals(0, batchUpdateExceptionArray0.length);
      assertNotNull(resettableListIterator1);
      
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator1, (Iterator<? extends BatchUpdateException>) resettableListIterator1, (Iterator<? extends BatchUpdateException>) resettableListIterator1);
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertEquals(0, batchUpdateExceptionArray0.length);
      assertNotNull(zippingIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) zippingIterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("3sv^i^");
      assertNotNull(constantTransformer0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertNotNull(singletonListIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) constantTransformer0);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals("[3sv^i^]", string0);
      assertNotNull(string0);
      
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>> hashtable0 = new Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(iterator0);
      
      Set<IIOMetadataNode> set0 = hashtable0.keySet();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate1);
      
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      Enumeration<InstanceofPredicate> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      assertNotSame(instanceofPredicate1, instanceofPredicate0);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(enumeration1);
      
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(instanceofPredicate0));
      assertNotNull(priorityQueue0);
      
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) singletonIterator0, 91);
      assertNotSame(instanceofPredicate1, instanceofPredicate0);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertFalse(singletonIterator0.hasNext());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(91));
      assertNotNull(list0);
      
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration1, (Collection<? super InstanceofPredicate>) priorityQueue0);
      assertNotSame(instanceofPredicate1, instanceofPredicate0);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertFalse(singletonIterator0.hasNext());
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(instanceofPredicate0));
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<BatchUpdateException> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, 1L);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(boundedIterator0);
      
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLTimeoutException, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(mapIterator1);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      Iterable<SQLTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) singletonIterator0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(iterable0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLRecoverableException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", "Nn=.t", 162);
      assertEquals("Nn=.t", sQLTransactionRollbackException0.getSQLState());
      assertEquals(162, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("-/<GE,n", "MapIterator[", sQLTransactionRollbackException0);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertEquals("Nn=.t", sQLTransactionRollbackException0.getSQLState());
      assertEquals(162, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("MapIterator[", sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: -/<GE,n", sQLTransactionRollbackException1.toString());
      assertEquals("-/<GE,n", sQLTransactionRollbackException1.getMessage());
      assertNotNull(sQLTransactionRollbackException1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("'A7J0Y$Q}", "'A7J0Y$Q}", 162, sQLTransactionRollbackException1);
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertEquals("Nn=.t", sQLTransactionRollbackException0.getSQLState());
      assertEquals(162, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("MapIterator[", sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: -/<GE,n", sQLTransactionRollbackException1.toString());
      assertEquals("-/<GE,n", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 'A7J0Y$Q}", sQLTimeoutException0.toString());
      assertEquals("'A7J0Y$Q}", sQLTimeoutException0.getMessage());
      assertEquals("'A7J0Y$Q}", sQLTimeoutException0.getSQLState());
      assertEquals(162, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("-/<GE,n", "-/<GE,n", 162, sQLTimeoutException0);
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertEquals("Nn=.t", sQLTransactionRollbackException0.getSQLState());
      assertEquals(162, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("MapIterator[", sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: -/<GE,n", sQLTransactionRollbackException1.toString());
      assertEquals("-/<GE,n", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 'A7J0Y$Q}", sQLTimeoutException0.toString());
      assertEquals("'A7J0Y$Q}", sQLTimeoutException0.getMessage());
      assertEquals("'A7J0Y$Q}", sQLTimeoutException0.getSQLState());
      assertEquals(162, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: -/<GE,n", sQLTransactionRollbackException2.toString());
      assertEquals(162, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("-/<GE,n", sQLTransactionRollbackException2.getSQLState());
      assertEquals("-/<GE,n", sQLTransactionRollbackException2.getMessage());
      assertNotNull(sQLTransactionRollbackException2);
      
      Transformer<SQLException, SQLTransactionRollbackException> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException2, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      assertNotSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertNotSame(sQLTransactionRollbackException0, sQLTransactionRollbackException2);
      assertNotSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertNotSame(sQLTransactionRollbackException1, sQLTransactionRollbackException2);
      assertNotSame(sQLTransactionRollbackException2, sQLTransactionRollbackException1);
      assertNotSame(sQLTransactionRollbackException2, sQLTransactionRollbackException0);
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertEquals("Nn=.t", sQLTransactionRollbackException0.getSQLState());
      assertEquals(162, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("MapIterator[", sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: -/<GE,n", sQLTransactionRollbackException1.toString());
      assertEquals("-/<GE,n", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 'A7J0Y$Q}", sQLTimeoutException0.toString());
      assertEquals("'A7J0Y$Q}", sQLTimeoutException0.getMessage());
      assertEquals("'A7J0Y$Q}", sQLTimeoutException0.getSQLState());
      assertEquals(162, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: -/<GE,n", sQLTransactionRollbackException2.toString());
      assertEquals(162, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("-/<GE,n", sQLTransactionRollbackException2.getSQLState());
      assertEquals("-/<GE,n", sQLTransactionRollbackException2.getMessage());
      assertNotNull(iterator0);
      
      Iterable<SQLTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) iterator0);
      assertNotSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertNotSame(sQLTransactionRollbackException0, sQLTransactionRollbackException2);
      assertNotSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertNotSame(sQLTransactionRollbackException1, sQLTransactionRollbackException2);
      assertNotSame(sQLTransactionRollbackException2, sQLTransactionRollbackException1);
      assertNotSame(sQLTransactionRollbackException2, sQLTransactionRollbackException0);
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertEquals("Nn=.t", sQLTransactionRollbackException0.getSQLState());
      assertEquals(162, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("MapIterator[", sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: -/<GE,n", sQLTransactionRollbackException1.toString());
      assertEquals("-/<GE,n", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 'A7J0Y$Q}", sQLTimeoutException0.toString());
      assertEquals("'A7J0Y$Q}", sQLTimeoutException0.getMessage());
      assertEquals("'A7J0Y$Q}", sQLTimeoutException0.getSQLState());
      assertEquals(162, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: -/<GE,n", sQLTransactionRollbackException2.toString());
      assertEquals(162, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("-/<GE,n", sQLTransactionRollbackException2.getSQLState());
      assertEquals("-/<GE,n", sQLTransactionRollbackException2.getMessage());
      assertNotNull(iterable0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.isEmpty(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<BatchUpdateException> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, 1L);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(boundedIterator0);
      
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      BoundedIterator<BatchUpdateException> boundedIterator1 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) boundedIterator0, 0L);
      assertNotSame(boundedIterator0, boundedIterator1);
      assertNotSame(boundedIterator1, boundedIterator0);
      assertFalse(boundedIterator1.equals((Object)boundedIterator0));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(boundedIterator1);
      
      ResettableIterator<SQLNonTransientException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertSame(resettableIterator1, resettableIterator0);
      assertNotNull(resettableIterator1);
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>(";zX'");
      assertNotNull(constantTransformer0);
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(boundedIterator1);
      assertNotSame(boundedIterator0, boundedIterator1);
      assertNotSame(boundedIterator1, boundedIterator0);
      assertFalse(boundedIterator0.equals((Object)boundedIterator1));
      assertFalse(boundedIterator1.equals((Object)boundedIterator0));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) orderedIterator0, (Iterator<? extends SQLRecoverableException>) orderedIterator0);
      assertNotNull(zippingIterator0);
      
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<BatchUpdateException> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, 1L);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(boundedIterator0);
      
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("-k10\"A c4PR][roO6");
      assertNotNull(constantTransformer0);
      
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(iterator1);
      
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) iterator1);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(enumeration0);
      
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) boundedIterator0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(1L));
      assertNotNull(list0);
      
      Iterator<InstanceofPredicate> iterator2 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) list0);
      assertFalse(iterator2.equals((Object)iterator1));
      assertEquals(0, priorityQueue0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(1L));
      assertNotNull(iterator2);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null, 591);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) null, 657);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) orderedIterator0, (Iterator<? extends SQLRecoverableException>) orderedIterator0);
      assertNotNull(zippingIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Integer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) null);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) null, 1279L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<BatchUpdateException> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, 1L);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(boundedIterator0);
      
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<BatchUpdateException> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, ":^VnmCmUs?!n%", 10, intArray0);
      assertEquals(10, batchUpdateException0.getErrorCode());
      assertEquals(":^VnmCmUs?!n%", batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertArrayEquals(new int[] {10, 10, 10, 10}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      boolean boolean0 = priorityQueue0.add(batchUpdateException0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(10, batchUpdateException0.getErrorCode());
      assertEquals(":^VnmCmUs?!n%", batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertArrayEquals(new int[] {10, 10, 10, 10}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains(batchUpdateException0));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.PriorityQueue$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      ResettableIterator<SQLNonTransientException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertSame(resettableIterator1, resettableIterator0);
      assertNotNull(resettableIterator1);
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("3sv^i^");
      assertNotNull(constantTransformer0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      assertNotNull(iterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
      
      ResettableIterator<SQLDataException> resettableIterator2 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator2);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("", true);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) singletonIterator0, (Iterator<? extends String>) singletonIterator0, (Iterator<? extends String>) singletonIterator0);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLTimeoutException, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(mapIterator1);
      
      Iterable<SQLTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) mapIterator1);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(iterable0);
      
      ListIterator<ArrayList<InstanceofPredicate>> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ListIterator<ArrayList<InstanceofPredicate>> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertNotNull(listIterator1);
      
      SkippingIterator<ArrayList<InstanceofPredicate>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<ArrayList<InstanceofPredicate>>) listIterator1, 1L);
      assertFalse(listIterator0.equals((Object)listIterator1));
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertNotNull(skippingIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<BatchUpdateException> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, 1L);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(boundedIterator0);
      
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("-k10\"A c4PR][roO6");
      assertNotNull(constantTransformer0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(", ", "-k10\"A c4PR][roO6", 100);
      assertEquals(100, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("-k10\"A c4PR][roO6", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: , ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(", ", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Transformer<SQLNonTransientException, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.constantTransformer(sQLIntegrityConstraintViolationException0);
      assertEquals(100, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("-k10\"A c4PR][roO6", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: , ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(", ", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(transformer0);
      
      String string1 = IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableIterator0, (Transformer<? super SQLNonTransientException, String>) constantTransformer0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("[]", string1);
      assertNotNull(string1);
      
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, int0);
      
      HashMap<PriorityQueue<SQLDataException>, SQLTransientException> hashMap0 = new HashMap<PriorityQueue<SQLDataException>, SQLTransientException>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      EntrySetMapIterator<PriorityQueue<SQLDataException>, SQLTransientException> entrySetMapIterator0 = new EntrySetMapIterator<PriorityQueue<SQLDataException>, SQLTransientException>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[]", ", ", 1, sQLIntegrityConstraintViolationException0);
      assertEquals(100, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("-k10\"A c4PR][roO6", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: , ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(", ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(", ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: []", sQLNonTransientConnectionException0.toString());
      assertEquals(1, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("[]", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLNonTransientConnectionException0);
      assertEquals(100, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("-k10\"A c4PR][roO6", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: , ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(", ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(", ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: []", sQLNonTransientConnectionException0.toString());
      assertEquals(1, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("[]", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(equalPredicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<PriorityQueue<SQLDataException>>) entrySetMapIterator0, (Predicate<? super PriorityQueue<SQLDataException>>) equalPredicate0);
      assertEquals(100, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("-k10\"A c4PR][roO6", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: , ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(", ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(", ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: []", sQLNonTransientConnectionException0.toString());
      assertEquals(1, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("[]", sQLNonTransientConnectionException0.getMessage());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) orderedIterator0, (Iterator<? extends SQLRecoverableException>) orderedIterator0);
      assertNotNull(zippingIterator0);
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(enumeration0);
      
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(instanceofPredicate0));
      assertNotNull(priorityQueue0);
      
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) orderedIterator0, 91);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(91));
      assertNotNull(list0);
      
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) list0);
      assertTrue(singletonIterator0.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(91));
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      assertSame(iIOMetadataNode0, nodeList0);
      assertSame(nodeList0, iIOMetadataNode0);
      assertNotNull(nodeList0);
      
      int int0 = 44;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 44);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "~x,P,;", 461);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(461, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("~x,P,;", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(461, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("~x,P,;", sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      sQLFeatureNotSupportedException0.printStackTrace();
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(461, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("~x,P,;", sQLFeatureNotSupportedException0.getSQLState());
      
      sQLFeatureNotSupportedException0.printStackTrace();
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(461, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("~x,P,;", sQLFeatureNotSupportedException0.getSQLState());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, sQLDataException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(461, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("~x,P,;", sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      Hashtable<Integer, SQLWarning> hashtable0 = new Hashtable<Integer, SQLWarning>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<Integer, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<Integer, SQLWarning>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(iterator0);
      
      boolean boolean0 = IteratorUtils.contains(iterator0, (Object) null);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(boolean0);
      
      Hashtable<SQLSyntaxErrorException, SQLDataException> hashtable1 = new Hashtable<SQLSyntaxErrorException, SQLDataException>();
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(hashtable1);
      
      EntrySetMapIterator<SQLSyntaxErrorException, SQLDataException> entrySetMapIterator1 = new EntrySetMapIterator<SQLSyntaxErrorException, SQLDataException>(hashtable1);
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(entrySetMapIterator1);
      
      Predicate<Properties> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      boolean boolean1 = IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) entrySetMapIterator1, (Object) predicate0);
      assertTrue(boolean1 == boolean0);
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertFalse(boolean1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, (-103));
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals((-103), sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertNotNull(sQLNonTransientConnectionException1);
      
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertNotNull(resettableIterator1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<BatchUpdateException> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, (-3515L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLTimeoutException, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(mapIterator1);
      
      Object[] objectArray0 = new Object[0];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, objectArray0.length);
      assertNotNull(resettableListIterator0);
      
      Iterator<Object> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Object>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, objectArray0.length);
      assertNotNull(iterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>> hashtable0 = new Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>>(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(entrySetMapIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(iterator0);
      
      Set<IIOMetadataNode> set0 = hashtable0.keySet();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      hashtable0.clear();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLTimeoutException, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(mapIterator1);
      
      Iterable<SQLTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) mapIterator1);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(iterable0);
      
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<BatchUpdateException> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, 1L);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(boundedIterator0);
      
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<SQLNonTransientConnectionException, Integer> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Integer>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<SQLNonTransientConnectionException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Integer>(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(entrySetMapIterator0);
      
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) entrySetMapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) entrySetMapIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) singletonIterator0);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(enumeration0);
      
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) instanceofPredicate0);
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      MapIterator<SQLClientInfoException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      SingletonIterator<SQLClientInfoException> singletonIterator1 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(singletonIterator1.hasNext());
      assertNotNull(singletonIterator1);
      
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) singletonIterator1);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(singletonIterator1.hasNext());
      assertNotNull(iterator1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "[]", (-3324));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<BatchUpdateException> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[0];
      SQLDataException sQLDataException0 = new SQLDataException("", "", 16);
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals(16, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLDataException0);
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals(16, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLDataException: ", batchUpdateException0.toString());
      assertEquals("java.sql.SQLDataException: ", batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      boolean boolean0 = priorityQueue0.add(batchUpdateException0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals(16, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLDataException: ", batchUpdateException0.toString());
      assertEquals("java.sql.SQLDataException: ", batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains(batchUpdateException0));
      
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, 1L);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(batchUpdateException0));
      assertNotNull(boundedIterator0);
      
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("-k10\"A c4PR][roO6");
      assertNotNull(constantTransformer0);
      
      String string1 = IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableIterator0, (Transformer<? super SQLNonTransientException, String>) constantTransformer0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("[]", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[]";
      stringArray0[1] = "[]";
      stringArray0[2] = "[]";
      stringArray0[3] = "-k10\"A c4PR][roO6";
      stringArray0[4] = "-k10\"A c4PR][roO6";
      stringArray0[5] = "[]";
      stringArray0[6] = "-k10\"A c4PR][roO6";
      stringArray0[7] = "-k10\"A c4PR][roO6";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringArray0, (-630), 7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<BatchUpdateException> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, 1L);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(boundedIterator0);
      
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("-k10\"A c4PR][roO6");
      assertNotNull(constantTransformer0);
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) resettableIterator0, 654);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 654
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) orderedIterator0, (Iterator<? extends SQLRecoverableException>) orderedIterator0);
      assertNotNull(zippingIterator0);
      
      OrderedMapIterator<SQLRecoverableException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<SQLRecoverableException, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends IIOMetadataNode>) orderedMapIterator0);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      MapIterator<SQLRecoverableException, IIOMetadataNode> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLRecoverableException, ? extends IIOMetadataNode>) orderedMapIterator1);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(mapIterator0);
      
      MapIterator<SQLRecoverableException, IIOMetadataNode> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertSame(mapIterator0, mapIterator1);
      assertSame(mapIterator1, mapIterator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(mapIterator1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = (-1400);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(object0, (-1400));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      int int0 = 1699;
      Class<SQLDataException> class1 = SQLDataException.class;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class2);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class1);
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = InstanceofPredicate.instanceOfPredicate(class1);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate0);
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0, 1699, (-1736));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 1;
      int int1 = 100;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, 1, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterable<SQLTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) mapIterator0);
      assertNotNull(iterable0);
      
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("E2izj,&\"", "iterator");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: E2izj,&\"", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("E2izj,&\"", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("iterator", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)29;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)71, (byte)1, (byte)10, (byte)1, (byte) (-123), (byte) (-76), (byte)10, (byte)52, (byte)29}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean1);
      
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertEquals(0, iteratorArray0.length);
      assertNotNull(zippingIterator0);
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) zippingIterator0, 78);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, iteratorArray0.length);
      assertNotNull(list0);
      
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, iteratorArray0.length);
      assertNotNull(resettableListIterator0);
      
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<InstanceofPredicate>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      assertEquals(0, iteratorArray0.length);
      assertNotNull(zippingIterator0);
      
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0);
      assertEquals(0, iteratorArray0.length);
      assertNotNull(iterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, (-462L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "kU)}$T=<ccA");
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("kU)}$T=<ccA", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLExceptionArray0[0] = (SQLException) sQLTransactionRollbackException0;
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      sQLExceptionArray0[1] = (SQLException) sQLDataException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("iqsMld~i~6b'MzBo", "kU)}$T=<ccA", sQLTransactionRollbackException0);
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("kU)}$T=<ccA", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("kU)}$T=<ccA", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("iqsMld~i~6b'MzBo", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: iqsMld~i~6b'MzBo", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      sQLExceptionArray0[2] = (SQLException) sQLIntegrityConstraintViolationException0;
      SQLWarning sQLWarning0 = new SQLWarning(sQLExceptionArray0[1]);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLDataException", sQLWarning0.toString());
      assertEquals("java.sql.SQLDataException", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(8, sQLExceptionArray0.length);
      assertNotNull(sQLWarning0);
      
      sQLExceptionArray0[3] = (SQLException) sQLWarning0;
      SQLException sQLException0 = new SQLException("iqsMld~i~6b'MzBo", "kU)}$T=<ccA", 1036);
      assertEquals("kU)}$T=<ccA", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: iqsMld~i~6b'MzBo", sQLException0.toString());
      assertEquals("iqsMld~i~6b'MzBo", sQLException0.getMessage());
      assertEquals(1036, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      sQLExceptionArray0[4] = sQLException0;
      SQLException sQLException1 = new SQLException("kU)}$T=<ccA", sQLExceptionArray0[3]);
      assertFalse(sQLException1.equals((Object)sQLException0));
      assertNull(sQLException1.getSQLState());
      assertEquals("kU)}$T=<ccA", sQLException1.getMessage());
      assertEquals(0, sQLException1.getErrorCode());
      assertEquals("java.sql.SQLException: kU)}$T=<ccA", sQLException1.toString());
      assertEquals(8, sQLExceptionArray0.length);
      assertNotNull(sQLException1);
      
      sQLExceptionArray0[5] = sQLException1;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("bOMHzq", sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLDataException", sQLWarning0.toString());
      assertEquals("java.sql.SQLDataException", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("bOMHzq", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: bOMHzq", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(8, sQLExceptionArray0.length);
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLExceptionArray0[6] = (SQLException) sQLSyntaxErrorException0;
      SQLWarning sQLWarning1 = new SQLWarning(sQLException0);
      assertFalse(sQLException0.equals((Object)sQLException1));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertEquals("kU)}$T=<ccA", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: iqsMld~i~6b'MzBo", sQLException0.toString());
      assertEquals("iqsMld~i~6b'MzBo", sQLException0.getMessage());
      assertEquals(1036, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: iqsMld~i~6b'MzBo", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLException: iqsMld~i~6b'MzBo", sQLWarning1.toString());
      assertNull(sQLWarning1.getSQLState());
      assertNotNull(sQLWarning1);
      
      sQLExceptionArray0[7] = (SQLException) sQLWarning1;
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(8, sQLExceptionArray0.length);
      assertNotNull(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class1);
      assertNotNull(predicate0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      assertNotNull(enumeration0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) hashSet0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(iterator1);
      
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) iterator1, (Iterator<? extends SQLNonTransientException>) iterator1);
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(zippingIterator0);
      
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "Z}Yc5V'=4/\"(kV~OdB]", 0, (Map<String, ClientInfoStatus>) null);
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("Z}Yc5V'=4/\"(kV~OdB]", sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 0, sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("Z}Yc5V'=4/\"(kV~OdB]", sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("Z}Yc5V'=4/\"(kV~OdB]", sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransactionRollbackException: ", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("Z}Yc5V'=4/\"(kV~OdB]", sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransactionRollbackException: ", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransactionRollbackException: ", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: java.sql.SQLTransactionRollbackException: ", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertNotNull(batchUpdateException1);
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertNull(batchUpdateException2.getSQLState());
      assertNull(batchUpdateException2.getMessage());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException2.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(batchUpdateException2);
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-1);
      intArray1[2] = 0;
      intArray1[3] = 411;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "Z}Yc5V'=4/\"(kV~OdB]", 0, intArray1, sQLTransactionRollbackException0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("Z}Yc5V'=4/\"(kV~OdB]", sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException3.toString());
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertEquals("", batchUpdateException3.getMessage());
      assertEquals("Z}Yc5V'=4/\"(kV~OdB]", batchUpdateException3.getSQLState());
      assertArrayEquals(new int[] {0, (-1), 0, 411, 0, 0, 0, 0}, intArray1);
      assertEquals(8, intArray1.length);
      assertNotNull(batchUpdateException3);
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, (-976), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>> hashtable0 = new Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>>(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(entrySetMapIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(iterator0);
      
      Set<IIOMetadataNode> set0 = hashtable0.keySet();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      hashtable0.clear();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("", sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      sQLFeatureNotSupportedException0.printStackTrace();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      
      sQLFeatureNotSupportedException0.printStackTrace();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLDataException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<Integer>) listIterator0, (Object) sQLTransactionRollbackException0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertFalse(boolean0);
      
      Hashtable<SQLSyntaxErrorException, SQLDataException> hashtable1 = new Hashtable<SQLSyntaxErrorException, SQLDataException>();
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(hashtable1);
      
      EntrySetMapIterator<SQLSyntaxErrorException, SQLDataException> entrySetMapIterator1 = new EntrySetMapIterator<SQLSyntaxErrorException, SQLDataException>(hashtable1);
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(entrySetMapIterator1);
      
      boolean boolean1 = IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) entrySetMapIterator1, (Object) "");
      assertTrue(boolean1 == boolean0);
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertFalse(boolean1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0);
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<SQLSyntaxErrorException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, DataTruncation>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      OrderedMapIterator<SQLSyntaxErrorException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) orderedMapIterator1;
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>(hashtable0);
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(hashtable1);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("BvPqU.([R", hashtable1);
      assertTrue(hashtable0.equals((Object)hashtable1));
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("BvPqU.([R", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: BvPqU.([R", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLClientInfoException0);
      assertTrue(hashtable0.equals((Object)hashtable1));
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("BvPqU.([R", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: BvPqU.([R", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: BvPqU.([R", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.SQLClientInfoException: BvPqU.([R", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("BvPqU.([R", "BvPqU.([R", sQLSyntaxErrorException0);
      assertTrue(hashtable0.equals((Object)hashtable1));
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("BvPqU.([R", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: BvPqU.([R", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: BvPqU.([R", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.SQLClientInfoException: BvPqU.([R", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("BvPqU.([R", sQLSyntaxErrorException1.getSQLState());
      assertEquals("BvPqU.([R", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: BvPqU.([R", sQLSyntaxErrorException1.toString());
      assertNotNull(sQLSyntaxErrorException1);
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      String string0 = " cannot be null";
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(" cannot be null", " cannot be null", (-160), sQLClientInfoException0);
      assertTrue(hashtable0.equals((Object)hashtable1));
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("BvPqU.([R", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: BvPqU.([R", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException:  cannot be null", sQLSyntaxErrorException2.toString());
      assertEquals(" cannot be null", sQLSyntaxErrorException2.getMessage());
      assertEquals(" cannot be null", sQLSyntaxErrorException2.getSQLState());
      assertEquals((-160), sQLSyntaxErrorException2.getErrorCode());
      assertNotNull(sQLSyntaxErrorException2);
      
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException(sQLSyntaxErrorException2);
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertTrue(hashtable0.equals((Object)hashtable1));
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException:  cannot be null", sQLSyntaxErrorException3.toString());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException:  cannot be null", sQLSyntaxErrorException3.getMessage());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("BvPqU.([R", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: BvPqU.([R", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException:  cannot be null", sQLSyntaxErrorException2.toString());
      assertEquals(" cannot be null", sQLSyntaxErrorException2.getMessage());
      assertEquals(" cannot be null", sQLSyntaxErrorException2.getSQLState());
      assertEquals((-160), sQLSyntaxErrorException2.getErrorCode());
      assertNotNull(sQLSyntaxErrorException3);
      
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLSyntaxErrorException3);
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException0));
      assertTrue(hashtable0.equals((Object)hashtable1));
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException:  cannot be null", sQLSyntaxErrorException3.toString());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException:  cannot be null", sQLSyntaxErrorException3.getMessage());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException:  cannot be null", sQLSyntaxErrorException4.toString());
      assertNull(sQLSyntaxErrorException4.getSQLState());
      assertEquals(0, sQLSyntaxErrorException4.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException:  cannot be null", sQLSyntaxErrorException4.getMessage());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("BvPqU.([R", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: BvPqU.([R", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException:  cannot be null", sQLSyntaxErrorException2.toString());
      assertEquals(" cannot be null", sQLSyntaxErrorException2.getMessage());
      assertEquals(" cannot be null", sQLSyntaxErrorException2.getSQLState());
      assertEquals((-160), sQLSyntaxErrorException2.getErrorCode());
      assertNotNull(sQLSyntaxErrorException4);
      
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, (-160), (-160));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<Properties, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      iteratorArray0[0] = (Iterator<Properties>) orderedMapIterator0;
      ArrayListIterator<Properties> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(iteratorArray0[0], 625);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 10, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 3099;
      intArray0[1] = 1;
      intArray0[2] = 2384;
      intArray0[3] = (-1854);
      intArray0[4] = 100;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1021;
      intArray0[8] = (-390);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ExceptionFactory invoked", "", intArray0);
      assertEquals("java.sql.BatchUpdateException: ExceptionFactory invoked", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("ExceptionFactory invoked", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {3099, 1, 2384, (-1854), 100, 0, 0, 1021, (-390)}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MapIterator<SQLDataException, TreeSet<Vector>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      int int0 = (-581);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("iK+<*94LHFiX", "0!*NY", (-581), (Throwable) null);
      assertEquals("java.sql.SQLFeatureNotSupportedException: iK+<*94LHFiX", sQLFeatureNotSupportedException0.toString());
      assertEquals("0!*NY", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals((-581), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("iK+<*94LHFiX", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        sQLFeatureNotSupportedException0.addSuppressed((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot suppress a null exception.
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<BatchUpdateException> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(0, objectArrayIterator0.getEndIndex());
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, iIOMetadataNodeArray0.length);
      assertNotNull(objectArrayIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<ArrayList<InstanceofPredicate>>) null, 1L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MapIterator<SQLTimeoutException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterable<SQLTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) mapIterator0);
      assertNotNull(iterable0);
      
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLWarning", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      Transformer<Object, SQLTransientException> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Iterator<SQLTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransientException) sQLTimeoutException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) transformer0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLWarning", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iIOMetadataNode0, defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(equalPredicate0);
      
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) equalPredicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(predicate0);
      
      String string0 = "z(%O!|2~r b{3/&;";
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("z(%O!|2~r b{3/&;");
      assertNotNull(transformer0);
      
      Transformer<IIOMetadataNode, IIOMetadataNode> transformer1 = IfTransformer.ifTransformer((Predicate<? super IIOMetadataNode>) predicate0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(transformer1);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(iterator0);
      
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<InstanceofPredicate, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) mapIterator0, (long) (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2031;
      intArray0[1] = 0;
      intArray0[2] = 100;
      intArray0[3] = 338;
      intArray0[4] = 0;
      intArray0[5] = (-2638);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("^2?W", "suffix may not be null", intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("suffix may not be null", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ^2?W", batchUpdateException0.toString());
      assertEquals("^2?W", batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {2031, 0, 100, 338, 0, (-2638)}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 123, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Integer integer0 = new Integer(389);
      assertEquals(389, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) integer0, (-3742), 389);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) listIterator0, 3778);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>> hashtable0 = new Hashtable<IIOMetadataNode, TreeSet<SQLInvalidAuthorizationSpecException>>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "$:]{p|[5=vdSiE", 1);
      SQLDataException sQLDataException0 = new SQLDataException("$:]{p|[5=vdSiE", "qD42O2+0x4Y^Tk|O?", 1);
      sQLFeatureNotSupportedException0.printStackTrace();
      sQLFeatureNotSupportedException0.printStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "$:]{p|[5=vdSiE", sQLFeatureNotSupportedException0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>[]) iteratorArray0);
      IteratorUtils.contains(iterator0, (Object) resettableIterator0);
      Hashtable<SQLSyntaxErrorException, SQLDataException> hashtable1 = new Hashtable<SQLSyntaxErrorException, SQLDataException>();
      EntrySetMapIterator<SQLSyntaxErrorException, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, SQLDataException>(hashtable1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("$:]{p|[5=vdSiE");
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      boolean boolean0 = IteratorUtils.isEmpty(entrySetMapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      IteratorUtils.peekingIterator((Iterator<? extends Locale.Category>) singletonListIterator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
//      try { 
        IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLDataException>) null, (Transformer<? super Object, ? extends SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Transformers must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 2990);
      SQLWarning sQLWarning0 = new SQLWarning("", sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLWarning0);
      IteratorUtils.singletonListIterator(sQLTimeoutException0);
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(10);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-33));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-2164));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1));
      integerArray0[7] = integer7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(integerArray0, 840);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      String string0 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("T!'3EZj4U0;U[esz*~", (String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("remove() method not supported for a NodeListIterator.", sQLSyntaxErrorException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("xzjy~syjU");
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      int int0 = (-3417);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, (-3417));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Collection must not be null", "Collection must not be null");
      int[] intArray0 = new int[9];
      intArray0[0] = (-1629);
      intArray0[1] = 0;
      intArray0[2] = 1898;
      intArray0[3] = 0;
      intArray0[4] = (-14);
      intArray0[5] = 402;
      intArray0[6] = (-1041);
      intArray0[7] = (-151);
      intArray0[8] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`3SbO[zE", "Collection must not be null", intArray0);
      sQLTimeoutException0.setNextException(batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) null);
      IteratorUtils.transformedIterator((Iterator<?>) orderedIterator0, (Transformer<? super Object, ? extends SQLNonTransientException>) transformer0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("!C&");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("!C&", "d", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("9Qv7m vyo/3LzDmO~", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("9Qv7m vyo/3LzDmO~", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("!C&", "47;pK6s8f@", sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("d", "4cEWk");
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.size(orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator((SQLFeatureNotSupportedException) null);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("ok+}");
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[null]", "[null]", (Throwable) null);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("[null]", "[null]", 4856);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((Throwable) null);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("ok+}", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("[null]", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 839);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      Iterator<BatchUpdateException> iterator0 = priorityQueue0.iterator();
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[]", string0);
      
      IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, 1L);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("-k10\"A c4PR][roO6");
      String string1 = IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableIterator0, (Transformer<? super SQLNonTransientException, String>) constantTransformer0);
      assertEquals("[]", string1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonIterator(locale_Category0);
      ResettableIterator<HashMap<SQLNonTransientConnectionException, Properties>> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<HashMap<SQLNonTransientConnectionException, Properties>>) resettableIterator0, (Transformer<? super HashMap<SQLNonTransientConnectionException, Properties>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "sN=DskP1rUE._[1&%x";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("sN=DskP1rUE._[1&%x");
      iIOMetadataNode0.getLastChild();
      iIOMetadataNode0.normalize();
      iIOMetadataNode0.getNodeValue();
      iIOMetadataNode0.getNodeName();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      String[] stringArray0 = new String[4];
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // newChild == null!
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(125);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(123);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1360);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(16);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(integerArray0, (-1196));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }
}
