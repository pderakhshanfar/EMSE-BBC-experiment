/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 02:28:23 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, 10);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 3
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) iterator0, (Iterator<? extends SQLTransientException>) orderedIterator0, (Iterator<? extends SQLTransientException>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLClientInfoException, SQLClientInfoException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 3);
      ResettableListIterator<ArrayDeque<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      ListIterator<ArrayDeque<SQLTransientConnectionException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<ArrayDeque<SQLTransientConnectionException>>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OrderedMapIterator<HashSet<SQLTimeoutException>, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      String string0 = IteratorUtils.toString((Iterator<HashSet<SQLTimeoutException>>) orderedMapIterator0, (Transformer<? super HashSet<SQLTimeoutException>, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertEquals("[java.sql.SQLInvalidAuthorizationSpecException: ]", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.toList((Iterator<? extends SQLException>) singletonListIterator0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) singletonListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      BatchUpdateException[] batchUpdateExceptionArray0 = IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) orderedMapIterator0, class0);
      assertEquals(0, batchUpdateExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstantiateFactory<IIOMetadataNode> instantiateFactory0 = new InstantiateFactory<IIOMetadataNode>(class0);
      Transformer<IIOMetadataNode, IIOMetadataNode> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends IIOMetadataNode>) instantiateFactory0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      SkippingIterator<SQLInvalidAuthorizationSpecException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, 1L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) listIterator0, (Iterator<? extends DataTruncation>) listIterator0);
      int int0 = IteratorUtils.size(zippingIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>(vector0);
      Properties properties0 = new Properties();
      linkedList0.add(properties0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) linkedList0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0, 0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = IteratorUtils.get((Iterator<SQLSyntaxErrorException>) objectArrayIterator0, 0);
      assertNull(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(", ");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0, 0);
      objectArrayIterator0.next();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = IteratorUtils.get((Iterator<SQLSyntaxErrorException>) objectArrayIterator0, 0);
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Closure must not be null");
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Object) sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) objectArrayListIterator0, (long) 2728);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayDeque<SQLTransientException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientException>[]) Array.newInstance(ArrayDeque.class, 8);
      ResettableListIterator<ArrayDeque<SQLTransientException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0, 5);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ArrayList<Locale.FilteringMode>[] arrayListArray0 = (ArrayList<Locale.FilteringMode>[]) Array.newInstance(ArrayList.class, 0);
      ResettableListIterator<ArrayList<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayListArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 8, 8);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[9];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) orderedIterator0, (Iterator<? extends SQLTransientException>) orderedIterator0, (Iterator<? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 5);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("p&#)!EBQeePC%E", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) singletonListIterator0, (Transformer<? super ClientInfoStatus, String>) transformer0, "", "p&#)!EBQeePC%E", "p&#)!EBQeePC%E");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'p&#)!EBQeePC%E' on 'class java.sql.ClientInfoStatus' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLIntegrityConstraintViolationException0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(equalPredicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) singletonIterator0, (Transformer<? super SQLWarning, String>) ifTransformer0, "3L2uG:H+,", "", "<)dB8@9N7My8AcAR}+");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[6];
      SQLWarning sQLWarning0 = new SQLWarning();
      DataTruncation dataTruncation0 = new DataTruncation(157, false, false, 10, 100, sQLWarning0);
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Gbc f6A) )\"p");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) resettableIterator0, (Transformer<? super SQLWarning, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'Gbc f6A) )\"p' on 'class java.sql.DataTruncation' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(hashSet0);
      ListIteratorWrapper<Properties> listIteratorWrapper0 = new ListIteratorWrapper<Properties>(loopingIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) listIteratorWrapper0, (Transformer<? super Properties, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      LoopingListIterator<SQLSyntaxErrorException> loopingListIterator0 = new LoopingListIterator<SQLSyntaxErrorException>(vector0);
      int[] intArray0 = new int[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SQLWarning sQLWarning0 = new SQLWarning(batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1:dze29Rd{#BUycwL", "transformer may not be null", sQLWarning0);
      loopingListIterator0.add(sQLSyntaxErrorException0);
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(vector0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Object>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) treeSet0);
      Integer integer0 = new Integer(128);
      treeSet0.add(integer0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Array class must not be null", "Node must not be null", 2726);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (String) null, 2726, longArray0, sQLTimeoutException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Factory<SQLTimeoutException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, SQLTimeoutException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTimeoutException>) factory0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) uniquePredicate0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) treeSet0);
      Integer integer0 = new Integer(128);
      treeSet0.add(integer0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) mapIterator0, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Boolean>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      Predicate<IIOMetadataNode> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) orPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("ntry doesnotexist: ");
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'ntry doesnotexist: ' on 'class java.lang.Integer' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) treeSet0);
      Integer integer0 = new Integer(3287);
      treeSet0.add(integer0);
      // Undeclared exception!
      IteratorUtils.get((Iterator<Integer>) resettableIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-1675));
      treeSet0.add(integer0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) treeSet0);
      Integer integer1 = new Integer(31);
      treeSet0.add(integer1);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Integer>) resettableIterator0, 31);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.TreeMap$PrivateEntryIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLClientInfoException>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MapIterator<Closure<Object>, ArrayDeque<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, uniquePredicate0);
      List<Closure<Object>> list0 = IteratorUtils.toList((Iterator<? extends Closure<Object>>) mapIterator0, 31);
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>(list0);
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      SingletonListIterator<Closure<Object>> singletonListIterator0 = new SingletonListIterator<Closure<Object>>(closure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Closure<Object>>) singletonListIterator0, (Predicate<? super Closure<Object>>) transformedPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      DataTruncation dataTruncation0 = new DataTruncation(10, true, false, 46, 46);
      stack0.add(dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) resettableListIterator0, (long) 1, (long) 4096);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>(stack0);
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) reverseListIterator0, (-1380L), (-33L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Transformer<Object, StringTokenizer>[]) null, 148, 148);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, 5, (-4072));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0, 322);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((HashSet<SQLFeatureNotSupportedException>[]) null, (-1848));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1), (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 998);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Integer[]) null, 1073741824, (-291));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 0, 31);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 45);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((StringTokenizer[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-2093), (-1099));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 123);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) defaultEquator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation((-3044), true, false, (-1981), (-1981), sQLNonTransientConnectionException0);
      dataTruncationArray0[0] = dataTruncation0;
      dataTruncationArray0[1] = dataTruncation0;
      dataTruncationArray0[2] = dataTruncationArray0[1];
      dataTruncationArray0[3] = dataTruncation0;
      dataTruncationArray0[4] = dataTruncationArray0[1];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(dataTruncationArray0[0], comparator0, comparatorPredicate_Criterion0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(comparatorPredicate0);
      Predicate<DataTruncation> predicate0 = OrPredicate.orPredicate((Predicate<? super DataTruncation>) nullIsExceptionPredicate0, (Predicate<? super DataTruncation>) comparatorPredicate0);
      ConstantTransformer<DataTruncation, String> constantTransformer0 = new ConstantTransformer<DataTruncation, String>("N!9x>H0SS:HVjWQ3q");
      IfTransformer<DataTruncation, String> ifTransformer0 = new IfTransformer<DataTruncation, String>(predicate0, transformer0, constantTransformer0);
      String string0 = IteratorUtils.toString((Iterator<DataTruncation>) objectArrayListIterator0, (Transformer<? super DataTruncation, String>) ifTransformer0, "N!9x>H0SS:HVjWQ3q", "N!9x>H0SS:HVjWQ3q", "N!9x>H0SS:HVjWQ3q");
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals("N!9x>H0SS:HVjWQ3qnullN!9x>H0SS:HVjWQ3qnullN!9x>H0SS:HVjWQ3qnullN!9x>H0SS:HVjWQ3qnullN!9x>H0SS:HVjWQ3qnullN!9x>H0SS:HVjWQ3q", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      Transformer<SQLTimeoutException, String> transformer0 = ConstantTransformer.nullTransformer();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 1073735142);
      arrayList0.add(sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) resettableListIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0, ")X76`ko+,if>NT;0", ")X76`ko+,if>NT;0", "#'vj.D^\"NgZt");
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      String string0 = IteratorUtils.toString((Iterator<HashSet<SQLTimeoutException>>) null, (Transformer<? super HashSet<SQLTimeoutException>, String>) constantTransformer0, ", ", "ay", "");
      assertEquals("ay", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ComparatorPredicate.Criterion>) null, (Predicate<? super ComparatorPredicate.Criterion>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Z21-9wcFKy#UfQ", "Predicate must not be null", (-1));
      DataTruncation dataTruncation0 = new DataTruncation((-2773), true, true, 97, (-2773), sQLIntegrityConstraintViolationException0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0, 3287);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      BoundedIterator<SQLWarning> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) resettableListIterator0, (long) 1, (long) 4096);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ConstantTransformer<SQLWarning, String> constantTransformer0 = new ConstantTransformer<SQLWarning, String>("org.apache.commons.collections4.map.AbstractHashedMap$KeySet");
      String string0 = IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) constantTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OrderedMapIterator<HashSet<SQLTimeoutException>, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<HashSet<SQLTimeoutException>>) orderedMapIterator0, (Transformer<? super HashSet<SQLTimeoutException>, String>) transformer0, "ax$BsFN$Jqo/ay3/*9", "", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OrderedMapIterator<HashSet<SQLTimeoutException>, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<HashSet<SQLTimeoutException>>) orderedMapIterator0, (Transformer<? super HashSet<SQLTimeoutException>, String>) transformer0, ",Qy;qjV4\"<;uH\"$]v", (String) null, ",Qy;qjV4\"<;uH\"$]v");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) resettableIterator0, (Transformer<? super SQLTransientException, String>) null, (String) null, (String) null, "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(280);
      treeSet0.add(integer0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) treeSet0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) treeSet0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) resettableListIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Iterator<SQLNonTransientException> iterator0 = EmptyIterator.emptyIterator();
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]", "^{z9()@", (-1757));
      SQLDataException sQLDataException0 = new SQLDataException("^{z9()@", "B0o(ODj>Zj0SEhjs", sQLSyntaxErrorException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) singletonIterator0, (Iterator<? extends SQLNonTransientException>) singletonIterator0);
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) zippingIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Stack<EnumSet>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) zippingIterator0, (Predicate<? super SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("!");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) instanceofPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<ComparatorPredicate.Criterion> resettableIterator0 = IteratorUtils.emptyIterator();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ComparatorPredicate.Criterion>) resettableIterator0, (Predicate<? super ComparatorPredicate.Criterion>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableIterator<ComparatorPredicate.Criterion> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<ComparatorPredicate.Criterion>) resettableIterator0, (Predicate<? super ComparatorPredicate.Criterion>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(">\"{");
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLNonTransientConnectionException0);
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<BatchUpdateException>) orderedIterator0, (Predicate<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
      assertNull(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      Vector<Closure<Object>> vector0 = new Vector<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) vector0);
      IteratorUtils.apply((Iterator<SQLDataException>) resettableIterator0, (Closure<? super SQLDataException>) closure0);
      assertFalse(vector0.contains(closure0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      closureArray0[0] = closure0;
      closureArray0[1] = closureArray0[0];
      closureArray0[2] = closureArray0[1];
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure0);
      closureArray0[3] = (Closure<Object>) switchClosure0;
      closureArray0[4] = closureArray0[0];
      Closure<SQLDataException> closure1 = ChainedClosure.chainedClosure((Closure<? super SQLDataException>[]) closureArray0);
      WhileClosure<SQLDataException> whileClosure0 = new WhileClosure<SQLDataException>(uniquePredicate0, closure1, false);
      IteratorUtils.apply((Iterator<SQLDataException>) null, (Closure<? super SQLDataException>) whileClosure0);
      assertFalse(whileClosure0.isDoLoop());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Stack<ComparatorPredicate.Criterion> stack0 = new Stack<ComparatorPredicate.Criterion>();
      ReverseListIterator<ComparatorPredicate.Criterion> reverseListIterator0 = new ReverseListIterator<ComparatorPredicate.Criterion>(stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<ComparatorPredicate.Criterion>) reverseListIterator0, (Closure<? super ComparatorPredicate.Criterion>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ClosureTransformer<ClientInfoStatus> closureTransformer0 = new ClosureTransformer<ClientInfoStatus>(closure0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) closureTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply(iterator0, (Closure<? super ClientInfoStatus>) closure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("YX", "InstantiateTransformer: The constructor must exist and be public ", true);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      DataTruncation dataTruncation0 = new DataTruncation(46, true, true, 512, 512, sQLNonTransientConnectionException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) listIterator0, (Iterator<? extends DataTruncation>) listIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(zippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("3k[:UW", "~fy0Q{", 1);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) listIterator0, (-5041));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null, (-182));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MapIterator<BatchUpdateException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) mapIterator0, (Class<BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long[] longArray0 = new long[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Array class must not be null", "Node must not be null", 2726);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (String) null, 2726, longArray0, sQLTimeoutException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      BatchUpdateException[] batchUpdateExceptionArray0 = IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) singletonIterator0, class0);
      assertEquals(1, batchUpdateExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MapIterator<SQLDataException, Hashtable<Stack, Iterator<SQLIntegrityConstraintViolationException>>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterable<SQLDataException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterable<String> iterable0 = IteratorUtils.asIterable((Iterator<? extends String>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Stack<EnumSet>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) vector0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientException>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) null, (Collection<? super SQLTimeoutException>) vector0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ?>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, Object>(orderedMapIterator1);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ClosureTransformer<ClientInfoStatus> closureTransformer0 = new ClosureTransformer<ClientInfoStatus>(closure0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) closureTransformer0);
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) iterator0);
      Iterator<ClientInfoStatus> iterator1 = IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Node must not be null");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLDataException sQLDataException0 = new SQLDataException("");
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      Predicate<SQLNonTransientException> predicate0 = IdentityPredicate.identityPredicate((SQLNonTransientException) sQLDataException0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) transformerPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[] longArray0 = new long[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Array class must not be null", "Node must not be null", 2726);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (String) null, 2726, longArray0, sQLTimeoutException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) predicateArray0[0]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MapIterator<IIOMetadataNode, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Transformer<? super IIOMetadataNode, ? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) null, (Transformer<? super IIOMetadataNode, ? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.LanguageRange>) null, (Iterator<? extends Locale.LanguageRange>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) treeSet0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("V\"<uVCJ_2", "V\"<uVCJ_2");
      Transformer<Object, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, 1L);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MapIterator<SQLDataException, Hashtable<Stack, Iterator<SQLIntegrityConstraintViolationException>>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("gns`U%*:&z'~OQ", "]", (-8), sQLFeatureNotSupportedException0);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.constantTransformer(sQLInvalidAuthorizationSpecException0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) mapIterator0, (Transformer<? super SQLDataException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) zippingIterator0, (-8), 925);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null, 99);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>((IIOMetadataNode) null);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) singletonListIterator0, (Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, SQLClientInfoException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 7);
      Transformer<Object, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("Collection must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MapIterator<Integer, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) mapIterator0, (Iterator<? extends Integer>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 4, (-635));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 7);
      Transformer<Object, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("Collection must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'Collection must not be null' on 'class java.sql.SQLTransientConnectionException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "Entry does not exist: ", 10);
      SQLDataException sQLDataException0 = new SQLDataException("Entry does not exist: ", "$", sQLSyntaxErrorException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) singletonIterator0, (Iterator<? extends SQLNonTransientException>) singletonIterator0);
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) zippingIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (-680L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedMapIterator<Integer, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) locale_FilteringMode0, 9, 318);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 503);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ResettableListIterator<Vector<Properties>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(":*'IR", (int[]) null);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) null, (Object) batchUpdateException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      OrderedMapIterator<Stack<Object>, Hashtable<Object, Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0, 5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>((IIOMetadataNode) null);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      OrderedMapIterator<HashSet<SQLTimeoutException>, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>(":*'IR");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<HashSet<SQLTimeoutException>>) orderedMapIterator0, (Transformer<? super HashSet<SQLTimeoutException>, String>) constantTransformer0, (String) null, ":*'IR", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Transformer<Object, StringTokenizer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<ComparatorPredicate.Criterion>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }
}
