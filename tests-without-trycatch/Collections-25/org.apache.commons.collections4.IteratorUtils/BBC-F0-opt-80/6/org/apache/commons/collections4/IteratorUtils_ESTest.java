/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:01:31 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.UnaryOperator;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) singletonIterator0, (Predicate<? super IIOMetadataNode>) notPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(locale_Category0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      IteratorUtils.getIterator(mapIterator0);
      Iterator<SQLDataException> iterator1 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator1);
      int int0 = 1073741824;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLException>) iterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("", true);
      IteratorUtils.toListIterator((Iterator<? extends String>) singletonIterator0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 5);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "transformer must not be null.", sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("transformer must not be null.", sQLTimeoutException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      MapIterator<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">8<`2Jh7-BB8PyAR:n8");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator0, 1052);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) resettableListIterator0);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 134;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Properties[]) null, 134, 134);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>(2571, (-1));
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) resettableIterator0);
      java.util.function.Predicate<Object> predicate1 = predicate0.negate();
      java.util.function.Predicate.isEqual((Object) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.removeIf(predicate1);
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      String string0 = IteratorUtils.toString((Iterator<LinkedList<SQLClientInfoException>>) null, (Transformer<? super LinkedList<SQLClientInfoException>, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      int int0 = 1;
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) listIterator0, 1);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) resettableListIterator0, (long) 1);
      // Undeclared exception!
      IteratorUtils.size(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      IteratorUtils.emptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation(123, false, false, 4, 943);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 7);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      classArray0[3] = class3;
      Class<SQLNonTransientException> class4 = SQLNonTransientException.class;
      classArray0[4] = class4;
      Class<SQLNonTransientException> class5 = SQLNonTransientException.class;
      classArray0[5] = class5;
      Class<SQLNonTransientException> class6 = SQLNonTransientException.class;
      classArray0[6] = class6;
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>("", classArray0, classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) iterator0, (long) 4, 0L);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.DataTruncation' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>((Predicate<? super Object>[]) null, transformerArray0, transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Predicate<PriorityQueue>>) iterator0, (Transformer<? super Predicate<PriorityQueue>, String>) switchTransformer0, ", ", ", ", "KQ#Ei8iu1tPDMN-9");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0, 0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SingletonIterator<ArrayDeque<SQLException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLException>>((ArrayDeque<SQLException>) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) uniquePredicate0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) uniquePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLException>>) singletonIterator0, (Predicate<? super ArrayDeque<SQLException>>) predicate1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Input Object must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Closure<SQLException>[] closureArray0 = null;
      int int0 = 416;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Closure<SQLException>[]) null, 416, 416);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Class<SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 3);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.iterators.AbstractIteratorDecorator");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) listIterator0;
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(vector0);
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) reverseListIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("8Ho", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      String string0 = "+{\\v";
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("+{v", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException((String) null, (Map<String, ClientInfoStatus>) null, sQLClientInfoException3);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Integer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("org.apache.commons.collections4.iterators.TransformIterator", "fe^K?IF", 356, hashMap1, sQLClientInfoException0);
      sQLClientInfoException0.printStackTrace();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashMap0);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      sQLClientInfoException3.getFailedProperties();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[11];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException2;
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException0;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.get((Iterator<SQLClientInfoException>) resettableListIterator0, 9);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap1.put("tzKc|}U[%", clientInfoStatus0);
      OrderedMapIterator<Closure<Object>, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Closure<Object>, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Closure<Object>, Properties>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<EnumSet<Locale.Category>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) enumeration0, (Collection<? super EnumSet<Locale.Category>>) treeSet0);
      Enumeration<EnumSet<Locale.Category>> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      TreeSet<Object> treeSet1 = new TreeSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) enumeration1, (Collection<? super EnumSet<Locale.Category>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) null, (Collection<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Enumeration<Locale.Category> enumeration0 = null;
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      linkedList0.poll();
      linkedList0.addLast(locale_Category0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) null, (Collection<? super Locale.Category>) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, batchUpdateException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("7U}Y)No$fg*N$gV*#_W", "", 0, hashtable0, sQLNonTransientConnectionException1);
      sQLClientInfoException0.printStackTrace();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((String) null, map0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException1;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.get((Iterator<SQLClientInfoException>) resettableListIterator0, 0);
      OrderedMapIterator<Closure<Object>, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Closure<Object>, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Closure<Object>, Properties>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("The parameter types must match the arguments", "The parameter types must match the arguments");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      ResettableIterator<SQLNonTransientException> resettableIterator1 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0);
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<SQLException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLException>>) linkedList0);
      IteratorUtils.apply((Iterator<SQLNonTransientException>) resettableIterator1, (Closure<? super SQLNonTransientException>) closure0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Closure<SQLNonTransientException> closure0 = ExceptionClosure.exceptionClosure();
      BoundedIterator<SQLNonTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, 455L, 0L);
      IteratorUtils.apply((Iterator<SQLNonTransientException>) boundedIterator0, (Closure<? super SQLNonTransientException>) closure0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "org.apache.commons.collections4.functors.TransformerPredicate");
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ExceptionClosure.exceptionClosure();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientException>) null, (Closure<? super SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>((Predicate<? super SQLException>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Object object0 = new Object();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate<Object> uniquePredicate1 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "(Q.GQ{Di(P}rv}?g/";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(Q.GQ{Di(P}rv}?g/");
      Closure<SQLNonTransientException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLNonTransientException>) null, (Closure<? super SQLNonTransientException>) closure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      IteratorUtils.loopingListIterator((List<Properties>) arrayList0);
      Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>();
      DefaultEquator.defaultEquator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      EmptyIterator.resettableEmptyIterator();
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      stack0.add(sQLIntegrityConstraintViolationException0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) stack0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer>(orderedMapIterator0);
      EmptyIterator.resettableEmptyIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("s$j36q]", "s$j36q]", 2213, mockThrowable0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 3);
      Class<SQLException> class1 = SQLException.class;
      classArray0[0] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[1] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[2] = class3;
      Transformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("s$j36q]", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 's$j36q]' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 4363;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((TreeSet<SQLNonTransientConnectionException>[]) null, 4363);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyIterator.resettableEmptyIterator();
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, false);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      IteratorUtils.toString((Iterator<Properties>) singletonIterator0, (Transformer<? super Properties, String>) factoryTransformer0, "Qv", "Qv", "");
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer>(orderedMapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      int[] intArray0 = new int[5];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9hr^");
      intArray0[0] = 247;
      intArray0[1] = 10;
      intArray0[2] = 247;
      intArray0[3] = 247;
      intArray0[4] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(".crAw", intArray0, sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("g!Gv44:PW%pT=mj<", batchUpdateException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("g!Gv44:PW%pT=mj<", "transformer may not be null", hashMap0, batchUpdateException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException1;
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<LinkedHashSet<ServiceLoader>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vector<Properties> vector0 = new Stack<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) vector0);
      Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableListIterator0, (Iterator<? extends Properties>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      IteratorUtils.loopingListIterator((List<Properties>) vector0);
      Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLException sQLException0 = new SQLException("OY7R=\"w`r/+pP");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "OY7R=\"w`r/+pP", 0, sQLException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "OY7R=\"w`r/+pP", sQLDataException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, (Throwable) null);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      int int0 = (-24);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0, (-24));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[1] = (Iterator<Properties>) resettableIterator0;
      iteratorArray0[2] = (Iterator<Properties>) resettableIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator1, (Iterator<? extends Properties>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      OrderedMapIterator<SQLRecoverableException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLRecoverableException, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientConnectionException>(orderedMapIterator1);
      MapIterator<SQLRecoverableException, SQLTransientConnectionException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLRecoverableException, ? extends SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) mapIterator0);
      Properties properties0 = new Properties();
      String string0 = "";
      int[] intArray0 = new int[8];
      intArray0[0] = (-2369);
      intArray0[1] = 1953;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 3174;
      intArray0[6] = (-2215);
      intArray0[7] = 2;
      String string1 = ") greater than the size of the ";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", ") greater than the size of the ");
      SQLDataException sQLDataException0 = new SQLDataException(") greater than the size of the ", ") greater than the size of the ", sQLNonTransientConnectionException0);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Object object0 = new Object();
      OrderedMapIterator<SQLFeatureNotSupportedException, TreeSet<Class<SQLInvalidAuthorizationSpecException>>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      MapIterator<Properties, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate1);
      int int0 = IteratorUtils.size(orderedIterator0);
      assertEquals(0, int0);
      
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLRecoverableException>) resettableListIterator0, (Object) sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      String string0 = "";
      SQLException sQLException0 = new SQLException("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 0, sQLException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLSyntaxErrorException0);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      OnePredicate<Object> onePredicate1 = new OnePredicate<Object>(predicateArray0);
      onePredicate1.getPredicates();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) resettableListIterator0, (Transformer<? super Properties, String>) transformer0, (String) null, (String) null, "Q;ZSa(lYE<.n)v");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      HashSet<SQLException>[] hashSetArray0 = (HashSet<SQLException>[]) Array.newInstance(HashSet.class, 4);
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>(linkedHashSet0);
      hashSetArray0[0] = hashSet0;
      HashSet<SQLException> hashSet1 = new HashSet<SQLException>();
      hashSetArray0[1] = hashSet1;
      LinkedHashSet<SQLException> linkedHashSet1 = new LinkedHashSet<SQLException>();
      hashSetArray0[2] = (HashSet<SQLException>) linkedHashSet1;
      HashSet<SQLException> hashSet2 = new HashSet<SQLException>();
      hashSetArray0[3] = hashSet2;
      ResettableIterator<HashSet<SQLException>> resettableIterator1 = IteratorUtils.arrayIterator(hashSetArray0, 0, 0);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) vector0);
      Hashtable<IIOMetadataNode, SQLNonTransientConnectionException> hashtable0 = new Hashtable<IIOMetadataNode, SQLNonTransientConnectionException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      EmptyListIterator.resettableEmptyListIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("*I");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) resettableListIterator0, (Transformer<? super Properties, String>) transformer0, "M'1/<mEMo /", (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = (-2091);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((ClientInfoStatus[]) null, (-2091));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("*FE\"?baV1]!tA6I0", "", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("^TT60HRQ8/", "^TT60HRQ8/", 8, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("?kmb7Jyzgk$}3.", "org.apache.commons.collections4.map.AbstractReferenceMap$SoftRef", 2343, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLClientInfoException>) null, 8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      String string0 = "Closure must not be null";
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(hashtable0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(identityPredicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(nullIsTruePredicate0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) nullIsTruePredicate0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) resettableListIterator0;
      objectArray0[1] = (Object) resettableListIterator0;
      objectArray0[2] = (Object) "org.apache.commons.collections4.bidimap.TreeBidiMap";
      objectArray0[3] = (Object) "Closure must not be null";
      objectArray0[4] = (Object) identityPredicate0;
      objectArray0[5] = (Object) notPredicate0;
      objectArray0[6] = (Object) predicate0;
      objectArray0[7] = (Object) identityPredicate0;
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0);
      IteratorUtils.find((Iterator<Object>) objectArrayIterator0, (Predicate<? super Object>) identityPredicate0);
      Vector<Properties> vector0 = new Vector<Properties>();
      // Undeclared exception!
//      try { 
        vector0.remove(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Array index out of range: 5
//         //
//         verifyException("java.util.Vector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MapIterator<SQLDataException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) mapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) factoryTransformer0, "", "S`9'A", "Cursor closed");
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator("S`9'A");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/S#(&");
      Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>();
      DefaultEquator<Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(hashtable0, (Equator<Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>>) defaultEquator0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, class0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<Closure<SQLException>>) null, (Transformer<? super Closure<SQLException>, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedMapIterator<SQLTransientConnectionException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<Properties>) null, (Predicate<? super Properties>) uniquePredicate0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      propertiesArray0[1] = properties0;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      Properties properties1 = new Properties();
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2779, 0).when(comparator0).compare(any(java.util.Properties.class) , any(java.util.Properties.class));
      Predicate<Properties> predicate0 = ComparatorPredicate.comparatorPredicate(properties1, comparator0);
      IteratorUtils.matchesAny((Iterator<Properties>) resettableListIterator0, (Predicate<? super Properties>) predicate0);
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>();
      DefaultEquator<Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(hashtable0, (Equator<Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>>) defaultEquator0);
      EmptyIterator.resettableEmptyIterator();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("rD?<@*");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>(2301);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super LinkedList<SQLSyntaxErrorException>>>) hashSet0);
      onePredicate0.getPredicates();
      ConstantTransformer.nullTransformer();
      MapIterator<Properties, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<Properties, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, SQLException>(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 8, 8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyListIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.bidimap.TreeBidiMap");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Eu%9+E.", "org.apache.commons.collections4.bidimap.TreeBidiMap", sQLFeatureNotSupportedException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.bidimap.TreeBidiMap", "org.apache.commons.collections4.bidimap.TreeBidiMap", hashtable0, sQLTimeoutException0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLClientInfoException>) resettableIterator0, 987);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 986
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Object object0 = new Object();
      EqualPredicate.equalPredicate((Object) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator((IIOMetadataNode) null, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) null);
      Properties properties0 = new Properties();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      File file0 = MockFile.createTempFile("ZN^", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) "ZN^";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      mockPrintWriter1.format("ZN^", objectArray0);
      properties0.list((PrintWriter) mockPrintWriter1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      properties0.list((PrintStream) mockPrintStream0);
      Properties properties1 = new Properties();
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      Properties properties2 = new Properties();
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Properties> predicate0 = ComparatorPredicate.comparatorPredicate(properties1, comparator0);
      Iterator<Properties> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<Properties>) resettableListIterator0);
      boolean boolean0 = IteratorUtils.matchesAny(iterator1, (Predicate<? super Properties>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IteratorUtils.objectGraphIterator((IIOMetadataNode) null, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) null);
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      properties0.list((PrintStream) mockPrintStream0);
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      OrderedMapIterator<Closure<Object>, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Closure<Object>, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Closure<Object>, ? extends Properties>) orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Closure<Object>, ? extends Properties>) orderedMapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Closure<Object>, Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "", 1705);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("Set must not be null", sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("The transformer array must not be null", "The transformer array must not be null", sQLFeatureNotSupportedException4);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("-|oNM~*=.+444!", "");
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException("Set must not be null");
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException8;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) objectArrayListIterator0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) listIterator0, (Object) sQLFeatureNotSupportedException6);
      assertTrue(listIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.objectGraphIterator((IIOMetadataNode) null, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) null);
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      properties0.list((PrintStream) mockPrintStream0);
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      Properties properties2 = new Properties();
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.util.Properties.class) , any(java.util.Properties.class));
      Predicate<Properties> predicate0 = ComparatorPredicate.comparatorPredicate(properties2, comparator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Properties>) resettableListIterator0, (Predicate<? super Properties>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      OrderedMapIterator<DataTruncation, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      MapIterator<SQLIntegrityConstraintViolationException, Locale.Category> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      Iterator<DataTruncation> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("LL'}>Wa!r!m_xqKl");
      ResettableIterator<IIOMetadataNode> resettableIterator1 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      iIOMetadataNode0.getNextSibling();
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableIterator1, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.size(resettableIterator1);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator2 = IteratorUtils.emptyIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator2);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Object object0 = new Object();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0);
      predicateArray0[0] = predicate0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "itmci;A`Hu{$g5";
      stringArray0[1] = "KH#O]u2Yap4F";
      stringArray0[2] = "9^LvoP~?f-jF";
      stringArray0[3] = "Entry does not exist: ";
      stringArray0[4] = "B0<<UVSef7H=GzY@0O";
      stringArray0[5] = "b7I.kR_BK2";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      Transformer<Object, String> transformer0 = new ConstantTransformer<Object, String>("itmci;A`Hu{$g5");
      IteratorUtils.toString((Iterator<String>) objectArrayIterator0, (Transformer<? super String, String>) transformer0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      NullPredicate.nullPredicate();
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(anyPredicate0, anyPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) anyPredicate0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Object object0 = new Object();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0);
      predicateArray0[0] = predicate0;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(" ^?%(4P&Jn:7rb13fY");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientException0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" ^?%(4P&Jn:7rb13fY", "1hay?gMwI ,2:c$T|R", hashtable0, sQLRecoverableException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = new Object();
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      ResettableIterator<TreeSet<SQLClientInfoException>> resettableIterator0 = IteratorUtils.singletonIterator(treeSet0);
      SkippingIterator<TreeSet<SQLClientInfoException>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<TreeSet<SQLClientInfoException>>) resettableIterator0, 0L);
      EqualPredicate.equalPredicate((Object) skippingIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      int int0 = IteratorUtils.size(skippingIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Iterator<Properties> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      IteratorUtils.isEmpty(iterator1);
      IteratorUtils.isEmpty(iterator0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "null keys not allowed";
      IteratorUtils.emptyListIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null keys not allowed");
      Transformer<SQLTimeoutException, SQLTimeoutException> transformer0 = CloneTransformer.cloneTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) null, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Pk'<|ThkZ");
      Predicate<IIOMetadataNode> predicate0 = EqualPredicate.equalPredicate(iIOMetadataNode0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ConstantTransformer.constantTransformer(sQLTransactionRollbackException0);
      IfTransformer<IIOMetadataNode, SQLTransactionRollbackException> ifTransformer0 = new IfTransformer<IIOMetadataNode, SQLTransactionRollbackException>(predicate0, transformer0, transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) null, (Transformer<? super IIOMetadataNode, ? extends SQLTransactionRollbackException>) ifTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MapIterator<SQLDataException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) mapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Hashtable<SQLTimeoutException, SQLSyntaxErrorException> hashtable0 = new Hashtable<SQLTimeoutException, SQLSyntaxErrorException>();
      EntrySetMapIterator<SQLTimeoutException, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLSyntaxErrorException>(hashtable0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) entrySetMapIterator0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.getIterator((Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) singletonListIterator0, 2339, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLDataException sQLDataException0 = new SQLDataException("rCUY&x`Dvs63P\"10U", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", 1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      DataTruncation dataTruncation0 = new DataTruncation(44, false, false, 44, 44, sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "rCUY&x`Dvs63P\"10U", 1, dataTruncation0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException1;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Nr1N=5pm&XS");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLRecoverableException0);
      SQLException sQLException0 = new SQLException("delimiter may not be null", sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransactionRollbackException0, defaultEquator0);
      NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) equalPredicate0);
      MapIterator<SQLTimeoutException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.find((Iterator<Transformer<Object, Locale.Category>>) null, (Predicate<? super Transformer<Object, Locale.Category>>) predicate0);
      ArrayListIterator<SQLIntegrityConstraintViolationException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLIntegrityConstraintViolationException>((Object) null, (-1), 289);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Iterator<Properties> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      IteratorUtils.isEmpty(iterator1);
      IteratorUtils.isEmpty(iterator0);
      Hashtable<IIOMetadataNode, SQLNonTransientConnectionException> hashtable0 = new Hashtable<IIOMetadataNode, SQLNonTransientConnectionException>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.item((-414));
      iIOMetadataNode0.getOwnerDocument();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Object object0 = new Object();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(" ^?%(4P&Jn:7rb13fY");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientException0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" ^?%(4P&Jn:7rb13fY", "1hay?gMwI ,2:c$T|R", hashtable0, sQLRecoverableException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate1, predicate1);
      MapIterator<SQLIntegrityConstraintViolationException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLIntegrityConstraintViolationException, DataTruncation> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, DataTruncation> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, DataTruncation>(mapIterator1);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) abstractMapIteratorDecorator0, 9);
      ReverseListIterator<SQLException> reverseListIterator0 = new ReverseListIterator<SQLException>(list0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) reverseListIterator0, (Predicate<? super SQLException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("1hay?gMwI ,2:c$T|R");
      iIOMetadataNode0.item((-536));
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Iterator<Properties> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      IteratorUtils.isEmpty(iterator1);
      IteratorUtils.isEmpty(iterator0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "null keys not allowed";
      IteratorUtils.emptyListIterator();
      Hashtable<SQLTimeoutException, SQLSyntaxErrorException> hashtable0 = new Hashtable<SQLTimeoutException, SQLSyntaxErrorException>();
      EntrySetMapIterator<SQLTimeoutException, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLSyntaxErrorException>(hashtable0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Iterator<SQLTimeoutException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0, (Iterator<? extends SQLTimeoutException>) entrySetMapIterator0);
      IteratorUtils.matchesAny(iterator2, (Predicate<? super SQLTimeoutException>) predicate0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator3 = IteratorUtils.getIterator("null keys not allowed");
      assertNotNull(iterator3);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(orderedIterator0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIteratorWrapper0);
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      MapIterator<SQLTimeoutException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      EmptyIterator.resettableEmptyIterator();
      Iterable<SQLTransactionRollbackException> iterable0 = new Stack<SQLTransactionRollbackException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      OrderedMapIterator<Closure<Object>, Properties> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Closure<Object>, Properties> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Closure<Object>, ? extends Properties>) orderedMapIterator1);
      MapIterator<Closure<Object>, Properties> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      assertSame(mapIterator2, mapIterator1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Iterator<Properties> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      IteratorUtils.isEmpty(iterator1);
      IteratorUtils.isEmpty(iterator0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "null keys not allowed";
      stringArray0[1] = "Iterable must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "Iterable must not be null";
      stringArray0[4] = ")";
      stringArray0[5] = "Iterator must not be null";
      stringArray0[6] = "5KkS-";
      stringArray0[7] = "org.apache.commons.collections4.functors.AnyPredicate";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.AnyPredicate");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) objectArrayIterator0, (Transformer<? super String, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'org.apache.commons.collections4.functors.AnyPredicate' on 'class java.lang.String' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Object object0 = new Object();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0);
      predicateArray0[0] = predicate0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "itmci;A`Hu{$g5";
      stringArray0[1] = "KH#O]u2Yap4F";
      stringArray0[2] = "9^LvoP~?f-jF";
      stringArray0[3] = "Entry does not exist: ";
      stringArray0[4] = "B0<<UVSef7H=GzY@0O";
      stringArray0[5] = "b7I.kR_BK2";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) objectArrayIterator0, (Transformer<? super String, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.lang.String' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) listIterator0, 4522);
      IteratorUtils.loopingListIterator(list0);
      MapIterator<Properties, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<Properties, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, SQLException>(mapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends Properties>) abstractMapIteratorDecorator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0, 100, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Iterator<Properties> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      IteratorUtils.isEmpty(iterator1);
      IteratorUtils.isEmpty(iterator0);
      Hashtable<IIOMetadataNode, SQLNonTransientConnectionException> hashtable0 = new Hashtable<IIOMetadataNode, SQLNonTransientConnectionException>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator2 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Object object0 = new Object();
      HashMap<SQLTimeoutException, SQLSyntaxErrorException> hashMap0 = new HashMap<SQLTimeoutException, SQLSyntaxErrorException>();
      EntrySetMapIterator<SQLTimeoutException, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLSyntaxErrorException>(hashMap0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) entrySetMapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator(object0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate1);
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) notPredicate0);
      Object object1 = IteratorUtils.find((Iterator<Object>) listIterator0, (Predicate<? super Object>) predicate2);
      objectArray0[1] = object1;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) listIterator0, (-2114));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -2114
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      stack0.add(predicate0);
      predicateArray0[5] = predicate1;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("-J*`");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientException0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", " ^?%(4P&Jn:7rb13fY", hashtable0, sQLTransientException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      HashMap<SQLNonTransientConnectionException, SQLTimeoutException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTimeoutException>();
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLTimeoutException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLTimeoutException>(hashMap0);
      IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) entrySetMapIterator0;
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) entrySetMapIterator0;
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) entrySetMapIterator0;
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) entrySetMapIterator0;
      iteratorArray0[4] = (Iterator<SQLNonTransientConnectionException>) entrySetMapIterator0;
      iteratorArray0[5] = (Iterator<SQLNonTransientConnectionException>) entrySetMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 12);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultEquator.defaultEquator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Nr1N=5pm&XS");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLRecoverableException0);
      Iterator<SQLTransientConnectionException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Nr1N=5pm&XS");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLRecoverableException0);
      SQLException sQLException0 = new SQLException("delimiter may not be null", sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransactionRollbackException0, defaultEquator0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) equalPredicate0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      String string0 = IteratorUtils.toString((Iterator<Properties>) resettableListIterator0, (Transformer<? super Properties, String>) ifTransformer0, "Nr1N=5pm&XS", "LgQhzw@h^k-Bh", "*I");
      assertEquals("LgQhzw@h^k-Bh*I", string0);
      
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("?m*~vc~,");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(orderedIterator0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIteratorWrapper0);
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("?m*~vc~,", "wzp-");
      MapIterator<SQLTimeoutException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, class0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) resettableIterator1);
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode2);
      OrderedMapIterator<Closure<Object>, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Closure<Object>, Properties> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Closure<Object>, ? extends Properties>) orderedMapIterator0);
      MapIterator<Closure<Object>, Properties> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      assertSame(mapIterator2, mapIterator1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      stack0.add(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("org.apache.commons.collections4.iterators.NodeListIterator");
      stack0.push(iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", sQLNonTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("^y:cqU^[Vzk(-8", hashMap0, sQLRecoverableException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", 62, hashMap0, sQLNonTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("PrototypeCloneFactory: Clone method threw an exception", "predicate must not be null.", 1533);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", hashMap0, sQLSyntaxErrorException0);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("ww6|=Q- H.iNt+QL r", "PrototypeCloneFactory: Clone method threw an exception", (-1225), hashMap0);
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("", "", 0, hashMap0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((Throwable) null);
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", "", hashMap0, sQLRecoverableException1);
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException(hashMap1);
      OrderedMapIterator<SQLClientInfoException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) abstractOrderedMapIteratorDecorator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      ArrayList<EnumSet<Locale.Category>> arrayList0 = new ArrayList<EnumSet<Locale.Category>>();
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.Category>>) arrayList0);
      Enumeration<EnumSet<Locale.Category>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) enumeration0, (Collection<? super EnumSet<Locale.Category>>) arrayList0);
      Properties properties0 = new Properties();
      Vector<Properties> vector0 = new Vector<Properties>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties1 = new Properties();
      vector0.add(properties1);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Properties properties2 = new Properties();
      IteratorUtils.getIterator(properties2);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Iterator<Properties> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      IteratorUtils.isEmpty(iterator1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.isEmpty(iterator0);
      Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>();
      DefaultEquator.defaultEquator();
      DefaultEquator<Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(hashtable0, (Equator<Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>>) defaultEquator0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator1, class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("=)", (Map<String, ClientInfoStatus>) null);
      Comparator<SQLClientInfoException> comparator1 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<SQLClientInfoException> predicate0 = ComparatorPredicate.comparatorPredicate(sQLClientInfoException0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) predicate0, 1, 2874);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IteratorUtils.getIterator("?m*~vc~,");
      IteratorUtils.emptyIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      stack0.add(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      UnaryOperator<IIOMetadataNode> unaryOperator0 = UnaryOperator.identity();
      stack0.replaceAll(unaryOperator0);
      IIOMetadataNode iIOMetadataNode2 = stack0.push(iIOMetadataNode1);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode2);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(orderedIterator0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIteratorWrapper0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("wzp-");
      SQLTransientException sQLTransientException0 = new SQLTransientException("?m*~vc~,");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("kg*/3'rPC-", sQLFeatureNotSupportedException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, class0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) resettableIterator1);
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      NodeListIterator nodeListIterator1 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode3);
      assertFalse(nodeListIterator1.equals((Object)nodeListIterator0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      MapIterator<SQLDataException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) mapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      MapIterator<Properties, SQLException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<Properties, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, SQLException>(mapIterator1);
      IteratorUtils.pushbackIterator((Iterator<? extends Properties>) abstractMapIteratorDecorator0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator1 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.isEmpty(singletonListIterator1);
      IteratorUtils.isEmpty(mapIterator1);
      Hashtable<IIOMetadataNode, SQLNonTransientConnectionException> hashtable0 = new Hashtable<IIOMetadataNode, SQLNonTransientConnectionException>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Iterator<Properties> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      IteratorUtils.isEmpty(iterator1);
      IteratorUtils.isEmpty(iterator0);
      Hashtable<IIOMetadataNode, SQLNonTransientConnectionException> hashtable0 = new Hashtable<IIOMetadataNode, SQLNonTransientConnectionException>();
      EntrySetMapIterator<IIOMetadataNode, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLNonTransientConnectionException>(hashtable0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("B.lUSyq^6,sfvD%H", "B.lUSyq^6,sfvD%H", 31, (Throwable) null);
      hashtable0.put(iIOMetadataNode0, sQLNonTransientConnectionException0);
      EntrySetMapIterator<IIOMetadataNode, SQLNonTransientConnectionException> entrySetMapIterator1 = new EntrySetMapIterator<IIOMetadataNode, SQLNonTransientConnectionException>(hashtable0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) entrySetMapIterator1);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      ObjectArrayListIterator<Locale.Category> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.Category>(locale_CategoryArray0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) locale_Category0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Locale.Category>) objectArrayListIterator0, (Predicate<? super Locale.Category>) predicate0);
      assertEquals(3, objectArrayListIterator0.nextIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.emptyListIterator();
      Properties properties0 = new Properties();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLIntegrityConstraintViolationException0);
      properties0.put(sQLDataException0, listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 2473, 2473);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IteratorUtils.getIterator("?m*~vc~,");
      IteratorUtils.emptyIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      stack0.add(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode2 = stack0.push(iIOMetadataNode1);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode2);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(orderedIterator0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIteratorWrapper0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyListIterator();
      int int0 = (-1);
      String string0 = "wzp-";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("wzp-");
      MapIterator<SQLTimeoutException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTimeoutException, DataTruncation> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) mapIterator1, (Predicate<? super SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Object object0 = new Object();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0);
      predicateArray0[0] = predicate0;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("dt0", "", 615, (Map<String, ClientInfoStatus>) null);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "yq-4_8.(MB$M", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/Y9}53Fdg?");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-1), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Iterator<Properties> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      IteratorUtils.isEmpty(iterator1);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>((SQLException) null);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) listIterator1, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableListIterator<Locale.Category> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Locale.Category>) resettableListIterator0, (Predicate<? super Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)42;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)55;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) null, (int) 55);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      MapIterator<SQLDataException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) mapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      IteratorUtils.loopingListIterator((List<Properties>) linkedList0);
      Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>();
      DefaultEquator.defaultEquator();
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, class1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Iterator<Properties> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      IteratorUtils.isEmpty(iterator1);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>((SQLException) null);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>((SQLIntegrityConstraintViolationException) null);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) listIterator1, (Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator1, class0);
      assertEquals(1, sQLIntegrityConstraintViolationExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<EnumSet<Locale.Category>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) enumeration0, (Collection<? super EnumSet<Locale.Category>>) treeSet0);
      Properties properties0 = new Properties();
      Vector<Properties> vector0 = new Vector<Properties>();
      vector0.add(properties0);
      Properties properties1 = new Properties();
      vector0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) vector0);
      Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>();
      DefaultEquator<Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(hashtable0, (Equator<Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>>) defaultEquator0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, class0);
      OrderedMapIterator<DataTruncation, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) orderedMapIterator0, (long) (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<EnumSet<Locale.Category>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) enumeration0, (Collection<? super EnumSet<Locale.Category>>) treeSet0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Entry does not exist: ");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(">r1@zF(e&mo*+4IR", "Entry does not exist: ", (-1217), sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ListIterator<SQLTransientConnectionException> listIterator0 = stack0.listIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Entry does not exist: ", "");
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLTransientConnectionException0, (Equator<SQLException>) defaultEquator0);
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) listIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      DataTruncation dataTruncation0 = new DataTruncation(1156, true, true, (-1217), (-1));
      Iterator<?> iterator0 = IteratorUtils.getIterator(dataTruncation0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector<Properties> vector0 = new Stack<Properties>();
      Properties properties0 = new Properties();
      vector0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) vector0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) treeSet0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      OrderedMapIterator<SQLTransientConnectionException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      Iterator<?> iterator1 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, true);
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) singletonIterator0, 0L, 0L);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(singletonIterator0, defaultEquator0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[2] = (Predicate<Object>) instanceofPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(onePredicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      String string0 = IteratorUtils.toString((Iterator<Properties>) boundedIterator0, (Transformer<? super Properties, String>) ifTransformer0, "", "]{co", "");
      assertEquals("]{co", string0);
      
      OrderedMapIterator<SQLTransientConnectionException, LinkedList<BatchUpdateException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLTransientConnectionException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTransientConnectionException, SQLClientInfoException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, SQLClientInfoException>(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0, (Iterator<? extends SQLTransientConnectionException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      vector0.add(properties0);
      Properties properties2 = new Properties();
      vector0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) vector0);
      Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>();
      DefaultEquator<Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(hashtable0, (Equator<Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>>) defaultEquator0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, class0);
      assertEquals(0, sQLIntegrityConstraintViolationExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(Q.GQ{Di(P}rv}?g/");
      Closure<SQLNonTransientException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLNonTransientException>) null, (Closure<? super SQLNonTransientException>) closure0);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(hashSet0);
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) loopingIterator0, 0L);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) boundedIterator0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends Integer>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer>(orderedMapIterator1);
      String string0 = "DBtUFn";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DBtUFn");
      Transformer<SQLTimeoutException, SQLTimeoutException> transformer0 = CloneTransformer.cloneTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      // Undeclared exception!
//      try { 
        abstractOrderedMapIteratorDecorator0.getValue();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Iterator contains no elements
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends Integer>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Integer>(orderedMapIterator1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DBtUFn");
      Transformer<SQLTimeoutException, SQLTimeoutException> transformer0 = CloneTransformer.cloneTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      // Undeclared exception!
//      try { 
        abstractOrderedMapIteratorDecorator0.getValue();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Iterator contains no elements
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedList0);
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) resettableIterator0, (long) 2431);
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) boundedIterator0, 0L, 0L);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) ifTransformer0, "NodeList must not be null", "]{co", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      Properties properties0 = new Properties();
      vector0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) vector0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Cannot store a duplicate key (\"", (-4287), sQLTransientException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Enumeration must not be null", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("Cannot store a duplicate key (\"");
      IteratorUtils.arrayIterator((Object[]) sQLTransientConnectionExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      Properties properties0 = new Properties();
      vector0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) vector0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Cannot store a duplicate key (\"", (-4287), sQLTransientException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "suffix may not be null", "", 123);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("[*#EY2=Gn%,/@nwn", "Cannot store a duplicate key (\"", "Cannot store a duplicate key (\"", 1358);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "b(+x 4hT5-", "", 1358);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("suffix may not be null", "<", "suffix may not be null", 1358);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("NodeList must not be null", "<", "_jHz<W9#&$V*Gs^w", 1358);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("MJ%,.", "b(+x 4hT5-", "", 2747);
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLTransientConnectionException1.setStackTrace(stackTraceElementArray0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Enumeration must not be null", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("Cannot store a duplicate key (\"");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("xsm-R{3IN;r-)", "xsm-R{3IN;r-)");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Enumeration must not be null", "Enumeration must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("Enumeration must not be null");
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, (-1606), (-1412));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ListIterator must not be null", "ListIterator must not be null", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("^y:cqU^[Vzk(-8", "^y:cqU^[Vzk(-8", sQLNonTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ww6|=Q- H.iNt+QL r", hashMap0, sQLRecoverableException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("ww6|=Q- H.iNt+QL r", "s)_?r(bN?.)_6!Q$9X", 0, hashMap0, (Throwable) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("ww6|=Q- H.iNt+QL r", hashMap0, (Throwable) null);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException2;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("=,Q", (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("ww6|=Q- H.iNt+QL r");
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("eA]YuNU$UT*<rl4p:", sQLClientInfoException1);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException2;
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException0;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLClientInfoException2, defaultEquator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) objectArrayIterator0, (Predicate<? super SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      Properties properties0 = new Properties();
      vector0.add(properties0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) vector0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Cannot store a duplicate key (\"", (-4287), sQLTransientException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      String string0 = "";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("transformer must not be null.", "", 5, hashMap0);
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      String string1 = ", ";
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(", ", "HU]oPV}pGV`sM", 5, hashMap0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(", ", "HU]oPV}pGV`sM", hashMap1, sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashMap1);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException3;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException((String) null, ")5 b-y@Npys", hashMap1, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException4;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MapIterator<SQLFeatureNotSupportedException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, Integer>(mapIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      IteratorUtils.emptyListIterator();
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      Enumeration<BatchUpdateException> enumeration0 = stack0.elements();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer(", ", ", ", false);
      IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("-:m_G%Y.+g9i", "-:m_G%Y.+g9i", (-12), sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "[");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      Properties properties0 = new Properties();
      vector0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) vector0);
      Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>();
      DefaultEquator<Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(hashtable0, (Equator<Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>>) defaultEquator0);
      DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>((SQLException) null);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator2 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) listIterator1, (Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
      assertFalse(listIterator2.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Object object0 = new Object();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
      int int0 = (-129);
      ArrayListIterator<Integer> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<Integer>(orderedIterator0, (-129));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<String>) listIterator0, 2431);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2431
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MapIterator<SQLFeatureNotSupportedException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, Integer>(mapIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      IteratorUtils.emptyListIterator();
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      Enumeration<BatchUpdateException> enumeration0 = stack0.elements();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      IteratorUtils.emptyListIterator();
      Hashtable<SQLTimeoutException, SQLSyntaxErrorException> hashtable0 = new Hashtable<SQLTimeoutException, SQLSyntaxErrorException>();
      EntrySetMapIterator<SQLTimeoutException, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLSyntaxErrorException>(hashtable0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Node must not be null", "Node must not be null", (-2218), sQLTransientConnectionException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", ",Td$Qg,$4Eo");
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(sQLTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("Transformer must not be null", sQLNonTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("`(O+`8\"g|MG0CF%");
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", sQLTransientConnectionException1);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException1;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTransientConnectionException1, defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) objectArrayIterator0, (Predicate<? super SQLTransientConnectionException>) equalPredicate0);
      assertFalse(objectArrayIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("?m*~vc~,");
      List<Object> list0 = IteratorUtils.toList(iterator0, 1358);
      IteratorUtils.loopingListIterator(list0);
      SQLWarning sQLWarning0 = new SQLWarning("q", "", 1358);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("?m*~vc~,", (Map<String, ClientInfoStatus>) null, sQLWarning0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", (-961), (Map<String, ClientInfoStatus>) null);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      sQLClientInfoException2.printStackTrace();
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) objectArrayIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) list0);
      ResettableListIterator<PriorityQueue<SQLNonTransientException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      Properties properties0 = new Properties();
      vector0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) vector0);
      Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>();
      DefaultEquator<Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(hashtable0, (Equator<Hashtable<SQLSyntaxErrorException, PriorityQueue<SQLException>>>) defaultEquator0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, true);
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) singletonIterator0, 0L, 0L);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(singletonIterator0, defaultEquator0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[2] = (Predicate<Object>) instanceofPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(onePredicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      IteratorUtils.toString((Iterator<Properties>) boundedIterator0, (Transformer<? super Properties, String>) ifTransformer0, "", "]{co", "");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (-1));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLSyntaxErrorException0);
      IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 3);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(vector0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) reverseListIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "]{co");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ListIterator must not be null", "ListIterator must not be null", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("^y:cqU^[Vzk(-8", "^y:cqU^[Vzk(-8", sQLNonTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ww6|=Q- H.iNt+QL r", hashMap0, sQLRecoverableException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLWarning0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("ww6|=Q- H.iNt+QL r", hashMap0, (Throwable) null);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "ww6|=Q- H.iNt+QL r", 0, hashMap0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException3;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(")5 b-y@Npys", "^y:cqU^[Vzk(-8", 0, hashMap1);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", " ^?%(4P&Jn:7rb13fY", hashMap1, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException6;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      MapIterator<SQLDataException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) mapIterator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "o;/Sx s^IR6eKk{M", (-4287), sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Enumeration must not be null", sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException((String) null);
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException((String) null, sQLTransientException0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException3;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTransientConnectionException3, defaultEquator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      // Undeclared exception!
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) objectArrayIterator0, (Predicate<? super SQLTransientConnectionException>) anyPredicate0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>((SQLException) null, defaultEquator0);
      Collection<StringTokenizer> collection0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MapIterator<SQLDataException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) mapIterator0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      Properties properties0 = new Properties();
      vector0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) vector0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Cannot store a duplicate key (\"", (-4287), sQLTransientException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Enumeration must not be null", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("Cannot store a duplicate key (\"");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("", sQLTransientConnectionException2);
      File file0 = MockFile.createTempFile("$ZN-", "Enumeration must not be null");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      sQLTransientException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTransientException0, defaultEquator0);
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) objectArrayIterator0, (Predicate<? super SQLTransientConnectionException>) equalPredicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("u#iEBFC={UivW'UW|");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-4287));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IteratorUtils.getIterator("?m*~vc~,");
      IteratorUtils.emptyIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      stack0.add(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode2 = stack0.push(iIOMetadataNode1);
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      IteratorUtils.emptyListIterator();
      Hashtable<SQLTimeoutException, SQLSyntaxErrorException> hashtable0 = new Hashtable<SQLTimeoutException, SQLSyntaxErrorException>();
      EntrySetMapIterator<SQLTimeoutException, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLSyntaxErrorException>(hashtable0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) entrySetMapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      OrderedMapIterator<SQLTransientConnectionException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IteratorUtils.getIterator("?m*~vc~,");
      IteratorUtils.emptyIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      stack0.add(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode2 = stack0.push(iIOMetadataNode1);
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = (-2062);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("&j v%0!li", "&j v%0!li", (-2062));
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) orderedMapIterator0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.NotPredicate", "aCg4THYglEcW", 230);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("[]", "aCg4THYglEcW", 341);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0, (-1473), 230);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      ArrayList<LinkedList<Integer>> arrayList0 = new ArrayList<LinkedList<Integer>>();
      ReverseListIterator<LinkedList<Integer>> reverseListIterator0 = new ReverseListIterator<LinkedList<Integer>>(arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<LinkedList<Integer>>) reverseListIterator0, (Transformer<? super LinkedList<Integer>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      MapIterator<SQLDataException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) mapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      ResettableIterator<Class<SQLIntegrityConstraintViolationException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableIterator0, (Equator<Object>) defaultEquator0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate2 = TruePredicate.truePredicate();
      predicateArray0[2] = predicate2;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[5] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[6] = predicate0;
      predicateArray0[7] = predicate1;
      predicateArray0[8] = predicate1;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate2, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) resettableListIterator0, (Transformer<? super Properties, String>) null, "*I", "*I", "*I");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>((SQLException) null, defaultEquator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("7//\"h2RO'R", "7//\"h2RO'R");
      sQLIntegrityConstraintViolationException0.printStackTrace();
      ArrayIterator<String> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<String>(sQLIntegrityConstraintViolationException0, (-871), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 5);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      classArray0[0] = class0;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[1] = class1;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[2] = class2;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      classArray0[3] = class3;
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      classArray0[4] = class4;
      int int0 = 5;
      int int1 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(classArray0, 5, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<?>) zippingIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L+uv^c*28*+nRPfP^O");
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 98);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = new Object();
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 2);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      ResettableListIterator<Class<SQLIntegrityConstraintViolationException>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0);
      IteratorUtils.getIterator(resettableListIterator0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-279);
      intArray0[1] = (-887);
      intArray0[2] = (-887);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("List must not be null", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("List must not be null", "List must not be null", (-887), intArray0, sQLNonTransientException0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) class0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-1987));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Properties properties0 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setUserObject(properties0);
      iIOMetadataNode0.getLastChild();
      properties0.put(iIOMetadataNode0, iIOMetadataNode0);
      int int0 = 2473;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) properties0, 2473, 2473);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyOrderedMapIterator();
      ServiceLoader<BatchUpdateException>[] serviceLoaderArray0 = (ServiceLoader<BatchUpdateException>[]) Array.newInstance(ServiceLoader.class, 3);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      ServiceLoader<BatchUpdateException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[0] = serviceLoader0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<BatchUpdateException> serviceLoader1 = ServiceLoader.load(class0, classLoader0);
      serviceLoaderArray0[1] = serviceLoader1;
      ServiceLoader<BatchUpdateException> serviceLoader2 = ServiceLoader.load(class0, classLoader0);
      serviceLoaderArray0[2] = serviceLoader2;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(serviceLoaderArray0, (-1672), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>[]) iteratorArray0);
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) iterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("Array class must not be null", (String) null, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, (-329), (-329));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 4);
      OrderedMapIterator<Properties, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLNonTransientConnectionException>(orderedMapIterator0);
      iteratorArray0[0] = (Iterator<Properties>) abstractOrderedMapIteratorDecorator0;
      ArrayListIterator<Properties> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(iteratorArray0[0], 5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      Properties properties0 = new Properties();
      vector0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) vector0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Cannot store a duplicate key (\"", (-4287), sQLTransientException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Enumeration must not be null", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("Cannot store a duplicate key (\"");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("", sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTransientConnectionException3, defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) objectArrayIterator0, (Predicate<? super SQLTransientConnectionException>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      MapIterator<SQLDataException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) mapIterator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      MapIterator<Properties, SQLException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<Properties, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, SQLException>(mapIterator1);
      Iterator<Properties> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) abstractMapIteratorDecorator0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.isEmpty(singletonListIterator0);
      IteratorUtils.isEmpty(iterator0);
      Hashtable<IIOMetadataNode, SQLNonTransientConnectionException> hashtable0 = new Hashtable<IIOMetadataNode, SQLNonTransientConnectionException>();
      EntrySetMapIterator<IIOMetadataNode, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLNonTransientConnectionException>(hashtable0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "Collection must not be null");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("9_y", "Predicate must not be null", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("Predicate must not be null", "9_y", 1739, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("Collection must not be null", (String) null, 1739, sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("9_y", "9_y", 1289);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException5);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      SkippingIterator<SQLInvalidAuthorizationSpecException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (long) 1289);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) skippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      IteratorUtils.getIterator("?m*~vc~,");
      IteratorUtils.emptyIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      stack0.add(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode2 = stack0.push(iIOMetadataNode1);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode2);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(orderedIterator0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIteratorWrapper0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category1;
      int int0 = (-508);
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0, (-508));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, true);
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) singletonIterator0, 0L, 0L);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(singletonIterator0, defaultEquator0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[2] = (Predicate<Object>) instanceofPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      OnePredicate.onePredicate((Predicate<? super SQLTimeoutException>[]) predicateArray0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(onePredicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      String string0 = IteratorUtils.toString((Iterator<Properties>) boundedIterator0, (Transformer<? super Properties, String>) ifTransformer0, "", "]{co", "");
      assertEquals("]{co", string0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLException sQLException0 = new SQLException(sQLNonTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException("transformer may not be null", "l,Qi^vsD%aejUgE4R", (-1), sQLException0);
      SingletonIterator<SQLException> singletonIterator1 = new SingletonIterator<SQLException>(sQLDataException0, true);
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Iterator<Properties> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      IteratorUtils.isEmpty(iterator1);
      IteratorUtils.isEmpty(iterator0);
      Hashtable<IIOMetadataNode, SQLNonTransientConnectionException> hashtable0 = new Hashtable<IIOMetadataNode, SQLNonTransientConnectionException>();
      EntrySetMapIterator<IIOMetadataNode, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLNonTransientConnectionException>(hashtable0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      ArrayList<EnumSet<Locale.Category>> arrayList0 = new ArrayList<EnumSet<Locale.Category>>();
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.Category>>) arrayList0);
      Enumeration<EnumSet<Locale.Category>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) enumeration0, (Collection<? super EnumSet<Locale.Category>>) arrayList0);
      Properties properties0 = new Properties();
      Vector<Properties> vector0 = new Vector<Properties>();
      vector0.add(properties0);
      Properties properties1 = new Properties();
      vector0.add(properties1);
      IteratorUtils.isEmpty((Iterator<?>) null);
      Hashtable<IIOMetadataNode, SQLNonTransientConnectionException> hashtable0 = new Hashtable<IIOMetadataNode, SQLNonTransientConnectionException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("+cOv*lto&Eb{=#", "+cOv*lto&Eb{=#");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 0, sQLTransientConnectionException0);
      hashtable0.put(iIOMetadataNode0, sQLNonTransientConnectionException0);
      EntrySetMapIterator<IIOMetadataNode, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLNonTransientConnectionException>(hashtable0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends Properties>) iterator0);
      IteratorUtils.isEmpty(listIterator0);
      IteratorUtils.isEmpty(listIterator0);
      Hashtable<IIOMetadataNode, SQLNonTransientConnectionException> hashtable0 = new Hashtable<IIOMetadataNode, SQLNonTransientConnectionException>();
      EntrySetMapIterator<IIOMetadataNode, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLNonTransientConnectionException>(hashtable0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(object0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ResettableListIterator<HashMap<SQLNonTransientException, IIOMetadataNode>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<HashMap<SQLNonTransientException, IIOMetadataNode>>) resettableListIterator0, (-183L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      Properties properties0 = new Properties();
      vector0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) vector0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Cannot store a duplicate key (\"", (-4287), sQLTransientException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Enumeration must not be null", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("Cannot store a duplicate key (\"");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("", sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTransientConnectionException3, defaultEquator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Enumeration must not be null");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("pnYClMd5;mS");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("Enumeration must not be null");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (long) 1, (long) (-4287));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Enumeration must not be null");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0, 0L, (-680L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) linkedList0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      int[] intArray0 = new int[2];
      intArray0[0] = 1434;
      intArray0[1] = 1434;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 1434, intArray0, sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 1434, sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLTransientConnectionException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "bIliY0]4ti8{rW", 959);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException((Throwable) null);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("", "", 600);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("bIliY0]4ti8{rW", "", 0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("", "", (-1800), sQLTransientConnectionException0);
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException(sQLInvalidAuthorizationSpecException0);
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("@hqT%qFzWH;~[4xw", "", 959);
      sQLDataExceptionArray0[7] = sQLDataException7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 600);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      vector0.add(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      vector0.add(sQLNonTransientConnectionException1);
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<EnumSet<Locale.Category>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) enumeration0, (Collection<? super EnumSet<Locale.Category>>) treeSet0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Entry does not exist: ");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTimeoutException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(">r1@zF(e&mo*+4IR", "Entry does not exist: ", (-1217), sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("", sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      assertTrue(resettableListIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLDataException sQLDataException0 = new SQLDataException("rCUY&x`Dvs63P\"10U");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      DataTruncation dataTruncation0 = new DataTruncation(44, false, false, 44, 44, sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "rCUY&x`Dvs63P\"10U", (-4579), dataTruncation0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", sQLInvalidAuthorizationSpecException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, (-4579));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "";
      int int0 = 2405;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("@Q[\"wq<3qz;p&S5,!:", "RLqQ#$", 2405);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 2874, sQLFeatureNotSupportedException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "RLqQ#$", 2874);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "Array class must not be null", 2405);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("yZ8<|\"QCM~hTm'", "Array class must not be null", "", 2874);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 2874, 2874);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, 0L);
      String string0 = "";
      Transformer<SQLFeatureNotSupportedException, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) boundedIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0);
      ArrayDeque<Properties>[] arrayDequeArray0 = (ArrayDeque<Properties>[]) Array.newInstance(ArrayDeque.class, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(arrayDequeArray0, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ListIterator must not be null", "ListIterator must not be null", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("^y:cqU^[Vzk(-8", "^y:cqU^[Vzk(-8", sQLNonTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ww6|=Q- H.iNt+QL r", hashMap0, sQLRecoverableException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("ww6|=Q- H.iNt+QL r", "s)_?r(bN?.)_6!Q$9X", 0, hashMap0, (Throwable) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashMap0, sQLWarning0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("ww6|=Q- H.iNt+QL r", hashMap0, (Throwable) null);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("", "ww6|=Q- H.iNt+QL r", 0, hashMap0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(")5 b-y@Npys", "^y:cqU^[Vzk(-8", 0, hashMap1);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", " ^?%(4P&Jn:7rb13fY", hashMap1, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      assertEquals(8, objectArray0.length);
  }
}
