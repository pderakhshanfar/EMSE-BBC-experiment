/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 08:49:32 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, HashMap<SQLException, Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, HashMap<SQLException, Locale.FilteringMode>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, HashMap<SQLException, Locale.FilteringMode>>) orderedMapIterator0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) resettableListIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 7);
      Enumeration<SQLTransactionRollbackException> enumeration0 = (Enumeration<SQLTransactionRollbackException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) vector0);
      iteratorArray0[0] = iterator0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      HashMap<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException>(hashMap0);
      iteratorArray0[3] = (Iterator<SQLTransactionRollbackException>) entrySetMapIterator0;
      SkippingIterator<SQLTransactionRollbackException> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 1786L);
      iteratorArray0[4] = (Iterator<SQLTransactionRollbackException>) skippingIterator0;
      iteratorArray0[5] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      iteratorArray0[6] = iteratorArray0[4];
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>((SQLTransientException) null);
      IteratorUtils.get((Iterator<SQLTransientException>) singletonListIterator0, 0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(singletonListIterator0);
      ListIterator<Object> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Object>) listIteratorWrapper0);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, LinkedList<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<SQLInvalidAuthorizationSpecException, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) orderedMapIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, "|2m#L&+|C9JuL:*#", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector<SQLException> vector0 = new Vector<SQLException>();
      ReverseListIterator<SQLException> reverseListIterator0 = new ReverseListIterator<SQLException>(vector0);
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLException>) reverseListIterator0, (Transformer<? super SQLException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ListIterator<LinkedHashSet<String>> listIterator0 = IteratorUtils.singletonListIterator((LinkedHashSet<String>) null);
      String string0 = IteratorUtils.toString((Iterator<LinkedHashSet<String>>) listIterator0);
      assertFalse(listIterator0.hasNext());
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) orderedMapIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      MapIterator<SQLDataException, Transformer<Object, String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLDataException[] sQLDataExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class0);
      assertEquals(0, sQLDataExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", sQLNonTransientConnectionException0);
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransientConnectionException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>((SQLTransientException) null);
      IteratorUtils.get((Iterator<SQLTransientException>) singletonListIterator0, 0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) singletonListIterator0);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 1, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLExceptionArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.iterators.IteratorChain", (Throwable) null);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLIntegrityConstraintViolationException, SQLClientInfoException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("m6(1}X.", classArray0, classArray0);
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      Properties properties0 = new Properties();
      hashSet0.add(properties0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) invokerTransformer0, "m6(1}X.", "m6(1}X.", "^a)9L0\"# ^bms");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'm6(1}X.' on 'class java.util.Properties' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<HashSet<SQLTransientException>>) null, (Transformer<? super HashSet<SQLTransientException>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ArrayList<LinkedList<SQLIntegrityConstraintViolationException>> arrayList0 = new ArrayList<LinkedList<SQLIntegrityConstraintViolationException>>();
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      arrayList0.add(linkedList0);
      ResettableListIterator<LinkedList<SQLIntegrityConstraintViolationException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedList<SQLIntegrityConstraintViolationException>>) arrayList0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<LinkedList<SQLIntegrityConstraintViolationException>>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("DB.[B4");
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0, 100);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'DB.[B4' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) priorityQueue0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("#=SvEPV~");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      priorityQueue0.add(sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableIterator0, 1726);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.PriorityQueue$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) instanceofPredicate0);
      predicateArray0[0] = predicate0;
      AllPredicate<SQLDataException> allPredicate0 = new AllPredicate<SQLDataException>(predicateArray0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) singletonListIterator0, (Predicate<? super SQLDataException>) allPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) listIterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Input Object must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) andPredicate0);
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) listIterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) hashSet0);
      SQLDataException sQLDataException0 = new SQLDataException("Q%I8pumf?MY<<hU");
      hashSet0.add(sQLDataException0);
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      Predicate<SQLDataException> predicate0 = OrPredicate.orPredicate((Predicate<? super SQLDataException>) equalPredicate0, (Predicate<? super SQLDataException>) equalPredicate0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) singletonListIterator0, (Predicate<? super SQLDataException>) predicate0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) singletonListIterator0);
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) zippingIterator0, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) null, 2195L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[10];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) nullIsExceptionPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Input Object must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      Transformer<SQLException, SQLTransientException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransientException) sQLTransientConnectionException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTransientException>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      SingletonIterator<HashSet<SQLFeatureNotSupportedException>> singletonIterator0 = new SingletonIterator<HashSet<SQLFeatureNotSupportedException>>(linkedHashSet0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<HashSet<SQLFeatureNotSupportedException>>) singletonIterator0, (Predicate<? super HashSet<SQLFeatureNotSupportedException>>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      BoundedIterator<SQLNonTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, 0L, 3716L);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLNonTransientException>) boundedIterator0, (Predicate<? super SQLNonTransientException>) nullIsExceptionPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (-1L), (-2041L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("PrototypeCloneFactory: The clone method must exist and be public ", "PrototypeCloneFactory: The clone method must exist and be public ", (-340));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!d", "!d", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) singletonIterator0, (long) (-1481));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 0, (-1097));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, (-438), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, 1118);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, (-2051));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 10, 2441);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedMapIterator<Integer, Vector<SQLException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) orderedMapIterator0, 496);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) list0, 496);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, 100, (-447));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ServiceLoader<BatchUpdateException>[] serviceLoaderArray0 = (ServiceLoader<BatchUpdateException>[]) Array.newInstance(ServiceLoader.class, 3);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(serviceLoaderArray0, (-257), 4272);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLIntegrityConstraintViolationException[]) null, 4474);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 128);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Vector<Locale.FilteringMode>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) locale_FilteringMode0, (-460), (-4197));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Predicate must not be null", sQLException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, 377);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      ListIterator<SQLNonTransientException> listIterator2 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIterator1);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) listIterator2, (Predicate<? super SQLNonTransientException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      ListIterator<SQLNonTransientException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIterator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) listIterator1, (Predicate<? super SQLNonTransientException>) predicate0);
      assertTrue(listIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      Transformer<SQLNonTransientException, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, "Predicate must not be null", "", "Predicate must not be null");
      assertFalse(singletonIterator0.hasNext());
      assertEquals("nullPredicate must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      String string0 = IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) invokerTransformer0, "9DhG", "VZm<mW`Y;'A>?M)*/WV", "");
      assertEquals("VZm<mW`Y;'A>?M)*/WV", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, "umEg9>", "", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, "Iterator must not be null", (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("e'OQ;>");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, (String) null, "V9-b_w2)", "umEg9>");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, LinkedList<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) orderedMapIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) null, "", "|2m#L&+|C9JuL:*#", "Closure must not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("$py/YP~r6;yk(dF5S|", "+U!W/#K\"w|#", (-10));
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLRecoverableException0, (Transformer<? super SQLException, ? extends SQLException>) null);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, BatchUpdateException>(orderedMapIterator0);
      int int0 = IteratorUtils.size(abstractOrderedMapIteratorDecorator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "org.apache.commons.collections4.functors.CloneTransformer", (Throwable) null);
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTransientException>) singletonListIterator0, 4);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 3
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("B`3", "Enumeration must not be null");
      SQLTransientException sQLTransientException0 = new SQLTransientException("Enumeration must not be null", "Enumeration must not be null", sQLWarning0);
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>(sQLTransientException0);
      SQLTransientException sQLTransientException1 = IteratorUtils.get((Iterator<SQLTransientException>) singletonListIterator0, 0);
      assertEquals(0, sQLTransientException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 0);
      ResettableIterator<Iterator<SQLSyntaxErrorException>> resettableIterator0 = IteratorUtils.arrayIterator(iteratorArray0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("m6(1}X.", "Predicate must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientConnectionException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = IteratorUtils.isEmpty(singletonListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("WpLU<PMvxsO8KZCH!", "WpLU<PMvxsO8KZCH!", false);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) singletonIterator0, 1655);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(list0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      IteratorUtils.matchesAll((Iterator<StringTokenizer>) loopingListIterator0, (Predicate<? super StringTokenizer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Properties>) null, (Predicate<? super Properties>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Properties>) null, (Predicate<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      UniquePredicate<ArrayDeque<SQLWarning>> uniquePredicate0 = new UniquePredicate<ArrayDeque<SQLWarning>>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<ServiceLoader<ServiceLoader>>) iterator0, (Predicate<? super ServiceLoader<ServiceLoader>>) onePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Object) sQLSyntaxErrorException0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = IteratorUtils.contains((Iterator<ServiceLoader<SQLFeatureNotSupportedException>>) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Hashtable<LinkedHashSet, SQLSyntaxErrorException> hashtable0 = IteratorUtils.find((Iterator<Hashtable<LinkedHashSet, SQLSyntaxErrorException>>) null, (Predicate<? super Hashtable<LinkedHashSet, SQLSyntaxErrorException>>) uniquePredicate0);
      assertNull(hashtable0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) resettableIterator0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      SingletonIterator<HashSet<SQLFeatureNotSupportedException>> singletonIterator0 = new SingletonIterator<HashSet<SQLFeatureNotSupportedException>>(linkedHashSet0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<HashSet<SQLFeatureNotSupportedException>>) singletonIterator0, (Predicate<? super HashSet<SQLFeatureNotSupportedException>>) uniquePredicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException(":$dqQq_Op=7ds", "|nsi)7", 1);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      Closure<SQLNonTransientException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLDataException>) listIterator0, (Closure<? super SQLDataException>) closure0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLTransactionRollbackException>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0, (Closure<? super SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Closure<SQLDataException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLDataException>) null, (Closure<? super SQLDataException>) closure0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Closure must not be null");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(">Ry/#QFPV,Y(j", ">Ry/#QFPV,Y(j");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "stHivte)82");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLRecoverableException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector<SQLException> vector0 = new Vector<SQLException>();
      ReverseListIterator<SQLException> reverseListIterator0 = new ReverseListIterator<SQLException>(vector0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(reverseListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Class<SQLDataException> class0 = SQLDataException.class;
      SQLDataException[] sQLDataExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableListIterator0, class0);
      assertNotSame(sQLDataExceptionArray0, sQLDataExceptionArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MapIterator<SQLDataException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterable<SQLDataException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterable<SQLInvalidAuthorizationSpecException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLSyntaxErrorException>>) null, (Collection<? super Iterator<SQLSyntaxErrorException>>) hashSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) stack0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("m6(1}X.");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>((SQLTransientException) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) singletonListIterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<DataTruncation, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator0, (Predicate<? super DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, ComparatorPredicate.Criterion> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, SQLNonTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLNonTransientConnectionException>("|2m#L&+|C9JuL:*#", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) null, (Transformer<? super Properties, ? extends SQLNonTransientConnectionException>) invokerTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0, true);
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Integer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) singletonIterator0, (Transformer<? super Locale.FilteringMode, ? extends Integer>) transformer0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super Integer>) nullIsTruePredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) null, (Iterator<? extends SQLWarning>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) singletonListIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = new Integer(14);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("GU^,MTq6");
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<Integer>) zippingIterator0, (long) 14);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'GU^,MTq6' on 'class java.lang.Integer' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, true);
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-1682), (-1623));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) hashSet0);
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) stack0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Class<Integer>[]) null, 10, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ServiceLoader<StringTokenizer>[] serviceLoaderArray0 = (ServiceLoader<StringTokenizer>[]) Array.newInstance(ServiceLoader.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(serviceLoaderArray0, 1, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[8];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",[i*9J)");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("tJTDwlkr#_4PTK9", "AEt+Wu$qt", intArray0, sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("AEt+Wu$qt", "AEt+Wu$qt", batchUpdateException0);
      Class<Locale.FilteringMode>[] classArray0 = (Class<Locale.FilteringMode>[]) Array.newInstance(Class.class, 5);
      InvokerTransformer<SQLTransientException, SQLTransactionRollbackException> invokerTransformer0 = new InvokerTransformer<SQLTransientException, SQLTransactionRollbackException>(",[i*9J)", classArray0, classArray0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransientException) sQLTimeoutException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method ',[i*9J)' on 'class java.sql.SQLTimeoutException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Hashtable<SQLClientInfoException, Properties> hashtable0 = new Hashtable<SQLClientInfoException, Properties>();
      Enumeration<Properties> enumeration0 = hashtable0.elements();
      HashSet<Properties> hashSet0 = new HashSet<Properties>(10, 10);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) hashSet0);
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Hashtable<SQLDataException, SQLTimeoutException> hashtable0 = new Hashtable<SQLDataException, SQLTimeoutException>();
      EntrySetMapIterator<SQLDataException, SQLTimeoutException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLTimeoutException>(hashtable0);
      MapIterator<SQLDataException, SQLTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLTransientException>) entrySetMapIterator0);
      AbstractMapIteratorDecorator<SQLDataException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLTransientException>(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) abstractMapIteratorDecorator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Enumeration<SQLTransactionRollbackException> enumeration0 = (Enumeration<SQLTransactionRollbackException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) vector0);
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("The predicate collection must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, 0, 535);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) resettableListIterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableListIterator0, (Class<SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1433));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("[null]");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, LinkedList<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1166);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLInvalidAuthorizationSpecException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SingletonListIterator<SQLTransientException> singletonListIterator0 = new SingletonListIterator<SQLTransientException>((SQLTransientException) null);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(singletonListIterator0);
      ListIterator<Object> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Object>) listIteratorWrapper0);
      assertTrue(listIterator0.hasNext());
  }
}
