/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:01:39 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = (-402);
      SQLWarning sQLWarning0 = new SQLWarning("", "", (-402));
      MockPrintStream mockPrintStream0 = new MockPrintStream("Iterator[");
      sQLWarning0.printStackTrace((PrintStream) mockPrintStream0);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLWarning>) singletonIterator0);
      SingletonIterator<String> singletonIterator1 = new SingletonIterator<String>("Closure must not be null");
      Transformer<String, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) singletonIterator1, (Transformer<? super String, String>) transformer0, "Transformer must not be null", "Transformer must not be null", "Transformer must not be null");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, Properties>[] transformerArray0 = (Transformer<Object, Properties>[]) Array.newInstance(Transformer.class, 0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Object[] objectArray0 = new Object[8];
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(class0, false);
      Object object0 = IteratorUtils.get((Iterator<Object>) singletonIterator0, 0);
      objectArray0[0] = object0;
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>("org.apache.commons.collections4.IteratorUtils", classArray0, objectArray0);
      SwitchTransformer<Object, Properties> switchTransformer0 = new SwitchTransformer<Object, Properties>(predicateArray0, transformerArray0, invokerTransformer0);
      IfTransformer<Object, Properties> ifTransformer0 = new IfTransformer<Object, Properties>(predicate0, switchTransformer0, invokerTransformer0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) ifTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'org.apache.commons.collections4.IteratorUtils' on 'class java.util.Properties' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 1);
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) singletonListIterator0, (Iterator<? extends Properties>) singletonListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) linkedHashSet0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(onePredicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Object>) resettableIterator0, (Transformer<? super Object, String>) ifTransformer0, (String) null, (String) null, "org.apache.commons.collections4.iterators.ZippingIterator");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(properties0);
      Object object0 = IteratorUtils.get((Iterator<Object>) singletonIterator0, 0);
      Properties[] propertiesArray0 = new Properties[8];
      propertiesArray0[0] = (Properties) object0;
      propertiesArray0[1] = (Properties) object0;
      Properties properties1 = new Properties();
      propertiesArray0[2] = properties1;
      propertiesArray0[3] = (Properties) object0;
      propertiesArray0[4] = properties0;
      propertiesArray0[5] = properties0;
      propertiesArray0[6] = properties0;
      propertiesArray0[7] = properties0;
      IteratorUtils.arrayIterator(propertiesArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Properties properties0 = new Properties();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 4, (Throwable) null);
      properties0.put(sQLTransactionRollbackException0, "");
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(properties0);
      IteratorUtils.get((Iterator<Object>) singletonIterator0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MapIterator<Properties, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends ArrayList<SQLIntegrityConstraintViolationException>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[df^I'", batchUpdateException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("[df^I'");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecException2.getLocalizedMessage();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException3;
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) iterator0, class0);
      IteratorUtils.size(objectArrayIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "");
      ConstantTransformer<Object, SQLIntegrityConstraintViolationException> constantTransformer0 = new ConstantTransformer<Object, SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) constantTransformer0);
      TransformerClosure<SQLException> transformerClosure0 = new TransformerClosure<SQLException>(constantTransformer0);
      IteratorUtils.apply(iterator1, (Closure<? super SQLIntegrityConstraintViolationException>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Closure<Object> closure0 = ForClosure.forClosure(4659, (Closure<? super Object>) null);
      Closure<SQLException> closure1 = WhileClosure.whileClosure((Predicate<? super SQLException>) predicate0, (Closure<? super SQLException>) closure0, true);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure1);
      LinkedList<EnumSet<Locale.Category>> linkedList1 = new LinkedList<EnumSet<Locale.Category>>();
      IteratorUtils.loopingIterator((Collection<? extends EnumSet<Locale.Category>>) linkedList1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MapIterator<PriorityQueue<SQLRecoverableException>, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) mapIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<DataTruncation, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, DataTruncation>(orderedMapIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractOrderedMapIteratorDecorator0.forEachRemaining(consumer0);
      MapIterator<SQLWarning, SQLWarning> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ? extends SQLWarning>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLWarning>) mapIterator0, (Closure<? super SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) singletonListIterator0, (Iterator<?>) singletonListIterator0);
      IteratorUtils.get((Iterator<Object>) zippingIterator0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 1, sQLNonTransientConnectionException0);
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning0 = new SQLWarning(sQLWarningArray0[0]);
      sQLWarningArray0[1] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("setValue() is not supported", dataTruncation0);
      sQLWarningArray0[2] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning("");
      sQLWarningArray0[3] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning();
      sQLWarningArray0[4] = sQLWarning3;
      SQLException sQLException0 = new SQLException("", "-_vuv^h!22KTP<0", 1, sQLWarning1);
      SQLWarning sQLWarning4 = new SQLWarning("setValue() is not supported", sQLException0);
      sQLWarningArray0[5] = sQLWarning4;
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0, 0, 0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      Hashtable<Object, SQLNonTransientException> hashtable0 = new Hashtable<Object, SQLNonTransientException>();
      Transformer<Object, SQLNonTransientException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientException>) hashtable0);
      IfTransformer<Object, SQLNonTransientException> ifTransformer0 = new IfTransformer<Object, SQLNonTransientException>(predicate0, transformer0, transformer0);
      SwitchTransformer<Object, SQLNonTransientException> switchTransformer0 = new SwitchTransformer<Object, SQLNonTransientException>(predicateArray0, (Transformer<? super Object, ? extends SQLNonTransientException>[]) null, ifTransformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(switchTransformer0);
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      String string0 = "~qBP8)Z7";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 3176;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "~qBP8)Z7", 3176);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-97), sQLTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "", (-1079));
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("prefix may not be null");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        singletonListIterator0.remove();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.SingletonListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer((DataTruncation) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("XH_\"@G*J<");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLFeatureNotSupportedException0, (Transformer<? super Object, ?>) transformer0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, onePredicate0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super Object>) transformedPredicate0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>> hashtable0 = new Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>>();
      Enumeration<DataTruncation> enumeration0 = hashtable0.keys();
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String[] stringArray0 = new String[14];
      stringArray0[0] = "org.apache.commons.collections4.functors.SwitchTransformer";
      stringArray0[1] = "org.apache.commons.collections4.functors.SwitchTransformer";
      stringArray0[2] = "org.apache.commons.collections4.functors.SwitchTransformer";
      stringArray0[3] = "org.apache.commons.collections4.functors.SwitchTransformer";
      stringArray0[4] = "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator";
      stringArray0[5] = "org.apache.commons.collections4.functors.SwitchTransformer";
      stringArray0[6] = "org.apache.commons.collections4.functors.SwitchTransformer";
      stringArray0[7] = "org.apache.commons.collections4.functors.SwitchTransformer";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      IteratorUtils.zippingIterator((Iterator<?>) objectArrayIterator0, (Iterator<?>) iterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", (Throwable) null);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 0, (-2920));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) singletonListIterator0, (Iterator<?>) singletonListIterator0);
      IteratorUtils.get((Iterator<Object>) zippingIterator0, 0);
      OrderedMapIterator<SQLTransientConnectionException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, String>(orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0, 0L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) null, 2870);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLTimeoutException>(mapIterator0);
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLTimeoutException> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLTimeoutException>(abstractMapIteratorDecorator0);
      OrderedMapIterator<IIOMetadataNode, PriorityQueue<SQLWarning>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      ConstantTransformer<Object, DataTruncation> constantTransformer0 = new ConstantTransformer<Object, DataTruncation>((DataTruncation) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLInvalidAuthorizationSpecException1, (Transformer<? super Object, ?>) null);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super Object>) predicate0);
      MapIterator<SQLTimeoutException, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<HashSet<EnumSet>>) iterator0, (Transformer<? super HashSet<EnumSet>, String>) null, "Entry does not exist: ", "Entry does not exist: ", "XH_\"@G*J<");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) singletonListIterator0, (Iterator<?>) singletonListIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<HashSet<EnumSet>>) zippingIterator0, (Transformer<? super HashSet<EnumSet>, String>) transformer0, "Entry does not exist: ", "@BY@Xk3M0J$b*E?64l", ">BC|XnQb`j((");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("y");
      MockThrowable mockThrowable0 = new MockThrowable("rqFuq");
      mockThrowable0.getLocalizedMessage();
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) singletonListIterator0, (Iterator<?>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) zippingIterator0, 2736);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2735
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedIterator<Stack<Locale.Category>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      instantiateFactory0.create();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      IteratorUtils.toString((Iterator<Stack<Locale.Category>>) orderedIterator0, (Transformer<? super Stack<Locale.Category>, String>) transformer0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableIterator0, 5);
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(list0);
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) loopingListIterator0, (long) 5);
      IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) skippingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",yxhkX4lMz,&Y_%B,M", "", 5);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, false);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransactionRollbackException>) singletonIterator0);
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) iterator0, 5);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<ClientInfoStatus> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<?>) listIterator0, (Iterator<?>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("y");
      MockThrowable mockThrowable0 = new MockThrowable("rqFuq");
      mockThrowable0.getLocalizedMessage();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator("rqFuq");
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Transformer<Object, DataTruncation> transformer0 = new ConstantTransformer<Object, DataTruncation>((DataTruncation) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLInvalidAuthorizationSpecException1, (Transformer<? super Object, ?>) null);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super Object>) predicate0);
      MapIterator<SQLTimeoutException, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) mapIterator0);
      MapIterator<IIOMetadataNode, SQLTimeoutException> mapIterator1 = IteratorUtils.emptyMapIterator();
      MapIterator<IIOMetadataNode, SQLTimeoutException> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLTimeoutException>(mapIterator2);
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(abstractMapIteratorDecorator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) listIteratorWrapper0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<ArrayList<Object>>) null, (Predicate<? super ArrayList<Object>>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>> hashtable0 = new Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>>();
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = (-934);
      intArray0[2] = 471;
      intArray0[3] = (-1);
      intArray0[4] = 479;
      intArray0[5] = 4793;
      intArray0[6] = 119;
      intArray0[7] = 0;
      intArray0[8] = (-435);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef", "org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef", intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, batchUpdateException0);
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef", "org.apache.commons.collections4.functors.TransformerClosure", 855);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef", "List must not be null", 11, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) list0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>> hashtable0 = new Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>>();
      Enumeration<DataTruncation> enumeration0 = hashtable0.keys();
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.loopingListIterator((List<Object>) vector0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("I");
      IteratorUtils.getIterator(enumeration0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      Hashtable<Class<Boolean>, SQLWarning> hashtable0 = new Hashtable<Class<Boolean>, SQLWarning>();
      EntrySetMapIterator<Class<Boolean>, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<Class<Boolean>, SQLWarning>(hashtable0);
      OrderedMapIterator<Class<Boolean>, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Class<Boolean>, SQLWarning> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Class<Boolean>, ? extends SQLWarning>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Class<Boolean>, SQLWarning>) orderedMapIterator1);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      IteratorUtils.matchesAll((Iterator<Class<Boolean>>) null, (Predicate<? super Class<Boolean>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>> hashtable0 = new Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>>();
      Enumeration<DataTruncation> enumeration0 = hashtable0.keys();
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.getIterator(hashtable0);
      IteratorUtils.toArray(iterator0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MapIterator<DataTruncation, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<DataTruncation, SQLFeatureNotSupportedException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) mapIterator1);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(list0);
      IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) loopingListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<EnumSet<Locale.Category>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) listIterator0, (Iterator<? extends EnumSet<Locale.Category>>) listIterator0);
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.collatedIterator((Comparator<? super EnumSet<Locale.Category>>) comparator0, (Iterator<? extends EnumSet<Locale.Category>>) zippingIterator0, (Iterator<? extends EnumSet<Locale.Category>>) listIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) iterator0, (Iterator<? extends EnumSet<Locale.Category>>) iterator0, (Iterator<? extends EnumSet<Locale.Category>>) iterator0);
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, (-222), (-222));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>> hashtable0 = new Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>>();
      Enumeration<DataTruncation> enumeration0 = hashtable0.keys();
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[1] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Iterator<Locale.Category> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) null, (Predicate<? super Locale.Category>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Iterator<Locale.Category> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) null, (Predicate<? super Locale.Category>) onePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MapIterator<DataTruncation, Hashtable<DataTruncation, LinkedHashSet>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      DataTruncation dataTruncation0 = new DataTruncation(125, true, true, 125, 125);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      IteratorUtils.objectGraphIterator((Object) mapIterator0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null, (Collection<? super DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) linkedList0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 8);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[4] = class4;
      Class<DataTruncation> class5 = DataTruncation.class;
      classArray0[5] = class5;
      Class<DataTruncation> class6 = DataTruncation.class;
      classArray0[6] = class6;
      Class<DataTruncation> class7 = DataTruncation.class;
      classArray0[7] = class7;
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("CLa.<?]#a>o", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      predicateArray0[1] = (Predicate<Object>) transformerPredicate0;
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(transformerPredicate0, predicate0);
      IteratorUtils.find((Iterator<Vector<LinkedHashSet>>) resettableListIterator0, (Predicate<? super Vector<LinkedHashSet>>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      SingletonListIterator<IIOMetadataNode> singletonListIterator1 = new SingletonListIterator<IIOMetadataNode>((IIOMetadataNode) null);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) singletonListIterator1, (Iterator<?>) singletonListIterator0);
      IteratorUtils.get((Iterator<Object>) zippingIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("y");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ListIterator<ArrayList<Object>> listIterator0 = IteratorUtils.singletonListIterator(arrayList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      IteratorUtils.find((Iterator<ArrayList<Object>>) listIterator0, (Predicate<? super ArrayList<Object>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) singletonListIterator0, (Iterator<?>) singletonListIterator0);
      IteratorUtils.get((Iterator<Object>) zippingIterator0, 0);
      ListIterator<Closure<SQLException>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<Closure<SQLException>>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-934), false, true, (-934), 125);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Iterator<Object> iterator1 = IteratorUtils.objectGraphIterator((Object) "", (Transformer<? super Object, ?>) transformer0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super Object>) predicate0);
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedIterator0, class0);
      Iterator<SQLException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0);
      IteratorUtils.toString(iterator2);
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLDataException> class1 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableIterator0, class1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) objectArrayListIterator0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) objectArrayListIterator0, 1654);
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(list0);
      InvokerTransformer.invokerTransformer("");
      ExceptionTransformer.exceptionTransformer();
      OrderedMapIterator<SQLNonTransientConnectionException, StringTokenizer> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, StringTokenizer> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, StringTokenizer>(orderedMapIterator1);
      OrderedMapIterator<SQLNonTransientConnectionException, StringTokenizer> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends StringTokenizer>) abstractOrderedMapIteratorDecorator1);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator2);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException0;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 8);
      Iterable<SQLNonTransientConnectionException> iterable0 = new Vector<SQLNonTransientConnectionException>(8, 8);
      ListIteratorWrapper<SQLNonTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientException>(resettableListIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) listIteratorWrapper0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("fHI_nKY{v{$Wj");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      ExceptionTransformer.exceptionTransformer();
      predicateArray0[1] = predicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[3] = (Predicate<Object>) uniquePredicate0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fHI_nKY{v{Wj", sQLRecoverableException0);
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0);
      predicateArray0[4] = predicate1;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[5] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      predicateArray0[6] = predicate2;
      Predicate<Object> predicate3 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate3, predicate2);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super StringTokenizer>) orPredicate0);
      SQLDataException sQLDataException0 = new SQLDataException("fHI_nKY{v{$Wj", "", sQLRecoverableException0);
      SQLDataException sQLDataException1 = new SQLDataException("", sQLDataException0);
      IteratorUtils.matchesAny((Iterator<Object>) null, (Predicate<? super Object>) orPredicate0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>> hashtable0 = new Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>>();
      hashtable0.keys();
      Enumeration<DataTruncation> enumeration0 = hashtable0.keys();
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 1711);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", 724, sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, (-651), (-1302), sQLWarning0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      Iterator<Object> iterator1 = IteratorUtils.objectGraphIterator((Object) sQLNonTransientConnectionException0, (Transformer<? super Object, ?>) transformer0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super Object>) predicate0);
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ConstantTransformer.nullTransformer();
      ArrayList<TreeSet<Locale.Category>> arrayList0 = new ArrayList<TreeSet<Locale.Category>>();
      ReverseListIterator<TreeSet<Locale.Category>> reverseListIterator0 = new ReverseListIterator<TreeSet<Locale.Category>>(arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<TreeSet<Locale.Category>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("y");
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) "rqFuq");
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.emptyListIterator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(linkedList0);
      IteratorUtils.contains((Iterator<DataTruncation>) reverseListIterator0, (Object) reverseListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Predicate<Object>[]) null, 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (-693L), (-693L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("fHI_nKY{v{$Wj");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      ExceptionTransformer.exceptionTransformer();
      predicateArray0[1] = predicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      predicateArray0[3] = predicate1;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fHI_nKY{v{$Wj", sQLRecoverableException0);
      Predicate<Object> predicate2 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0);
      predicateArray0[4] = predicate2;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[5] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate3 = OrPredicate.orPredicate((Predicate<? super Object>) predicate2, (Predicate<? super Object>) predicate0);
      predicateArray0[6] = predicate3;
      Predicate<Object> predicate4 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate4, predicate3);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super StringTokenizer>) orPredicate0);
      SQLDataException sQLDataException0 = new SQLDataException("fHI_nKY{v{$Wj", "", sQLRecoverableException0);
      SQLDataException sQLDataException1 = new SQLDataException("fHI_nKY{v{$Wj", "", sQLRecoverableException0);
      SQLDataException sQLDataException2 = new SQLDataException((String) null, sQLDataException1);
      IteratorUtils.matchesAny((Iterator<Object>) null, (Predicate<? super Object>) orPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(vector0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) loopingListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("4`@-:*w ");
      SQLDataException sQLDataException0 = new SQLDataException("4`@-:*w ", "4`@-:*w ", 2306, sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(2306, false, false, (-1), (-1), sQLDataException0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLDataException0, (Transformer<? super Object, ?>) transformer0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super Object>) predicate0);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NOPTransformer.nopTransformer();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ListIterator<ArrayList<Object>> listIterator0 = IteratorUtils.singletonListIterator(arrayList0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<ArrayList<Object>>) listIterator0, (Predicate<? super ArrayList<Object>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("y");
      MockThrowable mockThrowable0 = new MockThrowable("rqFuq");
      mockThrowable0.getLocalizedMessage();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator("rqFuq");
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("4`@-:*w ");
      SQLDataException sQLDataException0 = new SQLDataException("4`@-:*w ", "4`@-:*w ", 2306, sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(2306, false, false, (-1), (-1), sQLDataException0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLDataException0, (Transformer<? super Object, ?>) transformer0);
      IteratorUtils.size(iterator0);
      OrderedMapIterator<StringTokenizer, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("4`@-:*w ", "4`@-:*w ");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("", "4`@-:*w ", (-1));
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("4`@-:*w ", "7:B7Uuts8poj=LX^Iz", 91);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException(sQLTimeoutException4);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) objectArrayListIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) hashSet0);
      Transformer<SQLException, Integer> transformer1 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) iterator1, (Transformer<? super SQLTransientException, ? extends Integer>) transformer1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) singletonListIterator0, (Iterator<?>) singletonListIterator0);
      IIOMetadataNode iIOMetadataNode1 = (IIOMetadataNode)IteratorUtils.get((Iterator<Object>) zippingIterator0, 0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0, class0);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) singletonListIterator0, (Iterator<?>) singletonListIterator0);
      IteratorUtils.get((Iterator<Object>) zippingIterator0, 0);
      OrderedMapIterator<Properties, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, IIOMetadataNode>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Object>) zippingIterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) orderedIterator0, (Iterator<?>) orderedIterator0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator1 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      SingletonListIterator<IIOMetadataNode> singletonListIterator2 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.zippingIterator((Iterator<?>) orderedIterator0, (Iterator<?>) orderedIterator0);
      IteratorUtils.size(zippingIterator0);
      OrderedMapIterator<StringTokenizer, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MockThrowable mockThrowable0 = new MockThrowable();
      String string0 = "";
      String string1 = "~Kb";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("~Kb", mockThrowable0);
      mockThrowable0.getLocalizedMessage();
      int int0 = 4933;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("lGs C", "", 4933);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("NodeList must not be null", "", 4933, sQLTransactionRollbackException0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) null);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = arrayDeque0.iterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "", (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) objectArrayListIterator0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) objectArrayListIterator0, 1654);
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(list0);
      InvokerTransformer.invokerTransformer(", ");
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) listIterator0, (Transformer<? super SQLTimeoutException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      IteratorUtils.zippingIterator((Iterator<? extends String>) singletonListIterator0, (Iterator<? extends String>) singletonListIterator0, (Iterator<? extends String>) singletonListIterator0);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      IteratorUtils.zippingIterator((Iterator<? extends String>) singletonListIterator0, (Iterator<? extends String>) singletonListIterator0, (Iterator<? extends String>) singletonListIterator0);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("rqFuq", false);
      NOPTransformer.nopTransformer();
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[");
      arrayList0.add(iIOMetadataNode0);
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Hashtable<Class<Boolean>, SQLWarning> hashtable0 = new Hashtable<Class<Boolean>, SQLWarning>();
      EntrySetMapIterator<Class<Boolean>, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<Class<Boolean>, SQLWarning>(hashtable0);
      MapIterator<Class<Boolean>, SQLWarning> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Class<Boolean>, SQLWarning>) entrySetMapIterator0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      IteratorUtils.matchesAll((Iterator<Class<Boolean>>) mapIterator0, (Predicate<? super Class<Boolean>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>> hashtable0 = new Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>>();
      Enumeration<DataTruncation> enumeration0 = hashtable0.keys();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)6;
      byte byte0 = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0, (Collection<? super SQLWarning>) linkedList0);
      Object object0 = new Object();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(object0);
      Hashtable<Properties, Locale.Category> hashtable1 = new Hashtable<Properties, Locale.Category>(407, 733.4F);
      IdentityPredicate.identityPredicate(hashtable1);
      IteratorUtils.contains(iterator0, (Object) identityPredicate0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object[]) null, (int) 6, (int)  (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Hashtable<SQLDataException, String> hashtable0 = new Hashtable<SQLDataException, String>();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("fHI_nKY{v{$Wj");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      ExceptionTransformer.exceptionTransformer();
      predicateArray0[1] = predicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      predicateArray0[3] = predicate1;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fHI_nKY{v{$Wj", sQLRecoverableException0);
      Predicate<Object> predicate2 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0);
      predicateArray0[4] = predicate2;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[5] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate3 = OrPredicate.orPredicate((Predicate<? super Object>) predicate2, (Predicate<? super Object>) predicate0);
      predicateArray0[6] = predicate3;
      Predicate<Object> predicate4 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate5 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate4);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      uniquePredicate0.evaluate(sQLTransientConnectionException0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate5, predicate3);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super StringTokenizer>) orPredicate0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      SQLDataException sQLDataException0 = new SQLDataException("fHI_nKY{v{$Wj", "", sQLRecoverableException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      ExceptionPredicate.exceptionPredicate();
      OrderedMapIterator<ArrayList<Object>, LinkedList<ArrayDeque>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.find((Iterator<ArrayList<Object>>) orderedMapIterator0, (Predicate<? super ArrayList<Object>>) predicate1);
      TreeSet<Integer>[] treeSetArray0 = (TreeSet<Integer>[]) Array.newInstance(TreeSet.class, 8);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      treeSetArray0[0] = treeSet0;
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>();
      treeSetArray0[1] = treeSet1;
      TreeSet<Integer> treeSet2 = new TreeSet<Integer>();
      treeSetArray0[2] = treeSet2;
      TreeSet<Integer> treeSet3 = new TreeSet<Integer>();
      treeSetArray0[3] = treeSet3;
      TreeSet<Integer> treeSet4 = new TreeSet<Integer>();
      treeSetArray0[4] = treeSet4;
      TreeSet<Integer> treeSet5 = new TreeSet<Integer>();
      treeSetArray0[5] = treeSet5;
      TreeSet<Integer> treeSet6 = new TreeSet<Integer>();
      treeSetArray0[6] = treeSet6;
      TreeSet<Integer> treeSet7 = new TreeSet<Integer>((SortedSet<Integer>) treeSet1);
      treeSetArray0[7] = treeSet7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(treeSetArray0, 399, 399);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("4`@-:*w ");
      SQLDataException sQLDataException0 = new SQLDataException("4`@-:*w ", "4`@-:*w ", 2306, sQLNonTransientConnectionException0);
      OrderedIterator<EnumSet<Locale.Category>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.Category>>) orderedIterator0, (-2905L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.size((Iterator<?>) null);
      Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>> hashtable0 = new Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>>();
      Enumeration<DataTruncation> enumeration0 = hashtable0.keys();
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockThrowable0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "", mockThrowable0);
      SQLDataException sQLDataException1 = new SQLDataException((String) null, mockThrowable0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      SQLDataException sQLDataException2 = new SQLDataException("", sQLTimeoutException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0, 0, 0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) objectArrayIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLDataException>) objectArrayIterator0, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("fHI_nKY{v{$Wj");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) null);
      UniquePredicate.uniquePredicate();
      IteratorUtils.toArray(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) singletonListIterator0, (Iterator<?>) iterator0);
      IteratorUtils.get((Iterator<Object>) zippingIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.size((Iterator<?>) null);
      Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>> hashtable0 = new Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>>();
      hashtable0.keys();
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "F.HvJ`{+ Sk";
      stringArray0[2] = null;
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsFalsePredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 3);
      MapIterator<String, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<String, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLException>(mapIterator0);
      iteratorArray0[0] = (Iterator<String>) abstractMapIteratorDecorator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends String>) iteratorArray0[1]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLDataException>) orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      IteratorUtils.zippingIterator((Iterator<? extends String>) singletonListIterator0, (Iterator<? extends String>) singletonListIterator0, (Iterator<? extends String>) singletonListIterator0);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("rqFuq", false);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "NodeList must not be null";
      stringArray0[1] = "-kVGQMSSa9#D^6";
      stringArray0[2] = "";
      stringArray0[3] = "rqFuq";
      stringArray0[4] = "";
      stringArray0[5] = "rqFuq";
      MockThrowable mockThrowable0 = new MockThrowable("rqFuq");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("rqFuq", mockThrowable0);
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      ReverseListIterator<SQLWarning> reverseListIterator0 = new ReverseListIterator<SQLWarning>(vector0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "rqFuq", (-934), sQLTimeoutException0);
      IteratorUtils.contains((Iterator<SQLWarning>) reverseListIterator0, (Object) sQLSyntaxErrorException0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) zippingIterator0;
      MapIterator<SQLInvalidAuthorizationSpecException, Iterator<SQLTimeoutException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, Iterator<SQLTimeoutException>> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLInvalidAuthorizationSpecException, ? extends Iterator<SQLTimeoutException>>) mapIterator0);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) mapIterator1;
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = treeSet0.descendingIterator();
      iteratorArray0[2] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = arrayDeque0.iterator();
      IteratorUtils.toString(iterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "`lB!k", "Collection must not be null", "|d|0/");
      LinkedList<LinkedList<Properties>> linkedList0 = new LinkedList<LinkedList<Properties>>();
      ArrayList<Object>[] arrayListArray0 = (ArrayList<Object>[]) Array.newInstance(ArrayList.class, 0);
      OrderedMapIterator<SQLDataException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLDataException>) orderedMapIterator0, (Predicate<? super SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      int int0 = new Integer(0);
      Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>> hashtable0 = new Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>>();
      Enumeration<DataTruncation> enumeration0 = hashtable0.keys();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      DataTruncation dataTruncation0 = new DataTruncation(10, false, false, 91, 18, sQLRecoverableException0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      IteratorUtils.objectGraphIterator((Object) enumeration0, (Transformer<? super Object, ?>) transformer0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.matchesAny((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLDataException sQLDataException0 = new SQLDataException("", "", 2306, sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(2306, false, false, (-1), (-1), sQLDataException0);
      ConstantTransformer.constantTransformer(dataTruncation0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) singletonListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 123);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 122
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLDataException sQLDataException0 = new SQLDataException("", "", 2306, sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(2306, false, false, (-1), (-1), sQLDataException0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      IteratorUtils.objectGraphIterator((Object) sQLDataException0, (Transformer<? super Object, ?>) transformer0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Integer>(orderedMapIterator0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends Integer>) abstractOrderedMapIteratorDecorator0);
      MapIterator<SQLInvalidAuthorizationSpecException, Integer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLInvalidAuthorizationSpecException, ? extends Integer>) orderedMapIterator1);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.size((Iterator<?>) null);
      Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>> hashtable0 = new Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>>();
      Enumeration<DataTruncation> enumeration0 = hashtable0.keys();
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockThrowable0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, (String) null, 3);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException1;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) objectArrayListIterator0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) listIterator0, 3);
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(list0);
      // Undeclared exception!
//      try { 
        InvokerTransformer.invokerTransformer((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The method to invoke must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<SQLTransientConnectionException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, SQLFeatureNotSupportedException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<SQLTransientConnectionException, SQLFeatureNotSupportedException> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends SQLFeatureNotSupportedException>) mapIterator1);
      AbstractMapIteratorDecorator<SQLTransientConnectionException, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, SQLFeatureNotSupportedException>(mapIterator2);
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 2);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      classArray0[1] = class1;
      Transformer<SQLTransientConnectionException, SQLNonTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("?${*'Vt", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) abstractMapIteratorDecorator0, (Transformer<? super SQLTransientConnectionException, ? extends SQLNonTransientConnectionException>) transformer0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, 1L);
      IteratorUtils.toArray((Iterator<?>) abstractMapIteratorDecorator0);
      MapIterator<SQLInvalidAuthorizationSpecException, Integer> mapIterator3 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Object, Integer> mapIterator4 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<?, ? extends Integer>) mapIterator3);
      IteratorUtils.unmodifiableMapIterator(mapIterator4);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.size((Iterator<?>) null);
      Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>> hashtable0 = new Hashtable<DataTruncation, PriorityQueue<SQLNonTransientException>>();
      Enumeration<DataTruncation> enumeration0 = hashtable0.keys();
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, mockThrowable0);
      IteratorUtils.contains(iterator0, (Object) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.contains((Iterator<Vector<Hashtable>>) resettableIterator0, (Object) resettableIterator0);
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, BatchUpdateException>(orderedMapIterator0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLDataException>) orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      IteratorUtils.zippingIterator((Iterator<? extends String>) singletonListIterator0, (Iterator<? extends String>) singletonListIterator0, (Iterator<? extends String>) singletonListIterator0);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("rqFuq", false);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "NodeList must not be null";
      stringArray0[1] = "-kVGQMSSa9#D^6";
      stringArray0[2] = "";
      stringArray0[3] = "rqFuq";
      stringArray0[4] = "";
      stringArray0[5] = "rqFuq";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 0);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) objectArrayListIterator0, (Predicate<? super String>) nullIsExceptionPredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) iteratorArray0);
      IteratorUtils.asEnumeration((Iterator<? extends String>) singletonIterator0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Cannot use setValue() when the object being set is already in the map", "", (-1079));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstantiateFactory<SQLInvalidAuthorizationSpecException> instantiateFactory0 = new InstantiateFactory<SQLInvalidAuthorizationSpecException>(class0);
      FactoryTransformer.factoryTransformer((Factory<? extends SQLInvalidAuthorizationSpecException>) instantiateFactory0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLInvalidAuthorizationSpecException3);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Cannot use setValue() when the object being set is already in the map", "]=:f`j,rY9PM{U", (-1079));
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("66[z+", "h7Eub,P", sQLInvalidAuthorizationSpecException1);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException(sQLTimeoutException1);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) objectArrayListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) listIterator0, (-934));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLDataException sQLDataException0 = new SQLDataException("", "", 2306, sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(2306, false, false, (-1), (-1), sQLDataException0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLDataException0, (Transformer<? super Object, ?>) transformer0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super Object>) predicate0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("An<(Uy+xSgc=LBKY", "vP'n9CH;qL,z8I9GLt", (-1), hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("An<(Uy+xSgc=LBKY", (String) null, map0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException1, true);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) singletonIterator0, (long) 2306);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Cannot use setValue() when the object being set is already in the map", "", (-1079));
      SQLDataException sQLDataException0 = new SQLDataException("p", "", (-1079), sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1079), false, false, (-1079), (-1), sQLInvalidAuthorizationSpecException0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) orderedMapIterator0, (Transformer<? super Object, ?>) transformer0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super Object>) predicate0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Hashtable<SQLDataException, String> hashtable0 = new Hashtable<SQLDataException, String>();
      NOPTransformer.nopTransformer();
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ListIterator<ArrayList<Object>> listIterator0 = IteratorUtils.singletonListIterator(arrayList0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<ArrayList<Object>>) listIterator0, (Predicate<? super ArrayList<Object>>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Cannot use setValue() when the object being set is already in the map", "", (-1079));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("h7Eub,P", mockThrowable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("<*%,dLEJ7", "K {ylrkc;3_", (-1929), sQLInvalidAuthorizationSpecException1);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator("K {ylrkc;3_");
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "~qBP8)Z7", 3176);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-97), sQLTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "", (-1079));
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("#F0", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("", "", (-1929), sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      Iterator<Locale.Category> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Predicate<? super Locale.Category>) onePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.Category>) iterator0, (Transformer<? super Locale.Category, ? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLDataException>) orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) singletonListIterator0);
      IteratorUtils.get((Iterator<Object>) zippingIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLWarning0.initCause(sQLInvalidAuthorizationSpecException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "", (-1929), sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator1);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.getIterator((Object) null);
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Enumeration must not be null";
      stringArray0[1] = "wgAyWHSkrx[";
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) null);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = arrayDeque0.iterator();
      IteratorUtils.toString(iterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "set() is not supported", "", "");
      LinkedList<LinkedList<Properties>> linkedList0 = new LinkedList<LinkedList<Properties>>();
      ReverseListIterator<LinkedList<Properties>> reverseListIterator0 = new ReverseListIterator<LinkedList<Properties>>(linkedList0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      ListIterator<LinkedList<Properties>> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends LinkedList<Properties>>) reverseListIterator0, (Predicate<? super LinkedList<Properties>>) notPredicate0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator1 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Cannot use setValue() when the object being set is already in the map", "", (-1079));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("h7Eub,P", mockThrowable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("<*%,dLEJ7", "K {ylrkc;3_", (-1929), sQLInvalidAuthorizationSpecException1);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator("K {ylrkc;3_");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[2] = 0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("#F0", sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLInvalidAuthorizationSpecException2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("", "", 1969, sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      OrderedMapIterator<String, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      AbstractMapIteratorDecorator<String, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("fHI_nKY{v{$Wj");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      ExceptionTransformer.exceptionTransformer();
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) stringTokenizer0);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = FalsePredicate.falsePredicate();
      predicateArray0[3] = predicate2;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fHI_nKY{v{$Wj", sQLRecoverableException0);
      Predicate<Object> predicate3 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0);
      predicateArray0[4] = predicate3;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[5] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate4 = OrPredicate.orPredicate((Predicate<? super Object>) predicate3, (Predicate<? super Object>) predicate0);
      predicateArray0[6] = predicate4;
      Predicate<Object> predicate5 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate6 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate5);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate6, predicate4);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super StringTokenizer>) orPredicate0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      SQLDataException sQLDataException0 = new SQLDataException("fHI_nKY{v{$Wj", "", sQLRecoverableException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      int int0 = 0;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0, 0, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("jiTSYJ4>W ");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.nodeListIterator(nodeList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, 5893);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      OrderedMapIterator<String, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<String, SQLIntegrityConstraintViolationException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      AbstractMapIteratorDecorator<String, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLIntegrityConstraintViolationException>(mapIterator0);
      MapIterator<String, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<ArrayDeque<StringTokenizer>, Hashtable<HashSet, SQLRecoverableException>>) mapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      Hashtable<SQLDataException, String> hashtable0 = new Hashtable<SQLDataException, String>();
      EntrySetMapIterator<SQLDataException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, String>(hashtable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(", ", ", ", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      sQLInvalidAuthorizationSpecException0.spliterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 100, (-1553));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyOrderedIterator.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("^zs", "Iterator must not be null");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(", Size: ", "8)]K]y:o^C3S", 1);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("^zs", ", Size: ", 5893);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("Iterator must not be null", "Iterator must not be null");
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(", Size: ", "");
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException4;
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException4;
      IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 1);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      Vector<Object> vector0 = new Vector<Object>();
      linkedHashSet0.containsAll(vector0);
      ResettableIterator<SQLClientInfoException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedHashSet0);
      IteratorUtils.isEmpty(resettableIterator1);
      IteratorUtils.isEmpty(resettableIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("&c|=B2IOl");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      int int0 = 1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("LT?AD13", "", 1, sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Boolean>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "The current criterion '";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("#yCSPoUF<(", "The current criterion '");
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLInvalidAuthorizationSpecException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException("#yCSPoUF<(", "W", 1, sQLInvalidAuthorizationSpecException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("#yCSPoUF<(", "#yCSPoUF<(", 1);
      sQLDataExceptionArray0[1] = sQLDataException1;
      String string1 = "TmO#kE8@g/~";
      SQLDataException sQLDataException2 = new SQLDataException("TmO#kE8@g/~", sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0, 1);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) objectArrayListIterator0);
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) listIterator0);
      IteratorUtils.toString((Iterator<SQLDataException>) listIterator1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Predicate<Class<StringTokenizer>> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Class<StringTokenizer>>) nullIsFalsePredicate0);
      int int0 = 11;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) predicate1, 11);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = arrayDeque0.iterator();
      IteratorUtils.toString(iterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "`lB!k", "Collection must not be null", "|d|0/");
      LinkedList<LinkedList<Properties>> linkedList0 = new LinkedList<LinkedList<Properties>>();
      ReverseListIterator<LinkedList<Properties>> reverseListIterator0 = new ReverseListIterator<LinkedList<Properties>>(linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedList<Properties>>) reverseListIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLDataException>) orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) singletonListIterator0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(locale_CategoryArray0, 530);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = arrayDeque0.iterator();
      IteratorUtils.toString(iterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "Collection must not be null", "", "Collection must not be null");
      LinkedList<LinkedList<Properties>> linkedList0 = new LinkedList<LinkedList<Properties>>();
      ReverseListIterator<LinkedList<Properties>> reverseListIterator0 = new ReverseListIterator<LinkedList<Properties>>(linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedList<Properties>>) reverseListIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "~qBP8)Z7", 3176);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-97), sQLTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "", (-1079));
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("#F0", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("", "", (-1929), sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Iterator must not be null", "Index ", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException1.getStackTrace();
      sQLInvalidAuthorizationSpecException1.getLocalizedMessage();
      sQLInvalidAuthorizationSpecException1.getLocalizedMessage();
      sQLInvalidAuthorizationSpecException1.spliterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException1, (-2311), (-2311));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "Iterator must not be null";
      String string1 = "Index ";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Iterator must not be null", "Index ", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException1.getStackTrace();
      sQLInvalidAuthorizationSpecException1.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException1.getLocalizedMessage();
      sQLInvalidAuthorizationSpecException1.getLocalizedMessage();
      sQLInvalidAuthorizationSpecException1.spliterator();
      int int0 = (-2311);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException1, (-2311), (-2311));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("fHI_nKY{v{$Wj");
      IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      ExceptionTransformer.exceptionTransformer();
      predicateArray0[1] = predicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = arrayDeque0.iterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "", "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", "");
      LinkedList<LinkedList<Properties>> linkedList0 = new LinkedList<LinkedList<Properties>>();
      LinkedList<LinkedList<Properties>> linkedList1 = new LinkedList<LinkedList<Properties>>();
      ReverseListIterator<LinkedList<Properties>> reverseListIterator0 = new ReverseListIterator<LinkedList<Properties>>(linkedList0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends LinkedList<Properties>>) reverseListIterator0, (Predicate<? super LinkedList<Properties>>) predicate0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedList<Properties>>) reverseListIterator0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Cannot use setValue() when the object being set is already in the map", "", (-1079));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("h7Eub,P", mockThrowable0);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<SQLNonTransientException, String> factoryTransformer0 = new FactoryTransformer<SQLNonTransientException, String>(instantiateFactory0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, String>) factoryTransformer0, "", "K {ylrkc;3_", "03");
      LinkedList<LinkedList<Properties>> linkedList0 = new LinkedList<LinkedList<Properties>>();
      ReverseListIterator<LinkedList<Properties>> reverseListIterator0 = new ReverseListIterator<LinkedList<Properties>>(linkedList0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends LinkedList<Properties>>) reverseListIterator0, (Predicate<? super LinkedList<Properties>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 5);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Enumeration must not be null";
      stringArray0[1] = "wgAyWHSkrx[";
      stringArray0[3] = "rqFuq";
      stringArray0[4] = "";
      stringArray0[5] = "NodeList must not be null";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0, 0);
      iteratorArray0[0] = (Iterator<String>) resettableListIterator0;
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableListIterator0, (Iterator<? extends String>) iteratorArray0[0], (Iterator<? extends String>) iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<String>) zippingIterator0;
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("rqFuq", false);
      iteratorArray0[3] = (Iterator<String>) singletonIterator0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) nullIsExceptionPredicate0);
      iteratorArray0[4] = (Iterator<String>) listIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientException, SQLException> abstractOrderedMapIteratorDecorator0 = null;
//      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientException, SQLException>((OrderedMapIterator<SQLTransientException, SQLException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // OrderedMapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NodeList nodeList0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 7);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0;
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = arrayDeque0.iterator();
      iteratorArray0[1] = iterator0;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) arrayDeque0);
      iteratorArray0[2] = (Iterator<SQLIntegrityConstraintViolationException>) resettableIterator1;
      OrderedMapIterator<SQLIntegrityConstraintViolationException, Hashtable<SQLNonTransientConnectionException, ServiceLoader>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[3] = (Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator0;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-1), sQLTransactionRollbackException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("]", sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", (-2491), sQLTransactionRollbackException1);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      int int0 = 2;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "", 2, sQLSyntaxErrorException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("]", "", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      iteratorArray0[4] = (Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.Category>) null, (Transformer<? super Locale.Category, ? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 123, 3126);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = null;
      int int0 = 123;
      int int1 = 3148;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 123, 3148);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "~qBP8)Z7", 3176);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-97), sQLTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "", (-1079));
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("jc?S/CMnb", "~qBP8)Z7");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException1, 3176, 2449);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      String string0 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      ArrayIterator<BatchUpdateException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<BatchUpdateException>(sQLNonTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("4`@-:*w ");
      Hashtable<SQLDataException, String> hashtable0 = new Hashtable<SQLDataException, String>();
      EntrySetMapIterator<SQLDataException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, String>(hashtable0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("4`@-:*w ");
      IteratorUtils.toString((Iterator<HashSet<EnumSet>>) entrySetMapIterator0, (Transformer<? super HashSet<EnumSet>, String>) transformer0, "4`@-:*w ", "", "");
      ArrayList<TreeSet<Locale.Category>> arrayList0 = new ArrayList<TreeSet<Locale.Category>>();
      ReverseListIterator<TreeSet<Locale.Category>> reverseListIterator0 = new ReverseListIterator<TreeSet<Locale.Category>>(arrayList0);
      IteratorUtils.unmodifiableIterator((Iterator<TreeSet<Locale.Category>>) reverseListIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("^t05Bxx2EW+", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.AnyPredicate", "org.apache.commons.collections4.functors.FalsePredicate", 600);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "org.apache.commons.collections4.functors.AnyPredicate", 600);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("/'dL4i&)_|a~", "/'dL4i&)_|a~");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("remove() method not supported for a NodeListIterator.", sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, 3);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>) iterator0, (Iterator<? extends SQLTransientException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Cannot store a duplicate key (\"", "", 0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 0;
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 9);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) zippingIterator0;
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0, 0);
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) objectArrayIterator0;
      int int1 = (-783);
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0, (-783));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 5);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Enumeration must not be null";
      stringArray0[1] = "wgAyWHSkrx[";
      stringArray0[2] = "' cannot be accessed";
      stringArray0[3] = "rqFuq";
      stringArray0[4] = "";
      stringArray0[5] = "NodeList must not be null";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0, 0);
      iteratorArray0[0] = (Iterator<String>) resettableListIterator0;
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableListIterator0, (Iterator<? extends String>) iteratorArray0[0], (Iterator<? extends String>) iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<String>) zippingIterator0;
      ArrayIterator<String> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<String>((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      OrderedMapIterator<String, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<String, SQLIntegrityConstraintViolationException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      AbstractMapIteratorDecorator<String, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLIntegrityConstraintViolationException>(mapIterator0);
      MapIterator<String, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<ArrayDeque<StringTokenizer>, Hashtable<HashSet, SQLRecoverableException>>) mapIterator1);
      int int0 = 5053;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 5053);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.contains((Iterator<Vector<Hashtable>>) resettableIterator0, (Object) resettableIterator0);
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, BatchUpdateException>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        abstractOrderedMapIteratorDecorator0.remove();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Iterator contains no elements
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "~qBP8)Z7", 3176);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-97), sQLTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "", (-1079));
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("#F0", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("", "", (-1929), sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLDataException>) orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 0, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Cannot use setValue() when the object being set is already in the map", "Cannot use setValue() when the object being set is already in the map", 0, batchUpdateException0);
      IteratorUtils.getIterator(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      Hashtable<SQLDataException, String> hashtable0 = new Hashtable<SQLDataException, String>();
      EntrySetMapIterator<SQLDataException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, String>(hashtable0);
      AbstractMapIteratorDecorator<SQLDataException, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, String>(entrySetMapIterator0);
      Transformer<SQLDataException, SQLDataException> transformer0 = NOPTransformer.nopTransformer();
      // Undeclared exception!
//      try { 
        TransformedPredicate.transformedPredicate((Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0, (Predicate<? super SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate to call must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Iterator<SQLException> iterator0 = null;
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLException>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "Mx#ls+&1$t&ujr2T";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Mx#ls+&1$t&ujr2T", "Mx#ls+&1$t&ujr2T", 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      IteratorUtils.arrayListIterator(classArray0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[1];
      intArray0[0] = 512;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) resettableIterator0);
      IteratorUtils.skippingIterator(iterator0, 0L);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ExceptionClosure invoked", "", batchUpdateException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("org.apache.commons.collections4.iterators.LoopingListIterator", "", 512, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("org.apache.commons.collections4.iterators.LoopingListIterator", "", 44);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 44, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      SQLTransientException sQLTransientException0 = new SQLTransientException("+J3t", "+J3t", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("+J3t", "+J3t", sQLTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(582, true, true, 1386, 0, sQLInvalidAuthorizationSpecException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-82), true, true, (-1847), (-3459));
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-1000), true, true, 14, 263);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-2655), true, false, 0, 582, dataTruncation1);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-1000), false, true, (-2835), (-2655));
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-691), true, false, 0, (-2655));
      dataTruncationArray0[5] = dataTruncation5;
      SQLDataException sQLDataException0 = new SQLDataException("+J3t", sQLTransientException0);
      DataTruncation dataTruncation6 = new DataTruncation((-1683), true, true, (-1847), (-1683), sQLDataException0);
      dataTruncationArray0[6] = dataTruncation6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 3442);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Offset parameter must not be negative.");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      sQLTransientConnectionException0.getLocalizedMessage();
      sQLTransientConnectionException0.spliterator();
      IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) null);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "fHI_nKY{v{$Wj";
      StringTokenizer stringTokenizer0 = new StringTokenizer("fHI_nKY{v{$Wj");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = EqualPredicate.equalPredicate((Object) stringTokenizer0);
      predicateArray0[2] = predicate2;
      Predicate<Object> predicate3 = FalsePredicate.falsePredicate();
      predicateArray0[3] = predicate3;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fHI_nKY{v{$Wj", sQLRecoverableException0);
      Predicate<Object> predicate4 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0);
      predicateArray0[4] = predicate4;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[5] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate5 = OrPredicate.orPredicate((Predicate<? super Object>) predicate4, (Predicate<? super Object>) predicate0);
      predicateArray0[6] = predicate5;
      Predicate<Object> predicate6 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate7 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate6);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate7, predicate5);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super StringTokenizer>) orPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      int int0 = (-1079);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Cannot use setValue() when the object being set is already in the map", "", (-1079));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) abstractOrderedMapIteratorDecorator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      int int0 = 3176;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "~qBP8)Z7", 3176);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-97), sQLTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "", (-1079));
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("#F0", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("", "", (-1929), sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[1] = predicate1;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate1);
      predicateArray0[2] = (Predicate<Object>) andPredicate0;
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[3] = predicate2;
      // Undeclared exception!
//      try { 
        NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "%'CV|_&76+GsRkG;HV%";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%'CV|_&76+GsRkG;HV%");
      iIOMetadataNode0.getNodeType();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) nodeListIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      String string0 = "]";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("]", "]", 1620, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("]", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1620);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "");
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 31, 31);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Properties[]) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) orderedMapIterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "~qBP8)Z7", 1270);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-97), sQLTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "", (-1079));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("#F0", sQLInvalidAuthorizationSpecExceptionArray0[2]);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("", "", (-1929), sQLInvalidAuthorizationSpecExceptionArray0[2]);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException4);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object[]) sQLInvalidAuthorizationSpecExceptionArray0, (-97), (-97));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) abstractMapIteratorDecorator0);
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 5);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation(2601, true, true, 93, 10);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(10, true, false, 2601, 10);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(2601, false, true, 10, 10);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(31, true, false, 31, 0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(0, false, false, 10, 557);
      dataTruncationArray0[4] = dataTruncation4;
      int int0 = 345;
      DataTruncation dataTruncation5 = new DataTruncation(0, true, false, 345, 2300, dataTruncation1);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(2300, true, true, 6, (-1169), dataTruncation4);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(10, true, false, 104, (-1169), dataTruncation3);
      dataTruncationArray0[7] = dataTruncation7;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      iteratorArray0[0] = (Iterator<DataTruncation>) objectArrayIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-3255), 557);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) sQLWarning0);
      IteratorUtils.skippingIterator((Iterator<SQLException>) listIterator0, 0L);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends EnumSet<Locale.Category>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SingletonListIterator<ArrayDeque<Object>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<Object>>(arrayDeque0);
      int int0 = 169;
      // Undeclared exception!
//      try { 
        arrayDeque0.retainAll((Collection<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      IteratorUtils.singletonIterator((ArrayDeque<HashSet>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "", sQLRecoverableException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 12, sQLSyntaxErrorException1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientException0);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException("");
      sQLTransientExceptionArray0[1] = sQLTransientException1;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransientException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[7];
      SQLWarning sQLWarning0 = new SQLWarning("\"@9R`");
      sQLWarningArray0[0] = sQLWarning0;
      DataTruncation dataTruncation0 = new DataTruncation(1649, false, false, 1649, 0);
      sQLWarningArray0[1] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning1 = new SQLWarning(dataTruncation0);
      sQLWarningArray0[2] = sQLWarning1;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, true, 0, 10, sQLWarning0);
      sQLWarningArray0[3] = (SQLWarning) dataTruncation1;
      SQLWarning sQLWarning2 = new SQLWarning("\"@9R`", "-iGo|E!%$'\"#");
      sQLWarningArray0[4] = sQLWarning2;
      dataTruncation0.getNextWarning();
      sQLWarningArray0[5] = null;
      SQLWarning sQLWarning3 = new SQLWarning("._", "TS'GP", 0, sQLWarning0);
      sQLWarningArray0[6] = sQLWarning3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLWarningArray0, 0, (-583));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Collection<SQLIntegrityConstraintViolationException> collection0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }
}
