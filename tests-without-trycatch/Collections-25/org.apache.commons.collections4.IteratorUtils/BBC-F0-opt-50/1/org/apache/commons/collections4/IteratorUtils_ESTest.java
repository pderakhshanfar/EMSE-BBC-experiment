/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 16:02:52 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedMapIterator<Vector<SQLIntegrityConstraintViolationException>, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) orderedMapIterator0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Object>) listIterator0, (Predicate<? super Object>) transformerPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.getIterator(transformer0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 8);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[2] = class2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      classArray0[3] = class3;
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      classArray0[4] = class4;
      Class<IIOMetadataNode> class5 = IIOMetadataNode.class;
      classArray0[5] = class5;
      Class<IIOMetadataNode> class6 = IIOMetadataNode.class;
      classArray0[6] = class6;
      Class<IIOMetadataNode> class7 = IIOMetadataNode.class;
      classArray0[7] = class7;
      Transformer<SQLException, SQLClientInfoException> transformer1 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.StringValueTransformer", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer1);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      int int0 = 1070;
      DataTruncation dataTruncation0 = new DataTruncation(1070, false, false, 1521, 1070, sQLClientInfoException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(3187, false, true, 1521, 637, sQLClientInfoException0);
      dataTruncationArray0[1] = dataTruncation1;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) objectArrayIterator0, 637);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(list0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<DataTruncation>) loopingListIterator0, (Transformer<? super DataTruncation, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLException sQLException0 = new SQLException("The predicate collection must not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLException0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("iterator");
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.contains(iterator0, (Object) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<?> iterator0 = IteratorUtils.getIterator(transformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, (Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<HashSet<LinkedHashSet>>) iterator0, (Predicate<? super HashSet<LinkedHashSet>>) transformedPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      int[] intArray0 = new int[4];
      intArray0[0] = 1270;
      intArray0[1] = 1270;
      intArray0[2] = 1270;
      intArray0[3] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(batchUpdateException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.CloneTransformer", "Bbm?Q4#J[<", batchUpdateException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "org.apache.commons.collections4.functors.CloneTransformer", 1340);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("Bbm?Q4#J[<", "A.`8", batchUpdateException0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException4);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Stack<HashMap>>) iterator0, 2669);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // You must invoke setComparator() to set a comparator first.
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      MapIterator<LinkedList<SQLTransientException>, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) mapIterator0, (Class<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Predicate must not be null", "i[?fu(vBOM`i\"=", (-1), hashMap0);
      Class<ClientInfoStatus>[] classArray0 = (Class<ClientInfoStatus>[]) Array.newInstance(Class.class, 7);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      classArray0[0] = class0;
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      classArray0[1] = class1;
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      classArray0[2] = class2;
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      classArray0[3] = class3;
      Class<ClientInfoStatus> class4 = ClientInfoStatus.class;
      classArray0[4] = class4;
      Class<ClientInfoStatus> class5 = ClientInfoStatus.class;
      classArray0[5] = class5;
      Class<ClientInfoStatus> class6 = ClientInfoStatus.class;
      classArray0[6] = class6;
      Transformer<SQLException, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("i[?fu(vBOM`i\"=", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, 1L);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'i[?fu(vBOM`i\"=' on 'class java.sql.SQLClientInfoException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.singletonIterator((SQLWarning) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!4~OGTJiv'b.(#");
      Factory<String> factory0 = null;
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      ConstantFactory<SQLInvalidAuthorizationSpecException> constantFactory0 = new ConstantFactory<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      FactoryTransformer.factoryTransformer((Factory<? extends SQLInvalidAuthorizationSpecException>) constantFactory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) resettableIterator0, (Transformer<? super SQLWarning, String>) factoryTransformer0, "Array class must not be null", "", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.getIterator(transformer0);
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) hashSet0);
      hashSet0.add((IIOMetadataNode) null);
      DataTruncation dataTruncation0 = new DataTruncation((-1697), false, false, 1856, 1856, (Throwable) null);
      // Undeclared exception!
      IteratorUtils.contains((Iterator<IIOMetadataNode>) resettableIterator0, (Object) dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.getIterator(transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) listIterator0, 2);
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(list0);
      ListIterator<BatchUpdateException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) listIterator1;
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      Class<Object> class0 = Object.class;
      Hashtable<Integer, Locale.LanguageRange> hashtable0 = new Hashtable<Integer, Locale.LanguageRange>();
      EntrySetMapIterator<Integer, Locale.LanguageRange> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Locale.LanguageRange>(hashtable0);
      MapIterator<Integer, Locale.LanguageRange> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, Locale.LanguageRange>) entrySetMapIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) mapIterator0, (Iterator<? extends Integer>) mapIterator0);
      IteratorUtils.toArray((Iterator<?>) iterator0, class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 1);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class1;
      InvokerTransformer<SQLException, SQLFeatureNotSupportedException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLFeatureNotSupportedException>("", classArray0, classArray0);
      InvokerTransformer.invokerTransformer("1O*5+1AQ#{dd{s#))p");
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) iterator1, 196L, 196L);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("oGBum]Oxw?n", "NcP@d\"sOLd!8!hz", (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("NcP@d\"sOLd!8!hz", sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("oGBum]Oxw?n", sQLSyntaxErrorException0);
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 5);
      Class<SQLWarning> class0 = SQLWarning.class;
      classArray0[0] = class0;
      Class<SQLWarning> class1 = SQLWarning.class;
      classArray0[1] = class1;
      Class<SQLWarning> class2 = SQLWarning.class;
      classArray0[2] = class2;
      Class<SQLWarning> class3 = SQLWarning.class;
      classArray0[3] = class3;
      Class<SQLWarning> class4 = SQLWarning.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, SQLFeatureNotSupportedException> invokerTransformer0 = new InvokerTransformer<Object, SQLFeatureNotSupportedException>("oGBum]Oxw?n", classArray0, classArray0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) invokerTransformer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "<Qndh)w$|J>C?", "", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'oGBum]Oxw?n' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.put("Bq>;%IE{-k*N'^v", clientInfoStatus0);
      SQLWarning sQLWarning0 = new SQLWarning("Bq>;%IE{-k*N'^v", "j?!E", sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("j?!E", "Bq>;%IE{-k*N'^v", 2, hashtable0, sQLWarning0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Bq>;%IE{-k*N'^v", map0, sQLClientInfoException0);
      IteratorUtils.singletonListIterator(sQLClientInfoException1);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0, 2, 2);
      List<Locale.Category> list0 = IteratorUtils.toList((Iterator<? extends Locale.Category>) resettableIterator0, 2);
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.loopingIterator((Collection<?>) list0);
      IteratorUtils.skippingIterator((Iterator<Object>) resettableIterator1, 1L);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 40);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLTimeoutException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "dc*=7S6~X:");
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.getLocalizedMessage();
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLTransientConnectionException0, comparator0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      IteratorUtils.singletonListIterator(linkedList0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 3164);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "i28(2,ZHo@g", sQLInvalidAuthorizationSpecException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLFeatureNotSupportedException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLRecoverableException>) singletonIterator0, (Closure<? super SQLRecoverableException>) chainedClosure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>((SQLRecoverableException) null);
      IteratorUtils.get((Iterator<SQLRecoverableException>) singletonListIterator0, 0);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      linkedList0.add(iIOMetadataNode0);
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(linkedList0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<IIOMetadataNode>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Boolean>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MapIterator<LinkedList<SQLTransientException>, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLException sQLException0 = new SQLException("`@]sBZ a~L{&+%");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "`@]sBZ a~L{&+%", (-4493), sQLException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractReferenceMap", "");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", "`@]sBZ a~L{&+%", (-4493), sQLIntegrityConstraintViolationException0);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractReferenceMap", "", sQLException0);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("`@]sBZ a~L{&+%", (String) null);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, (-4493));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      IteratorUtils.get((Iterator<SQLRecoverableException>) singletonListIterator0, 0);
      MapIterator<SQLNonTransientException, Vector<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "N", 512, batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation(20, false, false, 1, 512);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Iterator<ClientInfoStatus> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super ClientInfoStatus, String>) null, "", "org.apache.commons.collections4.FluentIterable", ":Q<{q");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      EmptyIterator.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ExceptionClosure.exceptionClosure();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      String string0 = null;
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 2);
      OrderedIterator<ClientInfoStatus> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      IteratorUtils.getIterator("");
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("tehInw2", "tehInw2", 3142);
      Transformer<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("n(GPB]", (Class<?>[]) null, (Object[]) null);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.contains(iterator0, (Object) "tehInw2");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'n(GPB]' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      ExceptionClosure.exceptionClosure();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Object> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) singletonListIterator0, (Iterator<?>) singletonListIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "06K^]\"");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(clientInfoStatus0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("L/V~X]*7`x*", "XI&3", 40);
      DefaultEquator<SQLInvalidAuthorizationSpecException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(sQLInvalidAuthorizationSpecException0, (Equator<SQLInvalidAuthorizationSpecException>) defaultEquator0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super Object>) equalPredicate0);
      IteratorUtils.unmodifiableIterator((Iterator<HashMap<PriorityQueue, BatchUpdateException>>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) singletonListIterator0, (Transformer<? super ClientInfoStatus, String>) transformer0, "LZ>[NKAO0dM:", (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      String string0 = "H[4ti&R%|OV`(|";
      InvokerTransformer.invokerTransformer("H[4ti&R%|OV`(|");
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, ? extends ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException("Y", "M<)Zg+*");
      ConstantFactory<SQLDataException> constantFactory0 = new ConstantFactory<SQLDataException>(sQLDataException0);
      ConstantTransformer<Closure<Object>, SQLDataException> constantTransformer0 = new ConstantTransformer<Closure<Object>, SQLDataException>(sQLDataException0);
      MapIterator<Closure<Object>, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Closure<Object>>) mapIterator0, (Iterator<? extends Closure<Object>>) mapIterator0, (Iterator<? extends Closure<Object>>) mapIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("M<)Zg+*", "M<)Zg+*", (-1361), hashMap0);
      DefaultEquator<SQLClientInfoException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLClientInfoException> equalPredicate0 = new EqualPredicate<SQLClientInfoException>(sQLClientInfoException0, defaultEquator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) equalPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, false);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonIterator0, 32);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      IteratorUtils.getIterator(enumeration0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", (-1933), sQLFeatureNotSupportedException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      ExceptionClosure.exceptionClosure();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Object> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, iterator0, (Iterator<?>) orderedIterator0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator1);
      IteratorUtils.matchesAll(iterator1, (Predicate<? super Object>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("LT/b81yp", "hZUNLEb,f.~a7WYW");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("D.oIY\"LeWx-?ANW4", "D.oIY\"LeWx-?ANW4", 46, sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator(sQLTransientConnectionException0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      // Undeclared exception!
//      try { 
        priorityQueue0.remove();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractQueue", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(":}H-DlE),SPK|2?*", ":}H-DlE),SPK|2?*");
      sQLNonTransientException0.printStackTrace();
      IteratorUtils.getIterator(sQLNonTransientException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((PriorityQueue<Object>[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) orderedIterator0);
      IteratorUtils.getIterator(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      String string0 = "H[ti&R%|OV`(|";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Transformer<SQLTransientConnectionException, String> transformer0 = InvokerTransformer.invokerTransformer("H[ti&R%|OV`(|");
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends Boolean>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("~?w#:*Xc.Vt;z/'", "org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", 2675);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("i#7{&", "i#7{&", sQLNonTransientException0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("~?w#:*Xc.Vt;z/'", sQLNonTransientException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      InvokerTransformer.invokerTransformer("");
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) listIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0);
      OrderedMapIterator<EnumSet<Locale.Category>, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.contains((Iterator<Locale.Category>) resettableIterator0, (Object) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterable<SQLDataException> iterable0 = new LinkedHashSet<SQLDataException>();
      ExceptionClosure.exceptionClosure();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.contains((Iterator<Stack<Properties>>) null, (Object) iterable0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<SQLTransientConnectionException, String> transformer0 = InvokerTransformer.invokerTransformer("H[ti&R%|OV`(|");
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, 488, 488);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyIterator();
      ListIterator<Closure<Object>> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException("z}", "Y");
      ConstantFactory<SQLDataException> constantFactory0 = new ConstantFactory<SQLDataException>(sQLDataException0);
      ConstantTransformer<Closure<Object>, SQLDataException> constantTransformer0 = new ConstantTransformer<Closure<Object>, SQLDataException>(sQLDataException0);
      IteratorUtils.transformedIterator((Iterator<? extends Closure<Object>>) listIterator0, (Transformer<? super Closure<Object>, ? extends SQLDataException>) constantTransformer0);
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer0);
      ExceptionClosure.exceptionClosure();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Object> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, iterator0, iterator0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator1);
      IteratorUtils.matchesAll(iterator1, (Predicate<? super Object>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) sQLDataException0);
      IteratorUtils.matchesAll((Iterator<Object>) listIterator0, (Predicate<? super Object>) equalPredicate0);
      Transformer<Object, SQLTransactionRollbackException>[] transformerArray0 = (Transformer<Object, SQLTransactionRollbackException>[]) Array.newInstance(Transformer.class, 1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`.", "Transformer must not be null", (-225));
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ConstantTransformer.constantTransformer(sQLTransactionRollbackException0);
      transformerArray0[0] = transformer0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(transformerArray0, (-225));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = (IIOMetadataNode)iIOMetadataNode0.getChildNodes();
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) resettableListIterator0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Consumer<ClientInfoStatus> consumer0 = (Consumer<ClientInfoStatus>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonListIterator0.reset();
      singletonListIterator0.forEachRemaining(consumer0);
      IteratorUtils.toString((Iterator<ClientInfoStatus>) singletonListIterator0, (Transformer<? super ClientInfoStatus, String>) transformer0, "", "", "");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      ExceptionClosure.exceptionClosure();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("|v/]OOKl6<Mc=B", "|v/]OOKl6<Mc=B");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "X5u.$Q^/*r%98KW", sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 6);
      ArrayList<Closure<Object>> arrayList0 = new ArrayList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayList0);
      closureArray0[0] = closure0;
      Closure<Object> closure1 = NOPClosure.nopClosure();
      closureArray0[1] = closure1;
      Closure<Object> closure2 = NOPClosure.nopClosure();
      closureArray0[2] = closure2;
      Closure<Object> closure3 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, true);
      closureArray0[3] = closure3;
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure4 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      closureArray0[4] = closure4;
      Closure<Object> closure5 = ForClosure.forClosure(5227, (Closure<? super Object>) closure0);
      closureArray0[5] = closure5;
      Closure<SQLException> closure6 = ChainedClosure.chainedClosure((Closure<? super SQLException>[]) closureArray0);
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(predicate0, closure6);
      IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) resettableListIterator0, (Closure<? super SQLTransactionRollbackException>) ifClosure0);
      EmptyListIterator.resettableEmptyListIterator();
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) singletonListIterator0, 5227);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 5226
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) resettableListIterator0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<ClientInfoStatus>) null, (Transformer<? super ClientInfoStatus, String>) transformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) resettableListIterator0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) singletonListIterator0, (Transformer<? super ClientInfoStatus, String>) transformer0, (String) null, "", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("*W\"!,0cmJI.|h{JXCv:", "iterator");
      arrayDeque0.add(sQLTransientConnectionException0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableListIterator0);
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>(hashSet0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) treeSet0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("iterator", hashtable0);
      IteratorUtils.size(resettableListIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(arrayList0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Object>) loopingListIterator0, (Transformer<? super Object, String>) transformer0, "iterator", "iterator", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = new Integer(59);
      IteratorUtils.getIterator(integer0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) singletonListIterator0, (Transformer<? super ClientInfoStatus, String>) transformer0, "", "org.apache.commons.collections4.map.SingletonMap", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("IcQ&%qntYc^E._", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", " ", sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      sQLRecoverableException0.getLocalizedMessage();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) resettableListIterator0, (Closure<? super SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getChildNodes();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      ExceptionClosure.exceptionClosure();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("|v/]OOKl6<Mc=B", "|v/]OOKl6<Mc=B");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("|v/]OOKl6<Mc=B", "|v/]OOKl6<Mc=B", sQLRecoverableException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      EmptyListIterator.resettableEmptyListIterator();
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) singletonListIterator0, 2479);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MapIterator<LinkedList<SQLTransientException>, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Hashtable<DataTruncation, String> hashtable0 = new Hashtable<DataTruncation, String>();
      EntrySetMapIterator<DataTruncation, String> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, String>(hashtable0);
      AbstractMapIteratorDecorator<DataTruncation, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, String>(entrySetMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      ExceptionClosure.exceptionClosure();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("transformer may not be null", "transformer may not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("|v/]OOKl6<Mc=B", "|v/]OOKl6<Mc=B", sQLRecoverableException0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>((Integer) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("|v/]OOKl6<Mc=B", "transformer may not be null");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      ConstantTransformer.constantTransformer(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-4));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      String string0 = "f\\<,E6cM&1R";
      Transformer<SQLNonTransientException, String> transformer0 = ConstantTransformer.constantTransformer("f<,E6cM&1R");
      IteratorUtils.toString((Iterator<SQLDataException>) orderedIterator0, (Transformer<? super SQLDataException, String>) transformer0);
      IteratorUtils.emptyListIterator();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<Iterator<SQLInvalidAuthorizationSpecException>> listIterator0 = IteratorUtils.singletonListIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) orderedIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.add("f<,E6cM&1R");
      arrayDeque0.add(resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) arrayDeque0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("f<,E6cM&1R", hashtable0);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MapIterator<LinkedList<SQLTransientException>, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList0);
      SQLDataException sQLDataException0 = new SQLDataException("", "F", (-1091));
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) singletonIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) resettableListIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<Boolean>) orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      ExceptionClosure.exceptionClosure();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("transformer may not be null", "transformer may not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("|v/]OOKl6<Mc=B", "|v/]OOKl6<Mc=B", sQLRecoverableException0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>((Integer) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Integer>) singletonIterator0, 5);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 4
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = new Integer(59);
      IteratorUtils.getIterator(integer0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[5];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(clientInfoStatusArray0, (-534));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) zippingIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MapIterator<LinkedList<SQLTransientException>, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList0);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableIterator0, 1550L, 1L);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) zippingIterator0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<ClientInfoStatus>) singletonListIterator0, (Transformer<? super ClientInfoStatus, String>) transformer0, "OavA)k>@[e{S(K/bl6", "=#", "OavA)k>@[e{S(K/bl6");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      Closure<SQLTransientException> closure0 = ExceptionClosure.exceptionClosure();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("transformer may not be null", "transformer may not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("|v/]OOKl6<Mc=B", "|v/]OOKl6<Mc=B", sQLRecoverableException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) resettableListIterator0, (Closure<? super SQLTransactionRollbackException>) closure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      Closure<SQLTransientException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) zippingIterator0, (Closure<? super SQLTransactionRollbackException>) closure0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      IteratorUtils.singletonIterator((TreeSet<ArrayList>) treeSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<ServiceLoader<ArrayList>>) resettableListIterator0, (Predicate<? super ServiceLoader<ArrayList>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1105, 1105);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      MapIterator<BatchUpdateException, SQLWarning> mapIterator1 = IteratorUtils.emptyMapIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) mapIterator1, (Predicate<? super BatchUpdateException>) uniquePredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(resettableIterator0, comparator0, comparatorPredicate_Criterion0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(comparatorPredicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      // Undeclared exception!
//      try { 
        OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 1 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      IteratorUtils.toArray(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      ResettableIterator<SQLClientInfoException> resettableIterator1 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) resettableIterator1, class0);
      MapIterator<Locale.Category, EnumSet<Locale.Category>> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      Boolean[] booleanArray0 = new Boolean[7];
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) class0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.iterators.IteratorChain");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`@$ei^", "org.apache.commons.collections4.iterators.IteratorChain", sQLWarning0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLFeatureNotSupportedException0);
      Boolean boolean0 = predicateTransformer0.transform(sQLDataException0);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(boolean0);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(resettableIterator0);
      booleanArray0[2] = boolean2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`@$ei^");
      Boolean boolean3 = predicateTransformer0.transform(sQLIntegrityConstraintViolationException0);
      booleanArray0[3] = boolean3;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTransientException sQLTransientException0 = new SQLTransientException(", ", ", ");
      EqualPredicate.equalPredicate((SQLException) sQLTransientException0, (Equator<SQLException>) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException0;
      sQLDataExceptionArray0[4] = sQLDataException0;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) objectArrayIterator0, 985L);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) objectArrayIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      IteratorUtils.size(iterator0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
//      try { 
        InvokerTransformer.invokerTransformer(", ", (Class<?>[]) classArray0, (Object[]) sQLDataExceptionArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The parameter types must match the arguments
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<SQLNonTransientException, String> transformer0 = ConstantTransformer.constantTransformer("f<,E6cM&1R");
      IteratorUtils.toString((Iterator<SQLDataException>) orderedIterator0, (Transformer<? super SQLDataException, String>) transformer0);
      IteratorUtils.emptyListIterator();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<Iterator<SQLInvalidAuthorizationSpecException>> listIterator0 = IteratorUtils.singletonListIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) orderedIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.add("f<,E6cM&1R");
      arrayDeque0.add(resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) arrayDeque0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("f<,E6cM&1R", hashtable0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size(listIterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.emptyIterator();
      int int0 = 10;
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(10);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(10);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(566);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      HashMap<SQLTransientConnectionException, SQLRecoverableException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLRecoverableException>();
      EntrySetMapIterator<SQLTransientConnectionException, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, SQLRecoverableException>(hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) entrySetMapIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-49);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", 4, sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation(4, true, true, 4, (-2018), sQLRecoverableException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      DataTruncation dataTruncation1 = singletonIterator0.next();
      sQLFeatureNotSupportedException0.setNextException(dataTruncation1);
      sQLRecoverableException0.getLocalizedMessage();
      sQLRecoverableException0.getLocalizedMessage();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) singletonIterator0, (Iterator<? extends DataTruncation>) singletonIterator0);
      IteratorUtils.size(zippingIterator0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLDataException>) null, (Closure<? super SQLDataException>) closure0);
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer((byte) (-49));
      stack0.add(integer0);
      IteratorUtils.loopingListIterator((List<Integer>) stack0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTransientException sQLTransientException0 = new SQLTransientException(", ", ", ");
      EqualPredicate.equalPredicate((SQLException) sQLTransientException0, (Equator<SQLException>) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException0;
      sQLDataExceptionArray0[4] = sQLDataException0;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) objectArrayIterator0, 985L);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) objectArrayIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLNonTransientConnectionException>(orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends StringTokenizer>) orderedMapIterator0, (Iterator<? extends StringTokenizer>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InvokerTransformer.invokerTransformer("ed)q26$$e~1");
      TruePredicate.truePredicate();
      MapIterator<SQLRecoverableException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) resettableListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      InvokerTransformer.invokerTransformer("ed)q26$$e~1");
      TruePredicate.truePredicate();
      MapIterator<SQLRecoverableException, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) mapIterator0, 5);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("vE^+^h");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "vE^+^h";
      stringArray0[1] = "vE^+^h";
      stringArray0[2] = "vE^+^h";
      stringArray0[3] = "ed)q26$$e~1";
      stringArray0[4] = "ed)q26$$e~1";
      stringArray0[5] = "vE^+^h";
      stringArray0[6] = "ed)q26$$e~1";
      stringArray0[7] = "ed)q26$$e~1";
      stringArray0[8] = "ed)q26$$e~1";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      Iterator<String> iterator1 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) iterator0);
      ListIteratorWrapper<String> listIteratorWrapper0 = new ListIteratorWrapper<String>(iterator1);
      listIteratorWrapper0.next();
      IteratorUtils.boundedIterator((Iterator<? extends String>) iterator1, 0L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      InvokerTransformer.invokerTransformer("ed)q26$$e~1");
      Predicate<SQLNonTransientConnectionException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, 0L, 238L);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.emptyIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      SingletonIterator<Stack<IIOMetadataNode>> singletonIterator0 = new SingletonIterator<Stack<IIOMetadataNode>>(stack0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLNonTransientConnectionException0);
      IteratorUtils.matchesAny((Iterator<Stack<IIOMetadataNode>>) singletonIterator0, (Predicate<? super Stack<IIOMetadataNode>>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedMapIterator<ServiceLoader<ServiceLoader>, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      SingletonIterator<Stack<IIOMetadataNode>> singletonIterator0 = new SingletonIterator<Stack<IIOMetadataNode>>(stack0);
      DataTruncation dataTruncation0 = new DataTruncation(3398, false, true, 3398, 3398, (Throwable) null);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(dataTruncation0);
      IteratorUtils.matchesAny((Iterator<Stack<IIOMetadataNode>>) singletonIterator0, (Predicate<? super Stack<IIOMetadataNode>>) identityPredicate0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      SingletonIterator<Stack<IIOMetadataNode>> singletonIterator0 = new SingletonIterator<Stack<IIOMetadataNode>>(stack0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(stack0);
      IteratorUtils.matchesAny((Iterator<Stack<IIOMetadataNode>>) singletonIterator0, (Predicate<? super Stack<IIOMetadataNode>>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IteratorUtils.emptyIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      int[] intArray0 = new int[6];
      intArray0[0] = 9;
      intArray0[1] = 989;
      intArray0[2] = 1064;
      intArray0[3] = 3267;
      intArray0[4] = 5227;
      intArray0[5] = 1660;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("toIndex = ", "toIndex = ", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("toIndex = ", "toIndex = ", 989, intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 3267;
      longArray0[1] = (long) 1660;
      longArray0[2] = (long) 1;
      longArray0[3] = 863L;
      longArray0[4] = (long) 9;
      longArray0[5] = (long) 5227;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("toIndex = ", "toIndex = ", 1, longArray0, batchUpdateException1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("toIndex = ", "toIndex = ", (-456), longArray0, batchUpdateException0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("oZi&1 Je(+,", "&NuPx", (-456), intArray0);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("oZi&1 Je(+,", "toIndex = ", 3267, intArray0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("Collection must not be null", intArray0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MapIterator<LinkedList<SQLTransientException>, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      IteratorUtils.isEmpty(mapIterator0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      ListIterator<Closure<Object>> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException("zs}E ", "d");
      ConstantFactory<SQLDataException> constantFactory0 = new ConstantFactory<SQLDataException>(sQLDataException0);
      Transformer<Closure<Object>, SQLDataException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) constantFactory0);
      IteratorUtils.transformedIterator((Iterator<? extends Closure<Object>>) listIterator0, (Transformer<? super Closure<Object>, ? extends SQLDataException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Closure<Object>>) null, (Transformer<? super Closure<Object>, ? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MapIterator<LinkedList<SQLTransientException>, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Closure<Object>>) null, (Transformer<? super Closure<Object>, ? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "Closure must not be null");
      EqualPredicate.equalPredicate((SQLException) sQLTransientException0, (Equator<SQLException>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = null;
      MapIterator<BatchUpdateException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Predicate<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ListIterator<Closure<Object>> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.iterators.IteratorChain", "3l`:e<$$?r #;,UZW=");
      SQLDataException sQLDataException1 = new SQLDataException("z}", (String) null, 1696);
      ConstantFactory<SQLDataException> constantFactory0 = new ConstantFactory<SQLDataException>(sQLDataException1);
      ConstantTransformer<Closure<Object>, SQLDataException> constantTransformer0 = new ConstantTransformer<Closure<Object>, SQLDataException>(sQLDataException1);
      Iterator<SQLDataException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Closure<Object>>) listIterator0, (Transformer<? super Closure<Object>, ? extends SQLDataException>) constantTransformer0);
      IteratorUtils.toArray(iterator0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLDataException0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) iterator0, (Predicate<? super SQLDataException>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(vector0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) reverseListIterator0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) iterator0, (Predicate<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      MapIterator<Integer, SQLTransientException> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) mapIterator1, 2853L);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      ConstantTransformer.constantTransformer("");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "9 ?6)+AgdO(uJLPv";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("9 ?6)+AgdO(uJLPv");
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null, (Collection<? super DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(5227);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5227);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(566);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(488);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(10);
      integerArray0[7] = integer7;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, 0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<Integer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) instanceofPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Integer>) listIterator0, 2090);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2090
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      ExceptionClosure.exceptionClosure();
      IteratorUtils.singletonListIterator((Object) null);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MapIterator<LinkedList<SQLTransientException>, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("~+", ", ");
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) null, (-3556L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-49);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", 4, sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation(4, true, true, 4, (-2018), sQLRecoverableException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      DataTruncation dataTruncation1 = singletonIterator0.next();
      sQLFeatureNotSupportedException0.setNextException(dataTruncation1);
      sQLRecoverableException0.getLocalizedMessage();
      sQLRecoverableException0.getLocalizedMessage();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) singletonIterator0, (Iterator<? extends DataTruncation>) singletonIterator0);
      IteratorUtils.size(zippingIterator0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLDataException>) null, (Closure<? super SQLDataException>) closure0);
      Stack<Integer> stack0 = new Stack<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) stack0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Stack<EnumSet<Locale.Category>> stack0 = new Stack<EnumSet<Locale.Category>>();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<EnumSet<Locale.Category>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.cloneNode(true);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      MapIterator<Integer, SQLTransientException> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) mapIterator1, 2853L);
      Predicate<SQLNonTransientConnectionException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      MapIterator<SQLRecoverableException, BatchUpdateException> mapIterator2 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) mapIterator2, 5227);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) null, (-523));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      MapIterator<Integer, SQLTransientException> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) mapIterator1, 2853L);
      Predicate<SQLNonTransientConnectionException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      MapIterator<SQLRecoverableException, BatchUpdateException> mapIterator2 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) mapIterator2, 5227);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Factory<Locale.Category> factory0 = ConstantFactory.constantFactory(locale_Category1);
      FactoryTransformer<Object, Locale.Category> factoryTransformer0 = new FactoryTransformer<Object, Locale.Category>(factory0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) factoryTransformer0);
      IteratorUtils.toListIterator((Iterator<? extends Locale.Category>) iterator0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 5);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iteratorArray0[0]);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      IteratorUtils.arrayListIterator(predicateArray0);
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>[] hashMapArray0 = (HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>[]) Array.newInstance(HashMap.class, 7);
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap0 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[0] = hashMap0;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap1 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[1] = hashMap1;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap2 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[2] = hashMap2;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap3 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[3] = hashMap3;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap4 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[4] = hashMap4;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap5 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[5] = hashMap5;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap6 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>(10, 10);
      hashMap6.clear();
      hashMapArray0[6] = hashMap6;
      IteratorUtils.arrayListIterator(hashMapArray0);
      IteratorUtils.emptyIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      int[] intArray0 = new int[9];
      intArray0[0] = 10;
      intArray0[1] = 61;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 10;
      intArray0[5] = 10;
      intArray0[6] = 10;
      intArray0[7] = (-2494);
      intArray0[8] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("OJs 04~_b", "OJs 04~_b", intArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "", 10, sQLNonTransientException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("k");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "", (-2307));
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("OJs 04~_b", sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2494), 10).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLTransactionRollbackException4, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      DataTruncation dataTruncation0 = new DataTruncation((-1254), true, true, 1, 1, sQLNonTransientException0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      IteratorUtils.emptyMapIterator();
      EmptyListIterator.emptyListIterator();
      ResettableIterator<String> resettableIterator1 = IteratorUtils.emptyIterator();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String> iterator0 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) resettableIterator1, (Iterator<? extends String>) resettableIterator1);
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(stack0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, (-1329));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -1329
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<SQLTransientConnectionException, String> transformer0 = InvokerTransformer.invokerTransformer("ed)q26$$e~1");
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0);
      IteratorUtils.emptyMapIterator();
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator1);
      IteratorUtils.emptyIterator();
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Hashtable<DataTruncation, String> hashtable0 = new Hashtable<DataTruncation, String>();
      EntrySetMapIterator<DataTruncation, String> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, String>(hashtable0);
      AbstractMapIteratorDecorator<DataTruncation, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, String>(entrySetMapIterator0);
      IteratorUtils.size(abstractMapIteratorDecorator0);
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Iterator<TreeSet<SQLIntegrityConstraintViolationException>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.getIterator(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Predicate<Object>>) null, (Iterator<? extends Predicate<Object>>) null, (Iterator<? extends Predicate<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      IteratorUtils.arrayListIterator(predicateArray0);
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>[] hashMapArray0 = (HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>[]) Array.newInstance(HashMap.class, 7);
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap0 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[0] = hashMap0;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap1 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[1] = hashMap1;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap2 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[2] = hashMap2;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap3 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[3] = hashMap3;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap4 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[4] = hashMap4;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap5 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[5] = hashMap5;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap6 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>(10, 10);
      hashMap6.clear();
      hashMapArray0[6] = hashMap6;
      ResettableListIterator<HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashMapArray0);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.isEmpty(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "", 0, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("6X9U\"|uMUUjrt*|6s", "org.apache.commons.collections4.bidimap.TreeBidiMap", 0, sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException((String) null, "6X9U\"|uMUUjrt*|6s");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("", "org.apache.commons.collections4.bidimap.TreeBidiMap", 0);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("LESS_OR_EQUAL", "0^Ir0KM", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      SQLTransientConnectionException sQLTransientConnectionException8 = new SQLTransientConnectionException("", "Iterator must not be null", 0, sQLTransientConnectionException4);
      sQLTransientConnectionExceptionArray0[8] = sQLTransientConnectionException8;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 1;
      Integer integer0 = new Integer(1);
      IteratorUtils.singletonIterator(integer0);
      String string0 = "7#R7Qb@tA+bn?Z{s>J";
      IteratorUtils.singletonIterator("7#R7Qb@tA+bn?Z{s>J");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLInvalidAuthorizationSpecException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      IteratorUtils.arrayListIterator(predicateArray0);
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>[] hashMapArray0 = (HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>[]) Array.newInstance(HashMap.class, 7);
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap0 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[0] = hashMap0;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap1 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[1] = hashMap1;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap2 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[2] = hashMap2;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap3 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[3] = hashMap3;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap4 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[4] = hashMap4;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap5 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>();
      hashMapArray0[5] = hashMap5;
      HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException> hashMap6 = new HashMap<Transformer<Object, SQLTransactionRollbackException>, SQLTransientException>(10, 10);
      hashMap6.clear();
      hashMapArray0[6] = hashMap6;
      IteratorUtils.arrayListIterator(hashMapArray0);
      IteratorUtils.emptyIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      int[] intArray0 = new int[9];
      intArray0[0] = 10;
      intArray0[1] = 61;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 10;
      intArray0[5] = 10;
      intArray0[6] = 10;
      intArray0[7] = (-2494);
      intArray0[8] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("OJs 04~_b", "OJs 04~_b", intArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "", 10, sQLNonTransientException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("k");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "", (-2307));
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("OJs 04~_b", sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLTransactionRollbackException4, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("1m~X})~+*Xi");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Predicate<? super SQLException>[]) predicateArray0);
      ConstantTransformer<SQLException, SQLTimeoutException> constantTransformer0 = new ConstantTransformer<SQLException, SQLTimeoutException>(sQLTimeoutException0);
      Transformer<SQLTimeoutException, SQLTimeoutException> transformer0 = IfTransformer.ifTransformer((Predicate<? super SQLTimeoutException>) predicate0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) constantTransformer0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) stack0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 3);
      Comparator<Object> comparator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Boolean>) null, (Iterator<? extends Boolean>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HashMap<SQLException, SQLClientInfoException> hashMap0 = new HashMap<SQLException, SQLClientInfoException>();
      EntrySetMapIterator<SQLException, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<SQLException, SQLClientInfoException>(hashMap0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Factory<Locale.Category> factory0 = ConstantFactory.constantFactory(locale_Category1);
      FactoryTransformer<Object, Locale.Category> factoryTransformer0 = new FactoryTransformer<Object, Locale.Category>(factory0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) factoryTransformer0);
      IteratorUtils.toListIterator((Iterator<? extends Locale.Category>) iterator0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 5);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, SQLInvalidAuthorizationSpecException> invokerTransformer0 = new InvokerTransformer<Object, SQLInvalidAuthorizationSpecException>("", classArray0, objectArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.objectGraphIterator((SQLInvalidAuthorizationSpecException) null, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) invokerTransformer0);
      iteratorArray0[0] = iterator1;
      Iterator<SQLInvalidAuthorizationSpecException> iterator2 = IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator1);
      iteratorArray0[1] = iterator2;
      Iterator<SQLInvalidAuthorizationSpecException> iterator3 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator1);
      iteratorArray0[2] = iterator3;
      Iterator<SQLInvalidAuthorizationSpecException> iterator4 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator3, (Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator2);
      iteratorArray0[3] = iterator4;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<SQLSyntaxErrorException, IIOMetadataNode> hashMap0 = new HashMap<SQLSyntaxErrorException, IIOMetadataNode>();
      EntrySetMapIterator<SQLSyntaxErrorException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, IIOMetadataNode>(hashMap0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      String string0 = "SM";
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1988;
      longArray0[1] = (-2077L);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 1988;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("SM", "", (-1), longArray0, sQLRecoverableException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0, batchUpdateException1);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      String string1 = "Closure must not be null";
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("/Sd|e~)", "Closure must not be null", 0, hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 1988);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>[]) iteratorArray0);
      IteratorUtils.toList((Iterator<? extends Properties>) iterator0, 3308);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, BatchUpdateException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MapIterator<LinkedList<SQLTransientException>, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("~+", ", ");
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLTransientException0, (Equator<SQLException>) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.singletonIterator((SQLTimeoutException) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      LinkedList<Predicate<Boolean>> linkedList0 = new LinkedList<Predicate<Boolean>>();
      ResettableListIterator<Predicate<Boolean>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Predicate<Boolean>>) linkedList0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) linkedList0, (Equator<Object>) null);
      IteratorUtils.find((Iterator<Predicate<Boolean>>) resettableListIterator0, (Predicate<? super Predicate<Boolean>>) predicate0);
      int int0 = 34;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 34);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<SQLSyntaxErrorException, IIOMetadataNode> hashMap0 = new HashMap<SQLSyntaxErrorException, IIOMetadataNode>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLException sQLException0 = new SQLException("", "JVbKrj_", 3572);
      SQLDataException sQLDataException0 = new SQLDataException("", "(nJyeVl<", 3572, sQLException0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(factoryTransformer0);
      hashMap0.remove((Object) sQLDataException0, (Object) transformerPredicate0);
      EntrySetMapIterator<SQLSyntaxErrorException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, IIOMetadataNode>(hashMap0);
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLSyntaxErrorException, ? extends IIOMetadataNode>) entrySetMapIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) mapIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("xG(V$;k5[Ovwi@WMs", "xG(V$;k5[Ovwi@WMs");
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLTransientException0, (Equator<SQLException>) null);
      IteratorUtils.find((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 4);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException0;
      sQLDataExceptionArray0[4] = sQLDataException0;
      sQLDataExceptionArray0[5] = sQLDataException0;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLDataException>) objectArrayIterator0;
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) objectArrayIterator0, (long) 3572);
      iteratorArray0[1] = (Iterator<SQLDataException>) boundedIterator0;
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iteratorArray0[0]);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      iteratorArray0[2] = iterator0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[3] = (Iterator<SQLDataException>) resettableListIterator0;
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("K~|=aQ O|<6", "7oC!Qy>JisriqUX8}q", 521, hashtable0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("iterator", "S_-2<8cfda", 521, hashtable0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null, sQLClientInfoException4);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("X.cZ", hashtable0);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "X.cZ", 521, sQLClientInfoException3);
      sQLClientInfoException4.addSuppressed(sQLSyntaxErrorException0);
      IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) orderedIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.parallelStream();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) orderedIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) arrayDeque0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) orderedIterator0, (Iterator<? extends SQLNonTransientException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) zippingIterator0, (-4684L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Vector<ServiceLoader<SQLInvalidAuthorizationSpecException>> vector0 = new Vector<ServiceLoader<SQLInvalidAuthorizationSpecException>>();
      ReverseListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>> reverseListIterator0 = new ReverseListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>(vector0);
      ListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>) reverseListIterator0);
      ArrayListIterator<SQLIntegrityConstraintViolationException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLIntegrityConstraintViolationException>(listIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Predicate must not be null");
//      try { 
        iIOMetadataNode0.setIdAttributeNS("Predicate must not be null", "Predicate must not be null", true);
//        fail("Expecting exception: DOMException");
      
//      } catch(DOMException e) {
//         //
//         // Method not supported
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 0;
      Iterator<EnumSet<Locale.Category>>[] iteratorArray0 = (Iterator<EnumSet<Locale.Category>>[]) Array.newInstance(Iterator.class, 3);
      ListIterator<EnumSet<Locale.Category>> listIterator0 = EmptyListIterator.emptyListIterator();
      List<EnumSet<Locale.Category>> list0 = IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) listIterator0, 2213);
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      iteratorArray0[0] = (Iterator<EnumSet<Locale.Category>>) resettableListIterator0;
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<EnumSet<Locale.Category>>) resettableListIterator0);
      iteratorArray0[1] = iterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "nc?ycW]PE+.I&;~", 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>(1559, 1.0F);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, (-4), hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "L-D", 61, map0, sQLClientInfoException0);
      SQLException sQLException0 = new SQLException("", sQLClientInfoException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("The predicate array must not contain a null predicate, index ", "The predicate array must not contain a null predicate, index ", sQLException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("A.2*F;h\"yXq]", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("A.2*F;h\"yXq]", "L-D", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 1, (-4));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) orderedIterator0, (long) 32);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int int0 = 2453;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 32, 2453);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      OrderedIterator<Stack<SQLNonTransientException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Stack<SQLNonTransientException>> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Stack<SQLNonTransientException>>) orderedIterator0, (Iterator<? extends Stack<SQLNonTransientException>>) orderedIterator0);
      assertNotNull(iterator0);
      
      IteratorUtils.isEmpty(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OrderedIterator<Stack<SQLNonTransientException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Stack<SQLNonTransientException>>) orderedIterator0, (Iterator<? extends Stack<SQLNonTransientException>>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<SQLSyntaxErrorException, IIOMetadataNode> hashMap0 = new HashMap<SQLSyntaxErrorException, IIOMetadataNode>();
      EntrySetMapIterator<SQLSyntaxErrorException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, IIOMetadataNode>(hashMap0);
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLSyntaxErrorException, ? extends IIOMetadataNode>) entrySetMapIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) mapIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("xG(V$;k5[Ovwi@WMs", "xG(V$;k5[Ovwi@WMs");
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLTransientException0, (Equator<SQLException>) null);
      IteratorUtils.find((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Hashtable<DataTruncation, String> hashtable0 = new Hashtable<DataTruncation, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<DataTruncation, String> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, String>(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(entrySetMapIterator0);
      
      AbstractMapIteratorDecorator<DataTruncation, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, String>(entrySetMapIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(abstractMapIteratorDecorator0);
      
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(enumeration0);
      
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(iterator0);
      
      MapIterator<SQLNonTransientException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) listIterator0, 1);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<String> iterator1 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      ResettableListIterator<SQLRecoverableException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableListIterator1, 128);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = "&";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&");
      assertNotNull(iIOMetadataNode0);
      
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      assertSame(iIOMetadataNode0, nodeList0);
      assertSame(nodeList0, iIOMetadataNode0);
      assertNotNull(nodeList0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertSame(iIOMetadataNode0, nodeList0);
      assertSame(nodeList0, iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      Iterator<Object> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Object>) null, (Iterator<?>) resettableListIterator0, (Iterator<?>) nodeListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertSame(iIOMetadataNode0, nodeList0);
      assertSame(nodeList0, iIOMetadataNode0);
      assertNotNull(iterator0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(nodeListIterator0);
      assertNotNull(equalPredicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll(iterator0, (Predicate<? super Object>) equalPredicate0);
      assertTrue(boolean0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertSame(iIOMetadataNode0, nodeList0);
      assertSame(nodeList0, iIOMetadataNode0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("&");
      assertNotNull(transformer0);
      
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      assertNotNull(transformerPredicate0);
      
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      predicateArray0[4] = (Predicate<Object>) equalPredicate0;
      Transformer<Object, SQLRecoverableException>[] transformerArray0 = (Transformer<Object, SQLRecoverableException>[]) Array.newInstance(Transformer.class, 3);
      InvokerTransformer<Object, SQLRecoverableException> invokerTransformer0 = new InvokerTransformer<Object, SQLRecoverableException>("org.apache.commons.collections4.iterators.SkippingIterator", (Class<?>[]) null, (Object[]) null);
      assertNotNull(invokerTransformer0);
      
      transformerArray0[0] = (Transformer<Object, SQLRecoverableException>) invokerTransformer0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("~fe6X]c[", "P{");
      assertEquals("P{", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("~fe6X]c[", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ~fe6X]c[", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("P{", "&", (-2571), sQLInvalidAuthorizationSpecException0);
      assertEquals("P{", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("~fe6X]c[", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ~fe6X]c[", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("&", sQLDataException0.getSQLState());
      assertEquals((-2571), sQLDataException0.getErrorCode());
      assertEquals("P{", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: P{", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("33shaO&P~al<^", "33shaO&P~al<^", 128, sQLDataException0);
      assertEquals("P{", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("~fe6X]c[", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ~fe6X]c[", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("&", sQLDataException0.getSQLState());
      assertEquals((-2571), sQLDataException0.getErrorCode());
      assertEquals("P{", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: P{", sQLDataException0.toString());
      assertEquals("java.sql.SQLRecoverableException: 33shaO&P~al<^", sQLRecoverableException0.toString());
      assertEquals(128, sQLRecoverableException0.getErrorCode());
      assertEquals("33shaO&P~al<^", sQLRecoverableException0.getSQLState());
      assertEquals("33shaO&P~al<^", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      ConstantTransformer<Object, SQLRecoverableException> constantTransformer0 = new ConstantTransformer<Object, SQLRecoverableException>(sQLRecoverableException0);
      assertEquals("P{", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("~fe6X]c[", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ~fe6X]c[", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("&", sQLDataException0.getSQLState());
      assertEquals((-2571), sQLDataException0.getErrorCode());
      assertEquals("P{", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: P{", sQLDataException0.toString());
      assertEquals("java.sql.SQLRecoverableException: 33shaO&P~al<^", sQLRecoverableException0.toString());
      assertEquals(128, sQLRecoverableException0.getErrorCode());
      assertEquals("33shaO&P~al<^", sQLRecoverableException0.getSQLState());
      assertEquals("33shaO&P~al<^", sQLRecoverableException0.getMessage());
      assertNotNull(constantTransformer0);
      
      transformerArray0[1] = (Transformer<Object, SQLRecoverableException>) constantTransformer0;
      Hashtable<Object, SQLRecoverableException> hashtable0 = new Hashtable<Object, SQLRecoverableException>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Transformer<Object, SQLRecoverableException> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLRecoverableException>) hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(transformer1);
      
      transformerArray0[2] = transformer1;
      // Undeclared exception!
//      try { 
        SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends SQLRecoverableException>[]) transformerArray0, (Transformer<? super Object, ? extends SQLRecoverableException>) invokerTransformer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate and transformer arrays must be the same size
//         //
//         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertNull(sQLClientInfoException2.getMessage());
      assertNull(sQLClientInfoException2.getSQLState());
      assertNotNull(sQLClientInfoException2);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 521;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("vX@h`", "co{CXC]a^D~z%$", 521, longArray0, sQLClientInfoException0);
      assertEquals(1, longArray0.length);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("co{CXC]a^D~z%$", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: vX@h`", batchUpdateException0.toString());
      assertEquals(521, batchUpdateException0.getErrorCode());
      assertEquals("vX@h`", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new long[] {521L}, longArray0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1973);
      intArray0[1] = 521;
      intArray0[2] = (-1973);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("K~|=aQ O|<6", "7oC!Qy>JisriqUX8}q", 695, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("7oC!Qy>JisriqUX8}q", batchUpdateException1.getSQLState());
      assertEquals("K~|=aQ O|<6", batchUpdateException1.getMessage());
      assertEquals(695, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: K~|=aQ O|<6", batchUpdateException1.toString());
      assertNotNull(batchUpdateException1);
      assertArrayEquals(new int[] {(-1973), 521, (-1973)}, intArray0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "Qp", (-1973), longArray0, batchUpdateException1);
      assertEquals(1, longArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException2.toString());
      assertEquals("", batchUpdateException2.getMessage());
      assertEquals("Qp", batchUpdateException2.getSQLState());
      assertEquals((-1973), batchUpdateException2.getErrorCode());
      assertEquals("7oC!Qy>JisriqUX8}q", batchUpdateException1.getSQLState());
      assertEquals("K~|=aQ O|<6", batchUpdateException1.getMessage());
      assertEquals(695, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: K~|=aQ O|<6", batchUpdateException1.toString());
      assertNotNull(batchUpdateException2);
      assertArrayEquals(new long[] {521L}, longArray0);
      assertArrayEquals(new int[] {(-1973), 521, (-1973)}, intArray0);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0, sQLClientInfoException0);
      assertEquals(3, intArray0.length);
      assertEquals("java.sql.SQLClientInfoException: ", batchUpdateException3.getMessage());
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertNull(batchUpdateException3.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLClientInfoException: ", batchUpdateException3.toString());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNotNull(batchUpdateException3);
      assertArrayEquals(new int[] {(-1973), 521, (-1973)}, intArray0);
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("co{CXC]a^D~z%$", "K~|=aQ O|<6", 1975, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("K~|=aQ O|<6", batchUpdateException4.getSQLState());
      assertEquals("java.sql.BatchUpdateException: co{CXC]a^D~z%$", batchUpdateException4.toString());
      assertEquals(1975, batchUpdateException4.getErrorCode());
      assertEquals("co{CXC]a^D~z%$", batchUpdateException4.getMessage());
      assertNotNull(batchUpdateException4);
      assertArrayEquals(new int[] {(-1973), 521, (-1973)}, intArray0);
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      assertEquals(0, batchUpdateExceptionArray0.length);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, 883L);
      assertEquals(0, batchUpdateExceptionArray0.length);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ArrayDeque<SQLNonTransientException>[] arrayDequeArray0 = (ArrayDeque<SQLNonTransientException>[]) Array.newInstance(ArrayDeque.class, 7);
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<SQLNonTransientException> arrayDeque1 = new ArrayDeque<SQLNonTransientException>();
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLNonTransientException> arrayDeque2 = new ArrayDeque<SQLNonTransientException>();
      assertTrue(arrayDeque2.isEmpty());
      assertEquals(0, arrayDeque2.size());
      assertNotNull(arrayDeque2);
      assertFalse(arrayDeque2.equals((Object)arrayDeque0));
      assertFalse(arrayDeque2.equals((Object)arrayDeque1));
      
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLNonTransientException> arrayDeque3 = new ArrayDeque<SQLNonTransientException>();
      assertEquals(0, arrayDeque3.size());
      assertTrue(arrayDeque3.isEmpty());
      assertNotNull(arrayDeque3);
      assertFalse(arrayDeque3.equals((Object)arrayDeque1));
      assertFalse(arrayDeque3.equals((Object)arrayDeque2));
      assertFalse(arrayDeque3.equals((Object)arrayDeque0));
      
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<SQLNonTransientException> arrayDeque4 = new ArrayDeque<SQLNonTransientException>();
      assertEquals(0, arrayDeque4.size());
      assertTrue(arrayDeque4.isEmpty());
      assertNotNull(arrayDeque4);
      assertFalse(arrayDeque4.equals((Object)arrayDeque3));
      assertFalse(arrayDeque4.equals((Object)arrayDeque1));
      assertFalse(arrayDeque4.equals((Object)arrayDeque2));
      assertFalse(arrayDeque4.equals((Object)arrayDeque0));
      
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<SQLNonTransientException> arrayDeque5 = new ArrayDeque<SQLNonTransientException>();
      assertEquals(0, arrayDeque5.size());
      assertTrue(arrayDeque5.isEmpty());
      assertNotNull(arrayDeque5);
      assertFalse(arrayDeque5.equals((Object)arrayDeque4));
      assertFalse(arrayDeque5.equals((Object)arrayDeque2));
      assertFalse(arrayDeque5.equals((Object)arrayDeque3));
      assertFalse(arrayDeque5.equals((Object)arrayDeque0));
      assertFalse(arrayDeque5.equals((Object)arrayDeque1));
      
      arrayDequeArray0[5] = arrayDeque5;
      ArrayDeque<SQLNonTransientException> arrayDeque6 = new ArrayDeque<SQLNonTransientException>();
      assertTrue(arrayDeque6.isEmpty());
      assertEquals(0, arrayDeque6.size());
      assertNotNull(arrayDeque6);
      assertFalse(arrayDeque6.equals((Object)arrayDeque0));
      assertFalse(arrayDeque6.equals((Object)arrayDeque5));
      assertFalse(arrayDeque6.equals((Object)arrayDeque2));
      assertFalse(arrayDeque6.equals((Object)arrayDeque4));
      assertFalse(arrayDeque6.equals((Object)arrayDeque3));
      assertFalse(arrayDeque6.equals((Object)arrayDeque1));
      
      arrayDequeArray0[6] = arrayDeque6;
      ObjectArrayListIterator<ArrayDeque<SQLNonTransientException>> objectArrayListIterator0 = new ObjectArrayListIterator<ArrayDeque<SQLNonTransientException>>(arrayDequeArray0);
      assertEquals(7, arrayDequeArray0.length);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(7, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertNotNull(objectArrayListIterator0);
      
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 9);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[3] = class3;
      Class<SQLInvalidAuthorizationSpecException> class4 = SQLInvalidAuthorizationSpecException.class;
      classArray0[4] = class4;
      Class<SQLInvalidAuthorizationSpecException> class5 = SQLInvalidAuthorizationSpecException.class;
      classArray0[5] = class5;
      Class<SQLInvalidAuthorizationSpecException> class6 = SQLInvalidAuthorizationSpecException.class;
      classArray0[7] = class6;
      Class<SQLInvalidAuthorizationSpecException> class7 = SQLInvalidAuthorizationSpecException.class;
      classArray0[8] = class7;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Se<Bb4~Z", classArray0, classArray0);
      assertEquals(9, classArray0.length);
      assertNotNull(invokerTransformer0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<ArrayDeque<SQLNonTransientException>>) objectArrayListIterator0, (Transformer<? super ArrayDeque<SQLNonTransientException>, String>) invokerTransformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'Se<Bb4~Z' on 'class java.util.ArrayDeque' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 10;
      intArray0[5] = 0;
      intArray0[6] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 10, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(10, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {10, 10, 0, 0, 10, 0, 10}, intArray0);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(defaultEquator0, defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(equalPredicate0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Properties> linkedList1 = new LinkedList<Properties>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      LinkedList<Properties> linkedList2 = new LinkedList<Properties>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      
      LinkedList<Properties> linkedList3 = new LinkedList<Properties>();
      assertEquals(0, linkedList3.size());
      assertNotNull(linkedList3);
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertTrue(linkedList3.equals((Object)linkedList0));
      
      LinkedList<Properties> linkedList4 = new LinkedList<Properties>();
      assertEquals(0, linkedList4.size());
      assertNotNull(linkedList4);
      assertTrue(linkedList4.equals((Object)linkedList3));
      assertTrue(linkedList4.equals((Object)linkedList0));
      assertTrue(linkedList4.equals((Object)linkedList1));
      assertTrue(linkedList4.equals((Object)linkedList2));
      
      LinkedList<Properties> linkedList5 = new LinkedList<Properties>();
      assertEquals(0, linkedList5.size());
      assertNotNull(linkedList5);
      assertTrue(linkedList5.equals((Object)linkedList4));
      assertTrue(linkedList5.equals((Object)linkedList3));
      assertTrue(linkedList5.equals((Object)linkedList2));
      assertTrue(linkedList5.equals((Object)linkedList0));
      assertTrue(linkedList5.equals((Object)linkedList1));
      
      LinkedList<Properties> linkedList6 = new LinkedList<Properties>();
      assertEquals(0, linkedList6.size());
      assertNotNull(linkedList6);
      assertTrue(linkedList6.equals((Object)linkedList4));
      assertTrue(linkedList6.equals((Object)linkedList2));
      assertTrue(linkedList6.equals((Object)linkedList0));
      assertTrue(linkedList6.equals((Object)linkedList3));
      assertTrue(linkedList6.equals((Object)linkedList1));
      assertTrue(linkedList6.equals((Object)linkedList5));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((LinkedList<Properties>[]) null, 128, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = "8rST6\"Gf";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("8rST6\"Gf", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: 8rST6\"Gf", sQLClientInfoException0.toString());
      assertEquals("8rST6\"Gf", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("8rST6\"Gf", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLClientInfoException: 8rST6\"Gf", sQLClientInfoException1.toString());
      assertEquals("8rST6\"Gf", sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertNull(sQLClientInfoException2.getSQLState());
      assertNull(sQLClientInfoException2.getMessage());
      assertNotNull(sQLClientInfoException2);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      
      int int0 = 521;
      String string1 = "prefix may not be null";
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("8rST6\"Gf", "prefix may not be null", 521, hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("8rST6\"Gf", sQLClientInfoException3.getMessage());
      assertEquals("java.sql.SQLClientInfoException: 8rST6\"Gf", sQLClientInfoException3.toString());
      assertEquals(521, sQLClientInfoException3.getErrorCode());
      assertEquals("prefix may not be null", sQLClientInfoException3.getSQLState());
      assertNotNull(sQLClientInfoException3);
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      
      int int1 = (-2614);
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException((String) null, "K~|=aQ O|<6", (-2614), hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals((-2614), sQLClientInfoException4.getErrorCode());
      assertNull(sQLClientInfoException4.getMessage());
      assertEquals("K~|=aQ O|<6", sQLClientInfoException4.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException4.toString());
      assertNotNull(sQLClientInfoException4);
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(hashtable0, sQLClientInfoException4);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals((-2614), sQLClientInfoException4.getErrorCode());
      assertNull(sQLClientInfoException4.getMessage());
      assertEquals("K~|=aQ O|<6", sQLClientInfoException4.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException4.toString());
      assertEquals(0, sQLClientInfoException5.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLClientInfoException", sQLClientInfoException5.toString());
      assertNull(sQLClientInfoException5.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException5.getMessage());
      assertNotNull(sQLClientInfoException5);
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("prefix may not be null", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(sQLClientInfoException6.getSQLState());
      assertEquals(0, sQLClientInfoException6.getErrorCode());
      assertEquals("prefix may not be null", sQLClientInfoException6.getMessage());
      assertEquals("java.sql.SQLClientInfoException: prefix may not be null", sQLClientInfoException6.toString());
      assertNotNull(sQLClientInfoException6);
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException4));
      
      String string2 = "KZ86B";
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("KZ86B", hashtable0, sQLClientInfoException2);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertNull(sQLClientInfoException2.getSQLState());
      assertNull(sQLClientInfoException2.getMessage());
      assertEquals(0, sQLClientInfoException7.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: KZ86B", sQLClientInfoException7.toString());
      assertNull(sQLClientInfoException7.getSQLState());
      assertEquals("KZ86B", sQLClientInfoException7.getMessage());
      assertNotNull(sQLClientInfoException7);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException5));
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException1.getFailedProperties();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLClientInfoException: 8rST6\"Gf", sQLClientInfoException1.toString());
      assertEquals("8rST6\"Gf", sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotSame(sQLClientInfoException1, sQLClientInfoException3);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException5);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException2);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException6);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException4);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException7);
      assertNotNull(map0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException7));
      
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("S_-2<8cfda", map0);
      assertEquals("S_-2<8cfda", sQLClientInfoException8.getMessage());
      assertEquals("java.sql.SQLClientInfoException: S_-2<8cfda", sQLClientInfoException8.toString());
      assertEquals(0, sQLClientInfoException8.getErrorCode());
      assertNull(sQLClientInfoException8.getSQLState());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLClientInfoException: 8rST6\"Gf", sQLClientInfoException1.toString());
      assertEquals("8rST6\"Gf", sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(sQLClientInfoException8);
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException7));
      
      String string3 = "rz)^RX";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("rz)^RX", "", 521, sQLClientInfoException6);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLSyntaxErrorException: rz)^RX", sQLSyntaxErrorException0.toString());
      assertEquals(521, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("rz)^RX", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLClientInfoException6.getSQLState());
      assertEquals(0, sQLClientInfoException6.getErrorCode());
      assertEquals("prefix may not be null", sQLClientInfoException6.getMessage());
      assertEquals("java.sql.SQLClientInfoException: prefix may not be null", sQLClientInfoException6.toString());
      assertNotNull(sQLSyntaxErrorException0);
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException8));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException4));
      
      sQLClientInfoException2.addSuppressed(sQLSyntaxErrorException0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals("java.sql.SQLSyntaxErrorException: rz)^RX", sQLSyntaxErrorException0.toString());
      assertEquals(521, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("rz)^RX", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertNull(sQLClientInfoException2.getSQLState());
      assertNull(sQLClientInfoException2.getMessage());
      assertNull(sQLClientInfoException6.getSQLState());
      assertEquals(0, sQLClientInfoException6.getErrorCode());
      assertEquals("prefix may not be null", sQLClientInfoException6.getMessage());
      assertEquals("java.sql.SQLClientInfoException: prefix may not be null", sQLClientInfoException6.toString());
      assertNotSame(sQLClientInfoException2, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException3);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException5);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException4);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException7);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException6);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException8);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException0);
      assertNotSame(sQLClientInfoException6, sQLClientInfoException8);
      assertNotSame(sQLClientInfoException6, sQLClientInfoException5);
      assertNotSame(sQLClientInfoException6, sQLClientInfoException2);
      assertNotSame(sQLClientInfoException6, sQLClientInfoException0);
      assertNotSame(sQLClientInfoException6, sQLClientInfoException3);
      assertNotSame(sQLClientInfoException6, sQLClientInfoException7);
      assertNotSame(sQLClientInfoException6, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException6, sQLClientInfoException4);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException8));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException8));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException4));
      
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException5;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      assertEquals(1, sQLClientInfoExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      SQLClientInfoException[] sQLClientInfoExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) resettableIterator0, class0);
      assertEquals(1, sQLClientInfoExceptionArray0.length);
      assertEquals(1, sQLClientInfoExceptionArray1.length);
      assertNotSame(sQLClientInfoExceptionArray0, sQLClientInfoExceptionArray1);
      assertNotSame(sQLClientInfoExceptionArray1, sQLClientInfoExceptionArray0);
      assertNotNull(sQLClientInfoExceptionArray1);
      assertFalse(sQLClientInfoExceptionArray1.equals((Object)sQLClientInfoExceptionArray0));
      
      ResettableIterator<SQLTransientConnectionException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator1, (long) (-2614), 1L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 1);
      Stack<BatchUpdateException>[] stackArray0 = (Stack<BatchUpdateException>[]) Array.newInstance(Stack.class, 4);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      stackArray0[0] = stack0;
      Stack<BatchUpdateException> stack1 = new Stack<BatchUpdateException>();
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      stackArray0[1] = stack1;
      Stack<BatchUpdateException> stack2 = new Stack<BatchUpdateException>();
      assertEquals(10, stack2.capacity());
      assertEquals(0, stack2.size());
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      assertEquals("[]", stack2.toString());
      assertNotNull(stack2);
      assertTrue(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      
      stackArray0[2] = stack2;
      Stack<BatchUpdateException> stack3 = new Stack<BatchUpdateException>();
      assertEquals(0, stack3.size());
      assertTrue(stack3.isEmpty());
      assertTrue(stack3.empty());
      assertEquals("[]", stack3.toString());
      assertEquals(10, stack3.capacity());
      assertNotNull(stack3);
      assertTrue(stack3.equals((Object)stack1));
      assertTrue(stack3.equals((Object)stack0));
      assertTrue(stack3.equals((Object)stack2));
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "{}", 16);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(16, sQLTransientConnectionException0.getErrorCode());
      assertEquals("{}", sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(16, sQLTransientConnectionException0.getErrorCode());
      assertEquals("{}", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientConnectionException", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientException0);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(16, sQLTransientConnectionException0.getErrorCode());
      assertEquals("{}", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientConnectionException", sQLTransientException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientConnectionException", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: java.sql.SQLTransientConnectionException", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      
      boolean boolean0 = stack3.add(batchUpdateException0);
      assertTrue(boolean0);
      assertEquals(1, stack3.size());
      assertEquals("[java.sql.BatchUpdateException: java.sql.SQLTransientException: java.sql.SQLTransientConnectionException]", stack3.toString());
      assertFalse(stack3.isEmpty());
      assertFalse(stack3.empty());
      assertEquals(10, stack3.capacity());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(16, sQLTransientConnectionException0.getErrorCode());
      assertEquals("{}", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientConnectionException", sQLTransientException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientConnectionException", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: java.sql.SQLTransientConnectionException", batchUpdateException0.toString());
      assertTrue(stack3.contains(batchUpdateException0));
      assertNotSame(stack3, stack1);
      assertNotSame(stack3, stack2);
      assertNotSame(stack3, stack0);
      assertFalse(stack3.equals((Object)stack1));
      assertFalse(stack3.equals((Object)stack2));
      assertFalse(stack3.equals((Object)stack0));
      
      stackArray0[3] = stack3;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{}", "{}", 0);
      assertEquals("{}", sQLRecoverableException0.getMessage());
      assertEquals("{}", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: {}", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLRecoverableException0);
      assertEquals("{}", sQLRecoverableException0.getMessage());
      assertEquals("{}", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: {}", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: {}", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException: {}", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertNotNull(batchUpdateException1);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      boolean boolean1 = stack0.add(batchUpdateException1);
      assertTrue(boolean1);
      assertEquals("[java.sql.BatchUpdateException: java.sql.SQLRecoverableException: {}]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("{}", sQLRecoverableException0.getMessage());
      assertEquals("{}", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: {}", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: {}", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException: {}", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertTrue(stack0.contains(batchUpdateException1));
      assertFalse(stack0.contains(batchUpdateException0));
      assertNotSame(stack0, stack3);
      assertNotSame(stack0, stack1);
      assertNotSame(stack0, stack2);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.equals((Object)stack3));
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(stack0.equals((Object)stack2));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(stackArray0, 16, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "nc?ycW]PE+.I&;~";
      int int0 = 0;
      SQLWarning sQLWarning0 = new SQLWarning("j^Be^&Tz<(", "nc?ycW]PE+.I&;~", 0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("nc?ycW]PE+.I&;~", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: j^Be^&Tz<(", sQLWarning0.toString());
      assertEquals("j^Be^&Tz<(", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 62, 62);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertNull(sQLClientInfoException2.getSQLState());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertNull(sQLClientInfoException2.getMessage());
      assertNotNull(sQLClientInfoException2);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("K~|=aQ O|<6", "7oC!Qy>JisriqUX8}q", 521, hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("K~|=aQ O|<6", sQLClientInfoException3.getMessage());
      assertEquals("7oC!Qy>JisriqUX8}q", sQLClientInfoException3.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: K~|=aQ O|<6", sQLClientInfoException3.toString());
      assertEquals(521, sQLClientInfoException3.getErrorCode());
      assertNotNull(sQLClientInfoException3);
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("iterator", "S_-2<8cfda", 521, hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(521, sQLClientInfoException4.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: iterator", sQLClientInfoException4.toString());
      assertEquals("S_-2<8cfda", sQLClientInfoException4.getSQLState());
      assertEquals("iterator", sQLClientInfoException4.getMessage());
      assertNotNull(sQLClientInfoException4);
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(hashtable0, sQLClientInfoException0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException5.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLClientInfoException: ", sQLClientInfoException5.toString());
      assertNull(sQLClientInfoException5.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException5.getMessage());
      assertNotNull(sQLClientInfoException5);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException6.getErrorCode());
      assertEquals("", sQLClientInfoException6.getMessage());
      assertNull(sQLClientInfoException6.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException6.toString());
      assertNotNull(sQLClientInfoException6);
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException5));
      
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null, sQLClientInfoException4);
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException7.toString());
      assertEquals("", sQLClientInfoException7.getMessage());
      assertNull(sQLClientInfoException7.getSQLState());
      assertEquals(0, sQLClientInfoException7.getErrorCode());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(521, sQLClientInfoException4.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: iterator", sQLClientInfoException4.toString());
      assertEquals("S_-2<8cfda", sQLClientInfoException4.getSQLState());
      assertEquals("iterator", sQLClientInfoException4.getMessage());
      assertNotNull(sQLClientInfoException7);
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException5));
      
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("X.cZ", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException8.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: X.cZ", sQLClientInfoException8.toString());
      assertEquals("X.cZ", sQLClientInfoException8.getMessage());
      assertNull(sQLClientInfoException8.getSQLState());
      assertNotNull(sQLClientInfoException8);
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException1));
      
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "X.cZ", 521, sQLClientInfoException3);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("X.cZ", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals(521, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("K~|=aQ O|<6", sQLClientInfoException3.getMessage());
      assertEquals("7oC!Qy>JisriqUX8}q", sQLClientInfoException3.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: K~|=aQ O|<6", sQLClientInfoException3.toString());
      assertEquals(521, sQLClientInfoException3.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException8));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException5));
      
      sQLClientInfoException4.addSuppressed(sQLSyntaxErrorException0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("X.cZ", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals(521, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("K~|=aQ O|<6", sQLClientInfoException3.getMessage());
      assertEquals("7oC!Qy>JisriqUX8}q", sQLClientInfoException3.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: K~|=aQ O|<6", sQLClientInfoException3.toString());
      assertEquals(521, sQLClientInfoException3.getErrorCode());
      assertEquals(521, sQLClientInfoException4.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: iterator", sQLClientInfoException4.toString());
      assertEquals("S_-2<8cfda", sQLClientInfoException4.getSQLState());
      assertEquals("iterator", sQLClientInfoException4.getMessage());
      assertNotSame(sQLClientInfoException3, sQLClientInfoException8);
      assertNotSame(sQLClientInfoException3, sQLClientInfoException4);
      assertNotSame(sQLClientInfoException3, sQLClientInfoException0);
      assertNotSame(sQLClientInfoException3, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException3, sQLClientInfoException6);
      assertNotSame(sQLClientInfoException3, sQLClientInfoException7);
      assertNotSame(sQLClientInfoException3, sQLClientInfoException2);
      assertNotSame(sQLClientInfoException3, sQLClientInfoException5);
      assertNotSame(sQLClientInfoException4, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException4, sQLClientInfoException7);
      assertNotSame(sQLClientInfoException4, sQLClientInfoException8);
      assertNotSame(sQLClientInfoException4, sQLClientInfoException0);
      assertNotSame(sQLClientInfoException4, sQLClientInfoException6);
      assertNotSame(sQLClientInfoException4, sQLClientInfoException2);
      assertNotSame(sQLClientInfoException4, sQLClientInfoException3);
      assertNotSame(sQLClientInfoException4, sQLClientInfoException5);
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException8));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException8));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException5));
      
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      assertEquals(9, sQLClientInfoExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      SQLClientInfoException[] sQLClientInfoExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) resettableIterator0, class0);
      assertEquals(9, sQLClientInfoExceptionArray0.length);
      assertEquals(9, sQLClientInfoExceptionArray1.length);
      assertNotSame(sQLClientInfoExceptionArray0, sQLClientInfoExceptionArray1);
      assertNotSame(sQLClientInfoExceptionArray1, sQLClientInfoExceptionArray0);
      assertNotNull(sQLClientInfoExceptionArray1);
      assertFalse(sQLClientInfoExceptionArray1.equals((Object)sQLClientInfoExceptionArray0));
      
      ResettableIterator<SQLTransientConnectionException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      BoundedIterator<SQLTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator1, 0L, 0L);
      assertNotNull(boundedIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) boundedIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLWarning[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Hashtable<DataTruncation, String> hashtable0 = new Hashtable<DataTruncation, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<DataTruncation, String> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, String>(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(entrySetMapIterator0);
      
      AbstractMapIteratorDecorator<DataTruncation, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, String>(entrySetMapIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(abstractMapIteratorDecorator0);
      
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Stack<BatchUpdateException> stack1 = new Stack<BatchUpdateException>();
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      Stack<BatchUpdateException> stack2 = new Stack<BatchUpdateException>();
      assertTrue(stack2.empty());
      assertEquals(10, stack2.capacity());
      assertEquals(0, stack2.size());
      assertEquals("[]", stack2.toString());
      assertTrue(stack2.isEmpty());
      assertNotNull(stack2);
      assertTrue(stack2.equals((Object)stack0));
      assertTrue(stack2.equals((Object)stack1));
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{}", "delimiter may not be null", 10);
      assertEquals(10, sQLTransientConnectionException0.getErrorCode());
      assertEquals("delimiter may not be null", sQLTransientConnectionException0.getSQLState());
      assertEquals("{}", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: {}", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLTransientConnectionException0);
      assertEquals(10, sQLTransientConnectionException0.getErrorCode());
      assertEquals("delimiter may not be null", sQLTransientConnectionException0.getSQLState());
      assertEquals("{}", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: {}", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: {}", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientException0);
      assertEquals(10, sQLTransientConnectionException0.getErrorCode());
      assertEquals("delimiter may not be null", sQLTransientConnectionException0.getSQLState());
      assertEquals("{}", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: {}", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: {}", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      boolean boolean0 = stack1.add(batchUpdateException0);
      assertTrue(boolean0);
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals("[java.sql.BatchUpdateException: java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}]", stack1.toString());
      assertEquals(10, sQLTransientConnectionException0.getErrorCode());
      assertEquals("delimiter may not be null", sQLTransientConnectionException0.getSQLState());
      assertEquals("{}", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: {}", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: {}", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertTrue(stack1.contains(batchUpdateException0));
      assertNotSame(stack1, stack0);
      assertNotSame(stack1, stack2);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.equals((Object)stack2));
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", (-657));
      assertEquals((-657), sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      assertEquals(10, sQLTransientConnectionException0.getErrorCode());
      assertEquals("delimiter may not be null", sQLTransientConnectionException0.getSQLState());
      assertEquals("{}", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: {}", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: {}", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", batchUpdateException1.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertNotNull(batchUpdateException1);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      boolean boolean1 = stack2.add(batchUpdateException0);
      assertTrue(boolean1);
      assertFalse(stack2.isEmpty());
      assertFalse(stack2.empty());
      assertEquals("[java.sql.BatchUpdateException: java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}]", stack2.toString());
      assertEquals(1, stack2.size());
      assertEquals(10, stack2.capacity());
      assertEquals(10, sQLTransientConnectionException0.getErrorCode());
      assertEquals("delimiter may not be null", sQLTransientConnectionException0.getSQLState());
      assertEquals("{}", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: {}", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: {}", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: {}", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertTrue(stack2.contains(batchUpdateException0));
      assertFalse(stack2.contains(batchUpdateException1));
      assertNotSame(stack2, stack0);
      assertNotSame(stack2, stack1);
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertTrue(stack2.equals((Object)stack1));
      assertFalse(stack2.equals((Object)stack0));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertTrue(boolean1 == boolean0);
      
      Stack<BatchUpdateException>[] stackArray0 = (Stack<BatchUpdateException>[]) Array.newInstance(Stack.class, 3);
      stackArray0[0] = stack0;
      stackArray0[1] = stack0;
      stackArray0[2] = stack1;
      ResettableListIterator<Stack<BatchUpdateException>> resettableListIterator0 = IteratorUtils.arrayListIterator(stackArray0, 1, 1);
      assertEquals(3, stackArray0.length);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      int int0 = 10;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Integer>) resettableListIterator0, 10);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 10
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Predicate<Object> predicate0 = null;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) null);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) listIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedMapIterator<DataTruncation, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<DataTruncation, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends DataTruncation>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      AbstractOrderedMapIteratorDecorator<DataTruncation, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, DataTruncation>(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      MapIterator<DataTruncation, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, DataTruncation>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = null;
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientConnectionException) null);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) null);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2052;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("*?", "*?", 2052, longArray0, sQLTransientConnectionException0);
      assertEquals(1, longArray0.length);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals("*?", batchUpdateException0.getMessage());
      assertEquals(2052, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: *?", batchUpdateException0.toString());
      assertEquals("*?", batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new long[] {2052L}, longArray0);
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("4>2_", "4>2_", 695, longArray0, batchUpdateException0);
      assertEquals(1, longArray0.length);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals("*?", batchUpdateException0.getMessage());
      assertEquals(2052, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: *?", batchUpdateException0.toString());
      assertEquals("*?", batchUpdateException0.getSQLState());
      assertEquals("4>2_", batchUpdateException1.getMessage());
      assertEquals("4>2_", batchUpdateException1.getSQLState());
      assertEquals(695, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: 4>2_", batchUpdateException1.toString());
      assertNotNull(batchUpdateException1);
      assertArrayEquals(new long[] {2052L}, longArray0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2052;
      intArray0[2] = 695;
      intArray0[3] = 695;
      intArray0[4] = 695;
      intArray0[5] = 695;
      intArray0[6] = (-2127);
      intArray0[7] = 695;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0, batchUpdateException1);
      assertEquals(1, longArray0.length);
      assertEquals(8, intArray0.length);
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: 4>2_", batchUpdateException2.toString());
      assertNull(batchUpdateException2.getSQLState());
      assertEquals("java.sql.BatchUpdateException: 4>2_", batchUpdateException2.getMessage());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals("*?", batchUpdateException0.getMessage());
      assertEquals(2052, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: *?", batchUpdateException0.toString());
      assertEquals("*?", batchUpdateException0.getSQLState());
      assertEquals("4>2_", batchUpdateException1.getMessage());
      assertEquals("4>2_", batchUpdateException1.getSQLState());
      assertEquals(695, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: 4>2_", batchUpdateException1.toString());
      assertNotNull(batchUpdateException2);
      assertArrayEquals(new long[] {2052L}, longArray0);
      assertArrayEquals(new int[] {1, 2052, 695, 695, 695, 695, (-2127), 695}, intArray0);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("*?", "*?", (-1772), intArray0);
      assertEquals(8, intArray0.length);
      assertEquals((-1772), batchUpdateException3.getErrorCode());
      assertEquals("*?", batchUpdateException3.getSQLState());
      assertEquals("java.sql.BatchUpdateException: *?", batchUpdateException3.toString());
      assertEquals("*?", batchUpdateException3.getMessage());
      assertNotNull(batchUpdateException3);
      assertArrayEquals(new int[] {1, 2052, 695, 695, 695, 695, (-2127), 695}, intArray0);
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      assertEquals(4, batchUpdateExceptionArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, (long) 695);
      assertEquals(4, batchUpdateExceptionArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MapIterator<LinkedList<SQLTransientException>, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      int int0 = IteratorUtils.size(mapIterator0);
      assertEquals(0, int0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 0, 32);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("iterator", "S_-2<8cfda", 521, hashtable0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null, sQLClientInfoException3);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("X.cZ", hashtable0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("7oC!Qy>JisriqUX8}q", (Class<?>[]) null, sQLClientInfoExceptionArray0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>(", ");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("Node must not be null", (Transformer<? super String, ? extends String>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("K~|=aQ O|<6", "7oC!Qy>JisriqUX8}q", 521, hashtable0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("iterator", "S_-2<8cfda", 521, hashtable0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null, sQLClientInfoException4);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("X.cZ", hashtable0);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "X.cZ", 521, sQLClientInfoException3);
      sQLClientInfoException4.addSuppressed(sQLSyntaxErrorException0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) resettableIterator0, class0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator1 = IteratorUtils.emptyIterator();
      BoundedIterator<SQLTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator1, 0L, 0L);
      IteratorUtils.toArray((Iterator<?>) boundedIterator0);
      MapIterator<SQLException, Stack<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLException, Stack<Object>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLException>) mapIterator1, (Predicate<? super SQLException>) predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 0, intArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(batchUpdateException0, defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3120, false, true, 0, 1836);
      dataTruncation0.setNextException((SQLException) null);
      Factory<DataTruncation> factory0 = ConstantFactory.constantFactory(dataTruncation0);
      Transformer<DataTruncation, DataTruncation> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends DataTruncation>) factory0);
      IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(dataTruncation0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef", "ixMg", 3425);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLRecoverableException0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = FalsePredicate.falsePredicate();
      predicateArray0[3] = predicate2;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate2);
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate3 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate3);
      predicateArray0[5] = (Predicate<Object>) nullIsTruePredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nonePredicate0, predicate1);
      predicateArray0[6] = (Predicate<Object>) andPredicate0;
      Predicate<Object> predicate4 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<String>) null, (Predicate<? super String>) predicate4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.collections4.iterators.ArrayListIterator";
      stringArray0[1] = "List must not be null";
      stringArray0[2] = "$0THLB7h5((#Ge";
      stringArray0[3] = "";
      stringArray0[4] = "t[S)@>V|5;^0xN;`0aO";
      stringArray0[5] = "oH\"!oF";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<?>) resettableListIterator0, (-1329));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, HashSet<SQLTransactionRollbackException>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MapIterator<String, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends String>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<SQLTransientConnectionException, String> transformer0 = InvokerTransformer.invokerTransformer("ed)q26$$e~1");
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0);
      MapIterator<Integer, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) mapIterator0, 2054L);
      Predicate<SQLNonTransientConnectionException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) boundedIterator0, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("K~|=aQ O|<6", "7oC!Qy>JisriqUX8}q", 521, hashtable0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("iterator", "S_-2<8cfda", 521, hashtable0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null, sQLClientInfoException4);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("X.cZ", hashtable0);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, 521);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ArrayDeque<SQLNonTransientException>[] arrayDequeArray0 = (ArrayDeque<SQLNonTransientException>[]) Array.newInstance(ArrayDeque.class, 7);
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLNonTransientException> arrayDeque1 = new ArrayDeque<SQLNonTransientException>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLNonTransientException> arrayDeque2 = new ArrayDeque<SQLNonTransientException>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLNonTransientException> arrayDeque3 = new ArrayDeque<SQLNonTransientException>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<SQLNonTransientException> arrayDeque4 = new ArrayDeque<SQLNonTransientException>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<SQLNonTransientException> arrayDeque5 = new ArrayDeque<SQLNonTransientException>();
      arrayDequeArray0[5] = arrayDeque5;
      ArrayDeque<SQLNonTransientException> arrayDeque6 = new ArrayDeque<SQLNonTransientException>();
      arrayDequeArray0[6] = arrayDeque6;
      ObjectArrayListIterator<ArrayDeque<SQLNonTransientException>> objectArrayListIterator0 = new ObjectArrayListIterator<ArrayDeque<SQLNonTransientException>>(arrayDequeArray0);
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 9);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[3] = class3;
      Class<SQLInvalidAuthorizationSpecException> class4 = SQLInvalidAuthorizationSpecException.class;
      classArray0[4] = class4;
      Class<SQLInvalidAuthorizationSpecException> class5 = SQLInvalidAuthorizationSpecException.class;
      classArray0[5] = class5;
      Class<SQLInvalidAuthorizationSpecException> class6 = SQLInvalidAuthorizationSpecException.class;
      classArray0[6] = class6;
      Class<SQLInvalidAuthorizationSpecException> class7 = SQLInvalidAuthorizationSpecException.class;
      classArray0[7] = class7;
      Class<SQLInvalidAuthorizationSpecException> class8 = SQLInvalidAuthorizationSpecException.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Se<Bb4~Z", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<ArrayDeque<SQLNonTransientException>>) objectArrayListIterator0, (Transformer<? super ArrayDeque<SQLNonTransientException>, String>) invokerTransformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'Se<Bb4~Z' on 'class java.util.ArrayDeque' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      String string0 = "ed)q26$$e~1";
      Transformer<SQLTransientConnectionException, String> transformer0 = InvokerTransformer.invokerTransformer("ed)q26$$e~1");
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 9);
      int int0 = 725;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 725);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[4];
      SQLWarning sQLWarning0 = new SQLWarning("W5ZOm)]R#FbS", "W5ZOm)]R#FbS", (Throwable) null);
      sQLWarningArray0[0] = sQLWarning0;
      DataTruncation dataTruncation0 = new DataTruncation(1415, false, false, 0, 1415, sQLWarning0);
      SQLWarning sQLWarning1 = dataTruncation0.getNextWarning();
      sQLWarningArray0[1] = null;
      SQLWarning sQLWarning2 = new SQLWarning(sQLWarning1);
      sQLWarningArray0[2] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning("<CB))^9->rE?p3`[K`");
      sQLWarningArray0[3] = sQLWarning3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, 0, 1415);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "nc?ycW]PE+.I&;~";
      int int0 = 0;
      SQLWarning sQLWarning0 = new SQLWarning("j^Be^&Tz<(", "nc?ycW]PE+.I&;~", 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0, 62, 62);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1930, false, true, 1930, (-1), sQLIntegrityConstraintViolationException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-1), false, true, 1930, 1930);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(1930, false, false, 1930, 1930);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(1, false, false, 858, 503);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(1, false, false, 100, (-1));
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(100, false, true, 858, 0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(93, false, false, (-417), 0);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation((-160), true, true, 1930, (-417), dataTruncation0);
      dataTruncationArray0[7] = dataTruncation7;
      DataTruncation dataTruncation8 = new DataTruncation(44, true, true, 858, 1461, dataTruncation0);
      dataTruncationArray0[8] = dataTruncation8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 125);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) resettableIterator0;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("G(&'RT%5TdK7Cj$p[xY", "G(&'RT%5TdK7Cj$p[xY");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("G(&'RT%5TdK7Cj$p[xY", "G(&'RT%5TdK7Cj$p[xY", 0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("G(&'RT%5TdK7Cj$p[xY", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("G(&'RT%5TdK7Cj$p[xY", "G(&'RT%5TdK7Cj$p[xY", 0);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("eSsTU=h$", "The predicate to call must not be null");
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 0);
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) objectArrayIterator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      iteratorArray0[2] = iterator0;
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      Closure<SQLTransientException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) zippingIterator0, (Closure<? super SQLTransactionRollbackException>) closure0);
      int int0 = 16;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) zippingIterator0, 16);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Hashtable<DataTruncation, String> hashtable0 = new Hashtable<DataTruncation, String>();
      EntrySetMapIterator<DataTruncation, String> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, String>(hashtable0);
      AbstractMapIteratorDecorator<DataTruncation, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, String>(entrySetMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) abstractMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<IIOMetadataNode, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<IIOMetadataNode, String> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator1, (Iterator<? extends IIOMetadataNode>) mapIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      MapIterator<Integer, SQLTransientException> mapIterator2 = IteratorUtils.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) mapIterator2, 2853L);
      Predicate<SQLNonTransientConnectionException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      int int0 = 544;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) nodeListIterator0, 544);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Enumeration<DataTruncation> enumeration0 = (Enumeration<DataTruncation>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      Enumeration<DataTruncation> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(") > toIndex(");
      iIOMetadataNode0.getAttributeNodeNS(") > toIndex(", "MapIterator[]");
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNode("{}");
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLException>) resettableIterator0);
      ResettableIterator<SQLNonTransientException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) resettableIterator1, (Predicate<? super SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ImI", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.spliterator();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      int int0 = (-503);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, (-503));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }
}
