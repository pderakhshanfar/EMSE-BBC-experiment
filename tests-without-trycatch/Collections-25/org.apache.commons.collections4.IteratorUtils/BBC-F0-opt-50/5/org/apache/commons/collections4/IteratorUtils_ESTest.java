/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:59:53 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedMapIterator<Iterator<SQLDataException>, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<Iterator<SQLDataException>>[] iteratorArray0 = (Iterator<Iterator<SQLDataException>>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<Iterator<SQLDataException>>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<Iterator<SQLDataException>>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<Iterator<SQLDataException>>) orderedMapIterator0;
      iteratorArray0[3] = (Iterator<Iterator<SQLDataException>>) orderedMapIterator0;
      iteratorArray0[4] = (Iterator<Iterator<SQLDataException>>) orderedMapIterator0;
      ZippingIterator<Iterator<SQLDataException>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLDataException>>[]) iteratorArray0);
      ZippingIterator<Iterator<SQLDataException>> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLDataException>>) zippingIterator0, (Iterator<? extends Iterator<SQLDataException>>) iteratorArray0[2]);
      assertNotSame(zippingIterator1, zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("sxel5YPV6;`3", (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 9, sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLTimeoutException0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableIterator0, 10);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0);
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) listIterator0);
      LoopingIterator<SQLRecoverableException> loopingIterator0 = new LoopingIterator<SQLRecoverableException>(list0);
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) loopingIterator0, (long) 0);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "}DRW[hUy", intArray0);
      vector0.add(batchUpdateException0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      SingletonIterator<Vector<SQLWarning>> singletonIterator0 = new SingletonIterator<Vector<SQLWarning>>(vector0);
      Vector<SQLWarning> vector1 = IteratorUtils.get((Iterator<Vector<SQLWarning>>) singletonIterator0, 0);
      assertEquals("[]", vector1.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("G;GO;!50W", "G;GO;!50W");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>(1328, 1328);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedHashSet0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<SQLDataException>) singletonListIterator0;
      iteratorArray0[1] = (Iterator<SQLDataException>) loopingIterator0;
      iteratorArray0[2] = (Iterator<SQLDataException>) singletonListIterator0;
      iteratorArray0[3] = (Iterator<SQLDataException>) loopingIterator0;
      iteratorArray0[4] = (Iterator<SQLDataException>) singletonListIterator0;
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) mapIterator0;
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) mapIterator0;
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) mapIterator0;
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[3] = (Iterator<SQLFeatureNotSupportedException>) orderedIterator0;
      iteratorArray0[4] = (Iterator<SQLFeatureNotSupportedException>) mapIterator0;
      iteratorArray0[5] = (Iterator<SQLFeatureNotSupportedException>) mapIterator0;
      iteratorArray0[6] = (Iterator<SQLFeatureNotSupportedException>) mapIterator0;
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = (Enumeration<SQLIntegrityConstraintViolationException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = stack0.iterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (long) 10);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[2];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      Class<DataTruncation> class0 = DataTruncation.class;
      DataTruncation[] dataTruncationArray1 = IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableListIterator0, class0);
      assertNotSame(dataTruncationArray1, dataTruncationArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) stack0);
      Class<DataTruncation> class0 = DataTruncation.class;
      DataTruncation[] dataTruncationArray0 = IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableIterator0, class0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator((Object[]) dataTruncationArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLDataException>>) null, (Iterator<? extends Iterator<SQLDataException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "", 0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLWarning0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(singletonIterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("2m:5\"o)>3(pg+J");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Hashtable<Object, Boolean> hashtable0 = new Hashtable<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashtable0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[1] = predicate0;
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, (Transformer<? super Object, ? extends String>[]) null, constantTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonIterator0, (Transformer<? super SQLClientInfoException, String>) switchTransformer0, "2y)W)#?B%XLgOW59", "", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Transformer must return an instanceof Boolean, it was a null object
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, 100);
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null, 100, sQLWarning0);
      HashMap<SQLClientInfoException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLClientInfoException, SQLNonTransientConnectionException>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      hashMap0.put(sQLClientInfoException0, sQLNonTransientConnectionException0);
      EntrySetMapIterator<SQLClientInfoException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLNonTransientConnectionException>(hashMap0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) entrySetMapIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResettableListIterator<HashMap<Integer, ClientInfoStatus>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<HashMap<Integer, ClientInfoStatus>>) resettableListIterator0, (Transformer<? super HashMap<Integer, ClientInfoStatus>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 1, 0, sQLTransientException0);
      stack0.push(dataTruncation0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) stack0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) stack0);
      DataTruncation dataTruncation0 = new DataTruncation(16, false, false, 16, (-1748));
      stack0.add(dataTruncation0);
      Class<DataTruncation> class0 = DataTruncation.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableIterator0, class0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null, (-2067));
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, (-1), (-1), sQLSyntaxErrorException0);
      ClosureTransformer<DataTruncation> closureTransformer0 = new ClosureTransformer<DataTruncation>((Closure<? super DataTruncation>) null);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) closureTransformer0);
      Class<DataTruncation> class0 = DataTruncation.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends DataTruncation>) iterator0, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ClosureTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) arrayList0);
      long[] longArray0 = new long[8];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "hKXP#VNPiqu^m4ZU", hashtable0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("hKXP#VNPiqu^m4ZU", (String) null, 401, longArray0, sQLClientInfoException0);
      arrayList0.add((Object) batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Integer>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<SQLException, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTransientConnectionException>("7I;>", classArray0, classArray0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) invokerTransformer0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '7I;>' on 'class java.sql.SQLTransientConnectionException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      // Undeclared exception!
//      try { 
        IteratorUtils.contains(iterator0, (Object) locale_FilteringMode0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Comparator<SQLIntegrityConstraintViolationException> comparator0 = (Comparator<SQLIntegrityConstraintViolationException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Integer, EnumSet<ComparatorPredicate.Criterion>> hashMap0 = new HashMap<Integer, EnumSet<ComparatorPredicate.Criterion>>();
      EntrySetMapIterator<Integer, EnumSet<ComparatorPredicate.Criterion>> entrySetMapIterator0 = new EntrySetMapIterator<Integer, EnumSet<ComparatorPredicate.Criterion>>(hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>) entrySetMapIterator0, (Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientException[]) null, 2809, 2809);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(integerArray0, 0, (-2203));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[4];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, (-1237), (-3054));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 10);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, 1108, (-1368));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "L\"R1fwatj1-NU}");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, 73, (-1348));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("wCGtp", "", 0, (Throwable) null);
      Throwable[] throwableArray0 = sQLFeatureNotSupportedException0.getSuppressed();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object[]) throwableArray0, 0, (-3229));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayList<SQLRecoverableException>[] arrayListArray0 = (ArrayList<SQLRecoverableException>[]) Array.newInstance(ArrayList.class, 6);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(arrayListArray0, 1510, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLTransientConnectionException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 5887, 1160);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("> Y/!UYs#GT");
      SQLWarning sQLWarning0 = new SQLWarning("", sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("V:X@RR;ZVWY=", "V:X@RR;ZVWY=", 0, sQLWarning0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>> linkedList0 = new LinkedList<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>();
      LoopingListIterator<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>> loopingListIterator0 = new LoopingListIterator<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>(linkedList0);
      HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>();
      linkedList0.offerLast(hashMap0);
      LinkedList<InstanceofPredicate> linkedList1 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList1);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>) loopingListIterator0, (Closure<? super HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>) ifClosure0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) objectArrayIterator0, (Predicate<? super BatchUpdateException>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) objectArrayIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(objectArrayIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Enumeration must not be null");
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableIterator0, 10);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 5);
      Transformer<IIOMetadataNode, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("'[Q#ZQ+K`4X#", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0, 100);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method ''[Q#ZQ+K`4X#' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) objectArrayListIterator0, 0L, (-3203L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "", 0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashtable0, sQLWarning0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "", "", "\"ee=eH?L6T^)F9SkR");
      assertEquals("null\"ee=eH?L6T^)F9SkR", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.list.TreeList$TreeListIterator", "", hashMap0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iIOMetadataNode0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(equalPredicate0, constantTransformer0, constantTransformer0);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonIterator0, (Transformer<? super SQLClientInfoException, String>) ifTransformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, String>) transformer0, "", "Hn'8~6|St8WO", "");
      assertEquals("Hn'8~6|St8WO", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Closure must not be null", "org.apache.commons.collections4.iterators.UnmodifiableMapIterator", (Map<String, ClientInfoStatus>) null);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("Closure must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonIterator0, (Transformer<? super SQLClientInfoException, String>) constantTransformer0, "b@E&3Qq(_z;1/`Z", "YuV1By[i0^u", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLWarning0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      Transformer<SQLClientInfoException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "Lew>F:>U3/p3eSkz", (String) null, "[7~;P+F~Ye?JZlF*qd");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "|W^xcCU", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 0, sQLWarning0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashtable0, sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, (String) null, "", "UDcBkol[).");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" hy_[:", "B-;.h!F,&}Ef");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLNonTransientException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonIterator0, (Transformer<? super SQLClientInfoException, String>) null, "Closure must not be null", "33_#EZ_sn[%b}s#I'", "^GffSkTBObk");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = new Integer(14);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>((DataTruncation) null);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) singletonListIterator0, (Iterator<? extends DataTruncation>) singletonListIterator0);
      DataTruncation dataTruncation0 = IteratorUtils.get((Iterator<DataTruncation>) zippingIterator0, 0);
      assertNull(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer(179);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Integer>) singletonListIterator0, 1458);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1457
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Node must not be null", "Node must not be null");
      SQLWarning sQLWarning0 = new SQLWarning("Node must not be null", sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Node must not be null", sQLTransactionRollbackException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("im'\u0007V}C$C.<Bu8");
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransactionRollbackException0, (Equator<Object>) defaultEquator0);
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Predicate<SQLNonTransientConnectionException> predicate0 = TruePredicate.truePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("q)Z`T4'?");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("n4A", "n4A", 14);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransactionRollbackException0, (Equator<Object>) defaultEquator0);
      NotPredicate<String> notPredicate0 = new NotPredicate<String>(predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<String>) resettableIterator0, (Predicate<? super String>) notPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLClientInfoException>) resettableIterator0, (Object) sQLClientInfoException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Vector<SQLWarning>>) null, (Predicate<? super Vector<SQLWarning>>) allPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Vector<SQLWarning>> linkedList0 = new LinkedList<Vector<SQLWarning>>();
      ReverseListIterator<Vector<SQLWarning>> reverseListIterator0 = new ReverseListIterator<Vector<SQLWarning>>(linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Vector<SQLWarning>>) reverseListIterator0, (Predicate<? super Vector<SQLWarning>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, (-1));
      sQLExceptionArray0[3] = (SQLException) sQLNonTransientConnectionException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLNonTransientConnectionException0);
      SQLException sQLException0 = IteratorUtils.find((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) identityPredicate0);
      assertSame(sQLException0, sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, (-1));
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLNonTransientConnectionException0);
      SQLException sQLException0 = IteratorUtils.find((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) identityPredicate0);
      assertNull(sQLException0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IIOMetadataNode iIOMetadataNode0 = IteratorUtils.find((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      assertNull(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("bzJ8Hq_", "bzJ8Hq_", 5, longArray0, sQLRecoverableException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, true);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) singletonIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) singletonIterator0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLException>) allPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>> linkedList0 = new LinkedList<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>();
      LoopingListIterator<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>> loopingListIterator0 = new LoopingListIterator<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>(linkedList0);
      LinkedList<InstanceofPredicate> linkedList1 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList1);
      HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>();
      loopingListIterator0.add(hashMap0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>) loopingListIterator0, (Closure<? super HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>> linkedList0 = new LinkedList<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>();
      LoopingListIterator<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>> loopingListIterator0 = new LoopingListIterator<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>(linkedList0);
      LinkedList<InstanceofPredicate> linkedList1 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList1);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      IteratorUtils.apply((Iterator<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>) loopingListIterator0, (Closure<? super HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>) ifClosure0);
      assertFalse(loopingListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>> linkedList0 = new LinkedList<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>();
      LoopingListIterator<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>> loopingListIterator0 = new LoopingListIterator<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>(linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>) loopingListIterator0, (Closure<? super HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Object, SQLClientInfoException> hashMap0 = new HashMap<Object, SQLClientInfoException>();
      Transformer<Object, SQLClientInfoException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLClientInfoException>) hashMap0);
      TransformerClosure<SQLException> transformerClosure0 = new TransformerClosure<SQLException>(transformer0);
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) null, (Closure<? super SQLSyntaxErrorException>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("y-Gg$FBo", "`6gJ5eY(M$yH2xd4");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "", 0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLWarning0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) hashSet0);
      DataTruncation dataTruncation0 = new DataTruncation(100, false, true, 100, 0);
      hashSet0.add(dataTruncation0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) resettableIterator0, (Class<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ListIterator must not be null", "ListIterator must not be null", 0, sQLTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, 0, sQLRecoverableException0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<Object, SQLIntegrityConstraintViolationException>("", classArray0, classArray0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLNonTransientException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray(iteratorArray0[1]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterable<StringTokenizer> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) listIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>((DataTruncation) null, true);
      Iterable<SQLWarning> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLWarning>) singletonIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) treeSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null, (Collection<? super DataTruncation>) priorityQueue0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7QoW_E00eeD0>X");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("O1LjkyrWE}^FK6;.z");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) hashSet0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) resettableListIterator0, (Predicate<? super SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) instanceofPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<SQLException, SQLIntegrityConstraintViolationException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableIterator0, (Transformer<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) iterator0, (Transformer<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) iterator1, (Iterator<?>) iterator0, (Iterator<?>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Transformer<SQLException, SQLIntegrityConstraintViolationException> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) null, (Transformer<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<StringTokenizer>) resettableIterator0, (-2424L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<SQLClientInfoException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLClientInfoException, SQLNonTransientConnectionException>();
      EntrySetMapIterator<SQLClientInfoException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLNonTransientConnectionException>(hashMap0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) entrySetMapIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, 0, 2267);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, (-553));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Integer integer0 = new Integer(0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableIterator0, (Transformer<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<Integer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Integer>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 9, 9);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) objectArrayListIterator0, (-1938L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Predicate<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 958, 958);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((String[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLClientInfoException>) resettableIterator0, (Object) sQLClientInfoException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[4];
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Hn'8~6|St8WO", "261K.le[wO^[zy", 2, intArray0, sQLWarning0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 1701);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((ArrayList<Boolean>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }
}
