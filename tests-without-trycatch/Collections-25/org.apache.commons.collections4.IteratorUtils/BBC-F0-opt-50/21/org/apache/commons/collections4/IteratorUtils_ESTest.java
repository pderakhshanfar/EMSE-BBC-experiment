/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 12:31:49 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Array class must not be null");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("Array class must not be null", "");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("Iterator must not be null.", sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("", "");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("Iterator must not be null.", "", 1073741824);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 2);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 1073741824;
      intArray0[5] = (-1);
      intArray0[6] = 1073741824;
      intArray0[7] = (-1921);
      intArray0[8] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "pfW'I", (-1), intArray0, sQLNonTransientConnectionException5);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("pfW'I", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", intArray0, batchUpdateException2);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException();
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      int[] intArray1 = new int[3];
      intArray1[0] = 10;
      intArray1[1] = (-1921);
      intArray1[2] = (-1921);
      BatchUpdateException batchUpdateException5 = new BatchUpdateException(intArray1);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("org.apache.commons.collections4.map.Flat3Map$ValuesIterator", "NodeList must not be null", intArray0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException();
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) resettableListIterator0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) listIterator0;
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      ListIterator<BatchUpdateException> listIterator1 = arrayList0.listIterator();
      iteratorArray0[1] = (Iterator<BatchUpdateException>) listIterator1;
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[10];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0, sQLNonTransientException0);
      ClosureTransformer<SQLClientInfoException> closureTransformer0 = new ClosureTransformer<SQLClientInfoException>((Closure<? super SQLClientInfoException>) null);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) closureTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ClosureTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("9wjEQe", "9wjEQe", (-1));
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(transformer0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) transformerPredicate0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) listIterator1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("9wjEQe", "w:1", sQLInvalidAuthorizationSpecException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException1);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0;
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Transformer must return an instanceof Boolean, it was a null object
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("hEG0B#0(<f", "[RM-j:WQBxt");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException(sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException(sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("[RM-j:WQBxt", "[RM-j:WQBxt", (-2040));
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, 1382L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // You must invoke setComparator() to set a comparator first.
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[2];
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      IteratorUtils.get((Iterator<StringTokenizer>) objectArrayIterator0, 1);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("suffix may not be null", "_\"", 1, sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("suffix may not be null", (String) null, sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("suffix may not be null", "Cannot store a duplicate value (\"", 2291, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("m", "", 162);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("Cannot store a duplicate value (\"");
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 4);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate1, predicate1);
      PredicateTransformer<Integer> predicateTransformer0 = new PredicateTransformer<Integer>(orPredicate0);
      Boolean boolean0 = predicateTransformer0.transform((Integer) null);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer(boolean0);
      Transformer<Object, Boolean> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) orPredicate0, (Transformer<? super Object, ? extends Boolean>) transformer0, (Transformer<? super Object, ? extends Boolean>) transformer0);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(transformer1);
      predicateArray0[1] = (Predicate<SQLException>) transformerPredicate0;
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      predicateArray0[2] = (Predicate<SQLException>) anyPredicate0;
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate1);
      predicateArray0[3] = (Predicate<SQLException>) notPredicate0;
      OnePredicate<SQLFeatureNotSupportedException> onePredicate0 = new OnePredicate<SQLFeatureNotSupportedException>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) onePredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[2];
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      IteratorUtils.get((Iterator<StringTokenizer>) objectArrayIterator0, 1);
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>(4);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      arrayList0.add(clientInfoStatus0);
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends ClientInfoStatus>) arrayList0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<ClientInfoStatus>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>(2155, 2155);
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(vector0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      vector0.add(iIOMetadataNode0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) loopingListIterator0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) loopingListIterator0, (Predicate<? super IIOMetadataNode>) nullIsFalsePredicate0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Integer[] integerArray0 = new Integer[6];
      int int0 = 125;
      Integer integer0 = new Integer(125);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1302));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1302));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      integerArray0[5] = integer5;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) objectArrayIterator0, int0);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0, 1658);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jL\":;E[|&#UblrT$");
      Iterator<?> iterator0 = IteratorUtils.getIterator("jL\":;E[|&#UblrT$");
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("jL\":;E[|&#UblrT$");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Closure<LinkedList>>) iterator0, (Transformer<? super Closure<LinkedList>, String>) transformer0, "jL\":;E[|&#UblrT$", "?qOkJAV/", "jL\":;E[|&#UblrT$");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'jL\":;E[|&#UblrT$' on 'class java.lang.String' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 5);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      ObjectArrayListIterator<Class<SQLClientInfoException>> objectArrayListIterator0 = new ObjectArrayListIterator<Class<SQLClientInfoException>>(classArray0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Class<SQLClientInfoException>>) objectArrayListIterator0, (Predicate<? super Class<SQLClientInfoException>>) transformerPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Transformer must return an instanceof Boolean, it was a null object
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[1];
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) resettableListIterator0, (-3433));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -3433
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(3917);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(10);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(3917);
      integerArray0[5] = integer5;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.contains((Iterator<ArrayList<Transformer>>) resettableListIterator0, (Object) integer4);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Predicate must not be null");
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("OF^>YgTR: N^", "Closure must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 2225, sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLIntegrityConstraintViolationException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException2;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      Factory<DataTruncation> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, DataTruncation> factoryTransformer0 = new FactoryTransformer<Object, DataTruncation>(factory0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Transformer<? super SQLTimeoutException, ? extends SQLWarning>) factoryTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 2225);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringTokenizer stringTokenizer0 = new StringTokenizer("rNwb]h@Ih]7Z", "");
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "rNwb]h@Ih]7Z");
      StringTokenizer stringTokenizer2 = new StringTokenizer("s/!{u:");
      StringTokenizer stringTokenizer3 = new StringTokenizer("o", (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("@ugU$");
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator("iX.wZ?\"z");
      MapIterator<HashSet<SQLNonTransientException>, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      batchUpdateException0.getSuppressed();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Enumeration must not be null", "", batchUpdateException0);
      ConstantTransformer.constantTransformer(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Vector<LinkedHashSet>>) mapIterator0, (Transformer<? super Vector<LinkedHashSet>, String>) constantTransformer0, (String) null, "iX.wZ?\"z", "Iterator must not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("spz%Hgva)ZUB:p[8");
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("spz%Hgva)ZUB:p[8");
      String string0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<LinkedList<ArrayDeque>>) iterator0, (Transformer<? super LinkedList<ArrayDeque>, String>) transformer0, "", "spz%Hgva)ZUB:p[8", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Class<IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<ArrayDeque<HashSet>>) resettableIterator0, (Transformer<? super ArrayDeque<HashSet>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.emptyIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringTokenizer stringTokenizer0 = new StringTokenizer("rNwb]h@Ih]7Z", "");
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "rNwb]h@Ih]7Z");
      StringTokenizer stringTokenizer2 = new StringTokenizer("s/!{u:");
      stringTokenizer0.nextToken();
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      stringTokenizerArray0[0] = stringTokenizer2;
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<StringTokenizer>) objectArrayIterator0;
      stringTokenizer1.hasMoreElements();
      iteratorArray0[1] = (Iterator<StringTokenizer>) objectArrayIterator0;
      iteratorArray0[2] = (Iterator<StringTokenizer>) objectArrayIterator0;
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      IteratorUtils.get((Iterator<StringTokenizer>) zippingIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.getIterator("4UdU/1MJ");
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 3);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null, false);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) singletonIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.emptyIterator();
      HashMap<Object, ServiceLoader<SQLSyntaxErrorException>> hashMap0 = new HashMap<Object, ServiceLoader<SQLSyntaxErrorException>>();
      IteratorUtils.emptyIterator();
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Hashtable<EnumSet<Locale.FilteringMode>, DataTruncation> hashtable0 = new Hashtable<EnumSet<Locale.FilteringMode>, DataTruncation>();
      Enumeration<DataTruncation> enumeration0 = hashtable0.elements();
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      int[] intArray0 = new int[1];
      intArray0[0] = 190;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("", "", batchUpdateException0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      Iterator<SQLDataException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Transformer must not be null", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.toString((Iterator<ArrayDeque<HashSet>>) resettableListIterator0, (Transformer<? super ArrayDeque<HashSet>, String>) invokerTransformer0);
      LinkedList<LinkedList<SQLSyntaxErrorException>> linkedList0 = new LinkedList<LinkedList<SQLSyntaxErrorException>>();
      IteratorUtils.loopingListIterator((List<LinkedList<SQLSyntaxErrorException>>) linkedList0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Transformer must not be null", "`(=Sl-Rv[");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "`(=Sl-Rv[", 100);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[]", "Transformer must not be null", sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Transformer must not be null", "`(=Sl-Rv[");
      sQLNonTransientExceptionArray0[3] = sQLNonTransientException0;
      IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Transformer must not be null", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.toString((Iterator<ArrayDeque<HashSet>>) resettableListIterator0, (Transformer<? super ArrayDeque<HashSet>, String>) invokerTransformer0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) orderedMapIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringTokenizer stringTokenizer0 = new StringTokenizer("rNwb]h@Ih]7Z", "");
      StringTokenizer stringTokenizer1 = new StringTokenizer("s/!{u:", "s/!{u:", true);
      StringTokenizer stringTokenizer2 = new StringTokenizer("", "1zW>my1", true);
      stringTokenizer1.nextToken("C");
      stringTokenizer0.nextToken();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      stringTokenizerArray0[0] = stringTokenizer1;
      stringTokenizerArray0[1] = stringTokenizer2;
      stringTokenizerArray0[2] = stringTokenizer0;
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<StringTokenizer>) objectArrayIterator0;
      objectArrayIterator0.reset();
      iteratorArray0[1] = (Iterator<StringTokenizer>) objectArrayIterator0;
      iteratorArray0[2] = (Iterator<StringTokenizer>) objectArrayIterator0;
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      IteratorUtils.get((Iterator<StringTokenizer>) zippingIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableIterator0, class0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator((SQLSyntaxErrorException) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<LinkedList<StringTokenizer>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedMapIterator<SQLFeatureNotSupportedException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends Properties>) orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Transformer must not be null", (Class<?>[]) null, (Object[]) null);
      OrderedMapIterator<Properties, ClientInfoStatus> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Properties, ClientInfoStatus> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, ClientInfoStatus>) orderedMapIterator0);
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) mapIterator0, 1995L);
      IteratorUtils.toString((Iterator<ArrayDeque<HashSet>>) boundedIterator0, (Transformer<? super ArrayDeque<HashSet>, String>) invokerTransformer0);
      LinkedList<LinkedList<SQLSyntaxErrorException>> linkedList0 = new LinkedList<LinkedList<SQLSyntaxErrorException>>();
      LinkedList<SQLSyntaxErrorException> linkedList1 = new LinkedList<SQLSyntaxErrorException>();
      linkedList0.add(linkedList1);
      IteratorUtils.loopingListIterator((List<LinkedList<SQLSyntaxErrorException>>) linkedList0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) uniquePredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FactoryTransformer<SQLNonTransientConnectionException, SQLNonTransientConnectionException> factoryTransformer0 = new FactoryTransformer<SQLNonTransientConnectionException, SQLNonTransientConnectionException>((Factory<? extends SQLNonTransientConnectionException>) null);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) factoryTransformer0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      InvokerTransformer<SQLNonTransientConnectionException, String> invokerTransformer0 = new InvokerTransformer<SQLNonTransientConnectionException, String>("7{OC;:*cw^=\"4I", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLNonTransientConnectionException, String>) invokerTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator0, class0);
      HashMap<Object, ServiceLoader<SQLSyntaxErrorException>> hashMap0 = new HashMap<Object, ServiceLoader<SQLSyntaxErrorException>>();
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<Object>>) null, (Transformer<? super PriorityQueue<Object>, String>) null, ".JigDC}Y!Q", ".JigDC}Y!Q", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      int int0 = 0;
      ResettableListIterator<Properties> resettableListIterator0 = new SingletonListIterator<Properties>(properties0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      ListIterator<Object> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate1);
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Object>) listIterator0, (Transformer<? super Object, String>) ifTransformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("@kcs>fA;IUH5X3XOT;l");
      StringTokenizer stringTokenizer1 = new StringTokenizer("@kcs>fA;IUH5X3XOT;l");
      StringTokenizer stringTokenizer2 = new StringTokenizer("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", true);
      StringTokenizer stringTokenizer3 = new StringTokenizer("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", "xRV$e$", false);
      StringTokenizer stringTokenizer4 = new StringTokenizer("xRV$e$", "");
      StringTokenizer stringTokenizer5 = new StringTokenizer("", "xRV$e$", true);
      StringTokenizer stringTokenizer6 = new StringTokenizer("T^&ESHlRz", "", true);
      StringTokenizer stringTokenizer7 = new StringTokenizer("D[m}Srr/BF5]ziBii", "R=?4M*;Z4gEbI#N3", true);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[2];
      stringTokenizerArray0[0] = stringTokenizer1;
      stringTokenizerArray0[1] = stringTokenizer2;
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) null, 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      EmptyIterator.emptyIterator();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<Vector<LinkedHashSet>>) resettableIterator0, (Transformer<? super Vector<LinkedHashSet>, String>) transformer0, "46", "", "");
      SQLDataException sQLDataException0 = new SQLDataException("Entry does not exist: ");
      ConstantTransformer.constantTransformer((TreeSet<ArrayList<DataTruncation>>) null);
      SQLDataException sQLDataException1 = new SQLDataException((String) null, ">:Dc&*t^Bj#", 27);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException>(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Entry does not exist: ", "Entry does not exist: ", (-4029));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLWarning0, comparator0, comparatorPredicate_Criterion0);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      Transformer<Object, String> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) comparatorPredicate0, (Transformer<? super Object, ? extends String>) factoryTransformer0, (Transformer<? super Object, ? extends String>) factoryTransformer0);
      IteratorUtils.toString((Iterator<Vector<LinkedHashSet>>) null, (Transformer<? super Vector<LinkedHashSet>, String>) transformer0, "", "Entry does not exist: ", "bY+|&|&d|o\"(r,#5");
      SQLDataException sQLDataException0 = new SQLDataException("k0nlGOi7-/J$g$");
      TreeSet<ArrayList<DataTruncation>> treeSet0 = new TreeSet<ArrayList<DataTruncation>>();
      ConstantTransformer.constantTransformer(treeSet0);
      SQLDataException sQLDataException1 = new SQLDataException("U]u2m]YE", "", (-42));
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException>(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, 2908L);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      OrderedMapIterator<String, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, Properties>(orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Integer[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>(comparator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "Closure must not be null", (-1489));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientException0);
      sQLTransientException0.addSuppressed(sQLTransientConnectionException0);
      priorityQueue0.add(sQLTransientException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) null, (Collection<? super SQLTimeoutException>) priorityQueue0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableIterator0, class0);
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null, (Collection<? super Properties>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = 2908L;
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Stack<Locale.FilteringMode>>) null, (Predicate<? super Stack<Locale.FilteringMode>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@ruIQ(:u1}");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("@ruIQ(:u1}", sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) listIterator1;
      MapIterator<SQLIntegrityConstraintViolationException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[2] = (Iterator<SQLIntegrityConstraintViolationException>) mapIterator0;
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0);
      IteratorUtils.skippingIterator(iterator0, 1771L);
      IteratorUtils.isEmpty(iteratorArray0[2]);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode>(orderedMapIterator0);
      EqualPredicate<SQLNonTransientException> equalPredicate0 = new EqualPredicate<SQLNonTransientException>((SQLNonTransientException) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      int int0 = 100;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 100, 61);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[6];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties0;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties0;
      propertiesArray0[5] = properties0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 1, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("");
      stringTokenizerArray0[2] = stringTokenizer2;
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) objectArrayIterator0, 1488);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1485
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@ruIQ(:u1}");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Closure<SQLNonTransientException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) closure0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Stack<Locale.FilteringMode>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode>(orderedMapIterator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      IteratorUtils.emptyIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("The comparator must not be null", "The comparator must not be null", 1130);
      DataTruncation dataTruncation0 = new DataTruncation(3, false, false, (-1342), 1130, sQLTransientException0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) singletonListIterator0, (Predicate<? super DataTruncation>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1342), (-1342));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SkippingIterator<SQLIntegrityConstraintViolationException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, 2908L);
      IteratorUtils.isEmpty(skippingIterator0);
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) orderedIterator0, (Iterator<? extends StringTokenizer>) orderedIterator0, (Iterator<? extends StringTokenizer>) orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ?>) orderedMapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("InstantiateFactory: Constructor must be public");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("InstantiateFactory: Constructor must be public", "The predicate and transformer arrays must be the same size", 1130, sQLNonTransientConnectionException0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "AO,ch", intArray0, sQLTransientConnectionException0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<Vector<LinkedHashSet>>) orderedMapIterator0, (Transformer<? super Vector<LinkedHashSet>, String>) constantTransformer0, "The predicate and transformer arrays must be the same size", "InstantiateFactory: Constructor must be public", ", ");
      SQLDataException sQLDataException0 = new SQLDataException("The predicate and transformer arrays must be the same size");
      SQLDataException sQLDataException1 = new SQLDataException("", "", 1130);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLDataException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException>(orderedMapIterator1);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[7];
      SQLWarning sQLWarning0 = new SQLWarning("", "InstantiateFactory: Constructor must be public, ", 1130, sQLTransientConnectionException0);
      sQLWarningArray0[0] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("'D|'J_mie", " ZHC-c$;", 1130, sQLDataException0);
      sQLWarningArray0[1] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning("U*vPBfg\"tC?b7YBL", "", sQLWarning1);
      sQLWarningArray0[2] = sQLWarning2;
      DataTruncation dataTruncation0 = new DataTruncation(1130, false, false, (-4765), 0);
      sQLWarningArray0[3] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning3 = new SQLWarning("");
      sQLWarningArray0[4] = sQLWarning3;
      DataTruncation dataTruncation1 = new DataTruncation(2356, true, false, 0, 93, sQLDataException0);
      sQLWarningArray0[5] = (SQLWarning) dataTruncation1;
      SQLWarning sQLWarning4 = new SQLWarning(" ZHC-c$;", "InstantiateFactory: Constructor must be public", (-4765), sQLWarning1);
      sQLWarningArray0[6] = sQLWarning4;
      IteratorUtils.arrayIterator(sQLWarningArray0, 0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      String string0 = "0.qrsb=L6mQt{Hpo(";
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLException sQLException0 = new SQLException("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("Vhw7if~FW3%Lk*Fgg\u0002");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Closure<SQLNonTransientException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) closure0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Stack<Locale.FilteringMode>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      IteratorUtils.arrayListIterator(propertiesArray0, 0, 0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(linkedList0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) reverseListIterator0;
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) reverseListIterator0;
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) reverseListIterator0;
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) reverseListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, 2908L);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) resettableListIterator0);
      OrderedMapIterator<SQLTimeoutException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode>(orderedMapIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) arrayList0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) linkedList0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Closure<SQLNonTransientException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) null, (Closure<? super SQLInvalidAuthorizationSpecException>) closure0);
      IteratorUtils.emptyIterator();
      LinkedList<LinkedList<SQLSyntaxErrorException>> linkedList0 = new LinkedList<LinkedList<SQLSyntaxErrorException>>();
      Stack<LinkedList<SQLSyntaxErrorException>> stack0 = new Stack<LinkedList<SQLSyntaxErrorException>>();
      IteratorUtils.loopingListIterator((List<LinkedList<SQLSyntaxErrorException>>) stack0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("K");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) resettableListIterator0);
      OrderedMapIterator<SQLTimeoutException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode>(orderedMapIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) arrayList0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.emptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 44;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) null, 44);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-143);
      intArray0[1] = 1130;
      intArray0[2] = 50;
      intArray0[3] = (-6118);
      intArray0[5] = 24;
      intArray0[6] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", batchUpdateException0);
      EqualPredicate<SQLNonTransientException> equalPredicate0 = new EqualPredicate<SQLNonTransientException>(sQLFeatureNotSupportedException0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, TreeSet<LinkedList>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      InvokerTransformer.invokerTransformer("");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 50);
      StringTokenizer stringTokenizer0 = new StringTokenizer("MapIterator[", "");
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ?>) orderedMapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("InstantiateFactory: Constructor must be public");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("-^8O", "The predicate and transformer arrays must be the same size", 1130, sQLNonTransientConnectionException0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "AO,ch", intArray0, sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      Transformer<Object, String> transformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<Vector<LinkedHashSet>>) orderedMapIterator0, (Transformer<? super Vector<LinkedHashSet>, String>) transformer0, "The predicate and transformer arrays must be the same size", "-^8O", ", ");
      SQLDataException sQLDataException0 = new SQLDataException("The predicate and transformer arrays must be the same size");
      SQLDataException sQLDataException1 = new SQLDataException("", "", (-1));
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLDataException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException>(orderedMapIterator1);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ?>) orderedMapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((String) null, (String) null, 855);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException1);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode>(abstractOrderedMapIteratorDecorator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ?>) orderedMapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((String) null, (String) null, 855);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException1);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLSyntaxErrorException1);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      String string0 = " cannot be null";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" cannot be null", sQLSyntaxErrorExceptionArray0[1]);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException0;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      EqualPredicate<SQLNonTransientException> equalPredicate0 = new EqualPredicate<SQLNonTransientException>(sQLSyntaxErrorExceptionArray0[1]);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      InvokerTransformer.invokerTransformer(" cannot be null");
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      EqualPredicate.equalPredicate((Vector<SQLClientInfoException>) stack0, (Equator<Vector<SQLClientInfoException>>) null);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(" cannot be null", " cannot be null", (-2655));
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      EqualPredicate<SQLException> equalPredicate1 = new EqualPredicate<SQLException>(sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      ResettableListIterator<SQLWarning> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLWarning>) resettableListIterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>(comparator0);
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(treeSet0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) loopingIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) loopingIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      loopingIterator0.forEachRemaining(consumer0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-7287);
      intArray0[1] = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) null, (Transformer<? super SQLDataException, ? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) vector0);
      Factory<StringTokenizer> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLSyntaxErrorException, StringTokenizer> factoryTransformer0 = new FactoryTransformer<SQLSyntaxErrorException, StringTokenizer>(factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, ? extends StringTokenizer>) factoryTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) resettableListIterator0);
      OrderedMapIterator<SQLTimeoutException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode>(orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte) (-77);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%'7jVks", "%'7jVks", 100);
      StringTokenizer stringTokenizer0 = new StringTokenizer("o", (String) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) listIterator0, iterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("Yb]tp", "o");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("", "qoA;UX?D.r!", (byte)1, sQLTimeoutException2);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, (-42), 416);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MapIterator<SQLClientInfoException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 9);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(stack0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("!w!N6V)J,1ZI4#}{4Z@", (String) null, 2061);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", (String) null);
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLRecoverableException0);
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vector<Properties> vector0 = new Stack<Properties>();
      Vector<Properties> vector1 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (Throwable) null);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>(comparator0);
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(treeSet0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) loopingIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) loopingIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", 9, (Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", (Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" cannot be null", sQLSyntaxErrorExceptionArray0[1]);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException0;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      EqualPredicate<SQLNonTransientException> equalPredicate0 = new EqualPredicate<SQLNonTransientException>(sQLSyntaxErrorExceptionArray0[1]);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>(" cannot be null");
      String string0 = null;
      sQLSyntaxErrorException0.spliterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Vector<LinkedHashSet>>) resettableIterator0, (Transformer<? super Vector<LinkedHashSet>, String>) constantTransformer0, ", ", (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (Throwable) null);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      EqualPredicate<SQLNonTransientException> equalPredicate0 = new EqualPredicate<SQLNonTransientException>(sQLSyntaxErrorException0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      InvokerTransformer.invokerTransformer("");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%'7jVks", "", 1758);
      StringTokenizer stringTokenizer0 = new StringTokenizer("iX.wZ?\"z", "o");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("V:qGtZb=]");
      IteratorUtils.getIterator(sQLTimeoutException0);
      IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer1 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Vector<LinkedHashSet>>) resettableIterator0, (Transformer<? super Vector<LinkedHashSet>, String>) transformer1, "%'7jVks", "V:qGtZb=]", "%'7jVks");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException("");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "!UBgjGnl~wqg", 1758);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException();
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("", "", 754);
      sQLDataExceptionArray0[3] = sQLDataException3;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0, (-3205));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      int int0 = (-42);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, (-42));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ?>) orderedMapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("InstantiateFactory: Constructor must be public");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("-^8O", "The predicate and transformer arrays must be the same size", 1130, sQLNonTransientConnectionException0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "AO,ch", intArray0, sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("InstantiateFactory: Constructor must be public");
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<Vector<LinkedHashSet>>) orderedMapIterator0, (Transformer<? super Vector<LinkedHashSet>, String>) constantTransformer0, "The predicate and transformer arrays must be the same size", "-^8O", ", ");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("InstantiateFactory: Constructor must be public", defaultEquator0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(predicateTransformer0);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(transformerPredicate0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>(comparator0);
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(treeSet0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) loopingIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) loopingIterator0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-7287);
      intArray0[1] = 0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("AO,ch");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Start index must not be greater than the array length", ">*?wA", 1130, sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(" c':kZ$2k", " c':kZ$2k", intArray0, sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(batchUpdateException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(zippingIterator0, defaultEquator0);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) equalPredicate0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(predicateTransformer0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) transformerPredicate0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ?>) orderedMapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("InstantiateFactory: Constructor must be public");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("-^8O", "The predicate and transformer arrays must be the same size", 1130, sQLNonTransientConnectionException0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "AO,ch", intArray0, sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("InstantiateFactory: Constructor must be public", defaultEquator0);
      AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) equalPredicate0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(equalPredicate0);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(predicateTransformer0);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(transformerPredicate0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) nullIsFalsePredicate0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ?>) orderedMapIterator0);
      String string0 = "AO,ch";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string0);
      String string1 = "L}\\>JWJ7f*|\\:4,%p";
      int int0 = (-3200);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string0, string1, int0, sQLNonTransientConnectionException0);
      String string2 = "";
      int[] intArray0 = new int[4];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(string1, string2, intArray0, sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(batchUpdateException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      int int1 = (-42);
      Integer integer0 = new Integer(int1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0, defaultEquator0);
      Transformer<Object, Boolean> transformer0 = null;
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) transformerPredicate0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(transformerPredicate0);
      TransformerPredicate<SQLException> transformerPredicate1 = new TransformerPredicate<SQLException>(transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) transformerPredicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 9);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      HashMap<IIOMetadataNode, LinkedHashSet<Properties>> hashMap0 = new HashMap<IIOMetadataNode, LinkedHashSet<Properties>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      hashMap0.put(iIOMetadataNode0, linkedHashSet0);
      EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>>(hashMap0);
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      MapIterator<SQLTransientConnectionException, SQLDataException> mapIterator1 = IteratorUtils.emptyMapIterator();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) mapIterator1, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedIterator();
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) zippingIterator0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) hashMap0);
      IteratorUtils.find((Iterator<Class<SQLClientInfoException>>) null, (Predicate<? super Class<SQLClientInfoException>>) predicate0);
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) resettableListIterator0);
      OrderedMapIterator<SQLTimeoutException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode>(orderedMapIterator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0, 575);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) singletonIterator0, class0);
      HashMap<IIOMetadataNode, LinkedHashSet<Properties>> hashMap0 = new HashMap<IIOMetadataNode, LinkedHashSet<Properties>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      hashMap0.put(iIOMetadataNode0, linkedHashSet0);
      EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>>(hashMap0);
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      MapIterator<SQLTransientConnectionException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) mapIterator0, (Iterator<? extends SQLTransientConnectionException>) mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) orderedIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLNonTransientConnectionException0);
      IteratorUtils.find((Iterator<Class<SQLClientInfoException>>) null, (Predicate<? super Class<SQLClientInfoException>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 9);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(stack0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null, 1, sQLTransientException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTransientException0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" cannot be null", sQLSyntaxErrorExceptionArray0[1]);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException0;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      EqualPredicate<SQLNonTransientException> equalPredicate0 = new EqualPredicate<SQLNonTransientException>(sQLSyntaxErrorExceptionArray0[1]);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      InvokerTransformer.invokerTransformer(" cannot be null");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%'7jVks", " cannot be null", 100);
      StringTokenizer stringTokenizer0 = new StringTokenizer("o", "o");
      IteratorUtils.getIterator("o");
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) null, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>("a:N-\"", false);
      IteratorUtils.isEmpty(singletonIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("a:N-\"", "Z");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(stack0);
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) iterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 9);
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) list0);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(stack0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException>[] linkedListArray0 = (LinkedList<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(LinkedList.class, 0);
      ObjectArrayIterator<LinkedList<SQLInvalidAuthorizationSpecException>> objectArrayIterator0 = new ObjectArrayIterator<LinkedList<SQLInvalidAuthorizationSpecException>>(linkedListArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends LinkedList<SQLInvalidAuthorizationSpecException>>) objectArrayIterator0, (Predicate<? super LinkedList<SQLInvalidAuthorizationSpecException>>) predicate0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      int[] intArray0 = new int[4];
      intArray0[0] = 342;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 9;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "lO]Hu-Xc>6/[ClhPfu}", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("sd/z>[-Z{Mt", batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, "lO]Hu-Xc>6/[ClhPfu}", 3416, intArray0, sQLSyntaxErrorException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1275);
      longArray0[1] = 4401L;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("x", "", (-1275), longArray0, batchUpdateException2);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("", "lO]Hu-Xc>6/[ClhPfu}", 342, longArray0, batchUpdateException1);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("x", "b{N)0G", 3416, intArray0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      int[] intArray1 = new int[5];
      intArray1[0] = 3416;
      intArray1[1] = 0;
      intArray1[2] = 9;
      intArray1[3] = 1;
      intArray1[4] = 3416;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException("b{N)0G", intArray1, batchUpdateException1);
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0, 0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      ListIterator<Object> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate1);
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      IteratorUtils.toString((Iterator<Object>) listIterator0, (Transformer<? super Object, String>) ifTransformer0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(" cannot be null", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      EqualPredicate<SQLNonTransientException> equalPredicate0 = new EqualPredicate<SQLNonTransientException>(sQLSyntaxErrorException1);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Transformer<Locale.FilteringMode, Locale.FilteringMode> transformer0 = InvokerTransformer.invokerTransformer(" cannot be null");
      IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) transformer0);
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) orderedIterator0, (Iterator<? extends Properties>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, 2908L);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 896, sQLTransientException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, 2908L);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableIterator0, class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 896, sQLTransientException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLSyntaxErrorException0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode>(orderedMapIterator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Integer integer0 = new Integer((-1695));
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      IteratorUtils.toListIterator((Iterator<? extends Integer>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "W_U (kJ";
      stringArray0[1] = "J";
      IteratorUtils.arrayIterator(stringArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "W_U (kJ";
      stringArray0[0] = "W_U (kJ";
      stringArray0[1] = "J";
      IteratorUtils.arrayIterator(stringArray0);
      Iterator<Integer> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) listIterator0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList1);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 8);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      InvokerTransformer<IIOMetadataNode, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<IIOMetadataNode, IIOMetadataNode>("W1gq1", classArray0, classArray0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IteratorUtils.objectGraphIterator(iIOMetadataNode2, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) invokerTransformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("W1gq1", "W1gq1", 0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("%'7jVks", "8jlC");
      IteratorUtils.getIterator(stringTokenizer0);
      IteratorUtils.emptyMapIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.getIterator(listIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Ion", sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "Ion", (-367));
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator1);
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(list0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) listIterator0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 8);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      InvokerTransformer<IIOMetadataNode, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<IIOMetadataNode, IIOMetadataNode>("W1gq1", classArray0, classArray0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("W1gq1");
      IteratorUtils.objectGraphIterator(iIOMetadataNode2, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) invokerTransformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("W1gq1", "W1gq1", 0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("%'7jVks", "List must not be null");
      stringTokenizer0.hasMoreElements();
      IteratorUtils.getIterator(stringTokenizer0);
      IteratorUtils.emptyMapIterator();
      Integer integer1 = new Integer(1250);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) integer1);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate1, predicate0);
      IteratorUtils.matchesAll((Iterator<LinkedHashSet<LinkedHashSet>>) orderedMapIterator0, (Predicate<? super LinkedHashSet<LinkedHashSet>>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyListIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) instanceofPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) null, 0L, 144L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      IteratorUtils.loopingListIterator((List<Properties>) stack0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("z4l1SM", "", (-517));
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "");
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      predicateArray0[2] = predicate1;
      predicateArray0[3] = predicate1;
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      predicateArray0[5] = predicate1;
      predicateArray0[6] = (Predicate<Object>) notPredicate0;
      predicateArray0[7] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[8] = (Predicate<Object>) notPredicate0;
      OnePredicate.onePredicate((Predicate<? super IIOMetadataNode>[]) predicateArray0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) listIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientException[]) null, 44);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>(comparator0);
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(treeSet0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      IteratorUtils.toArray((Iterator<?>) loopingIterator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      Integer integer0 = new Integer((-669));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      iteratorArray0[0] = (Iterator<Integer>) singletonListIterator0;
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator1, (Iterator<? extends Integer>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientException[]) null, (-669));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException>[] linkedListArray0 = (LinkedList<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(LinkedList.class, 0);
      ObjectArrayIterator<LinkedList<SQLInvalidAuthorizationSpecException>> objectArrayIterator0 = new ObjectArrayIterator<LinkedList<SQLInvalidAuthorizationSpecException>>(linkedListArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends LinkedList<SQLInvalidAuthorizationSpecException>>) objectArrayIterator0, (Predicate<? super LinkedList<SQLInvalidAuthorizationSpecException>>) predicate0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      int[] intArray0 = new int[4];
      intArray0[0] = 342;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 9;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "lO]Hu-Xc>6/[ClhPfu}", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("sd/z>[-Z{Mt", batchUpdateException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLSyntaxErrorException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, "lO]Hu-Xc>6/[ClhPfu}", 3416, intArray0, sQLNonTransientException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1275);
      longArray0[1] = 4401L;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("x", "", (-1275), longArray0, batchUpdateException2);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("", "lO]Hu-Xc>6/[ClhPfu}", 342, longArray0, batchUpdateException1);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("x", "b{N)0G", 3416, intArray0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      int[] intArray1 = new int[5];
      intArray1[0] = 3416;
      intArray1[1] = 0;
      intArray1[2] = 9;
      intArray1[3] = 1;
      intArray1[4] = 3416;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException("b{N)0G", intArray1, batchUpdateException1);
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 9);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) list0);
      List<SQLClientInfoException> list1 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(list1);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) loopingListIterator0, class0);
      HashMap<IIOMetadataNode, LinkedHashSet<Properties>> hashMap0 = new HashMap<IIOMetadataNode, LinkedHashSet<Properties>>();
      EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>>(hashMap0);
      List<IIOMetadataNode> list2 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator(list2);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLTransientConnectionException, SQLDataException> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) mapIterator1, (Iterator<? extends SQLTransientConnectionException>) mapIterator1);
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = (Predicate<Object>) notPredicate0;
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      predicateArray0[5] = predicate0;
      Predicate<IIOMetadataNode> predicate1 = OnePredicate.onePredicate((Predicate<? super IIOMetadataNode>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) resettableListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("5[>g'iA}(k$+G");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "m12q\"e", 0, hashtable1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("~5IVj.x0/0>C+_.y&", "r)cAD{__>N<sF<J4", sQLTimeoutException0);
      sQLTimeoutException0.initCause(sQLTransactionRollbackException0);
      sQLTimeoutException0.getLocalizedMessage();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("#&b0)7!XtkjYV&n'3", "#&b0)7!XtkjYV&n'3", sQLTimeoutException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 10, 0, sQLTimeoutException1);
      IteratorUtils.contains((Iterator<Object>) null, (Object) dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ?>) orderedMapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("InstantiateFactory: Constructor must be public");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("InstantiateFactory: Constructor must be public", "The predicate and transformer arrays must be the same size", 1130, sQLNonTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientConnectionException0);
      EqualPredicate.equalPredicate(sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Predicate<? super SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) instanceofPredicate0);
      predicateArray0[0] = predicate0;
      String string0 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("node must not be null!", "", 2249);
      EqualPredicate.equalPredicate((Object) sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      EqualPredicate<SQLNonTransientException> equalPredicate0 = new EqualPredicate<SQLNonTransientException>(sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, sQLTransactionRollbackException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Boolean> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Boolean>>) linkedHashSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Boolean>) null, (Predicate<? super Boolean>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) instanceofPredicate0);
      predicateArray0[0] = predicate0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("node must not be null!", "", 2249);
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) sQLTransactionRollbackException0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[3] = (Predicate<Object>) uniquePredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicateArray0[3]);
      notPredicate0.evaluate(uniquePredicate0);
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      Predicate<IIOMetadataNode> predicate3 = OnePredicate.onePredicate((Predicate<? super IIOMetadataNode>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate3);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("Predicate must not be null");
      IteratorUtils.toString((Iterator<Transformer<Object, String>>) null, (Transformer<? super Transformer<Object, String>, String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 9);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) list0);
      List<SQLClientInfoException> list1 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(list1);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) loopingListIterator0, class0);
      HashMap<IIOMetadataNode, LinkedHashSet<Properties>> hashMap0 = new HashMap<IIOMetadataNode, LinkedHashSet<Properties>>();
      EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>>(hashMap0);
      List<IIOMetadataNode> list2 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      IteratorUtils.loopingListIterator(list2);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Start index must not be less than zero", "Start index must not be less than zero", 0, hashtable0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Start index must not be less than zero", "Start index must not be less than zero", sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutException0.initCause(sQLTransactionRollbackException0);
      sQLTimeoutException0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object[]) sQLClientInfoExceptionArray0, 93);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>(comparator0);
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(treeSet0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("predicate must not be null.", "%N/B!u;|hL4w5", (-15), hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("|U1-", map0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" cannot be null", sQLClientInfoException1);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      EqualPredicate<SQLNonTransientException> equalPredicate0 = new EqualPredicate<SQLNonTransientException>(sQLSyntaxErrorException0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      Transformer<Locale.FilteringMode, Locale.FilteringMode> transformer0 = InvokerTransformer.invokerTransformer("wc$:HiF8LLla3N-");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) transformer0);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Properties properties0 = new Properties();
      Transformer<SQLException, Properties> transformer1 = ConstantTransformer.constantTransformer(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) loopingIterator0, (Transformer<? super SQLNonTransientException, ? extends Properties>) transformer1);
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator1, (Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) listIterator0);
      Iterator<Properties> iterator1 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) iterator1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) stack0);
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) resettableListIterator0, 0L, 0L);
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ?>) orderedMapIterator0);
      Properties properties0 = new Properties();
      Transformer<Object, Properties> transformer0 = ConstantTransformer.constantTransformer(properties0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) orderedMapIterator1, (Transformer<? super SQLDataException, ? extends Properties>) transformer0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLNonTransientException.class) , any(java.sql.SQLNonTransientException.class));
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>(comparator0);
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(treeSet0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("YjB");
      treeSet0.add(sQLFeatureNotSupportedException0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, 2898L);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<IIOMetadataNode, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Properties>(orderedMapIterator0);
      OrderedMapIterator<IIOMetadataNode, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ?>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) orderedMapIterator1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(" cannot be null", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      EqualPredicate<SQLNonTransientException> equalPredicate0 = new EqualPredicate<SQLNonTransientException>(sQLSyntaxErrorException1);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Transformer<Locale.FilteringMode, Locale.FilteringMode> transformer0 = InvokerTransformer.invokerTransformer(" cannot be null");
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) transformer0);
      iteratorArray0[0] = iterator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Properties> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) orderedIterator0, (Iterator<? extends Properties>) orderedIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) iterator1);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(arrayList0);
      Iterator<SQLTransientConnectionException> iterator2 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) reverseListIterator0);
      IteratorUtils.toString(iterator2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) instanceofPredicate0);
      predicateArray0[0] = predicate0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("node must not be null!", "", 2249);
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) sQLTransactionRollbackException0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[3] = (Predicate<Object>) uniquePredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicateArray0[3]);
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      Predicate<IIOMetadataNode> predicate3 = OnePredicate.onePredicate((Predicate<? super IIOMetadataNode>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate3);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableListIterator<HashMap<SQLDataException, String>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int[] intArray0 = new int[2];
      intArray0[0] = (-146);
      intArray0[1] = (-146);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "org.apache.commons.collections4.map.AbstractHashedMap$EntrySet");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractHashedMap$EntrySet", "org.apache.commons.collections4.map.AbstractHashedMap$EntrySet", (-146), batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 7);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) resettableListIterator1;
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator1, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator1);
      iteratorArray0[1] = iterator0;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException0;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, (-146), 1473);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OrderedMapIterator<Properties, LinkedHashSet<Vector>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 9);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) list0);
      List<SQLClientInfoException> list1 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(list1);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) loopingListIterator0, class0);
      HashMap<IIOMetadataNode, LinkedHashSet<Properties>> hashMap0 = new HashMap<IIOMetadataNode, LinkedHashSet<Properties>>();
      EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>>(hashMap0);
      List<IIOMetadataNode> list2 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      IteratorUtils.loopingListIterator(list2);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLTransientConnectionException, SQLDataException> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) mapIterator1, (Iterator<? extends SQLTransientConnectionException>) mapIterator1);
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<Properties>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<Properties>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<Properties>) orderedMapIterator0;
      iteratorArray0[3] = (Iterator<Properties>) orderedMapIterator0;
      iteratorArray0[4] = (Iterator<Properties>) orderedMapIterator0;
      iteratorArray0[5] = (Iterator<Properties>) orderedMapIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) iteratorArray0[1]);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>("a:N-\"", false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("a:N-\"");
      singletonIterator0.reset();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashtable0.getOrDefault("ExceptionClosure invoked", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("a:N-\"", "ExceptionClosure invoked", 0, hashtable0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("a:N-\"", "NodeList must not be null", sQLClientInfoException0);
      sQLTimeoutException0.initCause(sQLTransactionRollbackException0);
      sQLTimeoutException0.getLocalizedMessage();
      IteratorUtils.contains((Iterator<Object>) singletonIterator0, (Object) sQLTimeoutException0);
      DataTruncation dataTruncation0 = new DataTruncation(12, false, true, 12, 1908, sQLTimeoutException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) listIterator0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("NodeList must not be null", "NodeList must not be null", 1);
      linkedList0.add(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList1);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedMapIterator<SQLTimeoutException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode>(orderedMapIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) arrayList0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(arrayList0);
      SkippingIterator<SQLTimeoutException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) loopingListIterator0, 0L);
      IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(" cannot be null", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      EqualPredicate<SQLNonTransientException> equalPredicate0 = new EqualPredicate<SQLNonTransientException>(sQLSyntaxErrorException1);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Transformer<Locale.FilteringMode, Locale.FilteringMode> transformer0 = InvokerTransformer.invokerTransformer(" cannot be null");
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) transformer0);
      iteratorArray0[0] = iterator0;
      IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 2);
      Stack<Properties> stack0 = new Stack<Properties>();
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ?>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) listIterator0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList1);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 8);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      classArray0[3] = class3;
      Class<SQLNonTransientException> class4 = SQLNonTransientException.class;
      classArray0[4] = class4;
      Class<SQLNonTransientException> class5 = SQLNonTransientException.class;
      classArray0[5] = class5;
      Class<SQLNonTransientException> class6 = SQLNonTransientException.class;
      classArray0[6] = class6;
      Class<SQLNonTransientException> class7 = SQLNonTransientException.class;
      classArray0[7] = class7;
      InvokerTransformer<IIOMetadataNode, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<IIOMetadataNode, IIOMetadataNode>("W1gq1", classArray0, classArray0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.objectGraphIterator(iIOMetadataNode1, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) invokerTransformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%'7jVks", "W1gq1", 0);
      IteratorUtils.getIterator(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      IteratorUtils.get((Iterator<StringTokenizer>) objectArrayIterator0, 1);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(",uOKUHu,GxP", (String) null, hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("r#'t?t", "LuCrhNV]v<&k,", (-1), hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("(c\":v-t{%ve`pW5", "LuCrhNV]v<&k,", 1, map0, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("r#'t?t", "K;FFrV wt]c]u", 8, map0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException(hashMap0, sQLClientInfoException4);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException((String) null, (String) null, 1, map0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException8;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException9 = new SQLClientInfoException(",uOKUHu,GxP", hashtable0);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException9;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 8, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      IteratorUtils.arrayListIterator(propertiesArray0, 0, 0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1130);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add(integer0);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList0);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<SQLDataException> class0 = SQLDataException.class;
      Class<SQLDataException> class1 = SQLDataException.class;
      Class<SQLDataException> class2 = SQLDataException.class;
      Class<SQLDataException> class3 = SQLDataException.class;
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 7);
      classArray0[0] = class3;
      classArray0[1] = class1;
      iIOMetadataNode0.setPrefix("=6-;&uO2@rkO");
      classArray0[2] = class1;
      classArray0[3] = class2;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[4] = class4;
      classArray0[5] = class2;
      classArray0[6] = class0;
      InvokerTransformer<IIOMetadataNode, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<IIOMetadataNode, IIOMetadataNode>("W1gq1", classArray0, propertiesArray0);
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) invokerTransformer0);
      Hashtable<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>(hashtable0);
      MapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLWarning sQLWarning0 = new SQLWarning("", sQLNonTransientException0);
      IteratorUtils.singletonListIterator(sQLWarning0);
      OrderedMapIterator<SQLTimeoutException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode>(orderedMapIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) arrayList0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) listIterator0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList1);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 8);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[3] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[4] = class4;
      Class<SQLDataException> class5 = SQLDataException.class;
      classArray0[5] = class5;
      IteratorUtils.singletonIterator((Integer) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((String[]) null, 393, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.toList((Iterator<? extends SQLException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.emptyIterator();
      EmptyListIterator.resettableEmptyListIterator();
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (Throwable) null);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      EqualPredicate<SQLNonTransientException> equalPredicate0 = new EqualPredicate<SQLNonTransientException>(sQLSyntaxErrorException0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      InvokerTransformer.invokerTransformer("");
      ConstantTransformer.nullTransformer();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%'7jVks", "", 1758);
      StringTokenizer stringTokenizer0 = new StringTokenizer("iX.wZ?\"z", "o");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("V:qGtZb=]");
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator(sQLTimeoutException0);
      IteratorUtils.emptyMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("iX.wZ?\"z");
      IteratorUtils.toString((Iterator<Vector<LinkedHashSet>>) resettableIterator0, (Transformer<? super Vector<LinkedHashSet>, String>) constantTransformer0, "%'7jVks", "V:qGtZb=]", "%'7jVks");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException("");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "!UBgjGnl~wqg", 1758);
      sQLDataExceptionArray0[1] = sQLDataException1;
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<Integer, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Integer, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<Integer, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<Integer, SQLFeatureNotSupportedException>(hashMap0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null, 1149, 1149);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>(comparator0);
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(treeSet0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      IteratorUtils.toArray((Iterator<?>) loopingIterator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator1, (Iterator<? extends Integer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 9);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) list0);
      List<SQLClientInfoException> list1 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(list1);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) loopingListIterator0, class0);
      HashMap<IIOMetadataNode, LinkedHashSet<Properties>> hashMap0 = new HashMap<IIOMetadataNode, LinkedHashSet<Properties>>();
      EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>>(hashMap0);
      List<IIOMetadataNode> list2 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      IteratorUtils.loopingListIterator(list2);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<SQLTransientConnectionException, SQLDataException> mapIterator1 = IteratorUtils.emptyMapIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) mapIterator1, (Iterator<? extends SQLTransientConnectionException>) mapIterator1);
      iteratorArray0[0] = iterator0;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("z:", "~;Ioh3f5");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLTransactionRollbackException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("~;Ioh3f5", sQLNonTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Iterator<Object> iterator0 = EmptyIterator.emptyIterator();
      Iterator<Object> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iterator1, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 3023);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "RD.C*t1IMwL:S", 4557);
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, 14, 14, sQLTransientException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(4557, false, false, 1, (-1), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(14, false, false, 0, 14);
      dataTruncationArray0[2] = dataTruncation2;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-145), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      OrderedIterator<SQLException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OrderedIterator<LinkedHashSet<ComparatorPredicate.Criterion>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 1477;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1477);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(" cannot be null", sQLSyntaxErrorException1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("~\"zHrd&z!");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.emptyMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException((String) null, " cannot be null", 44);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode1, 9);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("i-TT%N9B6u1bh:Zr;Z`");
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IteratorUtils.emptyIterator();
      String string0 = "i-TT%N9B6u1bh:Zr;Z`";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("i-TT%N9B6u1bh:Zr;Z`");
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) null, 417L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("C`q");
      arrayList0.add("C`q");
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) arrayList0);
      IteratorUtils.asIterable((Iterator<? extends String>) resettableListIterator0);
      Stack<Properties>[] stackArray0 = (Stack<Properties>[]) Array.newInstance(Stack.class, 3);
      Stack<Properties> stack0 = new Stack<Properties>();
      stackArray0[0] = stack0;
      Stack<Properties> stack1 = new Stack<Properties>();
      stackArray0[1] = stack1;
      Stack<Properties> stack2 = new Stack<Properties>();
      stackArray0[2] = stack2;
      Properties properties0 = new Properties();
      stack1.add(properties0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stackArray0, 100, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      Hashtable<SQLDataException, ComparatorPredicate.Criterion> hashtable0 = new Hashtable<SQLDataException, ComparatorPredicate.Criterion>();
      EntrySetMapIterator<SQLDataException, ComparatorPredicate.Criterion> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, ComparatorPredicate.Criterion>(hashtable0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      DataTruncation dataTruncation0 = new DataTruncation(32, true, true, 32, 1130, mockThrowable0);
      ConstantTransformer<Object, DataTruncation> constantTransformer0 = new ConstantTransformer<Object, DataTruncation>(dataTruncation0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) constantTransformer0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0, 1130);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(list0);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ?>) orderedMapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("InstantiateFactory: Constructor must be public");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) listIterator0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      linkedList0.poll();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("null keys not allowed");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) resettableListIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      InvokerTransformer<IIOMetadataNode, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<IIOMetadataNode, IIOMetadataNode>("6", classArray0, classArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) invokerTransformer0);
      MapIterator<SQLRecoverableException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLRecoverableException, ComparatorPredicate.Criterion> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLRecoverableException, ComparatorPredicate.Criterion>(mapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) abstractMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) listIterator0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList1);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 8);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[3] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[4] = class4;
      Class<SQLDataException> class5 = SQLDataException.class;
      classArray0[5] = class5;
      Class<SQLDataException> class6 = SQLDataException.class;
      classArray0[6] = class6;
      Class<SQLDataException> class7 = SQLDataException.class;
      classArray0[7] = class7;
      InvokerTransformer<IIOMetadataNode, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<IIOMetadataNode, IIOMetadataNode>("W1gq1", classArray0, classArray0);
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) singletonIterator0, class0);
      HashMap<IIOMetadataNode, LinkedHashSet<Properties>> hashMap0 = new HashMap<IIOMetadataNode, LinkedHashSet<Properties>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      hashMap0.put(iIOMetadataNode0, linkedHashSet0);
      EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>>(hashMap0);
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      MapIterator<SQLTransientConnectionException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) mapIterator0, (Iterator<? extends SQLTransientConnectionException>) mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      int int0 = 9;
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 9);
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) list0);
      List<SQLClientInfoException> list1 = new Stack<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(list1);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) resettableListIterator0);
      OrderedMapIterator<SQLTimeoutException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode>(orderedMapIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) arrayList0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) iterator0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OrderedMapIterator<Properties, LinkedHashSet<Vector>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      MapIterator<SQLClientInfoException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 9);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(resettableIterator0);
      
      List<SQLClientInfoException> list1 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(list1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertFalse(loopingListIterator0.hasNext());
      assertEquals(0, loopingListIterator0.size());
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(loopingListIterator0);
      
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) loopingListIterator0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertFalse(loopingListIterator0.hasNext());
      assertEquals(0, loopingListIterator0.size());
      assertEquals(0, sQLClientInfoExceptionArray0.length);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(sQLClientInfoExceptionArray0);
      
      HashMap<IIOMetadataNode, LinkedHashSet<Properties>> hashMap0 = new HashMap<IIOMetadataNode, LinkedHashSet<Properties>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<Properties>>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(entrySetMapIterator0);
      
      List<IIOMetadataNode> list2 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator(list2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<SQLTransientConnectionException, SQLDataException> mapIterator1 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) mapIterator1, (Iterator<? extends SQLTransientConnectionException>) mapIterator1);
      assertNotNull(iterator0);
      
      iteratorArray0[0] = iterator0;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      String string0 = "~;Ioh3f5";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("z:", "~;Ioh3f5");
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: z:", sQLTransactionRollbackException0.toString());
      assertEquals("~;Ioh3f5", sQLTransactionRollbackException0.getSQLState());
      assertEquals("z:", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: z:", sQLTransactionRollbackException0.toString());
      assertEquals("~;Ioh3f5", sQLTransactionRollbackException0.getSQLState());
      assertEquals("z:", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientConnectionException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: z:", sQLTransactionRollbackException0.toString());
      assertEquals("~;Ioh3f5", sQLTransactionRollbackException0.getSQLState());
      assertEquals("z:", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("~;Ioh3f5", sQLNonTransientConnectionException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: z:", sQLTransactionRollbackException0.toString());
      assertEquals("~;Ioh3f5", sQLTransactionRollbackException0.getSQLState());
      assertEquals("z:", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ~;Ioh3f5", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("~;Ioh3f5", sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException1);
      
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("LESS", "~;Ioh3f5", 0, sQLTransactionRollbackException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("LESS", sQLTransientConnectionException3);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, (-484), (-937));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 9);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("ListIterator must not be null", "ListIterator must not be null", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("ListIterator must not be null", sQLClientInfoException1.getMessage());
      assertEquals("ListIterator must not be null", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ListIterator must not be null", sQLClientInfoException1.toString());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("ListIterator must not be null", hashMap0, sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException2.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ListIterator must not be null", sQLClientInfoException2.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("ListIterator must not be null", sQLClientInfoException2.getMessage());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException2);
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 4251, 4251);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "";
      String string1 = "Set and List must be empty";
      int int0 = 0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", "Set and List must be empty", 0);
      assertEquals("Set and List must be empty", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.toString());
      assertEquals("org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("N5tLiW,8oSO`3C", "", 1917, sQLTransactionRollbackException0);
      assertEquals("Set and List must be empty", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.toString());
      assertEquals("org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.getMessage());
      assertEquals(1917, sQLTransientException0.getErrorCode());
      assertEquals("", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: N5tLiW,8oSO`3C", sQLTransientException0.toString());
      assertEquals("N5tLiW,8oSO`3C", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLTransientException0);
      assertEquals("Set and List must be empty", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.toString());
      assertEquals("org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.getMessage());
      assertEquals(1917, sQLTransientException0.getErrorCode());
      assertEquals("", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: N5tLiW,8oSO`3C", sQLTransientException0.toString());
      assertEquals("N5tLiW,8oSO`3C", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      String string2 = sQLTransientException0.getLocalizedMessage();
      assertEquals("Set and List must be empty", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.toString());
      assertEquals("org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.getMessage());
      assertEquals(1917, sQLTransientException0.getErrorCode());
      assertEquals("", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: N5tLiW,8oSO`3C", sQLTransientException0.toString());
      assertEquals("N5tLiW,8oSO`3C", sQLTransientException0.getMessage());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("N5tLiW,8oSO`3C", string2);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", sQLDataException0);
      assertEquals("Set and List must be empty", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.toString());
      assertEquals("org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.getMessage());
      assertEquals(1917, sQLTransientException0.getErrorCode());
      assertEquals("", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: N5tLiW,8oSO`3C", sQLTransientException0.toString());
      assertEquals("N5tLiW,8oSO`3C", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      sQLNonTransientException0.printStackTrace();
      assertEquals("Set and List must be empty", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.toString());
      assertEquals("org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.getMessage());
      assertEquals(1917, sQLTransientException0.getErrorCode());
      assertEquals("", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: N5tLiW,8oSO`3C", sQLTransientException0.toString());
      assertEquals("N5tLiW,8oSO`3C", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", "", 1917, sQLNonTransientException0);
      assertEquals("Set and List must be empty", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.toString());
      assertEquals("org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.getMessage());
      assertEquals(1917, sQLTransientException0.getErrorCode());
      assertEquals("", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: N5tLiW,8oSO`3C", sQLTransientException0.toString());
      assertEquals("N5tLiW,8oSO`3C", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLRecoverableException0.toString());
      assertEquals(1917, sQLRecoverableException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLRecoverableException0.getMessage());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      String string3 = sQLRecoverableException0.getLocalizedMessage();
      assertEquals("Set and List must be empty", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.toString());
      assertEquals("org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransactionRollbackException0.getMessage());
      assertEquals(1917, sQLTransientException0.getErrorCode());
      assertEquals("", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: N5tLiW,8oSO`3C", sQLTransientException0.toString());
      assertEquals("N5tLiW,8oSO`3C", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLRecoverableException0.toString());
      assertEquals(1917, sQLRecoverableException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLRecoverableException0.getMessage());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("org.apache.commons.collections4.functors.NullIsExceptionPredicate", string3);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(zippingIterator0);
      
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = null;
//      try {
        linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>((Collection<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      OrderedIterator<ArrayList<HashSet>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLException sQLException0 = new SQLException();
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0, sQLException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertNull(sQLClientInfoException1.getMessage());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashMap0, sQLException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLClientInfoException2.getMessage());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertNull(sQLClientInfoException2.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLException", sQLClientInfoException2.toString());
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException2);
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      String string0 = sQLClientInfoException0.getLocalizedMessage();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException2);
      assertNull(string0);
      
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(" t$Y[n7Sm,}%h$]", " t$Y[n7Sm,}%h$]", (-1), hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException:  t$Y[n7Sm,}%h$]", sQLClientInfoException3.toString());
      assertEquals(" t$Y[n7Sm,}%h$]", sQLClientInfoException3.getSQLState());
      assertEquals(" t$Y[n7Sm,}%h$]", sQLClientInfoException3.getMessage());
      assertEquals((-1), sQLClientInfoException3.getErrorCode());
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException3);
      
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      int int0 = 0;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException((String) null, "U2W(O5h388IS,m})P", 0, hashMap0, sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException4.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException4.toString());
      assertEquals(0, sQLClientInfoException4.getErrorCode());
      assertEquals("U2W(O5h388IS,m})P", sQLClientInfoException4.getSQLState());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertNotNull(sQLClientInfoException4);
      
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException((String) null, (String) null, 0, hashMap0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException5.toString());
      assertEquals(0, sQLClientInfoException5.getErrorCode());
      assertNull(sQLClientInfoException5.getMessage());
      assertNull(sQLClientInfoException5.getSQLState());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      assertNotNull(sQLClientInfoException5);
      
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("U2W(O5h388IS,m})P", (String) null, 0, hashMap0);
      assertEquals("U2W(O5h388IS,m})P", sQLClientInfoException6.getMessage());
      assertNull(sQLClientInfoException6.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: U2W(O5h388IS,m})P", sQLClientInfoException6.toString());
      assertEquals(0, sQLClientInfoException6.getErrorCode());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException2));
      assertNotNull(sQLClientInfoException6);
      
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException((String) null, "U2W(O5h388IS,m})P", 0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException7.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException7.toString());
      assertEquals("U2W(O5h388IS,m})P", sQLClientInfoException7.getSQLState());
      assertNull(sQLClientInfoException7.getMessage());
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException4));
      assertNotNull(sQLClientInfoException7);
      
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException(" t$Y[n7Sm,}%h$]", "", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException8.getErrorCode());
      assertEquals("", sQLClientInfoException8.getSQLState());
      assertEquals(" t$Y[n7Sm,}%h$]", sQLClientInfoException8.getMessage());
      assertEquals("java.sql.SQLClientInfoException:  t$Y[n7Sm,}%h$]", sQLClientInfoException8.toString());
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException7));
      assertNotNull(sQLClientInfoException8);
      
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0, 0);
      assertEquals(9, sQLClientInfoExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException4, 0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("yx,i71Y\"V", "!{~^~#U");
      assertEquals("java.sql.SQLTransactionRollbackException: yx,i71Y\"V", sQLTransactionRollbackException0.toString());
      assertEquals("!{~^~#U", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("yx,i71Y\"V", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("yx,i71Y\"V", ":7~8h:AKuDk(L77\"R:", 667, sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: yx,i71Y\"V", sQLTransactionRollbackException0.toString());
      assertEquals("!{~^~#U", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("yx,i71Y\"V", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: yx,i71Y\"V", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(667, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(":7~8h:AKuDk(L77\"R:", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("yx,i71Y\"V", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLDataException sQLDataException0 = new SQLDataException("*'!^", "7|eBC4%]46'?CST6", sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLTransactionRollbackException: yx,i71Y\"V", sQLTransactionRollbackException0.toString());
      assertEquals("!{~^~#U", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("yx,i71Y\"V", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: yx,i71Y\"V", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(667, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(":7~8h:AKuDk(L77\"R:", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("yx,i71Y\"V", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("*'!^", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("7|eBC4%]46'?CST6", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: *'!^", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("transformer may not be null", "prefix may not be null");
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: transformer may not be null", sQLDataException1.toString());
      assertEquals("prefix may not be null", sQLDataException1.getSQLState());
      assertEquals("transformer may not be null", sQLDataException1.getMessage());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertNotNull(sQLDataException1);
      
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLDataException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("transformer may not be null", "Transformer must not be null");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: transformer may not be null", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("Transformer must not be null", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("transformer may not be null", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(":7~8h:AKuDk(L77\"R:", "yx,i71Y\"V", 0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: :7~8h:AKuDk(L77\"R:", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(":7~8h:AKuDk(L77\"R:", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("yx,i71Y\"V", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("yx,i71Y\"V");
      assertEquals("java.sql.SQLNonTransientConnectionException: yx,i71Y\"V", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("yx,i71Y\"V", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLDataException sQLDataException2 = new SQLDataException("Transformer must not be null", "7|eBC4%]46'?CST6", 667);
      assertEquals(667, sQLDataException2.getErrorCode());
      assertEquals("java.sql.SQLDataException: Transformer must not be null", sQLDataException2.toString());
      assertEquals("Transformer must not be null", sQLDataException2.getMessage());
      assertEquals("7|eBC4%]46'?CST6", sQLDataException2.getSQLState());
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertNotNull(sQLDataException2);
      
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLDataException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "", 667, sQLDataException1);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException2.toString());
      assertEquals(667, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException2.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: transformer may not be null", sQLDataException1.toString());
      assertEquals("prefix may not be null", sQLDataException1.getSQLState());
      assertEquals("transformer may not be null", sQLDataException1.getMessage());
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertFalse(sQLDataException1.equals((Object)sQLDataException2));
      assertNotNull(sQLInvalidAuthorizationSpecException2);
      
      sQLNonTransientExceptionArray0[8] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException2;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0);
      assertEquals(9, sQLNonTransientExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(9, sQLNonTransientExceptionArray0.length);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 3492, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties(properties0);
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      int int0 = 0;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0, 0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      ListIterator<Object> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate1);
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      IteratorUtils.toString((Iterator<Object>) listIterator0, (Transformer<? super Object, String>) ifTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>("a:N-\"", false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("a:N-\"");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("r)cAD{__>N<sF<J4", "ExceptionClosure invoked", 0, hashtable0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("a:N-\"", "NodeList must not be null", sQLClientInfoException0);
      sQLTimeoutException0.initCause(sQLTransactionRollbackException0);
      sQLTimeoutException0.getLocalizedMessage();
      boolean boolean0 = IteratorUtils.contains((Iterator<Object>) singletonIterator0, (Object) sQLTimeoutException0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Bh-F");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, (-2180), (-2206));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 3);
      Stack<Properties> stack0 = new Stack<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) stack0);
      iteratorArray0[0] = (Iterator<Properties>) resettableListIterator0;
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) resettableListIterator0, 0L, 0L);
      iteratorArray0[1] = (Iterator<Properties>) boundedIterator0;
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ?>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) orderedMapIterator1, (Transformer<? super SQLDataException, ? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Predicate must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }
}
