/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:02:25 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedMapIterator<Boolean, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Iterator<SQLTransientConnectionException> iterator0 = stack0.iterator();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(iterator0);
      
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) iterator0, (Iterator<? extends SQLTransientConnectionException>) iterator0, (Iterator<? extends SQLTransientConnectionException>) iterator0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(zippingIterator0);
      
      SQLException sQLException0 = new SQLException((String) null);
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("z+pf]6{])", sQLException0);
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("z+pf]6{])", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: z+pf]6{])", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      boolean boolean0 = stack0.add(sQLTransientConnectionException0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[java.sql.SQLTransientConnectionException: z+pf]6{])]", stack0.toString());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("z+pf]6{])", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: z+pf]6{])", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertTrue(boolean0);
      assertTrue(stack0.contains(sQLTransientConnectionException0));
      
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      assertNotNull(predicate0);
      
      Transformer<Object, Boolean> transformer1 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate0);
      assertNotNull(transformer1);
      assertFalse(transformer1.equals((Object)transformer0));
      
      TransformerPredicate<SQLTransientConnectionException> transformerPredicate0 = new TransformerPredicate<SQLTransientConnectionException>(transformer1);
      assertNotNull(transformerPredicate0);
      assertFalse(transformer0.equals((Object)transformer1));
      assertFalse(transformer1.equals((Object)transformer0));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLTransientConnectionException>) zippingIterator0, (Predicate<? super SQLTransientConnectionException>) transformerPredicate0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, LinkedHashSet<Class<SQLClientInfoException>>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertFalse(loopingListIterator0.hasNext());
      assertEquals(0, loopingListIterator0.size());
      assertNotNull(loopingListIterator0);
      
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertFalse(loopingListIterator0.hasNext());
      assertEquals(0, loopingListIterator0.size());
      assertNotNull(iterator0);
      
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 91;
      intArray0[1] = 2048;
      intArray0[2] = (-686);
      intArray0[3] = 1877;
      intArray0[4] = (-2247);
      intArray0[5] = 2042;
      intArray0[6] = 1105;
      intArray0[7] = 376;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Enumeration must not be null", intArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("Enumeration must not be null", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: Enumeration must not be null", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {91, 2048, (-686), 1877, (-2247), 2042, 1105, 376}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean boolean0 = vector0.add(batchUpdateException0);
      assertEquals("[java.sql.BatchUpdateException: Enumeration must not be null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("Enumeration must not be null", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: Enumeration must not be null", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {91, 2048, (-686), 1877, (-2247), 2042, 1105, 376}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
      assertTrue(vector0.contains(batchUpdateException0));
      
      String string0 = "";
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", "", "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      assertNotNull(iterator0);
      
      DataTruncation dataTruncation0 = new DataTruncation(1106, true, true, 1106, 2069);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      assertNotNull(predicate0);
      
      Iterator<DataTruncation> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) singletonIterator0, (Predicate<? super DataTruncation>) predicate0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(iterator1);
      
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) iterator1, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, false);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      assertNotNull(factoryTransformer0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) singletonIterator0, (Transformer<? super Properties, String>) factoryTransformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(" OE,9@vMT4EuD", "3YTNn", intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("3YTNn", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException:  OE,9@vMT4EuD", batchUpdateException0.toString());
      assertEquals(" OE,9@vMT4EuD", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      batchUpdateException0.printStackTrace();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("3YTNn", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException:  OE,9@vMT4EuD", batchUpdateException0.toString());
      assertEquals(" OE,9@vMT4EuD", batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      MapIterator<SQLClientInfoException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (long) 4530);
      assertNotNull(boundedIterator0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(" OE,9@vMT4EuD"));
      
      boolean boolean0 = treeSet0.add("");
      assertTrue(boolean0);
      assertFalse(treeSet0.contains(" OE,9@vMT4EuD"));
      assertTrue(treeSet0.contains(""));
      
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) treeSet0);
      assertNotNull(resettableIterator0);
      assertFalse(treeSet0.contains(" OE,9@vMT4EuD"));
      assertTrue(treeSet0.contains(""));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      IteratorUtils.contains((Iterator<String>) resettableIterator0, (Object) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0, (Closure<? super SQLIntegrityConstraintViolationException>) closure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLFeatureNotSupportedException, SQLWarning> mapIterator1 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator1);
      assertSame(mapIterator1, mapIterator0);
      
      Class<SQLFeatureNotSupportedException> class0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator1, (Class<SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertNotNull(singletonListIterator0);
      
      Consumer<SQLNonTransientException> consumer0 = (Consumer<SQLNonTransientException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonListIterator0.forEachRemaining(consumer0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertFalse(singletonListIterator0.hasNext());
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
      
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) singletonListIterator0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertFalse(singletonListIterator0.hasNext());
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("U-D}K@Z!4+s'Ff.HU", sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: U-D}K@Z!4+s'Ff.HU", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("U-D}K@Z!4+s'Ff.HU", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      assertNotNull(predicate0);
      
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("U-D}K@Z!4+s'Ff.HU");
      assertNotNull(transformer0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(reverseListIterator0);
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(10));
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ListIterator<Integer> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) reverseListIterator0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertTrue(reverseListIterator0.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertTrue(listIterator1.hasPrevious());
      assertNotNull(listIterator1);
      assertTrue(arrayList0.contains(10));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) listIterator1, (Iterator<? extends Integer>) reverseListIterator0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertTrue(reverseListIterator0.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertTrue(listIterator1.hasPrevious());
      assertNotNull(iterator0);
      assertTrue(arrayList0.contains(10));
      
      OrderedIterator<PriorityQueue<SQLException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      assertNotNull(predicate1);
      assertSame(predicate1, predicate0);
      
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      assertNotNull(predicate2);
      assertSame(predicate1, predicate0);
      assertSame(predicate0, predicate1);
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      assertNotNull(notPredicate0);
      assertFalse(predicate0.equals((Object)predicate2));
      
      PriorityQueue<SQLException> priorityQueue0 = IteratorUtils.find((Iterator<PriorityQueue<SQLException>>) orderedIterator0, (Predicate<? super PriorityQueue<SQLException>>) notPredicate0);
      assertNull(priorityQueue0);
      assertSame(predicate0, predicate1);
      assertFalse(predicate0.equals((Object)predicate2));
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("U-D}K@Z!4+s'Ff.HU", sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: U-D}K@Z!4+s'Ff.HU", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("U-D}K@Z!4+s'Ff.HU", sQLIntegrityConstraintViolationException1.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, false);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 2);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      InvokerTransformer<SQLTransientException, Properties> invokerTransformer0 = new InvokerTransformer<SQLTransientException, Properties>("qW5*,$7c[Ll11{", classArray0, classArray0);
      assertNotNull(invokerTransformer0);
      assertEquals(2, classArray0.length);
      
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("qW5*,$7c[Ll11{");
      assertEquals("java.sql.SQLFeatureNotSupportedException: qW5*,$7c[Ll11{", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("qW5*,$7c[Ll11{", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("hxTsQY tbIS'sQ", "@D.Lmk]b3D}q/", sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: qW5*,$7c[Ll11{", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("qW5*,$7c[Ll11{", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("hxTsQY tbIS'sQ", sQLTransactionRollbackException0.getMessage());
      assertEquals("@D.Lmk]b3D}q/", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: hxTsQY tbIS'sQ", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      assertEquals(1, sQLTransactionRollbackExceptionArray0.length);
      
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Properties>) invokerTransformer0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(iterator0);
      assertEquals(2, classArray0.length);
      assertEquals(1, sQLTransactionRollbackExceptionArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'qW5*,$7c[Ll11{' on 'class java.sql.SQLTransactionRollbackException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Transformer<SQLTransactionRollbackException, Properties> transformer0 = InvokerTransformer.invokerTransformer("=&-f %agT#;");
      assertNotNull(transformer0);
      
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Properties>) transformer0);
      assertNotNull(iterator0);
      
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLDataException sQLDataException0 = new SQLDataException("/g]qU[H,", "", (-911));
      assertEquals((-911), sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: /g]qU[H,", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("/g]qU[H,", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 1);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      assertEquals(1, sQLDataExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator(").");
      assertNotNull(iterator0);
      
      int int0 = 1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null, 33, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(8, booleanArray0.length);
      
      Boolean boolean0 = IteratorUtils.get((Iterator<Boolean>) objectArrayListIterator0, 1);
      assertTrue(objectArrayListIterator0.hasNext());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertNull(boolean0);
      assertEquals(8, booleanArray0.length);
      
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 5);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) null, (Iterator<? extends String>) listIterator0, (Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      assertNotNull(enumeration0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(8, booleanArray0.length);
      
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(objectArrayListIterator0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      assertEquals(8, booleanArray0.length);
      
      int int0 = 1;
      Boolean boolean0 = IteratorUtils.get((Iterator<Boolean>) listIteratorWrapper0, 1);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertNull(boolean0);
      assertEquals(8, booleanArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertNotNull(objectArrayListIterator0);
      assertEquals(8, booleanArray0.length);
      
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(objectArrayListIterator0);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      assertEquals(8, booleanArray0.length);
      
      Boolean boolean0 = IteratorUtils.get((Iterator<Boolean>) listIteratorWrapper0, 1);
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertNull(boolean0);
      assertEquals(8, booleanArray0.length);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator("End index must not be less than start index");
      assertNotNull(iterator0);
      
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("w%T5H]L");
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("w%T5H]L", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: w%T5H]L", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.BoundedIterator", "End index must not be less than start index", sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("w%T5H]L", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: w%T5H]L", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.BoundedIterator", sQLTransientConnectionException0.getMessage());
      assertEquals("End index must not be less than start index", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.iterators.BoundedIterator", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("w%T5H]L", "End index must not be less than start index", sQLTransientConnectionException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("w%T5H]L", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: w%T5H]L", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.BoundedIterator", sQLTransientConnectionException0.getMessage());
      assertEquals("End index must not be less than start index", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.iterators.BoundedIterator", sQLTransientConnectionException0.toString());
      assertEquals("w%T5H]L", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: w%T5H]L", sQLWarning0.toString());
      assertEquals("End index must not be less than start index", sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("w%T5H]L", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: w%T5H]L", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.BoundedIterator", sQLTransientConnectionException0.getMessage());
      assertEquals("End index must not be less than start index", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.iterators.BoundedIterator", sQLTransientConnectionException0.toString());
      assertEquals("w%T5H]L", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: w%T5H]L", sQLWarning0.toString());
      assertEquals("End index must not be less than start index", sQLWarning0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning: w%T5H]L", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLWarning: w%T5H]L", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("w%T5H]L", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: w%T5H]L", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.BoundedIterator", sQLTransientConnectionException0.getMessage());
      assertEquals("End index must not be less than start index", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.iterators.BoundedIterator", sQLTransientConnectionException0.toString());
      assertEquals("w%T5H]L", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: w%T5H]L", sQLWarning0.toString());
      assertEquals("End index must not be less than start index", sQLWarning0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning: w%T5H]L", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLWarning: w%T5H]L", batchUpdateException0.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: java.sql.SQLWarning: w%T5H]L", batchUpdateException1.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning: w%T5H]L", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertNotNull(batchUpdateException1);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(batchUpdateException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("w%T5H]L", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: w%T5H]L", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.BoundedIterator", sQLTransientConnectionException0.getMessage());
      assertEquals("End index must not be less than start index", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.iterators.BoundedIterator", sQLTransientConnectionException0.toString());
      assertEquals("w%T5H]L", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: w%T5H]L", sQLWarning0.toString());
      assertEquals("End index must not be less than start index", sQLWarning0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning: w%T5H]L", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLWarning: w%T5H]L", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: java.sql.SQLWarning: w%T5H]L", batchUpdateException2.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning: w%T5H]L", batchUpdateException2.getMessage());
      assertNull(batchUpdateException2.getSQLState());
      assertNotNull(batchUpdateException2);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException();
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertNull(batchUpdateException3.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException3.toString());
      assertNull(batchUpdateException3.getMessage());
      assertNotNull(batchUpdateException3);
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      String string0 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(string0);
      
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertNotNull(singletonListIterator0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NfpG88Pp-v)333");
      assertFalse(boolean0);
      
      SQLWarning sQLWarning0 = new SQLWarning("NfpG88Pp-v)333", "NfpG88Pp-v)333", 13, sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("NfpG88Pp-v)333", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: NfpG88Pp-v)333", sQLWarning0.toString());
      assertEquals("NfpG88Pp-v)333", sQLWarning0.getSQLState());
      assertEquals(13, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Predicate<Class<String>>>) null, (Predicate<? super Predicate<Class<String>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(8, booleanArray0.length);
      
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(objectArrayListIterator0);
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      assertEquals(8, booleanArray0.length);
      
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>((StringTokenizer) null);
      assertNotNull(constantTransformer0);
      
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      assertNotNull(transformerClosure0);
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 1, 1);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, true, true, 1, 1, dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertNotNull(dataTruncation1);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(1, true, false, 1, 2956, dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("22001", dataTruncation2.getSQLState());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertNotNull(dataTruncation2);
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(1, true, true, 14, (-460));
      assertEquals("01004", dataTruncation3.getSQLState());
      assertEquals(0, dataTruncation3.getErrorCode());
      assertEquals("Data truncation", dataTruncation3.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation3.toString());
      assertNotNull(dataTruncation3);
      assertFalse(dataTruncation3.equals((Object)dataTruncation1));
      assertFalse(dataTruncation3.equals((Object)dataTruncation0));
      assertFalse(dataTruncation3.equals((Object)dataTruncation2));
      
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(14, true, true, 78, 78);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation4.toString());
      assertEquals(0, dataTruncation4.getErrorCode());
      assertEquals("01004", dataTruncation4.getSQLState());
      assertEquals("Data truncation", dataTruncation4.getMessage());
      assertNotNull(dataTruncation4);
      assertFalse(dataTruncation4.equals((Object)dataTruncation1));
      assertFalse(dataTruncation4.equals((Object)dataTruncation0));
      assertFalse(dataTruncation4.equals((Object)dataTruncation2));
      assertFalse(dataTruncation4.equals((Object)dataTruncation3));
      
      dataTruncationArray0[4] = dataTruncation4;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0, 1);
      assertNotNull(resettableIterator0);
      assertEquals(5, dataTruncationArray0.length);
      
      IteratorUtils.apply((Iterator<DataTruncation>) resettableIterator0, (Closure<? super DataTruncation>) transformerClosure0);
      assertEquals(5, dataTruncationArray0.length);
      
      MapIterator<Properties, HashMap<BatchUpdateException, LinkedList>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("");
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(resettableIterator0);
      
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(zippingIterator0);
      
      int int0 = IteratorUtils.size(zippingIterator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(1, int0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(8, booleanArray0.length);
      
      Boolean boolean0 = IteratorUtils.get((Iterator<Boolean>) objectArrayListIterator0, 1);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertNull(boolean0);
      assertEquals(8, booleanArray0.length);
      
      int int0 = IteratorUtils.size(objectArrayListIterator0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(7, objectArrayListIterator0.previousIndex());
      assertEquals(8, objectArrayListIterator0.nextIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(8, booleanArray0.length);
      assertEquals(6, int0);
      
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      int int0 = IteratorUtils.size(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, int0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) null, (Collection<? super SQLTimeoutException>) linkedHashSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertNotNull(singletonListIterator0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("pklATb");
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(constantTransformer0);
      
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(transformerClosure0);
      
      IteratorUtils.apply((Iterator<DataTruncation>) null, (Closure<? super DataTruncation>) transformerClosure0);
      assertEquals(1, stringTokenizer0.countTokens());
      
      MapIterator<Properties, HashMap<BatchUpdateException, LinkedList>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) resettableIterator0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "[]");
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(iterator0);
      
      boolean boolean1 = IteratorUtils.isEmpty(iterator0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator1);
      
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(resettableIterator1);
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIteratorWrapper0);
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(enumeration0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(false));
      
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) linkedHashSet0);
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(iterator1);
      assertFalse(linkedHashSet0.contains(false));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("");
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLIntegrityConstraintViolationException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLIntegrityConstraintViolationException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertNotNull(singletonListIterator0);
      
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLDataException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(predicate0);
      
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.functors.FunctorUtils", "YU[ne}S", 223, sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("YU[ne}S", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: org.apache.commons.collections4.functors.FunctorUtils", sQLWarning0.toString());
      assertEquals("org.apache.commons.collections4.functors.FunctorUtils", sQLWarning0.getMessage());
      assertEquals(223, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0, true);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("YU[ne}S", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: org.apache.commons.collections4.functors.FunctorUtils", sQLWarning0.toString());
      assertEquals("org.apache.commons.collections4.functors.FunctorUtils", sQLWarning0.getMessage());
      assertEquals(223, sQLWarning0.getErrorCode());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLWarning>) singletonIterator0, (Predicate<? super SQLWarning>) predicate1);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals("YU[ne}S", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: org.apache.commons.collections4.functors.FunctorUtils", sQLWarning0.toString());
      assertEquals("org.apache.commons.collections4.functors.FunctorUtils", sQLWarning0.getMessage());
      assertEquals(223, sQLWarning0.getErrorCode());
      assertFalse(singletonIterator0.hasNext());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertTrue(boolean0);
      
      ResettableListIterator<Predicate<Class<String>>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      Predicate<Class<String>> predicate2 = IteratorUtils.find((Iterator<Predicate<Class<String>>>) resettableListIterator0, (Predicate<? super Predicate<Class<String>>>) uniquePredicate0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNull(predicate2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MapIterator<String, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ListIterator<Predicate<Properties>> listIterator0 = IteratorUtils.singletonListIterator((Predicate<Properties>) null);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      assertNotNull(predicate0);
      assertEquals(0, predicateArray0.length);
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      assertNotNull(nullIsTruePredicate0);
      assertEquals(0, predicateArray0.length);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Predicate<Properties>>) listIterator0, (Predicate<? super Predicate<Properties>>) nullIsTruePredicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals(0, predicateArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertNotNull(singletonListIterator0);
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLFeatureNotSupportedException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(predicate0);
      
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      SQLWarning sQLWarning0 = new SQLWarning("NfpG88Pp-v)333", "NfpG88Pp-v)333", 13, sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(13, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: NfpG88Pp-v)333", sQLWarning0.toString());
      assertEquals("NfpG88Pp-v)333", sQLWarning0.getMessage());
      assertEquals("NfpG88Pp-v)333", sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0, false);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(13, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: NfpG88Pp-v)333", sQLWarning0.toString());
      assertEquals("NfpG88Pp-v)333", sQLWarning0.getMessage());
      assertEquals("NfpG88Pp-v)333", sQLWarning0.getSQLState());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLWarning>) singletonIterator0, (Predicate<? super SQLWarning>) predicate0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(13, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: NfpG88Pp-v)333", sQLWarning0.toString());
      assertEquals("NfpG88Pp-v)333", sQLWarning0.getMessage());
      assertEquals("NfpG88Pp-v)333", sQLWarning0.getSQLState());
      assertFalse(singletonIterator0.hasNext());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(boolean0);
      
      ResettableListIterator<Predicate<Class<String>>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate2 = new UniquePredicate<Object>();
      assertNotNull(predicate2);
      
      Predicate<Class<String>> predicate3 = IteratorUtils.find((Iterator<Predicate<Class<String>>>) resettableListIterator0, (Predicate<? super Predicate<Class<String>>>) predicate2);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNull(predicate3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      assertNotNull(iterator0);
      
      TreeSet<Integer>[] treeSetArray0 = (TreeSet<Integer>[]) Array.newInstance(TreeSet.class, 4);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      
      treeSetArray0[0] = treeSet0;
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>();
      assertNotNull(treeSet1);
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      treeSetArray0[1] = treeSet1;
      TreeSet<Integer> treeSet2 = new TreeSet<Integer>();
      assertNotNull(treeSet2);
      assertTrue(treeSet2.equals((Object)treeSet0));
      assertTrue(treeSet2.equals((Object)treeSet1));
      
      treeSetArray0[2] = treeSet2;
      TreeSet<Integer> treeSet3 = new TreeSet<Integer>();
      assertNotNull(treeSet3);
      assertTrue(treeSet3.equals((Object)treeSet0));
      assertTrue(treeSet3.equals((Object)treeSet1));
      assertTrue(treeSet3.equals((Object)treeSet2));
      
      treeSetArray0[3] = treeSet3;
      ResettableListIterator<TreeSet<Integer>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      assertEquals(4, treeSetArray0.length);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<TreeSet<Integer>>) resettableListIterator0, (Predicate<? super TreeSet<Integer>>) instanceofPredicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(4, treeSetArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(8, booleanArray0.length);
      
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(objectArrayListIterator0);
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      assertEquals(8, booleanArray0.length);
      
      Boolean boolean0 = IteratorUtils.get((Iterator<Boolean>) listIteratorWrapper0, 1);
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertNull(boolean0);
      assertEquals(8, booleanArray0.length);
      
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator((SQLFeatureNotSupportedException) null);
      assertNotNull(resettableIterator0);
      
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      assertNotNull(anyPredicate0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) anyPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      Transformer<SQLNonTransientConnectionException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      assertNotNull(transformer0);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      OrderedIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator1);
      
      String string0 = IteratorUtils.toString((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) orderedIterator1);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      Integer integer0 = new Integer((-4642));
      assertNotNull(integer0);
      assertEquals((-4642), (int)integer0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("InstantiateTransformer: Input object was not an instanceof Class, it was a null object", "InstantiateTransformer: Input object was not an instanceof Class, it was a null object");
      assertEquals("InstantiateTransformer: Input object was not an instanceof Class, it was a null object", sQLSyntaxErrorException0.getMessage());
      assertEquals("InstantiateTransformer: Input object was not an instanceof Class, it was a null object", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: InstantiateTransformer: Input object was not an instanceof Class, it was a null object", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[]", "[]", (-1130), sQLSyntaxErrorException0);
      assertEquals("InstantiateTransformer: Input object was not an instanceof Class, it was a null object", sQLSyntaxErrorException0.getMessage());
      assertEquals("InstantiateTransformer: Input object was not an instanceof Class, it was a null object", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: InstantiateTransformer: Input object was not an instanceof Class, it was a null object", sQLSyntaxErrorException0.toString());
      assertEquals("[]", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("[]", sQLNonTransientConnectionException0.getMessage());
      assertEquals((-1130), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: []", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      assertEquals("InstantiateTransformer: Input object was not an instanceof Class, it was a null object", sQLSyntaxErrorException0.getMessage());
      assertEquals("InstantiateTransformer: Input object was not an instanceof Class, it was a null object", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: InstantiateTransformer: Input object was not an instanceof Class, it was a null object", sQLSyntaxErrorException0.toString());
      assertEquals("[]", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("[]", sQLNonTransientConnectionException0.getMessage());
      assertEquals((-1130), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: []", sQLNonTransientConnectionException0.toString());
      assertNotNull(iterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertEquals("InstantiateTransformer: Input object was not an instanceof Class, it was a null object", sQLSyntaxErrorException0.getMessage());
      assertEquals("InstantiateTransformer: Input object was not an instanceof Class, it was a null object", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: InstantiateTransformer: Input object was not an instanceof Class, it was a null object", sQLSyntaxErrorException0.toString());
      assertEquals("[]", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("[]", sQLNonTransientConnectionException0.getMessage());
      assertEquals((-1130), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: []", sQLNonTransientConnectionException0.toString());
      assertFalse(boolean0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      assertNotNull(enumeration0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains((-4642)));
      
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(iterator1);
      assertFalse(linkedHashSet0.contains((-4642)));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 2);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      assertNotNull(treeSet0);
      
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) treeSet0);
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      Hashtable<Object, SQLRecoverableException> hashtable0 = new Hashtable<Object, SQLRecoverableException>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Transformer<Object, SQLRecoverableException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLRecoverableException>) hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(transformer0);
      
      Predicate<SQLException> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super SQLException, ? extends SQLException>) transformer0, (Predicate<? super SQLException>) predicate0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      predicateArray0[1] = predicate1;
      AnyPredicate<SQLFeatureNotSupportedException> anyPredicate0 = new AnyPredicate<SQLFeatureNotSupportedException>(predicateArray0);
      assertNotNull(anyPredicate0);
      assertEquals(2, predicateArray0.length);
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) anyPredicate0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(iterator0);
      assertEquals(2, predicateArray0.length);
      
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(iterator0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      assertEquals(2, predicateArray0.length);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) listIteratorWrapper0, (Predicate<? super SQLFeatureNotSupportedException>) anyPredicate0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNull(sQLFeatureNotSupportedException0);
      assertEquals(2, predicateArray0.length);
      
      OrderedMapIterator<BatchUpdateException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(abstractMapIteratorDecorator0);
      
      Iterable<BatchUpdateException> iterable0 = IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterable0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-207), (-207));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) null);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      Integer integer0 = new Integer((-4642));
      assertNotNull(integer0);
      assertEquals((-4642), (int)integer0);
      
      DataTruncation dataTruncation0 = new DataTruncation(803, false, true, 803, (-4642), (Throwable) null);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(dataTruncation0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(iterator0);
      
      boolean boolean1 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = dataTruncation0.getParameter();
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLWarning sQLWarning0 = new SQLWarning("");
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(8, booleanArray0.length);
      
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(objectArrayListIterator0);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      assertEquals(8, booleanArray0.length);
      
      Boolean boolean1 = IteratorUtils.get((Iterator<Boolean>) listIteratorWrapper0, 1);
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertNull(boolean1);
      assertEquals(8, booleanArray0.length);
      
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 4);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(resettableIterator0);
      
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "MapIterator[", sQLWarning0);
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("MapIterator[", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("MapIterator[", sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException1.toString());
      assertNotNull(sQLTransactionRollbackException1);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(",a3g[bx7-\"X9d$n3", "", 1, sQLTransactionRollbackException1);
      assertEquals(1, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ,a3g[bx7-\"X9d$n3", sQLTransactionRollbackException2.toString());
      assertEquals(",a3g[bx7-\"X9d$n3", sQLTransactionRollbackException2.getMessage());
      assertEquals("", sQLTransactionRollbackException2.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("MapIterator[", sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException1.toString());
      assertNotNull(sQLTransactionRollbackException2);
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("MapIterator[", (String) null);
      assertNull(sQLTransactionRollbackException3.getSQLState());
      assertEquals("MapIterator[", sQLTransactionRollbackException3.getMessage());
      assertEquals(0, sQLTransactionRollbackException3.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: MapIterator[", sQLTransactionRollbackException3.toString());
      assertNotNull(sQLTransactionRollbackException3);
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException0));
      
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException((String) null, (String) null, 1, sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException4.toString());
      assertNull(sQLTransactionRollbackException4.getMessage());
      assertNull(sQLTransactionRollbackException4.getSQLState());
      assertEquals(1, sQLTransactionRollbackException4.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("MapIterator[", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException4);
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException(",a3g[bx7-\"X9d$n3", ",a3g[bx7-\"X9d$n3");
      assertEquals(0, sQLTransactionRollbackException5.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ,a3g[bx7-\"X9d$n3", sQLTransactionRollbackException5.toString());
      assertEquals(",a3g[bx7-\"X9d$n3", sQLTransactionRollbackException5.getSQLState());
      assertEquals(",a3g[bx7-\"X9d$n3", sQLTransactionRollbackException5.getMessage());
      assertNotNull(sQLTransactionRollbackException5);
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException5.equals((Object)sQLTransactionRollbackException1));
      
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("bXB$>", "MapIterator[", sQLTransactionRollbackException4);
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException4.toString());
      assertNull(sQLTransactionRollbackException4.getMessage());
      assertNull(sQLTransactionRollbackException4.getSQLState());
      assertEquals(1, sQLTransactionRollbackException4.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: bXB$>", sQLTransactionRollbackException6.toString());
      assertEquals("MapIterator[", sQLTransactionRollbackException6.getSQLState());
      assertEquals("bXB$>", sQLTransactionRollbackException6.getMessage());
      assertEquals(0, sQLTransactionRollbackException6.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("MapIterator[", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException6);
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException4.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException6.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("g_!-]\"U;Gb", "MapIterator[", 1, sQLTransactionRollbackException2);
      assertEquals(1, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ,a3g[bx7-\"X9d$n3", sQLTransactionRollbackException2.toString());
      assertEquals(",a3g[bx7-\"X9d$n3", sQLTransactionRollbackException2.getMessage());
      assertEquals("", sQLTransactionRollbackException2.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("g_!-]\"U;Gb", sQLTransactionRollbackException7.getMessage());
      assertEquals(1, sQLTransactionRollbackException7.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: g_!-]\"U;Gb", sQLTransactionRollbackException7.toString());
      assertEquals("MapIterator[", sQLTransactionRollbackException7.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("MapIterator[", sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException1.toString());
      assertNotNull(sQLTransactionRollbackException7);
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException6));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException6));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException7.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException6));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException6));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException4));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException5));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 1, 2);
      assertNotNull(resettableIterator1);
      assertEquals(8, sQLTransactionRollbackExceptionArray0.length);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) resettableIterator1;
      Iterator<SQLTransactionRollbackException> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains(sQLTransactionRollbackException2));
      
      iteratorArray0[2] = iterator0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator2 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      assertNotNull(resettableIterator2);
      assertNotSame(resettableIterator2, resettableIterator1);
      assertEquals(8, sQLTransactionRollbackExceptionArray0.length);
      assertFalse(resettableIterator2.equals((Object)resettableIterator1));
      assertFalse(resettableIterator2.equals((Object)resettableIterator0));
      
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator2);
      assertNotNull(iterator1);
      assertNotSame(resettableIterator2, resettableIterator1);
      assertEquals(8, sQLTransactionRollbackExceptionArray0.length);
      assertFalse(resettableIterator2.equals((Object)resettableIterator1));
      assertFalse(resettableIterator2.equals((Object)resettableIterator0));
      assertFalse(iterator1.equals((Object)iterator0));
      
      iteratorArray0[3] = iterator1;
      Iterator<SQLTransientException> iterator2 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>[]) iteratorArray0);
      assertNotNull(iterator2);
      assertEquals(4, iteratorArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator2, (-1511));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -1511
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Factory<Properties> factory0 = ConstantFactory.constantFactory(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(factory0);
      
      FactoryTransformer<SQLException, Properties> factoryTransformer0 = new FactoryTransformer<SQLException, Properties>(factory0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(factoryTransformer0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)sQLTransientConnectionException0.initCause(sQLTimeoutException0);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertNotNull(sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      Properties properties1 = factoryTransformer0.transform(sQLTransientConnectionException0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
      assertSame(properties0, properties1);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(properties1, properties0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTransactionRollbackException[]) null, 425, 425);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(0, int0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("End index must not be less than start index");
      assertEquals(9, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertNotNull(singletonListIterator0);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0, class0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertNotNull(sQLFeatureNotSupportedExceptionArray0);
      assertEquals(1, sQLFeatureNotSupportedExceptionArray0.length);
      
      MapIterator<SQLTransactionRollbackException, LinkedHashSet<EnumSet>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      iteratorArray0[3] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      iteratorArray0[4] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      iteratorArray0[5] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException>(mapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      
      Predicate<BatchUpdateException> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) abstractMapIteratorDecorator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Cannot store a duplicate value (\"");
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null, 2959);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("y", "");
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(constantTransformer0);
      
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      Transformer<SQLNonTransientConnectionException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      assertNotNull(transformer0);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(reverseListIterator0);
      
      Transformer<SQLException, String> transformer1 = ConstantTransformer.constantTransformer("y");
      assertNotNull(transformer1);
      
      String string0 = "";
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) reverseListIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer1, "", "y", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Factory<Properties> factory0 = ConstantFactory.constantFactory(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(factory0);
      
      FactoryTransformer<SQLException, Properties> factoryTransformer0 = new FactoryTransformer<SQLException, Properties>(factory0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(factoryTransformer0);
      
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends Properties>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("?");
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(constantTransformer0);
      
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(transformerClosure0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator0, (Closure<? super DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y");
      assertFalse(boolean0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("y", "");
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(constantTransformer0);
      
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      StringTokenizer stringTokenizer1 = new StringTokenizer("{aa^H[ o");
      assertEquals(2, stringTokenizer1.countTokens());
      assertNotNull(stringTokenizer1);
      assertFalse(stringTokenizer1.equals((Object)stringTokenizer0));
      
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableListIterator0, (Transformer<? super SQLClientInfoException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Factory<Properties> factory0 = ConstantFactory.constantFactory(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(factory0);
      
      PriorityQueue<SQLException>[] priorityQueueArray0 = (PriorityQueue<SQLException>[]) Array.newInstance(PriorityQueue.class, 7);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue1.size());
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue2.size());
      assertNotNull(priorityQueue2);
      assertFalse(priorityQueue2.equals((Object)priorityQueue0));
      assertFalse(priorityQueue2.equals((Object)priorityQueue1));
      
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLException> priorityQueue3 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue3.size());
      assertNotNull(priorityQueue3);
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<SQLException> priorityQueue4 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue4.size());
      assertNotNull(priorityQueue4);
      assertFalse(priorityQueue4.equals((Object)priorityQueue2));
      assertFalse(priorityQueue4.equals((Object)priorityQueue1));
      assertFalse(priorityQueue4.equals((Object)priorityQueue3));
      assertFalse(priorityQueue4.equals((Object)priorityQueue0));
      
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<SQLException> priorityQueue5 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue5.size());
      assertNotNull(priorityQueue5);
      assertFalse(priorityQueue5.equals((Object)priorityQueue2));
      assertFalse(priorityQueue5.equals((Object)priorityQueue3));
      assertFalse(priorityQueue5.equals((Object)priorityQueue4));
      assertFalse(priorityQueue5.equals((Object)priorityQueue1));
      assertFalse(priorityQueue5.equals((Object)priorityQueue0));
      
      priorityQueueArray0[5] = priorityQueue5;
      PriorityQueue<SQLException> priorityQueue6 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue6.size());
      assertNotNull(priorityQueue6);
      assertFalse(priorityQueue6.equals((Object)priorityQueue4));
      assertFalse(priorityQueue6.equals((Object)priorityQueue1));
      assertFalse(priorityQueue6.equals((Object)priorityQueue2));
      assertFalse(priorityQueue6.equals((Object)priorityQueue3));
      assertFalse(priorityQueue6.equals((Object)priorityQueue0));
      assertFalse(priorityQueue6.equals((Object)priorityQueue5));
      
      priorityQueueArray0[6] = priorityQueue6;
      ResettableListIterator<PriorityQueue<SQLException>> resettableListIterator1 = IteratorUtils.arrayListIterator(priorityQueueArray0);
      assertTrue(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      assertEquals(7, priorityQueueArray0.length);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<PriorityQueue<SQLException>>) resettableListIterator1, (Predicate<? super PriorityQueue<SQLException>>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) resettableIterator0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      int int0 = (-4642);
      Integer integer0 = new Integer((-4642));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-4642), (int)integer0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(iterator0);
      
      boolean boolean1 = IteratorUtils.isEmpty(iterator0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("hCYISZEx;.A5:G", "[]");
      assertEquals("java.sql.SQLTransactionRollbackException: hCYISZEx;.A5:G", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("hCYISZEx;.A5:G", sQLTransactionRollbackException0.getMessage());
      assertEquals("[]", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      ArrayIterator<Boolean> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<Boolean>(sQLTransactionRollbackException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 6);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      iteratorArray0[0] = (Iterator<String>) listIterator0;
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("v:I<2XPm.Ay7_z>");
      assertNotNull(resettableIterator0);
      
      iteratorArray0[1] = (Iterator<String>) resettableIterator0;
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      iteratorArray0[2] = iterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("y", "");
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(constantTransformer0);
      
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(predicate0);
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(iterator0);
      
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(iterator0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) listIteratorWrapper0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) iterator1, class0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(sQLFeatureNotSupportedExceptionArray0);
      assertEquals(0, sQLFeatureNotSupportedExceptionArray0.length);
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) class0, (-1293), (-1293));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MapIterator<String, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Transformer<SQLClientInfoException, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.PeekingIterator");
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, String>) transformer0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Predicate<BatchUpdateException> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<BatchUpdateException, IIOMetadataNode> hashtable0 = new Hashtable<BatchUpdateException, IIOMetadataNode>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<BatchUpdateException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, IIOMetadataNode>(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(entrySetMapIterator0);
      
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
      assertEquals(0, iteratorArray0.length);
      
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) entrySetMapIterator0, (Iterator<? extends BatchUpdateException>) zippingIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(iterator0);
      assertEquals(0, iteratorArray0.length);
      
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, iteratorArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Cannot store a duplicate value (\"");
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      int int0 = IteratorUtils.size(orderedIterator0);
      assertEquals(0, int0);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(reverseListIterator0);
      
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(enumeration0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException>(mapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      
      Predicate<BatchUpdateException> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate1);
      
      ListIterator<SQLTransactionRollbackException> listIterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) predicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends Properties>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("ZGd*'$w;Y*#J");
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(constantTransformer0);
      
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((SQLIntegrityConstraintViolationException) null);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(equalPredicate0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      Transformer<SQLNonTransientConnectionException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      assertNotNull(transformer0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Properties[] propertiesArray0 = new Properties[6];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      Properties properties1 = new Properties();
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      
      propertiesArray0[2] = properties1;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties0;
      propertiesArray0[5] = properties0;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      assertNotNull(resettableIterator0);
      assertEquals(6, propertiesArray0.length);
      
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Factory<Properties> factory1 = ConstantFactory.constantFactory(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(factory1);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      
      FactoryTransformer<SQLException, Properties> factoryTransformer0 = new FactoryTransformer<SQLException, Properties>(factory1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(factoryTransformer0);
      assertTrue(properties0.equals((Object)properties1));
      
      Iterator<Properties> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Properties>) factoryTransformer0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(iterator1);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Hashtable<Integer, DataTruncation> hashtable0 = new Hashtable<Integer, DataTruncation>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<Integer, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<Integer, DataTruncation>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("ZGd*'$w;Y*#J");
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(constantTransformer0);
      
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((SQLIntegrityConstraintViolationException) null);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(equalPredicate0);
      
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      Transformer<SQLNonTransientConnectionException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      assertNotNull(transformer0);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = stack0.push(sQLNonTransientConnectionException0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[java.sql.SQLNonTransientConnectionException]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertNotNull(sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertTrue(stack0.contains(sQLNonTransientConnectionException0));
      
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[java.sql.SQLNonTransientConnectionException]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(enumeration0);
      assertTrue(stack0.contains(sQLNonTransientConnectionException0));
      
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[java.sql.SQLNonTransientConnectionException]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(iterator0);
      assertTrue(stack0.contains(sQLNonTransientConnectionException0));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, (String) null, "", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("*D>9h_`&emT");
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(constantTransformer0);
      
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet1 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      
      boolean boolean0 = linkedHashSet1.add((SQLIntegrityConstraintViolationException) null);
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedHashSet1.add((SQLIntegrityConstraintViolationException) null);
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(equalPredicate0);
      assertFalse(linkedHashSet0.equals((Object)linkedHashSet1));
      
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      Transformer<SQLNonTransientConnectionException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      assertNotNull(transformer0);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Iterator<SQLNonTransientConnectionException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      String string0 = "";
      SQLWarning sQLWarning0 = new SQLWarning("");
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(8, booleanArray0.length);
      
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(objectArrayListIterator0);
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      assertEquals(8, booleanArray0.length);
      
      Predicate<StringTokenizer>[] predicateArray0 = (Predicate<StringTokenizer>[]) Array.newInstance(Predicate.class, 20);
      UniquePredicate<StringTokenizer> uniquePredicate0 = new UniquePredicate<StringTokenizer>();
      assertNotNull(uniquePredicate0);
      
      predicateArray0[0] = (Predicate<StringTokenizer>) uniquePredicate0;
      Predicate<StringTokenizer> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[1] = predicate0;
      AllPredicate<StringTokenizer> allPredicate0 = new AllPredicate<StringTokenizer>(predicateArray0);
      assertNotNull(allPredicate0);
      assertEquals(20, predicateArray0.length);
      
      IfTransformer<StringTokenizer, SQLNonTransientConnectionException> ifTransformer0 = new IfTransformer<StringTokenizer, SQLNonTransientConnectionException>(allPredicate0, (Transformer<? super StringTokenizer, ? extends SQLNonTransientConnectionException>) null, (Transformer<? super StringTokenizer, ? extends SQLNonTransientConnectionException>) null);
      assertNotNull(ifTransformer0);
      assertEquals(20, predicateArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) null, (Transformer<? super StringTokenizer, ? extends SQLNonTransientConnectionException>) ifTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("y", "");
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(constantTransformer0);
      
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      Transformer<SQLNonTransientConnectionException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      assertNotNull(transformer0);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(enumeration0);
      
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, "", "", "");
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 8);
      OrderedMapIterator<SQLRecoverableException, Iterator<Integer>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<SQLRecoverableException, Iterator<Integer>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends Iterator<Integer>>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      MapIterator<SQLRecoverableException, Iterator<Integer>> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLRecoverableException, ? extends Iterator<Integer>>) orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(iterator1);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      iteratorArray0[0] = iterator1;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTransientConnectionException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("");
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertNotNull(sQLRecoverableException1);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      String string1 = "4R,,<ah";
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("4R,,<ah");
      assertEquals(0, sQLRecoverableException2.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: 4R,,<ah", sQLRecoverableException2.toString());
      assertNull(sQLRecoverableException2.getSQLState());
      assertEquals("4R,,<ah", sQLRecoverableException2.getMessage());
      assertNotNull(sQLRecoverableException2);
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException1));
      
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException(sQLRecoverableException2);
      assertEquals(0, sQLRecoverableException2.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: 4R,,<ah", sQLRecoverableException2.toString());
      assertNull(sQLRecoverableException2.getSQLState());
      assertEquals("4R,,<ah", sQLRecoverableException2.getMessage());
      assertNull(sQLRecoverableException3.getSQLState());
      assertEquals(0, sQLRecoverableException3.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: 4R,,<ah", sQLRecoverableException3.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLRecoverableException: 4R,,<ah", sQLRecoverableException3.toString());
      assertNotNull(sQLRecoverableException3);
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException2));
      
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      assertNotNull(resettableIterator0);
      assertEquals(4, sQLRecoverableExceptionArray0.length);
      
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) resettableIterator0;
      Iterator<SQLRecoverableException> iterator2 = IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) iteratorArray0[1]);
      assertNotNull(iterator2);
      assertEquals(8, iteratorArray0.length);
      assertFalse(iterator2.equals((Object)iterator1));
      
      iteratorArray0[2] = iterator2;
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator2, (-1290L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MapIterator<LinkedHashSet<Hashtable>, Transformer<Object, Boolean>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      SQLWarning sQLWarning0 = new SQLWarning("");
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertNotNull(objectArrayListIterator0);
      assertEquals(8, booleanArray0.length);
      
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(objectArrayListIterator0);
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      assertEquals(8, booleanArray0.length);
      
      Boolean boolean1 = IteratorUtils.get((Iterator<Boolean>) listIteratorWrapper0, 1);
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertNull(boolean1);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue1.size());
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue2.size());
      assertNotNull(priorityQueue2);
      assertFalse(priorityQueue2.equals((Object)priorityQueue0));
      assertFalse(priorityQueue2.equals((Object)priorityQueue1));
      
      PriorityQueue<SQLException> priorityQueue3 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue3.size());
      assertNotNull(priorityQueue3);
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      
      PriorityQueue<SQLException> priorityQueue4 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue4.size());
      assertNotNull(priorityQueue4);
      assertFalse(priorityQueue4.equals((Object)priorityQueue2));
      assertFalse(priorityQueue4.equals((Object)priorityQueue3));
      assertFalse(priorityQueue4.equals((Object)priorityQueue0));
      assertFalse(priorityQueue4.equals((Object)priorityQueue1));
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
      
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      String string0 = "il6M\"wfMuyvB>3zl";
      String string1 = null;
      StringTokenizer stringTokenizer0 = null;
//      try {
        stringTokenizer0 = new StringTokenizer((String) null, "il6M\"wfMuyvB>3zl", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.StringTokenizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Boolean>) null, (Predicate<? super Boolean>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(20);
      assertNotNull(integer0);
      assertEquals(20, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(20);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(20, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(11);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(11, (int)integer2);
      
      integerArray0[2] = integer2;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Integer integer3 = new Integer(2928);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(2928, (int)integer3);
      
      integerArray0[3] = integer3;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 3);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(3, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(4, integerArray0.length);
      
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) objectArrayListIterator0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(3, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertEquals(4, integerArray0.length);
      
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) listIterator0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(3, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(enumeration0);
      assertEquals(4, integerArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d'Mp&NW48IwjVr28ay");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(3, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(iterator0);
      assertEquals(4, integerArray0.length);
      
      Iterator<Integer> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Integer>) iterator0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(3, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(iterator1);
      assertEquals(4, integerArray0.length);
      assertFalse(iterator1.equals((Object)iterator0));
      
      ObjectArrayListIterator<Boolean> objectArrayListIterator1 = null;
//      try {
        objectArrayListIterator1 = new ObjectArrayListIterator<Boolean>((Boolean[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      HashSet<SQLIntegrityConstraintViolationException>[] hashSetArray0 = (HashSet<SQLIntegrityConstraintViolationException>[]) Array.newInstance(HashSet.class, 5);
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("\"3M2");
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(constantTransformer0);
      
      hashSetArray0[0] = hashSet0;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((SQLIntegrityConstraintViolationException) null);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(equalPredicate0);
      
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      Transformer<SQLNonTransientConnectionException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      assertNotNull(transformer0);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(enumeration0);
      
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, "Jnf]^iRClZ!6&o", "", "");
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Stack<Class<Integer>> stack0 = new Stack<Class<Integer>>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 0);
      ObjectArrayListIterator<Transformer<Object, Boolean>> objectArrayListIterator0 = new ObjectArrayListIterator<Transformer<Object, Boolean>>(transformerArray0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertNotNull(objectArrayListIterator0);
      assertEquals(0, transformerArray0.length);
      
      Iterator<Transformer<Object, Boolean>> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Transformer<Object, Boolean>>) objectArrayListIterator0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertNotNull(iterator0);
      assertEquals(0, transformerArray0.length);
      
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue1.size());
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue2.size());
      assertNotNull(priorityQueue2);
      assertFalse(priorityQueue2.equals((Object)priorityQueue0));
      assertFalse(priorityQueue2.equals((Object)priorityQueue1));
      
      PriorityQueue<SQLException> priorityQueue3 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue3.size());
      assertNotNull(priorityQueue3);
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(iterator1);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Cannot store a duplicate value (\"");
      assertNotNull(iIOMetadataNode0);
      
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("Cannot store a duplicate value (\"");
      assertNotNull(transformer0);
      
      PriorityQueue<Predicate<Object>> priorityQueue4 = new PriorityQueue<Predicate<Object>>();
      assertEquals(0, priorityQueue4.size());
      assertNotNull(priorityQueue4);
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue4);
      assertEquals(0, priorityQueue4.size());
      assertNotNull(predicate0);
      assertFalse(priorityQueue4.contains(predicate0));
      
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      Transformer<SQLNonTransientConnectionException, String> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      assertNotNull(transformer1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("No more elements in the iteration");
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: No more elements in the iteration", sQLFeatureNotSupportedException0.toString());
      assertEquals("No more elements in the iteration", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("t67eW:Z#`'i`c>V@^", "Cannot store a duplicate value (\"", (-1313), sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: No more elements in the iteration", sQLFeatureNotSupportedException0.toString());
      assertEquals("No more elements in the iteration", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals((-1313), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("t67eW:Z#`'i`c>V@^", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: t67eW:Z#`'i`c>V@^", sQLNonTransientConnectionException0.toString());
      assertEquals("Cannot store a duplicate value (\"", sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Transformer<SQLException, SQLNonTransientConnectionException> transformer2 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer2);
      
      Iterator<SQLNonTransientConnectionException> iterator2 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) transformer2);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: No more elements in the iteration", sQLFeatureNotSupportedException0.toString());
      assertEquals("No more elements in the iteration", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals((-1313), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("t67eW:Z#`'i`c>V@^", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: t67eW:Z#`'i`c>V@^", sQLNonTransientConnectionException0.toString());
      assertEquals("Cannot store a duplicate value (\"", sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(iterator2);
      
      ConstantTransformer<SQLNonTransientConnectionException, String> constantTransformer0 = new ConstantTransformer<SQLNonTransientConnectionException, String>("t67eW:Z#`'i`c>V@^");
      assertNotNull(constantTransformer0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator2, (Transformer<? super SQLNonTransientConnectionException, String>) constantTransformer0, "Q4o]A;SxW0rM91Cu o@", "t67eW:Z#`'i`c>V@^", "org.apache.commons.collections4.iterators.SingletonIterator");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Stack<Class<Integer>> stack0 = new Stack<Class<Integer>>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ResettableListIterator<Class<Integer>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Class<Integer>>) stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "jP#zN~5.G>2 tX-R5", (Equator<Object>) defaultEquator0);
      assertNotNull(predicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      PredicateTransformer<ArrayList<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<ArrayList<SQLSyntaxErrorException>>(predicate0);
      assertNotNull(predicateTransformer0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      arrayList0.ensureCapacity((-1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Boolean boolean0 = predicateTransformer0.transform(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Predicate<BatchUpdateException> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) null);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<Vector<SQLTransactionRollbackException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Cannot store a duplicate value (\"");
      assertNotNull(iIOMetadataNode0);
      
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator");
      assertNotNull(transformer0);
      
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(predicate0);
      assertFalse(priorityQueue0.contains(predicate0));
      
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      Transformer<SQLNonTransientConnectionException, String> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      assertNotNull(transformer1);
      
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) orderedIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer1, "", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue1.size());
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue2.size());
      assertNotNull(priorityQueue2);
      assertFalse(priorityQueue2.equals((Object)priorityQueue0));
      assertFalse(priorityQueue2.equals((Object)priorityQueue1));
      
      PriorityQueue<SQLException> priorityQueue3 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue3.size());
      assertNotNull(priorityQueue3);
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      
      PriorityQueue<SQLException> priorityQueue4 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue4.size());
      assertNotNull(priorityQueue4);
      assertFalse(priorityQueue4.equals((Object)priorityQueue1));
      assertFalse(priorityQueue4.equals((Object)priorityQueue0));
      assertFalse(priorityQueue4.equals((Object)priorityQueue2));
      assertFalse(priorityQueue4.equals((Object)priorityQueue3));
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLException> priorityQueue5 = new PriorityQueue<SQLException>(comparator0);
      assertEquals(0, priorityQueue5.size());
      assertNotNull(priorityQueue5);
      assertFalse(priorityQueue5.equals((Object)priorityQueue4));
      assertFalse(priorityQueue5.equals((Object)priorityQueue1));
      assertFalse(priorityQueue5.equals((Object)priorityQueue3));
      assertFalse(priorityQueue5.equals((Object)priorityQueue2));
      assertFalse(priorityQueue5.equals((Object)priorityQueue0));
      
      PriorityQueue<SQLException> priorityQueue6 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue6.size());
      assertNotNull(priorityQueue6);
      assertFalse(priorityQueue6.equals((Object)priorityQueue0));
      assertFalse(priorityQueue6.equals((Object)priorityQueue5));
      assertFalse(priorityQueue6.equals((Object)priorityQueue3));
      assertFalse(priorityQueue6.equals((Object)priorityQueue1));
      assertFalse(priorityQueue6.equals((Object)priorityQueue4));
      assertFalse(priorityQueue6.equals((Object)priorityQueue2));
      
      PriorityQueue<SQLException> priorityQueue7 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue7.size());
      assertNotNull(priorityQueue7);
      assertFalse(priorityQueue7.equals((Object)priorityQueue1));
      assertFalse(priorityQueue7.equals((Object)priorityQueue3));
      assertFalse(priorityQueue7.equals((Object)priorityQueue0));
      assertFalse(priorityQueue7.equals((Object)priorityQueue5));
      assertFalse(priorityQueue7.equals((Object)priorityQueue2));
      assertFalse(priorityQueue7.equals((Object)priorityQueue4));
      assertFalse(priorityQueue7.equals((Object)priorityQueue6));
      
      PriorityQueue<SQLException>[] priorityQueueArray0 = (PriorityQueue<SQLException>[]) Array.newInstance(PriorityQueue.class, 1);
      priorityQueueArray0[0] = priorityQueue0;
      ResettableListIterator<PriorityQueue<SQLException>> resettableListIterator0 = IteratorUtils.arrayListIterator(priorityQueueArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      assertEquals(1, priorityQueueArray0.length);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 1830);
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(1830, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(")\"FyIz(yQL", "", (Map<String, ClientInfoStatus>) null);
      assertEquals("java.sql.SQLClientInfoException: )\"FyIz(yQL", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(")\"FyIz(yQL", sQLClientInfoException0.getMessage());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      PriorityQueue<SQLException> priorityQueue8 = IteratorUtils.find((Iterator<PriorityQueue<SQLException>>) resettableListIterator0, (Predicate<? super PriorityQueue<SQLException>>) instanceofPredicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNull(priorityQueue8);
      assertEquals(1, priorityQueueArray0.length);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`}t|'6W=cHpLf;sz{ ", sQLClientInfoException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: `}t|'6W=cHpLf;sz{ ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("`}t|'6W=cHpLf;sz{ ", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: )\"FyIz(yQL", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(")\"FyIz(yQL", sQLClientInfoException0.getMessage());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertNotNull(singletonListIterator0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("Preicate must not be null", "org.apache.commons.collections4.map.AbstractReferenceMap");
      assertEquals(7, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      stringTokenizerArray0[0] = stringTokenizer0;
      stringTokenizerArray0[1] = stringTokenizer0;
      stringTokenizerArray0[2] = stringTokenizer0;
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      assertEquals(3, stringTokenizerArray0.length);
      
      Predicate<StringTokenizer> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(3, stringTokenizerArray0.length);
      assertTrue(boolean0);
      
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      assertNotNull(predicate1);
      
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<Boolean> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Boolean>) orderedIterator0, (Predicate<? super Boolean>) predicate1);
      assertNotNull(iterator0);
      
      Iterator<Boolean> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Boolean>) orderedIterator0, (Predicate<? super Boolean>) predicate1);
      assertNotNull(iterator1);
      assertNotSame(iterator1, iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      
      OrderedMapIterator<SQLNonTransientConnectionException, HashSet<Iterator<Integer>>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Cannot add to list until next() or previous() called");
      assertNotNull(transformer0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) orderedMapIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, "org.apache.commons.collections4.map.AbstractReferenceMap", (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException>(mapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      
      Predicate<BatchUpdateException> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) abstractMapIteratorDecorator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertNotNull(singletonListIterator0);
      
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) singletonListIterator0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      SQLWarning sQLWarning0 = new SQLWarning("");
      assertEquals("", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLDataException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLNonTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLDataException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(comparatorPredicate0);
      
      PredicateTransformer<ArrayList<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<ArrayList<SQLSyntaxErrorException>>(comparatorPredicate0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLDataException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(predicateTransformer0);
      
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Boolean boolean1 = predicateTransformer0.transform(arrayList0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLDataException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[8];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean1;
      booleanArray0[6] = boolean1;
      booleanArray0[7] = boolean1;
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(8, booleanArray0.length);
      
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(objectArrayListIterator0);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      assertEquals(8, booleanArray0.length);
      
      Boolean boolean2 = IteratorUtils.get((Iterator<Boolean>) listIteratorWrapper0, 1);
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertNotNull(boolean2);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      PredicateTransformer<ArrayList<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<ArrayList<SQLSyntaxErrorException>>(predicate0);
      assertNotNull(predicateTransformer0);
      
      Boolean boolean1 = predicateTransformer0.transform(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = predicateTransformer0.transform(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      ArrayList<SQLSyntaxErrorException> arrayList1 = new ArrayList<SQLSyntaxErrorException>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Boolean boolean4 = predicateTransformer0.transform(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(boolean4);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      boolean boolean5 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      Boolean boolean6 = predicateTransformer0.transform(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boolean6);
      assertNotSame(arrayList0, arrayList1);
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(boolean6);
      
      booleanArray0[4] = boolean6;
      Boolean boolean7 = predicateTransformer0.transform(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(boolean7);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(boolean7);
      
      booleanArray0[5] = boolean7;
      Boolean boolean8 = predicateTransformer0.transform(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boolean8);
      assertNotSame(arrayList0, arrayList1);
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean5));
      assertFalse(boolean8);
      
      booleanArray0[6] = boolean8;
      Boolean boolean9 = predicateTransformer0.transform(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boolean9);
      assertNotSame(arrayList0, arrayList1);
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(boolean9.equals((Object)boolean0));
      assertTrue(boolean9.equals((Object)boolean5));
      assertFalse(boolean9);
      
      booleanArray0[7] = boolean9;
      PredicateTransformer<ArrayList<SQLSyntaxErrorException>> predicateTransformer1 = new PredicateTransformer<ArrayList<SQLSyntaxErrorException>>(predicate0);
      assertNotNull(predicateTransformer1);
      assertFalse(predicateTransformer1.equals((Object)predicateTransformer0));
      
      ArrayList<SQLSyntaxErrorException> arrayList2 = new ArrayList<SQLSyntaxErrorException>();
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(arrayList2);
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      
      Boolean boolean10 = predicateTransformer1.transform(arrayList2);
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(boolean10);
      assertNotSame(predicateTransformer1, predicateTransformer0);
      assertNotSame(arrayList2, arrayList1);
      assertNotSame(arrayList2, arrayList0);
      assertFalse(predicateTransformer1.equals((Object)predicateTransformer0));
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(boolean10.equals((Object)boolean5));
      assertTrue(boolean10.equals((Object)boolean0));
      assertFalse(boolean10);
      
      booleanArray0[8] = boolean10;
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      assertEquals(9, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertNotNull(objectArrayListIterator0);
      assertEquals(9, booleanArray0.length);
      
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(objectArrayListIterator0);
      assertEquals(9, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      assertEquals(9, booleanArray0.length);
      
      Boolean boolean11 = IteratorUtils.get((Iterator<Boolean>) objectArrayListIterator0, 1);
      assertEquals(9, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertNotNull(boolean11);
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean11.equals((Object)boolean5));
      assertTrue(boolean11.equals((Object)boolean0));
      assertFalse(boolean11);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      int int0 = IteratorUtils.size(orderedIterator0);
      assertEquals(0, int0);
      
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      StringTokenizer stringTokenizer0 = new StringTokenizer("il6M\"wfMuyvB>3zl");
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("il6M\"wfMuyvB>3zl");
      assertEquals(1, stringTokenizer1.countTokens());
      assertNotNull(stringTokenizer1);
      assertFalse(stringTokenizer1.equals((Object)stringTokenizer0));
      
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("org.apache.commons.collections4.functors.AndPredicate", "(RNo#1nJeVTVL(oCfv");
      assertEquals(12, stringTokenizer2.countTokens());
      assertNotNull(stringTokenizer2);
      assertFalse(stringTokenizer2.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer2.equals((Object)stringTokenizer1));
      
      StringTokenizer[] stringTokenizerArray1 = new StringTokenizer[6];
      assertFalse(stringTokenizerArray1.equals((Object)stringTokenizerArray0));
      
      stringTokenizerArray1[0] = stringTokenizer0;
      stringTokenizerArray1[1] = stringTokenizer0;
      stringTokenizerArray1[2] = stringTokenizer0;
      stringTokenizerArray1[3] = stringTokenizer0;
      stringTokenizerArray1[4] = stringTokenizer0;
      stringTokenizerArray1[5] = stringTokenizer2;
      ResettableListIterator<StringTokenizer> resettableListIterator1 = IteratorUtils.arrayListIterator(stringTokenizerArray1);
      assertFalse(resettableListIterator1.hasPrevious());
      assertTrue(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      assertNotSame(stringTokenizerArray1, stringTokenizerArray0);
      assertEquals(6, stringTokenizerArray1.length);
      assertFalse(stringTokenizerArray1.equals((Object)stringTokenizerArray0));
      
      Predicate<StringTokenizer> predicate0 = new EqualPredicate<StringTokenizer>(stringTokenizer1);
      assertEquals(1, stringTokenizer1.countTokens());
      assertNotNull(predicate0);
      assertFalse(stringTokenizer1.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer1.equals((Object)stringTokenizer0));
      
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<StringTokenizer>) resettableListIterator1, (Predicate<? super StringTokenizer>) predicate0);
      assertTrue(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertEquals(1, stringTokenizer1.countTokens());
      assertNotSame(stringTokenizer1, stringTokenizer2);
      assertNotSame(stringTokenizer1, stringTokenizer0);
      assertNotSame(stringTokenizerArray1, stringTokenizerArray0);
      assertEquals(6, stringTokenizerArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(stringTokenizer1.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer1.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizerArray1.equals((Object)stringTokenizerArray0));
      assertFalse(boolean1);
      
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      assertNotNull(predicate1);
      
      OrderedIterator<Boolean> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator1);
      
      Iterator<Boolean> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Boolean>) orderedIterator1, (Predicate<? super Boolean>) predicate1);
      assertNotNull(iterator0);
      
      Iterator<Boolean> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Boolean>) iterator0, (Predicate<? super Boolean>) predicate1);
      assertNotNull(iterator1);
      assertNotSame(iterator0, iterator1);
      assertNotSame(iterator1, iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Stack<Class<Integer>> stack0 = new Stack<Class<Integer>>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      OrderedMapIterator<Transformer<Object, Boolean>, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Iterator<Transformer<Object, Boolean>> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Transformer<Object, Boolean>>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue1.size());
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue2.size());
      assertNotNull(priorityQueue2);
      assertFalse(priorityQueue2.equals((Object)priorityQueue0));
      assertFalse(priorityQueue2.equals((Object)priorityQueue1));
      
      PriorityQueue<SQLException> priorityQueue3 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue3.size());
      assertNotNull(priorityQueue3);
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      
      PriorityQueue<SQLException> priorityQueue4 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue4.size());
      assertNotNull(priorityQueue4);
      assertFalse(priorityQueue4.equals((Object)priorityQueue2));
      assertFalse(priorityQueue4.equals((Object)priorityQueue1));
      assertFalse(priorityQueue4.equals((Object)priorityQueue3));
      assertFalse(priorityQueue4.equals((Object)priorityQueue0));
      
      PriorityQueue<SQLException> priorityQueue5 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue5.size());
      assertNotNull(priorityQueue5);
      assertFalse(priorityQueue5.equals((Object)priorityQueue0));
      assertFalse(priorityQueue5.equals((Object)priorityQueue4));
      assertFalse(priorityQueue5.equals((Object)priorityQueue1));
      assertFalse(priorityQueue5.equals((Object)priorityQueue2));
      assertFalse(priorityQueue5.equals((Object)priorityQueue3));
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLException> priorityQueue6 = new PriorityQueue<SQLException>(comparator0);
      assertEquals(0, priorityQueue6.size());
      assertNotNull(priorityQueue6);
      assertFalse(priorityQueue6.equals((Object)priorityQueue1));
      assertFalse(priorityQueue6.equals((Object)priorityQueue4));
      assertFalse(priorityQueue6.equals((Object)priorityQueue0));
      assertFalse(priorityQueue6.equals((Object)priorityQueue2));
      assertFalse(priorityQueue6.equals((Object)priorityQueue5));
      assertFalse(priorityQueue6.equals((Object)priorityQueue3));
      
      PriorityQueue<SQLException> priorityQueue7 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue7.size());
      assertNotNull(priorityQueue7);
      assertFalse(priorityQueue7.equals((Object)priorityQueue0));
      assertFalse(priorityQueue7.equals((Object)priorityQueue6));
      assertFalse(priorityQueue7.equals((Object)priorityQueue4));
      assertFalse(priorityQueue7.equals((Object)priorityQueue5));
      assertFalse(priorityQueue7.equals((Object)priorityQueue3));
      assertFalse(priorityQueue7.equals((Object)priorityQueue1));
      assertFalse(priorityQueue7.equals((Object)priorityQueue2));
      
      PriorityQueue<SQLException>[] priorityQueueArray0 = (PriorityQueue<SQLException>[]) Array.newInstance(PriorityQueue.class, 0);
      ResettableListIterator<PriorityQueue<SQLException>> resettableListIterator0 = IteratorUtils.arrayListIterator(priorityQueueArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      assertEquals(0, priorityQueueArray0.length);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("CSt<", "GREATER", 512);
      assertEquals(512, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: CSt<", sQLSyntaxErrorException0.toString());
      assertEquals("GREATER", sQLSyntaxErrorException0.getSQLState());
      assertEquals("CSt<", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(resettableListIterator0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(comparatorPredicate0);
      assertEquals(0, priorityQueueArray0.length);
      
      PriorityQueue<SQLException> priorityQueue8 = IteratorUtils.find((Iterator<PriorityQueue<SQLException>>) resettableListIterator0, (Predicate<? super PriorityQueue<SQLException>>) comparatorPredicate0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNull(priorityQueue8);
      assertEquals(0, priorityQueueArray0.length);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(512, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: CSt<", sQLSyntaxErrorException0.toString());
      assertEquals("GREATER", sQLSyntaxErrorException0.getSQLState());
      assertEquals("CSt<", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory");
      assertEquals("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Hashtable<Integer, DataTruncation> hashtable0 = new Hashtable<Integer, DataTruncation>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<Integer, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<Integer, DataTruncation>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(enumeration0);
      
      OrderedMapIterator<Transformer<Object, Boolean>, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Iterator<Transformer<Object, Boolean>> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Transformer<Object, Boolean>>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      PriorityQueue<SQLException>[] priorityQueueArray0 = (PriorityQueue<SQLException>[]) Array.newInstance(PriorityQueue.class, 8);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue1.size());
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue2.size());
      assertNotNull(priorityQueue2);
      assertFalse(priorityQueue2.equals((Object)priorityQueue0));
      assertFalse(priorityQueue2.equals((Object)priorityQueue1));
      
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLException> priorityQueue3 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue3.size());
      assertNotNull(priorityQueue3);
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<SQLException> priorityQueue4 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue4.size());
      assertNotNull(priorityQueue4);
      assertFalse(priorityQueue4.equals((Object)priorityQueue0));
      assertFalse(priorityQueue4.equals((Object)priorityQueue3));
      assertFalse(priorityQueue4.equals((Object)priorityQueue1));
      assertFalse(priorityQueue4.equals((Object)priorityQueue2));
      
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<SQLException> priorityQueue5 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue5.size());
      assertNotNull(priorityQueue5);
      assertFalse(priorityQueue5.equals((Object)priorityQueue4));
      assertFalse(priorityQueue5.equals((Object)priorityQueue1));
      assertFalse(priorityQueue5.equals((Object)priorityQueue2));
      assertFalse(priorityQueue5.equals((Object)priorityQueue3));
      assertFalse(priorityQueue5.equals((Object)priorityQueue0));
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLException> priorityQueue6 = new PriorityQueue<SQLException>(comparator0);
      assertEquals(0, priorityQueue6.size());
      assertNotNull(priorityQueue6);
      assertFalse(priorityQueue6.equals((Object)priorityQueue0));
      assertFalse(priorityQueue6.equals((Object)priorityQueue4));
      assertFalse(priorityQueue6.equals((Object)priorityQueue3));
      assertFalse(priorityQueue6.equals((Object)priorityQueue5));
      assertFalse(priorityQueue6.equals((Object)priorityQueue1));
      assertFalse(priorityQueue6.equals((Object)priorityQueue2));
      
      priorityQueueArray0[6] = priorityQueue6;
      PriorityQueue<SQLException> priorityQueue7 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue7.size());
      assertNotNull(priorityQueue7);
      assertFalse(priorityQueue7.equals((Object)priorityQueue4));
      assertFalse(priorityQueue7.equals((Object)priorityQueue0));
      assertFalse(priorityQueue7.equals((Object)priorityQueue1));
      assertFalse(priorityQueue7.equals((Object)priorityQueue2));
      assertFalse(priorityQueue7.equals((Object)priorityQueue6));
      assertFalse(priorityQueue7.equals((Object)priorityQueue3));
      assertFalse(priorityQueue7.equals((Object)priorityQueue5));
      
      priorityQueueArray0[7] = priorityQueue7;
      ResettableListIterator<PriorityQueue<SQLException>> resettableListIterator0 = IteratorUtils.arrayListIterator(priorityQueueArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      assertEquals(8, priorityQueueArray0.length);
      
      String string0 = "O5Q.h<J6";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "O5Q.h<J6", 1830);
      assertEquals(1830, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("O5Q.h<J6", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLSyntaxErrorException0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      assertEquals(1830, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("O5Q.h<J6", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNotNull(comparatorPredicate0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<PriorityQueue<SQLException>>) resettableListIterator0, (Predicate<? super PriorityQueue<SQLException>>) comparatorPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue1.size());
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue2.size());
      assertNotNull(priorityQueue2);
      assertFalse(priorityQueue2.equals((Object)priorityQueue1));
      assertFalse(priorityQueue2.equals((Object)priorityQueue0));
      
      PriorityQueue<SQLException> priorityQueue3 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue3.size());
      assertNotNull(priorityQueue3);
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      
      PriorityQueue<SQLException> priorityQueue4 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue4.size());
      assertNotNull(priorityQueue4);
      assertFalse(priorityQueue4.equals((Object)priorityQueue0));
      assertFalse(priorityQueue4.equals((Object)priorityQueue2));
      assertFalse(priorityQueue4.equals((Object)priorityQueue3));
      assertFalse(priorityQueue4.equals((Object)priorityQueue1));
      
      PriorityQueue<SQLException> priorityQueue5 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue5.size());
      assertNotNull(priorityQueue5);
      assertFalse(priorityQueue5.equals((Object)priorityQueue2));
      assertFalse(priorityQueue5.equals((Object)priorityQueue4));
      assertFalse(priorityQueue5.equals((Object)priorityQueue0));
      assertFalse(priorityQueue5.equals((Object)priorityQueue1));
      assertFalse(priorityQueue5.equals((Object)priorityQueue3));
      
      PriorityQueue<SQLException> priorityQueue6 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue6.size());
      assertNotNull(priorityQueue6);
      assertFalse(priorityQueue6.equals((Object)priorityQueue3));
      assertFalse(priorityQueue6.equals((Object)priorityQueue1));
      assertFalse(priorityQueue6.equals((Object)priorityQueue0));
      assertFalse(priorityQueue6.equals((Object)priorityQueue2));
      assertFalse(priorityQueue6.equals((Object)priorityQueue4));
      assertFalse(priorityQueue6.equals((Object)priorityQueue5));
      
      PriorityQueue<SQLException>[] priorityQueueArray0 = (PriorityQueue<SQLException>[]) Array.newInstance(PriorityQueue.class, 1);
      priorityQueueArray0[0] = priorityQueue0;
      ResettableListIterator<PriorityQueue<SQLException>> resettableListIterator0 = IteratorUtils.arrayListIterator(priorityQueueArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      assertEquals(1, priorityQueueArray0.length);
      
      int int0 = 1830;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 1830);
      assertEquals(1830, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(")\"FyIz(yQL", "", (Map<String, ClientInfoStatus>) null);
      assertEquals("java.sql.SQLClientInfoException: )\"FyIz(yQL", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(")\"FyIz(yQL", sQLClientInfoException0.getMessage());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      PriorityQueue<SQLException> priorityQueue7 = IteratorUtils.find((Iterator<PriorityQueue<SQLException>>) resettableListIterator0, (Predicate<? super PriorityQueue<SQLException>>) instanceofPredicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertNull(priorityQueue7);
      assertEquals(1, priorityQueueArray0.length);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`}t|'6W=cHpLf;sz{ ", sQLClientInfoException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: `}t|'6W=cHpLf;sz{ ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("`}t|'6W=cHpLf;sz{ ", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: )\"FyIz(yQL", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(")\"FyIz(yQL", sQLClientInfoException0.getMessage());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException>(mapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      
      Predicate<BatchUpdateException> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate1);
      
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate1);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(zippingIterator0);
      
      OrderedMapIterator<Transformer<Object, Boolean>, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate1);
      assertNotNull(predicate2);
      assertFalse(predicate2.equals((Object)predicate1));
      
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) orderedMapIterator0, (Predicate<? super Object>) predicate2);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator0);
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Hashtable<Integer, DataTruncation> hashtable0 = new Hashtable<Integer, DataTruncation>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<Integer, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<Integer, DataTruncation>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      int int0 = IteratorUtils.size(orderedIterator0);
      assertEquals(0, int0);
      
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      String string0 = "il6M\"wfMuyvB>3zl";
      StringTokenizer stringTokenizer0 = new StringTokenizer("il6M\"wfMuyvB>3zl");
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("il6M\"wfMuyvB>3zl");
      assertEquals(1, stringTokenizer1.countTokens());
      assertNotNull(stringTokenizer1);
      assertFalse(stringTokenizer1.equals((Object)stringTokenizer0));
      
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("=6", "");
      assertEquals(1, stringTokenizer2.countTokens());
      assertNotNull(stringTokenizer2);
      assertFalse(stringTokenizer2.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer2.equals((Object)stringTokenizer0));
      
      StringTokenizer stringTokenizer3 = new StringTokenizer("il6M\"wfMuyvB>3zl", "");
      assertEquals(1, stringTokenizer3.countTokens());
      assertNotNull(stringTokenizer3);
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer0));
      
      stringTokenizerArray0[4] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("=6");
      assertEquals(1, stringTokenizer4.countTokens());
      assertNotNull(stringTokenizer4);
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer1));
      
      stringTokenizerArray0[5] = stringTokenizer4;
      stringTokenizerArray0[6] = stringTokenizer2;
      ResettableListIterator<StringTokenizer> resettableListIterator1 = IteratorUtils.arrayListIterator(stringTokenizerArray0, 0);
      assertTrue(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      assertEquals(7, stringTokenizerArray0.length);
      
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      
      propertiesArray0[2] = properties2;
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(3, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertNotNull(objectArrayIterator0);
      assertEquals(3, propertiesArray0.length);
      
      String string1 = IteratorUtils.toString((Iterator<Properties>) objectArrayIterator0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(3, objectArrayIterator0.getEndIndex());
      assertFalse(objectArrayIterator0.hasNext());
      assertNotNull(string1);
      assertEquals(3, propertiesArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[{}, {}, {}]", string1);
      
      StringTokenizer stringTokenizer5 = new StringTokenizer("", "\"m,e>IO)1[,");
      assertEquals(0, stringTokenizer5.countTokens());
      assertNotNull(stringTokenizer5);
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer4));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer2));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertNotNull(singletonListIterator0);
      
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) singletonListIterator0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("U-D}K@Z!4+s'Ff.HU", sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("U-D}K@Z!4+s'Ff.HU", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: U-D}K@Z!4+s'Ff.HU", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      assertNotNull(predicate0);
      
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("U-D}K@Z!4+s'Ff.HU");
      assertNotNull(transformer0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(integer0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      reverseListIterator0.forEachRemaining(consumer0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertTrue(arrayList0.contains(integer0));
      
      ListIterator<Integer> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) reverseListIterator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(listIterator1.hasNext());
      assertTrue(listIterator1.hasPrevious());
      assertNotNull(listIterator1);
      assertTrue(arrayList0.contains(integer0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) listIterator1, (Iterator<? extends Integer>) reverseListIterator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(listIterator1.hasNext());
      assertTrue(listIterator1.hasPrevious());
      assertNotNull(iterator0);
      assertTrue(arrayList0.contains(integer0));
      
      OrderedIterator<PriorityQueue<SQLException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      assertNotNull(predicate1);
      assertSame(predicate1, predicate0);
      
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      assertNotNull(predicate2);
      assertSame(predicate1, predicate0);
      assertSame(predicate0, predicate1);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      assertNotNull(notPredicate0);
      assertFalse(predicate0.equals((Object)predicate2));
      
      PriorityQueue<SQLException> priorityQueue0 = IteratorUtils.find((Iterator<PriorityQueue<SQLException>>) orderedIterator0, (Predicate<? super PriorityQueue<SQLException>>) notPredicate0);
      assertNull(priorityQueue0);
      assertSame(predicate0, predicate1);
      assertFalse(predicate0.equals((Object)predicate2));
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("U-D}K@Z!4+s'Ff.HU", sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("U-D}K@Z!4+s'Ff.HU", sQLIntegrityConstraintViolationException1.getMessage());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: U-D}K@Z!4+s'Ff.HU", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Properties properties1 = new Properties();
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      
      Properties properties2 = new Properties();
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      
      Properties[] propertiesArray0 = new Properties[1];
      propertiesArray0[0] = properties2;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      assertNotNull(resettableIterator0);
      assertEquals(1, propertiesArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<?>) resettableIterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertNotNull(singletonListIterator0);
      
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) singletonListIterator0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("U-D}K@Z!4+s'Ff.HU", sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("U-D}K@Z!4+s'Ff.HU", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: U-D}K@Z!4+s'Ff.HU", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      assertNotNull(predicate0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(equalPredicate0);
      
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, equalPredicate0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(orPredicate0);
      
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) orPredicate0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      assertNotNull(predicate0);
      
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(zippingIterator0);
      
      OrderedMapIterator<Transformer<Object, Boolean>, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Predicate<Object> predicate1 = new UniquePredicate<Object>();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) orderedMapIterator0, (Predicate<? super Object>) predicate0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator0);
      assertNotSame(predicate0, predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      
      PredicateTransformer<ArrayList<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<ArrayList<SQLSyntaxErrorException>>(predicate1);
      assertNotNull(predicateTransformer0);
      assertFalse(predicate1.equals((Object)predicate0));
      
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Boolean boolean0 = predicateTransformer0.transform(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boolean0);
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertTrue(boolean0);
      
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 3);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      classArray0[0] = class0;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      classArray0[1] = class1;
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      classArray0[2] = class2;
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("0+Wlw9~x#)r)jXQ", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertNotNull(transformer0);
      assertEquals(3, classArray0.length);
      
      Iterator<Boolean> iterator1 = IteratorUtils.objectGraphIterator(boolean0, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(iterator1);
      assertNotSame(predicate1, predicate0);
      assertEquals(3, classArray0.length);
      assertFalse(predicate1.equals((Object)predicate0));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator1, 1073741824);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '0+Wlw9~x#)r)jXQ' on 'class java.lang.Boolean' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Properties properties1 = new Properties();
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      
      Properties properties2 = new Properties();
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      
      Properties[] propertiesArray0 = new Properties[1];
      propertiesArray0[0] = properties2;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      assertNotNull(resettableIterator0);
      assertEquals(1, propertiesArray0.length);
      
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.list.AbstractLinkedList");
      assertNotNull(transformer0);
      
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(predicate0);
      assertFalse(priorityQueue0.contains(predicate0));
      
      Transformer<Object, SQLException> transformer1 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer1);
      
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer1, (Predicate<? super Object>) predicate0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(priorityQueue0.contains(predicate1));
      
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) instanceofPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Properties properties1 = new Properties();
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      
      Properties properties2 = new Properties();
      assertEquals(0, properties2.size());
      assertTrue(properties2.isEmpty());
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      
      Properties[] propertiesArray0 = new Properties[1];
      propertiesArray0[0] = properties0;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      assertNotNull(resettableIterator0);
      assertEquals(1, propertiesArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      boolean boolean1 = iIOMetadataNode0.hasAttributeNS("ListIterator must not be null", "ListIterator must not be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0, 31);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(1, propertiesArray0.length);
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertNotNull(singletonListIterator0);
      
      ListIterator<SQLDataException> listIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("U-D}K@Z!4+s'Ff.HU", sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: U-D}K@Z!4+s'Ff.HU", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("U-D}K@Z!4+s'Ff.HU", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) resettableIterator0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      Integer integer0 = new Integer((-4642));
      assertNotNull(integer0);
      assertEquals((-4642), (int)integer0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[]", "U-D}K@Z!4+s'Ff.HU");
      assertEquals("java.sql.SQLSyntaxErrorException: []", sQLSyntaxErrorException0.toString());
      assertEquals("U-D}K@Z!4+s'Ff.HU", sQLSyntaxErrorException0.getSQLState());
      assertEquals("[]", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: []", sQLSyntaxErrorException0.toString());
      assertEquals("U-D}K@Z!4+s'Ff.HU", sQLSyntaxErrorException0.getSQLState());
      assertEquals("[]", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", sQLIntegrityConstraintViolationException1.toString());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", sQLIntegrityConstraintViolationException1.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      Iterator<Boolean> iterator1 = null;
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      assertNotNull(equalPredicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      PredicateTransformer<ArrayList<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<ArrayList<SQLSyntaxErrorException>>(equalPredicate0);
      assertNotNull(predicateTransformer0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(sQLSyntaxErrorException0));
      
      Boolean boolean1 = predicateTransformer0.transform(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertFalse(arrayList0.contains(sQLSyntaxErrorException0));
      
      booleanArray0[0] = boolean1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(booleanArray0, (-4642));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<StringTokenizer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) listIterator0, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Stack<Class<Integer>> stack0 = new Stack<Class<Integer>>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Properties properties1 = new Properties();
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      
      Properties properties2 = new Properties();
      assertEquals(0, properties2.size());
      assertTrue(properties2.isEmpty());
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      
      Properties properties3 = new Properties();
      assertTrue(properties3.isEmpty());
      assertEquals(0, properties3.size());
      assertNotNull(properties3);
      assertTrue(properties3.equals((Object)properties0));
      assertTrue(properties3.equals((Object)properties1));
      assertTrue(properties3.equals((Object)properties2));
      
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties4 = new Properties();
      assertTrue(properties4.isEmpty());
      assertEquals(0, properties4.size());
      assertNotNull(properties4);
      assertTrue(properties4.equals((Object)properties0));
      assertTrue(properties4.equals((Object)properties2));
      assertTrue(properties4.equals((Object)properties1));
      assertTrue(properties4.equals((Object)properties3));
      
      propertiesArray0[0] = properties4;
      propertiesArray0[1] = properties2;
      propertiesArray0[2] = properties0;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      assertNotNull(resettableIterator0);
      assertEquals(3, propertiesArray0.length);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertNotNull(objectArray0);
      assertEquals(3, propertiesArray0.length);
      assertEquals(3, objectArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      ResettableIterator<DataTruncation> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Iterator<SQLWarning> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) resettableIterator1, (Iterator<? extends SQLWarning>) resettableIterator1);
      assertNotNull(iterator0);
      
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.list.AbstractLinkedList");
      assertNotNull(transformer0);
      
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(predicate0);
      assertFalse(priorityQueue0.contains(predicate0));
      
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(priorityQueue0.contains(predicate0));
      
      boolean boolean1 = IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLWarning>) predicate0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(priorityQueue0.contains(predicate0));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) resettableIterator1, (Transformer<? super DataTruncation, String>) null, (String) null, "4|E~X{Yas`ps/\"", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[1];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "aNeWM{. Ss$");
      assertFalse(boolean0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("aNeWM{. Ss$", (String) null);
      assertNotNull(stringTokenizer0);
      
      stringTokenizerArray0[0] = stringTokenizer0;
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      assertEquals(1, stringTokenizerArray0.length);
      
      Predicate<StringTokenizer> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(1, stringTokenizerArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLWarning sQLWarning0 = new SQLWarning("aNeWM{. Ss$", "/sdrw3Y@");
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("/sdrw3Y@", sQLWarning0.getSQLState());
      assertEquals("aNeWM{. Ss$", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: aNeWM{. Ss$", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      SQLException sQLException0 = new SQLException((String) null, "", sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("/sdrw3Y@", sQLWarning0.getSQLState());
      assertEquals("aNeWM{. Ss$", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: aNeWM{. Ss$", sQLWarning0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNotNull(sQLException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, sQLException0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("/sdrw3Y@", sQLWarning0.getSQLState());
      assertEquals("aNeWM{. Ss$", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: aNeWM{. Ss$", sQLWarning0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("aNeWM{. Ss$", "Array class must not be null", 0);
      assertEquals("java.sql.SQLTimeoutException: aNeWM{. Ss$", sQLTimeoutException1.toString());
      assertEquals("aNeWM{. Ss$", sQLTimeoutException1.getMessage());
      assertEquals("Array class must not be null", sQLTimeoutException1.getSQLState());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNotNull(sQLTimeoutException1);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException((String) null, "", sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("/sdrw3Y@", sQLWarning0.getSQLState());
      assertEquals("aNeWM{. Ss$", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: aNeWM{. Ss$", sQLWarning0.toString());
      assertEquals("", sQLTimeoutException2.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException2.toString());
      assertNull(sQLTimeoutException2.getMessage());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertNotNull(sQLTimeoutException2);
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException((String) null, "Array class must not be null", sQLException0);
      assertNull(sQLTimeoutException3.getMessage());
      assertEquals("Array class must not be null", sQLTimeoutException3.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException3.toString());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("/sdrw3Y@", sQLWarning0.getSQLState());
      assertEquals("aNeWM{. Ss$", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: aNeWM{. Ss$", sQLWarning0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNotNull(sQLTimeoutException3);
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException((String) null, sQLException0);
      assertNull(sQLTimeoutException4.getSQLState());
      assertNull(sQLTimeoutException4.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException4.toString());
      assertEquals(0, sQLTimeoutException4.getErrorCode());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("/sdrw3Y@", sQLWarning0.getSQLState());
      assertEquals("aNeWM{. Ss$", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: aNeWM{. Ss$", sQLWarning0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNotNull(sQLTimeoutException4);
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException0));
      
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      ResettableListIterator<SQLTimeoutException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0);
      assertFalse(resettableListIterator1.hasPrevious());
      assertTrue(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      assertEquals(5, sQLTimeoutExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertNotNull(singletonListIterator0);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0, class0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertNotNull(sQLFeatureNotSupportedExceptionArray0);
      assertEquals(1, sQLFeatureNotSupportedExceptionArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 1825;
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = new UniquePredicate<Object>();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate1);
      assertNotNull(notPredicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      
      PriorityQueue<SQLException> priorityQueue0 = IteratorUtils.find((Iterator<PriorityQueue<SQLException>>) null, (Predicate<? super PriorityQueue<SQLException>>) notPredicate0);
      assertNull(priorityQueue0);
      assertFalse(predicate1.equals((Object)predicate0));
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("W");
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: W", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("W", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      StringTokenizer stringTokenizer0 = new StringTokenizer("il6M\"wfMuyvB>3zl");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("il6M\"wfMuyvB>3zl");
      stringTokenizer1.hasMoreTokens();
      stringTokenizerArray0[1] = stringTokenizer1;
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      Iterator<PriorityQueue<SQLException>> iterator0 = null;
      IteratorUtils.find((Iterator<PriorityQueue<SQLException>>) null, (Predicate<? super PriorityQueue<SQLException>>) uniquePredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("il6M\"wfMuyvB>3zl");
      Predicate<SQLNonTransientException> predicate0 = IdentityPredicate.identityPredicate((SQLNonTransientException) sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) predicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-797));
      arrayList0.add(integer0);
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(arrayList0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.set.AbstractSetDecorator");
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.set.AbstractSetDecorator");
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLTransientConnectionException0, (Comparator<SQLException>) null, comparatorPredicate_Criterion0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) singletonListIterator0, (Predicate<? super SQLTransactionRollbackException>) comparatorPredicate0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) singletonListIterator0, (Iterator<? extends SQLTransactionRollbackException>) singletonListIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 1930);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Stack<Class<Integer>> stack0 = new Stack<Class<Integer>>();
      ResettableListIterator<Class<Integer>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Class<Integer>>) stack0);
      IteratorUtils.asIterable((Iterator<? extends Class<Integer>>) resettableListIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("n`&ni`[$mpopO0YRsY+", "n`&ni`[$mpopO0YRsY+", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException("jP#zN~5.G>2 tX-R5", sQLClientInfoException1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      sQLTimeoutException0.fillInStackTrace();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 737);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Stack<Class<Integer>> stack0 = new Stack<Class<Integer>>();
      IteratorUtils.loopingListIterator((List<Class<Integer>>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends Class<Integer>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      IteratorUtils.emptyListIterator();
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      StringTokenizer stringTokenizer0 = new StringTokenizer("il6M\"wfMuyvB>3zl");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("il6M\"wfMuyvB>3zl");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("=6", "");
      stringTokenizerArray0[3] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("", "");
      stringTokenizerArray0[4] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("=6");
      stringTokenizerArray0[5] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("");
      stringTokenizerArray0[6] = stringTokenizer5;
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      String string0 = IteratorUtils.toString((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) resettableIterator0);
      assertEquals("[]", string0);
      
      Integer integer0 = new Integer((-4642));
      IteratorUtils.getIterator(integer0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties[] propertiesArray0 = new Properties[1];
      propertiesArray0[0] = properties0;
      IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<DataTruncation> resettableIterator1 = IteratorUtils.emptyIterator();
      Iterator<SQLWarning> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) resettableIterator1, (Iterator<? extends SQLWarning>) resettableIterator1);
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("");
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLWarning> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) iterator0, (Iterator<? extends SQLWarning>) resettableIterator1);
      boolean boolean0 = IteratorUtils.matchesAll(iterator1, (Predicate<? super SQLWarning>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, DataTruncation>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      IteratorUtils.isEmpty(listIterator0);
      ResettableListIterator<Hashtable<SQLTimeoutException, Integer>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      String string0 = "zO4U IHKkM";
      String string1 = "org.apache.commons.collections4.functors.NOPClosure";
      IteratorUtils.toString((Iterator<Hashtable<SQLTimeoutException, Integer>>) resettableListIterator0, (Transformer<? super Hashtable<SQLTimeoutException, Integer>, String>) transformer0, "k.yC`= I9j", "zO4U IHKkM", "org.apache.commons.collections4.functors.NOPClosure");
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.forEach(consumer0);
      ListIterator<SQLTimeoutException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) iterator0);
      IteratorUtils.chainedIterator((Iterator<?>) listIterator0, (Iterator<?>) listIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) listIterator1, 1213);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<SQLWarning, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLWarning, SQLTimeoutException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLWarning, ? extends SQLTimeoutException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLWarning, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLWarning, SQLTimeoutException>(orderedMapIterator1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      IteratorUtils.contains((Iterator<SQLWarning>) abstractOrderedMapIteratorDecorator0, (Object) sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(4, objectArray0.length);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<DataTruncation> resettableIterator1 = IteratorUtils.emptyIterator();
      Iterator<SQLWarning> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) resettableIterator1, (Iterator<? extends SQLWarning>) resettableIterator1);
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.list.AbstractLinkedList");
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLWarning>) predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue3 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue4 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue5 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException>[] priorityQueueArray0 = (PriorityQueue<SQLException>[]) Array.newInstance(PriorityQueue.class, 8);
      priorityQueueArray0[0] = priorityQueue2;
      PriorityQueue<SQLException> priorityQueue6 = new PriorityQueue<SQLException>();
      priorityQueueArray0[1] = priorityQueue6;
      priorityQueueArray0[2] = priorityQueue2;
      priorityQueueArray0[3] = priorityQueue2;
      priorityQueueArray0[4] = priorityQueue4;
      priorityQueueArray0[5] = priorityQueue2;
      priorityQueueArray0[6] = priorityQueue0;
      PriorityQueue<SQLException> priorityQueue7 = new PriorityQueue<SQLException>(1);
      priorityQueueArray0[7] = priorityQueue7;
      ResettableListIterator<PriorityQueue<SQLException>> resettableListIterator0 = new SingletonListIterator<PriorityQueue<SQLException>>(priorityQueue1);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find((Iterator<PriorityQueue<SQLException>>) resettableListIterator0, (Predicate<? super PriorityQueue<SQLException>>) instanceofPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(")\"FyIz(yQL");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) resettableIterator0);
      Integer integer0 = new Integer((-4642));
      IteratorUtils.getIterator(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("InstantiateTransformer: InstantiationException", "fh1In]L1=j&");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException1.initCause(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException1.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "fh1In]L1=j&");
      sQLFeatureNotSupportedException1.spliterator();
      OrderedMapIterator<Transformer<Object, Boolean>, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Transformer<Object, Boolean>>) orderedMapIterator0);
      InvokerTransformer.invokerTransformer("~ }nv,29X5-");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(arrayList0);
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) reverseListIterator0);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0);
      OrderedIterator<PriorityQueue<SQLException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate1);
      IteratorUtils.find((Iterator<PriorityQueue<SQLException>>) orderedIterator0, (Predicate<? super PriorityQueue<SQLException>>) notPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<DataTruncation> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) resettableIterator1, (Iterator<? extends SQLWarning>) resettableIterator1);
      OrderedIterator<PriorityQueue<SQLException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.find((Iterator<PriorityQueue<SQLException>>) orderedIterator0, (Predicate<? super PriorityQueue<SQLException>>) notPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) properties3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("8.HcTF*", "");
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("8.HcTF*", (String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("8.HcTF*", "InstantiateTransformer: InstantiationException");
      sQLFeatureNotSupportedException0.spliterator();
      OrderedMapIterator<Transformer<Object, Boolean>, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Transformer<Object, Boolean>>) orderedMapIterator0);
      InvokerTransformer.invokerTransformer("\"@rgW");
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(arrayList1);
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) reverseListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Stack<Class<Integer>> stack0 = new Stack<Class<Integer>>();
      IteratorUtils.loopingListIterator((List<Class<Integer>>) stack0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Boolean[] booleanArray0 = new Boolean[1];
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "jP#zN~5.G>2 tX-R5", (Equator<Object>) defaultEquator0);
      PredicateTransformer<ArrayList<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<ArrayList<SQLSyntaxErrorException>>(predicate0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      Boolean boolean0 = predicateTransformer0.transform(arrayList0);
      booleanArray0[0] = boolean0;
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(objectArrayListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Boolean>) listIteratorWrapper0, 61);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 60
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<Properties, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Properties, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends IIOMetadataNode>) orderedMapIterator0);
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) orderedMapIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) orderedMapIterator1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0, 10, 93);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Stack<Class<Integer>> stack0 = new Stack<Class<Integer>>();
      ResettableListIterator<Class<Integer>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Class<Integer>>) stack0);
      IteratorUtils.asIterable((Iterator<? extends Class<Integer>>) resettableListIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("n`&ni`[$mpopO0YRsY+", "n`&ni`[$mpopO0YRsY+", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException("jP#zN~5.G>2 tX-R5", sQLClientInfoException1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 737);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) singletonListIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("U-D}K@Z!4+s'Ff.HU", sQLDataException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, equalPredicate0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) orPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) predicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "FilterListIterator.set(Object) is not supported.", 10, 1606);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) singletonListIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLDataException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLIntegrityConstraintViolationException0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) orPredicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) predicate1);
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) resettableIterator0);
      Integer integer0 = new Integer((-4642));
      IteratorUtils.getIterator(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("InstantiateTransformer: InstantiationException", "fh1In]L1=j&");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "fh1In]L1=j&");
      sQLFeatureNotSupportedException1.spliterator();
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer1 = new Integer((-4642));
      stack0.add(integer0);
      IteratorUtils.loopingListIterator((List<Integer>) stack0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("InstantiateTransformer: InstantiationException", "InstantiateTransformer: InstantiationException", "e^82560Iz9^{E/_C", (-4642));
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "I4.3xf,d9", "org.apache.commons.collections4.functors.TransformedPredicate", 3145);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties[] propertiesArray0 = new Properties[6];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties1;
      propertiesArray0[2] = properties1;
      propertiesArray0[3] = properties1;
      propertiesArray0[4] = properties0;
      propertiesArray0[5] = properties0;
      IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException>(mapIterator0);
      Predicate<BatchUpdateException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) abstractMapIteratorDecorator0, (Predicate<? super BatchUpdateException>) predicate0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      HashMap<Properties, HashMap<SQLDataException, Integer>> hashMap0 = new HashMap<Properties, HashMap<SQLDataException, Integer>>();
      EntrySetMapIterator<Properties, HashMap<SQLDataException, Integer>> entrySetMapIterator0 = new EntrySetMapIterator<Properties, HashMap<SQLDataException, Integer>>(hashMap0);
      MapIterator<Properties, HashMap<SQLDataException, Integer>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, HashMap<SQLDataException, Integer>>) entrySetMapIterator0);
      assertNotNull(mapIterator1);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator1);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) resettableIterator0);
      Integer integer0 = new Integer((-4642));
      IteratorUtils.getIterator(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("InstantiateTransformer: InstantiationException", "fh1In]L1=j&");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "fh1In]L1=j&");
      sQLFeatureNotSupportedException1.spliterator();
      OrderedMapIterator<Transformer<Object, Boolean>, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Transformer<Object, Boolean>>) orderedMapIterator0);
      InvokerTransformer.invokerTransformer("~ }nv,29X5-");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(arrayList0);
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) reverseListIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) resettableIterator0);
      Integer integer0 = new Integer(0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3YTNn", "[]");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("iterator", "Closures must not be null");
      sQLFeatureNotSupportedException2.spliterator();
      OrderedMapIterator<Transformer<Object, Boolean>, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Transformer<Object, Boolean>>) orderedMapIterator0);
      InvokerTransformer.invokerTransformer("[a`%b^vTx3iXx9eU");
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(arrayList1);
      IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) reverseListIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) reverseListIterator0, (Iterator<? extends Integer>) reverseListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Hashtable<Integer, DataTruncation> hashtable0 = new Hashtable<Integer, DataTruncation>();
      EntrySetMapIterator<Integer, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<Integer, DataTruncation>(hashtable0);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) entrySetMapIterator0);
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer((-955));
      Integer integer1 = new Integer((-955));
      stack0.add(integer1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) entrySetMapIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<SQLClientInfoException> iterator0 = null;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Properties[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException>(mapIterator0);
      Predicate<BatchUpdateException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) abstractMapIteratorDecorator0, (Predicate<? super BatchUpdateException>) predicate0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException>(orderedMapIterator1);
      IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Cannot store a duplicate value (\"");
      iIOMetadataNode0.getLastChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) abstractOrderedMapIteratorDecorator0, 31);
      assertFalse(list0.contains(31));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 1840;
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException>(orderedMapIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("LXIUi'@hP^]&'J");
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9M7PrPO=))ynp\"3QKe");
      OrderedMapIterator<SQLException, Locale.Category> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<SQLException>) orderedMapIterator0);
      OrderedMapIterator<SQLTransientConnectionException, SQLClientInfoException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLClientInfoException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLClientInfoException>) orderedMapIterator1);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator2);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.setAttribute("K)u?", "");
      iIOMetadataNode0.getOwnerDocument();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-54);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("suffix may not be null", "suffix may not be null", (-1291), (Throwable) null);
      sQLNonTransientException0.getLocalizedMessage();
      SQLDataException sQLDataException0 = new SQLDataException("", sQLNonTransientException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      iteratorArray0[0] = (Iterator<SQLDataException>) singletonIterator0;
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLNonTransientException0.spliterator();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLDataException>) resettableIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) resettableIterator0);
      int int0 = (-4642);
      Integer integer0 = new Integer((-4642));
      IteratorUtils.getIterator(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("InstantiateTransformer: InstantiationException", "fh1In]L1=j&");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "fh1In]L1=j&");
      sQLFeatureNotSupportedException1.spliterator();
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer1 = new Integer((-4642));
      stack0.add(integer0);
      IteratorUtils.loopingListIterator((List<Integer>) stack0);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(object0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) resettableIterator0);
      HashSet<SQLIntegrityConstraintViolationException>[] hashSetArray0 = (HashSet<SQLIntegrityConstraintViolationException>[]) Array.newInstance(HashSet.class, 5);
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator0);
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends Properties>) abstractOrderedMapIteratorDecorator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("\"3M2");
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>(stringTokenizer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator1, (Closure<? super DataTruncation>) transformerClosure0);
      hashSetArray0[0] = hashSet0;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSet0.add((SQLIntegrityConstraintViolationException) null);
      hashSetArray0[1] = (HashSet<SQLIntegrityConstraintViolationException>) linkedHashSet0;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet1 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      hashSetArray0[2] = (HashSet<SQLIntegrityConstraintViolationException>) linkedHashSet1;
      HashSet<SQLIntegrityConstraintViolationException> hashSet1 = new HashSet<SQLIntegrityConstraintViolationException>();
      hashSetArray0[3] = hashSet1;
      HashSet<SQLIntegrityConstraintViolationException> hashSet2 = new HashSet<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      hashSet2.add(sQLIntegrityConstraintViolationException0);
      hashSetArray0[4] = hashSet2;
      Boolean[] booleanArray0 = new Boolean[0];
      IteratorUtils.arrayIterator(booleanArray0);
      Vector<SQLRecoverableException>[] vectorArray0 = (Vector<SQLRecoverableException>[]) Array.newInstance(Vector.class, 0);
      ObjectArrayIterator<Vector<SQLRecoverableException>> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<Vector<SQLRecoverableException>>(vectorArray0, (-2619), (-1555));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 9);
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) zippingIterator0;
      int int0 = 0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_-IUpDZ");
      int int1 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Boolean>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties[] propertiesArray0 = new Properties[3];
      propertiesArray0[0] = properties0;
      Integer integer0 = new Integer(280);
      properties1.put(properties0, integer0);
      propertiesArray0[1] = properties1;
      propertiesArray0[2] = properties0;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("pFWI", " OE,9@vMT4EuD");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("8.HcTF*", (String) null, sQLIntegrityConstraintViolationException0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) arrayList0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      MapIterator<DataTruncation, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, Integer>(mapIterator0);
      MapIterator<SQLWarning, Integer> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ? extends Integer>) abstractMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLWarning>) mapIterator1, (Predicate<? super SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(arrayList0);
      IteratorUtils.isEmpty(reverseListIterator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "org.apache.commons.collections4.set.ListOrderedSet", 32, sQLTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "org.apache.commons.collections4.functors.TransformedPredicate", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("I4.3xf,d9", "org.apache.commons.collections4.set.ListOrderedSet", "org.apache.commons.collections4.functors.TransformedPredicate", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("org.apache.commons.collections4.set.ListOrderedSet", "", ".'6WQ/JT3", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("iterator", "fX3C~+,^:-krf,y@", "Iterator remove() can only be called once after next()", (-699));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("org.apache.commons.collections4.functors.TransformedPredicate", "", ",i<R  _)y?p=?", (-699));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "", "", 0);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement(".'6WQ/JT3", "", "", 1355);
      stackTraceElementArray0[7] = stackTraceElement6;
      // Undeclared exception!
//      try { 
        sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // stackTrace[6]
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Transformer<SQLClientInfoException, String> transformer0 = InvokerTransformer.invokerTransformer("?#['");
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.emptyIterator();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "EQUAL";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Transformer must not be null";
      IteratorUtils.arrayIterator(stringArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(".f{04", "", (int[]) null);
      batchUpdateException0.printStackTrace();
      IteratorUtils.singletonListIterator((SQLException) batchUpdateException0);
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      int int0 = (-1108);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) null, (-1108));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("UQ\\9c");
      sQLTransientException0.spliterator();
      IteratorUtils.singletonListIterator(sQLTransientException0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator((SQLSyntaxErrorException) null);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      properties2.put(sQLNonTransientConnectionException0, sQLTransientException0);
      propertiesArray0[2] = properties2;
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Stack<Class<Integer>> stack0 = new Stack<Class<Integer>>();
      ResettableListIterator<Class<Integer>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Class<Integer>>) stack0);
      IteratorUtils.asIterable((Iterator<? extends Class<Integer>>) resettableListIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("n`&ni`[$mpopO0YRsY+", "n`&ni`[$mpopO0YRsY+", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("=6", "");
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "");
      StringTokenizer stringTokenizer2 = new StringTokenizer("");
      StringTokenizer stringTokenizer3 = new StringTokenizer("n`&ni`[$mpopO0YRsY+");
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      stringTokenizerArray0[0] = stringTokenizer0;
      stringTokenizerArray0[1] = stringTokenizer2;
      stringTokenizerArray0[2] = stringTokenizer3;
      stringTokenizerArray0[3] = stringTokenizer0;
      stringTokenizerArray0[4] = stringTokenizer3;
      stringTokenizerArray0[5] = stringTokenizer2;
      stringTokenizerArray0[6] = stringTokenizer1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(stringTokenizerArray0, 918);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" OE,9@vMT4EuD", "pkf[)gkJGl|");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "pkf[)gkJGl|", sQLIntegrityConstraintViolationException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NodeList must not be null", (Map<String, ClientInfoStatus>) null, sQLIntegrityConstraintViolationException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, (-787), (-787));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties2 = new Properties();
      propertiesArray0[0] = properties2;
      propertiesArray0[1] = properties1;
      SQLDataException sQLDataException0 = new SQLDataException();
      properties2.put(sQLDataException0, properties2);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, (-4118), 773);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<Object> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Object>) resettableIterator0);
      IteratorUtils.getIterator(iterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("InstantiateTransformer: InstantiationException", "InstantiateTransformer: InstantiationException");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", ">pW.qkB<FAfW!1");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("aEzzceuGuS%xb", "InstantiateTransformer: InstantiationException", 10);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("~I&f3dq-fpUlM#r8LK.", "", 0, sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("W~]27e-\"|DCN9#20pRM", "");
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("Estimated size must be greater than 0");
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, (-132));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      OrderedMapIterator<Transformer<Object, Boolean>, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Transformer<Object, Boolean>>) orderedMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("prefix may not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 278);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-797));
      arrayList0.add(integer0);
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(arrayList0);
      IteratorUtils.isEmpty(reverseListIterator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "org.apache.commons.collections4.set.ListOrderedSet", 32, sQLTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "org.apache.commons.collections4.functors.TransformedPredicate", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("I4.3xf,d9", "org.apache.commons.collections4.set.ListOrderedSet", "org.apache.commons.collections4.functors.TransformedPredicate", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties[] propertiesArray0 = new Properties[0];
      IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.set.ListOrderedSet");
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0, true);
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) singletonIterator0);
      IteratorUtils.loopingListIterator(list0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) class0, 1840);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) resettableIterator0);
      int int0 = (-4642);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "[]", (-4642));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("he6*7N", "he6*7N");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, 4, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      int int0 = 1073741824;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = int0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = int0;
      intArray0[6] = 0;
      intArray0[7] = int0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "0kF86tO-~gO:=U2E");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, intArray0, sQLIntegrityConstraintViolationException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("0kF86tO-~gO:=U2E", "0kF86tO-~gO:=U2E", 0, intArray0, sQLIntegrityConstraintViolationException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      long[] longArray0 = new long[4];
      longArray0[0] = 1348L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("~#", "0kF86tO-~gO:=U2E", 0, longArray0, batchUpdateException1);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 512);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      String string0 = "h7Y%Ln0L%^,|-lLo";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("h7Y%Ln0L%^,|-lLo", "aYuFd8|msP6+");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0, 1519);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.singletonIterator(class0);
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("C5sR");
//      try { 
        iIOMetadataNode0.lookupPrefix("C5sR");
//        fail("Expecting exception: DOMException");
      
//      } catch(DOMException e) {
//         //
//         // Method not supported
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NfpG88Pp-v)333");
      SQLWarning sQLWarning0 = new SQLWarning("NfpG88Pp-v)333", "NfpG88Pp-v)333", 13, sQLFeatureNotSupportedException0);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0, false);
      EmptyListIterator.resettableEmptyListIterator();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) linkedHashSet0);
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.StringValueTransformer", sQLWarning0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransientException>) null, (Object) sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<Locale.Category>) null, (Predicate<? super Locale.Category>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLSyntaxErrorException>(mapIterator0);
      Predicate<BatchUpdateException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) abstractMapIteratorDecorator0, (Predicate<? super BatchUpdateException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS("", "");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.setAttributeNode((Attr) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[2];
      int int0 = 470;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, 2);
      DataTruncation dataTruncation0 = new DataTruncation(2, true, true, 2, 470, sQLNonTransientException0);
      dataTruncation0.getNextWarning();
      sQLWarningArray0[0] = null;
      DataTruncation dataTruncation1 = new DataTruncation(2, false, false, 2, 2555);
      sQLWarningArray0[1] = (SQLWarning) dataTruncation1;
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsTruePredicate0, predicate0);
      AndPredicate.andPredicate((Predicate<? super PriorityQueue<SQLTransientConnectionException>>) predicate0, (Predicate<? super PriorityQueue<SQLTransientConnectionException>>) predicate0);
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) resettableIterator0, (Predicate<? super Object>) andPredicate0);
      IteratorUtils.pushbackIterator((Iterator<?>) iterator0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(locale_CategoryArray0, 470);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 9);
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) zippingIterator0;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      int int0 = 0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2X.!L<TA", (String) null, 0, sQLInvalidAuthorizationSpecException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, "Y=");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashtable0, sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLClientInfoException0);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      int int1 = 0;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("!n?^byru&_uBmB=", "Sr:{4)p", 0, sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      String string0 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("=a^$+6$Erj`C/~", "", sQLTransactionRollbackException5);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransactionRollbackException7);
      SQLTransactionRollbackException sQLTransactionRollbackException8 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.NonePredicate", "whD5Sx7rGR7a", batchUpdateException0);
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException8;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) orderedIterator0;
      MapIterator<SQLTransactionRollbackException, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTransactionRollbackException, SQLDataException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      iteratorArray0[3] = (Iterator<SQLTransactionRollbackException>) mapIterator1;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[4] = (Iterator<SQLTransactionRollbackException>) resettableIterator1;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator2 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[5] = (Iterator<SQLTransactionRollbackException>) resettableIterator2;
      ArrayIterator<SQLTransactionRollbackException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException1, (-710), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Iterator<TreeSet<SQLWarning>> iterator0 = null;
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<TreeSet<SQLWarning>>) null, (Transformer<? super TreeSet<SQLWarning>, String>) transformer0, "List must not be null", "List must not be null", "b^3(4");
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.singletonIterator(class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
//      try { 
        iIOMetadataNode0.setIdAttributeNS("y\"3_4`wHE&WU", "", true);
//        fail("Expecting exception: DOMException");
      
//      } catch(DOMException e) {
//         //
//         // Method not supported
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 200;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 200);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category1);
      HashMap<Object, EnumSet<Locale.Category>> hashMap0 = new HashMap<Object, EnumSet<Locale.Category>>();
      Transformer<Object, EnumSet<Locale.Category>> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends EnumSet<Locale.Category>>) hashMap0);
      hashMap0.put(locale_Category1, enumSet0);
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      hashMap0.put(transformer0, enumSet1);
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.objectGraphIterator(enumSet0, (Transformer<? super EnumSet<Locale.Category>, ? extends EnumSet<Locale.Category>>) transformer0);
      IteratorUtils.peekingIterator((Iterator<? extends EnumSet<Locale.Category>>) iterator0);
      OrderedMapIterator<SQLRecoverableException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, 814L, 814L);
      IteratorUtils.singletonListIterator((SQLDataException) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%~<{t(;(-qW/", "", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLRecoverableException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("bbVw[Wf\"}", intArray0, batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("bbVw[Wf\"}", batchUpdateException1);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, sQLTimeoutException0);
      arrayDeque0.add(dataTruncation0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) arrayDeque0);
      Class<DataTruncation> class0 = DataTruncation.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TruePredicate.truePredicate();
      Integer integer0 = new Integer(3);
      IteratorUtils.getIterator(integer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<Predicate<Class<String>>>) null, (Predicate<? super Predicate<Class<String>>>) predicate0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 5);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator1;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = null;
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Iterator<Locale.Category> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) null, 84L, 84L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("UQ\\9c");
      sQLTransientException0.spliterator();
      IteratorUtils.singletonListIterator(sQLTransientException0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator((SQLSyntaxErrorException) null);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(1, objectArray0.length);
      
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-797));
      arrayList0.add(integer0);
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(arrayList0);
      IteratorUtils.isEmpty(reverseListIterator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "org.apache.commons.collections4.set.ListOrderedSet", 32, sQLTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "org.apache.commons.collections4.functors.TransformedPredicate", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("I4.3xf,d9", "org.apache.commons.collections4.set.ListOrderedSet", "org.apache.commons.collections4.functors.TransformedPredicate", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("org.apache.commons.collections4.set.ListOrderedSet", "", ".'6WQ/JT3", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("iterator", "fX3C~+,^:-krf,y@", "Iterator remove() can only be called once after next()", (-699));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("org.apache.commons.collections4.functors.TransformedPredicate", "", ",i<R  _)y?p=?", (-699));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "", "", 0);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("I4.3xf,d9", "iterator", "I4.3xf,d9", (-797));
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement(".'6WQ/JT3", "", "", 1355);
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("#?IjXW-uVW, TI", "F^)t<k:%", "Closure must not be null", (-797));
      stackTraceElementArray0[8] = stackTraceElement8;
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("pFWI", " OE,9@vMT4EuD");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("8.HcTF*", (String) null, sQLIntegrityConstraintViolationException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("3YTNn", "3YTNn", 0, map0, sQLSyntaxErrorException0);
      arrayList0.add(sQLClientInfoException1);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) arrayList0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "", (-1010));
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) singletonListIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLDataException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLIntegrityConstraintViolationException0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) orPredicate0, (Predicate<? super Object>) predicate0);
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) predicate1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 3);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<String>) listIterator0;
      String string0 = "v:I<2XPm.Ay7_z>";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("v:I<2XPm.Ay7_z>");
      iteratorArray0[1] = (Iterator<String>) resettableIterator0;
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[2] = iterator0;
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>[]) iteratorArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.removeAttributeNode((Attr) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9`>}-$!@fT/S.RFq`s+");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "9`>}-$!@fT/S.RFq`s+", (-181), (-261));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = 257;
      String string0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "ListIterator must not be null", 257);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("G_S?+>a<Bz8pvsaX]", (String) null, sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning(".", ".", sQLSyntaxErrorException0);
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      SQLWarning sQLWarning1 = new SQLWarning(".", ".", 257, sQLWarning0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning1, 257, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WpqacK]1X#ot]hKXI{");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = iIOMetadataNode0.cloneNode(false);
      Node node1 = iIOMetadataNode0.replaceChild(node0, node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iIOMetadataNode0.insertBefore(node1, node0);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 73, (-2734));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getSuppressed();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.collections4.iterators.ListIteratorWrapper";
      stringArray0[1] = "$";
      stringArray0[2] = "Transformer must not be null";
      stringArray0[3] = ".f{04";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "6wv[eXRj*~UK{2+rr";
      stringArray0[7] = "";
      stringArray0[8] = "";
      IteratorUtils.arrayIterator(stringArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 858;
      intArray0[1] = (-526);
      intArray0[2] = 4530;
      intArray0[3] = 0;
      intArray0[4] = 1387;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Transformer must not be null", intArray0);
      batchUpdateException0.printStackTrace();
      IteratorUtils.singletonListIterator((SQLException) batchUpdateException0);
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) vector0);
      MapIterator<SQLClientInfoException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, 0L);
      assertNotNull(boundedIterator0);
  }
}
