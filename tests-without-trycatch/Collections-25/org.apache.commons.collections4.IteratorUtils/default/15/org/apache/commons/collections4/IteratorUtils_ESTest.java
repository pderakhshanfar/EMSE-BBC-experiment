/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:47:24 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(2464, true, true, 2464, (-2033));
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<DataTruncation>) singletonListIterator0, 63);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 62
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      OrderedMapIterator<SQLNonTransientException, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientException, Locale.FilteringMode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientException, Locale.FilteringMode>(orderedMapIterator0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) loopingListIterator0, (Iterator<? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MapIterator<SQLRecoverableException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLRecoverableException, SQLClientInfoException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLRecoverableException, SQLClientInfoException>(mapIterator0);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLClientInfoException>(orderedMapIterator0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0, 2);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) list0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      ReverseListIterator<SQLNonTransientException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientException>(linkedList0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator0, (Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) reverseListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0, 0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) objectArrayListIterator0, (Iterator<? extends SQLDataException>) objectArrayListIterator0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) objectArrayListIterator0, (Iterator<? extends SQLDataException>) iterator0);
      assertNotSame(iterator0, iterator1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MapIterator<SQLException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLException, ClientInfoStatus> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<InstanceofPredicate, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<InstanceofPredicate, SQLClientInfoException>(orderedMapIterator0);
      ListIteratorWrapper<InstanceofPredicate> listIteratorWrapper0 = new ListIteratorWrapper<InstanceofPredicate>(abstractOrderedMapIteratorDecorator0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<InstanceofPredicate>) listIteratorWrapper0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) singletonListIterator0);
      assertTrue(list0.contains(properties0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, class0);
      assertNotSame(sQLIntegrityConstraintViolationExceptionArray0, sQLIntegrityConstraintViolationExceptionArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      SkippingIterator<Locale.FilteringMode> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Locale.FilteringMode>) listIterator0, 2084L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<Properties> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null);
      vector0.add(sQLSyntaxErrorException0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) vector0);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Enumeration<DataTruncation> enumeration0 = (Enumeration<DataTruncation>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator0, (Iterator<? extends SQLNonTransientException>) resettableListIterator0, (Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 1;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, int0, int0);
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) objectArrayIterator0, 4498L, (long) int0);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[1];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[9];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("egN", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("egN", sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) singletonListIterator0, (Iterator<? extends SQLTransientException>) singletonListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) zippingIterator0, (Transformer<? super SQLTransientException, String>) transformer0, "", "O,JG<\"1`Zj:l4[PMW?:", "egN");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLSyntaxErrorException>(orderedMapIterator0);
      OrderedMapIterator<SQLDataException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) orderedMapIterator1, (Transformer<? super SQLDataException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      int[] intArray0 = new int[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("N!w6EyuI`J5", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-1118), intArray0, sQLNonTransientConnectionException0);
      arrayList0.add(batchUpdateException0);
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(arrayList0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("6b L|55i", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Iterator must not be null", "Iterator must not be null", 0, sQLTransientException0);
      arrayList0.add(sQLInvalidAuthorizationSpecException0);
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("V~$jV 5n@asVc&", (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.size(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Properties>) singletonListIterator0, (Predicate<? super Properties>) nullIsExceptionPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) allPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("W3X-Ci@+?$%(i sD>", "ys", false);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) nullIsExceptionPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>(10, 10);
      vector0.setSize(5778);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(vector0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) loopingListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      // Undeclared exception!
      IteratorUtils.isEmpty(iterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Enumeration<DataTruncation> enumeration0 = (Enumeration<DataTruncation>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 1073741824);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1073741823
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<ArrayDeque<SQLNonTransientConnectionException>>) null, 1754);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MapIterator<SQLRecoverableException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (-2960L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(integerArray0, (-1720), 2362);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((String[]) null, 8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, (-2014));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) uniquePredicate0, 1754, 650);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 584);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((ClientInfoStatus[]) null, 1073731852, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 4, 2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Predicate<Properties> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) predicate0, 287, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1422);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("m");
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) null, (Transformer<? super SQLTransientException, String>) transformer0, "!|6+[yu", "6sqJA#._\"A%G~WO", "m");
      assertEquals("6sqJA#._\"A%G~WOm", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      String[] stringArray0 = new String[2];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) orderedMapIterator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<String>) resettableIterator0, (Predicate<? super String>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) singletonIterator0, 100);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Iterator<SQLDataException>> linkedList0 = new LinkedList<Iterator<SQLDataException>>();
      ResettableListIterator<Iterator<SQLDataException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Iterator<SQLDataException>>) linkedList0);
      List<Iterator<SQLDataException>> list0 = IteratorUtils.toList((Iterator<? extends Iterator<SQLDataException>>) resettableListIterator0, 1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Iterator<SQLDataException>>) null, (-1836));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      DataTruncation dataTruncation0 = new DataTruncation((-1605), true, true, 1, 1, sQLTransientConnectionException0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OrderedIterator<ClientInfoStatus> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends ClientInfoStatus>) orderedIterator0, (-181L), (-181L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[2];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 1);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("TU`!`6{}Lk^>d");
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) resettableListIterator0, (Transformer<? super SQLTransientException, String>) constantTransformer0, "xBF", "xBF", "TU`!`6{}Lk^>d");
      assertTrue(resettableListIterator0.hasPrevious());
      assertEquals("xBFTU`!`6{}Lk^>dTU`!`6{}Lk^>d", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      BoundedIterator<SQLTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) objectArrayIterator0, 0L);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) boundedIterator0, (Transformer<? super SQLTransientException, String>) transformer0, "", "", ", ");
      assertEquals(", ", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(2464, true, true, 2464, 2464);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ZKutCc:>", dataTruncation0);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) singletonListIterator0, (Iterator<? extends SQLTransientException>) singletonListIterator0);
      Object[] objectArray0 = new Object[1];
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("ZKutCc:>", (Class<?>[]) null, objectArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) zippingIterator0, (Transformer<? super SQLTransientException, String>) invokerTransformer0, "O,JG<\"1`Zj:l4[PMW?:", "]", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[2];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 1);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) resettableListIterator0, (Transformer<? super SQLTransientException, String>) transformer0, "xBF", (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      OrderedMapIterator<SQLTransientException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientException, SQLClientInfoException>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLTransientException, String>) transformer0, (String) null, (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OrderedIterator<SQLTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) orderedIterator0, (Transformer<? super SQLTransientException, String>) null, "[]", "#cR", "#cR");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Properties properties0 = new Properties();
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator", "org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator");
      properties0.put("org.apache.commons.collections4.IteratorUtils", stringTokenizer0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(2212, true, true, 512, 893);
      Enumeration<DataTruncation> enumeration0 = (Enumeration<DataTruncation>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("W3X-Ci@+?$%(i sD>", "", false);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) nullIsExceptionPredicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "W3X-Ci@+?$%(i sD>", false);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<StringTokenizer> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super StringTokenizer>>) linkedList0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedHashSet<SQLClientInfoException>[] linkedHashSetArray0 = (LinkedHashSet<SQLClientInfoException>[]) Array.newInstance(LinkedHashSet.class, 1);
      ResettableIterator<LinkedHashSet<SQLClientInfoException>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = IteratorUtils.contains((Iterator<LinkedHashSet<SQLClientInfoException>>) resettableIterator0, (Object) locale_FilteringMode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Properties>) null, (Predicate<? super Properties>) nullIsExceptionPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLException>>) linkedList0);
      IteratorUtils.find((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      BatchUpdateException batchUpdateException1 = IteratorUtils.find((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) uniquePredicate0);
      assertNotNull(batchUpdateException1);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(instanceofPredicate0);
      BatchUpdateException batchUpdateException0 = IteratorUtils.find((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) nullIsFalsePredicate0);
      assertNull(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, false);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLClientInfoException>) singletonIterator0, (Closure<? super SQLClientInfoException>) closure0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(instanceofPredicate0);
      Predicate<SQLClientInfoException> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLClientInfoException>) nullIsFalsePredicate0);
      Transformer<Object, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<SQLClientInfoException, SQLClientInfoException> transformer1 = IfTransformer.ifTransformer((Predicate<? super SQLClientInfoException>) instanceofPredicate0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      Closure<SQLClientInfoException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLClientInfoException, ?>) transformer1);
      IfClosure<SQLClientInfoException> ifClosure0 = new IfClosure<SQLClientInfoException>(predicate0, closure0, closure0);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) null, (Closure<? super SQLClientInfoException>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLClientInfoException>) resettableIterator0, (Closure<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("FilterListIterator.set(Object) is not supported.", "FilterListIterator.set(Object) is not supported.");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) orderedIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(hashSet0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) loopingIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null, (Collection<? super Properties>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MapIterator<Boolean, PriorityQueue<ArrayDeque>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) mapIterator0);
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      Iterator<Boolean> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0, (Collection<? super Boolean>) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) null, (Predicate<? super StringTokenizer>) nonePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 10);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) nonePredicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) null, (Predicate<? super StringTokenizer>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (Transformer<? super StringTokenizer, ? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>("Estimated size must be greater than 0", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends ArrayDeque<DataTruncation>>) null, (Transformer<? super ArrayDeque<DataTruncation>, ? extends Properties>) invokerTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer(")TIbn2Q?:[Yj<&:r");
      MapIterator<StringTokenizer, ArrayList<LinkedList>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) mapIterator0, (Transformer<? super StringTokenizer, ? extends SQLNonTransientConnectionException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) null, (-3542L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer((String) null);
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1073731837, 1073731837);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 1073731865);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLException, SQLClientInfoException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, LinkedHashSet<SQLInvalidAuthorizationSpecException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, LinkedHashSet<SQLInvalidAuthorizationSpecException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, LinkedHashSet<SQLInvalidAuthorizationSpecException>>(orderedMapIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, class0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((TreeSet<BatchUpdateException>[]) null, 14, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object[]) sQLIntegrityConstraintViolationExceptionArray0, (-1955), (-1955));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<Locale.FilteringMode>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("wj9", "wj9");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) singletonListIterator0, (Iterator<? extends SQLTransientException>) singletonListIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      Transformer<SQLTransientException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLTransientException>) zippingIterator0, (Transformer<? super SQLTransientException, String>) transformer0, "", "", "");
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) locale_FilteringMode0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 10, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0, (-274));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) linkedList0, 156);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }
}
