/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:48:16 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MapIterator<DataTruncation, ArrayDeque<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, ArrayDeque<SQLNonTransientException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) mapIterator0, (Iterator<? extends DataTruncation>) mapIterator0, (Iterator<? extends DataTruncation>) mapIterator1);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, EnumSet<Locale.Category>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<InstanceofPredicate, EnumSet<Locale.Category>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<InstanceofPredicate, EnumSet<Locale.Category>>(orderedMapIterator0);
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) abstractMapIteratorDecorator0, (Iterator<? extends InstanceofPredicate>) orderedMapIterator0, (Iterator<? extends InstanceofPredicate>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) listIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLTransientConnectionException, Locale.Category> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "transformer must not be null.", 100, (Throwable) null);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<IIOMetadataNode, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Properties>(orderedMapIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Iterator<? extends IIOMetadataNode>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLTransactionRollbackException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLInvalidAuthorizationSpecException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Predicate<LinkedList<BatchUpdateException>> predicate0 = NonePredicate.nonePredicate((Predicate<? super LinkedList<BatchUpdateException>>[]) predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) predicate0, 998, 2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      ListIterator<Stack<SQLIntegrityConstraintViolationException>> listIterator0 = IteratorUtils.singletonListIterator(stack0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Stack<SQLIntegrityConstraintViolationException>>) listIterator0, (Closure<? super Stack<SQLIntegrityConstraintViolationException>>) closure0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, EnumSet<Locale.Category>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLFeatureNotSupportedException, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, EnumSet<Locale.Category>>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) singletonListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableListIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null, true);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) singletonIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MapIterator<DataTruncation, ArrayDeque<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      SQLWarning[] sQLWarningArray0 = IteratorUtils.toArray((Iterator<? extends SQLWarning>) mapIterator0, class0);
      assertEquals(0, sQLWarningArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) orderedIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(2336, true, true, 2336, 2638, (Throwable) null);
      stack0.add(dataTruncation0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 2);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.arrayIterator(enumSetArray0);
      BoundedIterator<Object> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<?>) resettableIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 5, 5);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Predicate<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      Transformer<Object, ClientInfoStatus> transformer0 = InvokerTransformer.invokerTransformer(">:x`tB,C# ]qd a");
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) transformer0);
      Transformer<ClientInfoStatus, String> transformer1 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super ClientInfoStatus, String>) transformer1, "", "", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '>:x`tB,C# ]qd a' on 'class java.sql.ClientInfoStatus' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3331, true, true, 3331, (-2618));
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<SQLException, DataTruncation> invokerTransformer0 = new InvokerTransformer<SQLException, DataTruncation>("", classArray0, classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) invokerTransformer0);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.DataTruncation' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>(512);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) priorityQueue0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("delimite may not benll");
      SQLDataException sQLDataException0 = new SQLDataException("delimite may not benll", sQLNonTransientException0);
      priorityQueue0.offer(sQLDataException0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      // Undeclared exception!
//      try { 
        IteratorUtils.size(iterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.PriorityQueue$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("", classArray0, classArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(invokerTransformer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SingletonIterator<LinkedHashSet<Integer>> singletonIterator0 = new SingletonIterator<LinkedHashSet<Integer>>(linkedHashSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<LinkedHashSet<Integer>>) singletonIterator0, (Predicate<? super LinkedHashSet<Integer>>) transformerPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.util.LinkedHashSet' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SingletonIterator<LinkedHashSet<Integer>> singletonIterator0 = new SingletonIterator<LinkedHashSet<Integer>>(linkedHashSet0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<LinkedHashSet<Integer>>) singletonIterator0, (Predicate<? super LinkedHashSet<Integer>>) nullIsExceptionPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Vector<ServiceLoader>>) null, 15);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) null, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, (-1216));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null, 5);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Properties[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((InstanceofPredicate[]) null, 349, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ArrayList<SQLException>[] arrayListArray0 = (ArrayList<SQLException>[]) Array.newInstance(ArrayList.class, 5);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(arrayListArray0, 0, (-2052));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 512, 1276);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(nullIsExceptionPredicate0, transformer0, transformer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLNonTransientConnectionException0);
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientException>) singletonIterator0, (Transformer<? super SQLNonTransientException, String>) ifTransformer0, "aHM%:lT8'Vw^`:(z", "T", "aHM%:lT8'Vw^`:(z");
      assertEquals("Tjava.sql.SQLNonTransientConnectionExceptionaHM%:lT8'Vw^`:(z", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Transformer<DataTruncation, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MapIterator<InstanceofPredicate, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) mapIterator0, 10);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SingletonIterator<LinkedHashSet<Integer>> singletonIterator0 = new SingletonIterator<LinkedHashSet<Integer>>(linkedHashSet0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedHashSet<Integer>>) singletonIterator0, (Predicate<? super LinkedHashSet<Integer>>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("?K/BNL", (Class<?>[]) classArray0, (Object[]) classArray0);
      ResettableIterator<Transformer<Object, DataTruncation>> resettableIterator0 = IteratorUtils.singletonIterator(transformer0);
      List<Transformer<Object, DataTruncation>> list0 = IteratorUtils.toList((Iterator<? extends Transformer<Object, DataTruncation>>) resettableIterator0, 530);
      assertTrue(list0.contains(transformer0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) null, (-1807));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) null, 467L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MapIterator<DataTruncation, ArrayDeque<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("Dh'.of[Fa4");
      String string0 = IteratorUtils.toString((Iterator<DataTruncation>) mapIterator0, (Transformer<? super DataTruncation, String>) transformer0, "Dh'.of[Fa4", "Dh'.of[Fa4", "org.apache.commons.collections4.functors.NullIsTruePredicate");
      assertEquals("Dh'.of[Fa4org.apache.commons.collections4.functors.NullIsTruePredicate", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      SingletonListIterator<LinkedList<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<LinkedList<StringTokenizer>>(linkedList0);
      String string0 = IteratorUtils.toString((Iterator<LinkedList<StringTokenizer>>) singletonListIterator0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals("[[]]", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("Dh'.of[Fa4");
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) resettableIterator0, (Transformer<? super DataTruncation, String>) transformer0, "org.apache.commons.collections4.functors.NOPClosure", "%*xw2}{@I7jG5cG<&V", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      OrderedMapIterator<SQLTimeoutException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) hashMap0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>(orPredicate0, transformer0, transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) orderedMapIterator0, (Transformer<? super SQLTimeoutException, String>) ifTransformer0, "]cR", (String) null, "delimite may not benll");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) orderedMapIterator0, (Transformer<? super SQLTimeoutException, String>) constantTransformer0, (String) null, "\"=SO1M:phi9db#.U6", "\"=SO1M:phi9db#.U6");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-2529), true, false, (-2529), 123);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) listIterator0, (Transformer<? super DataTruncation, String>) null, "Iterator must not be null", "Iterator must not be null", "Iterator must not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Locale.Category>) singletonIterator0, (Predicate<? super Locale.Category>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0, false);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Locale.Category>) singletonIterator0, (Predicate<? super Locale.Category>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0, true);
      Predicate<Locale.Category> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Locale.Category>) singletonIterator0, (Predicate<? super Locale.Category>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Locale.Category>) null, (Predicate<? super Locale.Category>) instanceofPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SingletonIterator<LinkedHashSet<Integer>> singletonIterator0 = new SingletonIterator<LinkedHashSet<Integer>>(linkedHashSet0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedHashSet<Integer>>) singletonIterator0, (Predicate<? super LinkedHashSet<Integer>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedHashSet<Integer>>) null, (Predicate<? super LinkedHashSet<Integer>>) nullIsExceptionPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SingletonIterator<LinkedHashSet<Integer>> singletonIterator0 = new SingletonIterator<LinkedHashSet<Integer>>(linkedHashSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<LinkedHashSet<Integer>>) singletonIterator0, (Predicate<? super LinkedHashSet<Integer>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = IteratorUtils.find((Iterator<SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertNotNull(sQLSyntaxErrorException1);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      IteratorUtils.find((Iterator<SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>((Boolean) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) constantTransformer0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(notPredicate0);
      Properties properties0 = IteratorUtils.find((Iterator<Properties>) null, (Predicate<? super Properties>) nullIsExceptionPredicate0);
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLRecoverableException>) orderedIterator0, (Closure<? super SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>((SQLRecoverableException) null);
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLRecoverableException>) singletonIterator0, (Closure<? super SQLRecoverableException>) closure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("\"`iV;SO&", "\"`iV;SO&", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "Dh'.of[Fa4", 923);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTimeoutException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MapIterator<DataTruncation, ArrayDeque<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      SQLWarning[] sQLWarningArray0 = new SQLWarning[5];
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0);
      SQLWarning[] sQLWarningArray1 = IteratorUtils.toArray((Iterator<? extends SQLWarning>) resettableIterator0, class0);
      assertEquals(5, sQLWarningArray1.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MapIterator<DataTruncation, ArrayDeque<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.Category>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends Iterator<SQLSyntaxErrorException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterable<SQLRecoverableException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null, (Collection<? super SQLNonTransientException>) priorityQueue0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimite may not benll");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) priorityQueue0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableIterator0);
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) priorityQueue1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("O?1ya5y[Hb3r#&FMgx");
      IdentityPredicate<String> identityPredicate0 = new IdentityPredicate<String>("O?1ya5y[Hb3r#&FMgx");
      ListIterator<String> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) identityPredicate0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      UniquePredicate<String> uniquePredicate0 = new UniquePredicate<String>();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) uniquePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OrderedMapIterator<String, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIteratorWrapper<String> listIteratorWrapper0 = new ListIteratorWrapper<String>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIteratorWrapper0, (Predicate<? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) null, (Predicate<? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0, (Transformer<? super SQLNonTransientException, ? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Transformer<Object, IIOMetadataNode> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, ? extends IIOMetadataNode>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, PriorityQueue<EnumSet>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("]");
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) orderedMapIterator0, (Transformer<? super Object, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      Iterable<SQLInvalidAuthorizationSpecException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) null, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.singletonIterator(clientInfoStatus0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) resettableIterator0, (Transformer<? super ClientInfoStatus, String>) invokerTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) properties0, (-3028), (-3028));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object[]) batchUpdateExceptionArray0, 82);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<InstanceofPredicate, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) mapIterator0, (-12));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, ClientInfoStatus>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) objectArrayIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 39, 39);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 945, 945);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) listIterator0, 2323L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Closure<Object>>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      Transformer<Object, ClientInfoStatus> transformer0 = InvokerTransformer.invokerTransformer(">:x`tB,C# ]qd a");
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) transformer0);
      Iterator<ClientInfoStatus> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends ClientInfoStatus>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 1249);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Properties>) resettableListIterator0, (Predicate<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Object) sQLTimeoutException0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "LA", 4412);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("O?1ya5y[Hbr#&FMgb");
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      Iterator<String> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends String>) listIterator0, (Predicate<? super String>) nullIsExceptionPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MapIterator<DataTruncation, ArrayDeque<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 12);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(vector0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) loopingListIterator0);
      assertFalse(listIterator0.hasNext());
  }
}
