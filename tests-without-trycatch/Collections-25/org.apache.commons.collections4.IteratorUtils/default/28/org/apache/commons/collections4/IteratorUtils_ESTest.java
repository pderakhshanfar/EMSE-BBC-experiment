/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 18:56:36 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MapIterator<SQLTimeoutException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) zippingIterator0, 2145);
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(list0);
      Transformer<SQLTransientException, Iterator<Predicate<Object>>> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<Iterator<Predicate<Object>>> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) loopingListIterator0, (Transformer<? super SQLTimeoutException, ? extends Iterator<Predicate<Object>>>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      InputStream[] inputStreamArray0 = new InputStream[7];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      inputStreamArray0[0] = (InputStream) pipedInputStream0;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStreamArray0[0]);
      inputStreamArray0[1] = (InputStream) pushbackInputStream0;
      MockFile mockFile0 = new MockFile("]", "]");
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      Iterator<String> iterator0 = null;
      IteratorUtils.size((Iterator<?>) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      FalsePredicate.falsePredicate();
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 4);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      // Undeclared exception!
//      try { 
        InvokerTransformer.invokerTransformer((String) null, (Class<?>[]) classArray0, (Object[]) classArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The method to invoke must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null);
      String string0 = "fQPGqVLJ;<!?cBf";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fQPGqVLJ;<!?cBf", "{'{6WB>$7IGS,.Hy", sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("[]", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLTransientException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      IteratorUtils.emptyListIterator();
      int int0 = 5363;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 5363);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Object object0 = new Object();
      IteratorUtils.filteredIterator((Iterator<?>) orderedIterator0, (Predicate<? super Object>) predicate0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(124);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-5219));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(350);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(350);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1025);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2065);
      integerArray0[6] = integer6;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator0, 2065);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      UniquePredicate.uniquePredicate();
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
      
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      OrPredicate<SQLRecoverableException> orPredicate0 = new OrPredicate<SQLRecoverableException>(uniquePredicate0, uniquePredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) comparator0, (Iterator<? extends ClientInfoStatus>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Object>) null, (Closure<? super Object>) closure0);
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) listIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      IteratorUtils.isEmpty(resettableIterator0);
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableListIterator0);
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      TreeSet<SQLTimeoutException> treeSet1 = new TreeSet<SQLTimeoutException>((SortedSet<SQLTimeoutException>) treeSet0);
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      intArray0[1] = 2055;
      intArray0[2] = 2383;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      ListIterator<BatchUpdateException> listIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) listIterator0, (Iterator<? extends BatchUpdateException>) listIterator0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 3);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) zippingIterator0, (Transformer<? super BatchUpdateException, String>) invokerTransformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.BatchUpdateException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null);
      Predicate<SQLException> predicate0 = new UniquePredicate<SQLException>();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLDataException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      Hashtable<Object, IIOMetadataNode> hashtable0 = new Hashtable<Object, IIOMetadataNode>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashtable0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.entrySet();
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Transformer must not be null", "", sQLFeatureNotSupportedException0);
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      IteratorUtils.loopingListIterator((List<SQLRecoverableException>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLWarning> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLWarning>) orderedMapIterator0);
      IteratorUtils.size(mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      FalsePredicate.falsePredicate();
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Integer integer0 = new Integer(7115);
      InvokerTransformer<Integer, Integer> invokerTransformer0 = new InvokerTransformer<Integer, Integer>("", classArray0, classArray0);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) iterator0, 5363);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.lang.Integer' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      String string0 = "Transformer must not be null";
      Hashtable<Object, IIOMetadataNode> hashtable0 = new Hashtable<Object, IIOMetadataNode>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashtable0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.entrySet();
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Transformer must not be null", "", sQLFeatureNotSupportedException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Transformer must not be null", sQLFeatureNotSupportedException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) anyPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null);
      Predicate<SQLException> predicate0 = new UniquePredicate<SQLException>();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLDataException0);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransactionRollbackException>) singletonListIterator0);
      MapIterator<SQLTransactionRollbackException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransactionRollbackException, Integer> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransactionRollbackException, ? extends Integer>) mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) mapIterator1);
      Iterator<SQLTransientException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) mapIterator1);
      Iterator<SQLTransientException> iterator2 = IteratorUtils.unmodifiableIterator(iterator1);
      assertFalse(iterator2.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLWarning>) orderedMapIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(clientInfoStatus0);
      EmptyIterator.emptyIterator();
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 9);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLTransientConnectionException> class3 = SQLTransientConnectionException.class;
      classArray0[3] = class3;
      Class<SQLTransientConnectionException> class4 = SQLTransientConnectionException.class;
      classArray0[4] = class4;
      Class<SQLTransientConnectionException> class5 = SQLTransientConnectionException.class;
      classArray0[5] = class5;
      Class<SQLTransientConnectionException> class6 = SQLTransientConnectionException.class;
      classArray0[6] = class6;
      Class<SQLTransientConnectionException> class7 = SQLTransientConnectionException.class;
      classArray0[7] = class7;
      Class<SQLTransientConnectionException> class8 = SQLTransientConnectionException.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("~^\";H';R", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<ArrayList<HashSet>>) iterator0, (Transformer<? super ArrayList<HashSet>, String>) invokerTransformer0, "Transformer must not be null", "", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '~^\";H';R' on 'class java.sql.ClientInfoStatus' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      FalsePredicate.falsePredicate();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      IteratorUtils.getIterator(hashMap0);
      EmptyIterator.emptyIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLWarning> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLWarning>) orderedMapIterator0);
      IteratorUtils.size(mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) nullIsFalsePredicate0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 6);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      IfTransformer.ifTransformer((Predicate<? super Object>) nullIsFalsePredicate0, (Transformer<? super Object, ? extends String>) ifTransformer0, (Transformer<? super Object, ? extends String>) ifTransformer0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) nullIsFalsePredicate0);
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      sQLExceptionArray0[0] = (SQLException) sQLRecoverableException0;
      sQLExceptionArray0[1] = (SQLException) sQLRecoverableException0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, 0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Properties properties0 = new Properties();
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      EmptyListIterator.resettableEmptyListIterator();
      MapIterator<InputStream, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(instanceofPredicate0);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) nullIsTruePredicate0, (Predicate<? super Object>) nullIsTruePredicate0);
      Iterator<InputStream> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends InputStream>) mapIterator0, (Predicate<? super InputStream>) predicate0);
      Iterable<InputStream> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends InputStream>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      IteratorUtils.arrayIterator(objectArray0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iterator", "prDfix may not be null");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTimeoutException0);
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      PredicateTransformer<String> predicateTransformer1 = new PredicateTransformer<String>(predicate0);
      Boolean boolean0 = predicateTransformer1.transform("");
      ConstantTransformer<SQLException, Boolean> constantTransformer0 = new ConstantTransformer<SQLException, Boolean>(boolean0);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(constantTransformer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<SQLInvalidAuthorizationSpecException, Class<SQLInvalidAuthorizationSpecException>> hashMap1 = new HashMap<SQLInvalidAuthorizationSpecException, Class<SQLInvalidAuthorizationSpecException>>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Class<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Class<SQLInvalidAuthorizationSpecException>>(hashMap1);
      IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      ArrayListIterator<SQLTransactionRollbackException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransactionRollbackException>(transformerPredicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<Properties> stack0 = new Stack<Properties>();
      IteratorUtils.loopingListIterator((List<Properties>) stack0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 8);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("<go7i^", "<go7i^", hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) resettableIterator0;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) resettableListIterator0;
      MapIterator<SQLClientInfoException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) iteratorArray0[1], (Iterator<? extends SQLClientInfoException>) mapIterator0);
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) zippingIterator0;
      Factory<SQLClientInfoException> factory0 = ConstantFactory.constantFactory(sQLClientInfoException0);
      Transformer<SQLClientInfoException, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) factory0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      iteratorArray0[3] = iterator0;
      ResettableListIterator<SQLClientInfoException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      iteratorArray0[4] = (Iterator<SQLClientInfoException>) resettableListIterator1;
      ResettableIterator<SQLClientInfoException> resettableIterator1 = IteratorUtils.emptyIterator();
      iteratorArray0[5] = (Iterator<SQLClientInfoException>) resettableIterator1;
      SkippingIterator<SQLClientInfoException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) zippingIterator0, 0L);
      iteratorArray0[6] = (Iterator<SQLClientInfoException>) skippingIterator0;
      MapIterator<SQLClientInfoException, SQLTransactionRollbackException> mapIterator1 = IteratorUtils.emptyMapIterator();
      iteratorArray0[7] = (Iterator<SQLClientInfoException>) mapIterator1;
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) iterator1, class0);
      ResettableIterator<SQLWarning> resettableIterator2 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      EmptyIterator.emptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OrderedMapIterator<Integer, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLTimeoutException>) orderedMapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fromIndex(", "fromIndex(", 2304);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fromIndex(", "fromIndex(", 2304, (Map<String, ClientInfoStatus>) null, sQLSyntaxErrorException0);
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 3);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      InvokerTransformer<Object, SQLClientInfoException> invokerTransformer0 = new InvokerTransformer<Object, SQLClientInfoException>("fromIndex(", classArray0, classArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) invokerTransformer0);
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) iterator0, class3);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'fromIndex(' on 'class java.sql.SQLClientInfoException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      int[] intArray0 = new int[3];
      intArray0[0] = 802;
      intArray0[1] = 802;
      intArray0[2] = 802;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Jp", "Jp", 802, intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("prefix may not be null", "Jp", 802, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0, batchUpdateException1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Jp", "(B?<^J(", batchUpdateException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      singletonIterator0.reset();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) singletonIterator0);
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      PredicateTransformer<String> predicateTransformer1 = new PredicateTransformer<String>(predicate0);
      Boolean boolean0 = predicateTransformer1.transform("prefix may not be null");
      ConstantTransformer<SQLException, Boolean> constantTransformer0 = new ConstantTransformer<SQLException, Boolean>(boolean0);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(constantTransformer0);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) singletonIterator0, (Predicate<? super SQLRecoverableException>) transformerPredicate0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 802);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      DefaultEquator.defaultEquator();
      OrderedMapIterator<Integer, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, SQLTimeoutException>(orderedMapIterator0);
      OrderedMapIterator<Integer, SQLTimeoutException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      AbstractOrderedMapIteratorDecorator<Integer, SQLTimeoutException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<Integer, SQLTimeoutException>(orderedMapIterator1);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Integer>) abstractOrderedMapIteratorDecorator1, 1073741824);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(clientInfoStatus0);
      Factory<BatchUpdateException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, BatchUpdateException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends BatchUpdateException>) factory0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(788, transformerClosure0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      closureArray0[0] = (Closure<Object>) transformerClosure0;
      closureArray0[1] = (Closure<Object>) transformerClosure0;
      closureArray0[2] = (Closure<Object>) forClosure0;
      ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<ArrayList<Transformer>>) iterator0, (Closure<? super ArrayList<Transformer>>) closureArray0[1]);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      IteratorUtils.isEmpty(resettableIterator0);
      Properties properties0 = new Properties();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) resettableIterator1);
      ResettableIterator<Locale.Category> resettableIterator2 = EmptyIterator.resettableEmptyIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[3] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[4] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[5] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[6] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[7] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[8] = (Predicate<Object>) uniquePredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      ArrayList<Closure<Object>> arrayList0 = new ArrayList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayList0);
      Closure<Object> closure1 = ForClosure.forClosure((-926), (Closure<? super Object>) closure0);
      closureArray0[0] = closure1;
      Closure<Object> closure2 = IfClosure.ifClosure((Predicate<? super Object>) predicateArray0[6], (Closure<? super Object>) closure0);
      closureArray0[1] = closure2;
      Closure<Object> closure3 = ForClosure.forClosure((-926), (Closure<? super Object>) closure1);
      closureArray0[2] = closure3;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure2);
      Closure<Object> closure4 = IfClosure.ifClosure((Predicate<? super Object>) uniquePredicate0, (Closure<? super Object>) switchClosure0, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<Locale.Category>) resettableIterator2, (Closure<? super Locale.Category>) closure4);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) resettableListIterator0, (Predicate<? super SQLTransientException>) predicateArray0[4]);
      ListIterator<SQLTransientException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      SQLTransientException sQLTransientException0 = IteratorUtils.find((Iterator<SQLTransientException>) listIterator1, (Predicate<? super SQLTransientException>) predicate0);
      assertNull(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLWarning> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLWarning>) orderedMapIterator0);
      IteratorUtils.size(mapIterator0);
      Hashtable<Object, IIOMetadataNode> hashtable0 = new Hashtable<Object, IIOMetadataNode>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashtable0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.entrySet();
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", sQLFeatureNotSupportedException0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLFeatureNotSupportedException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) anyPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      Properties properties0 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      EmptyIterator.emptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OrderedMapIterator<Integer, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLTimeoutException>) orderedMapIterator0);
      EmptyIterator.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      IteratorUtils.emptyListIterator();
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLException>) listIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      Hashtable<Object, IIOMetadataNode> hashtable0 = new Hashtable<Object, IIOMetadataNode>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashtable0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.entrySet();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Transformer must not be null", "", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.setNextException(sQLFeatureNotSupportedException1);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator1 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException1, true);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator1);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(linkedList0);
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) reverseListIterator0, 596L);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) boundedIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ResettableIterator<Locale.Category> resettableIterator1 = IteratorUtils.singletonIterator(locale_Category0);
      IteratorUtils.toList((Iterator<? extends Locale.Category>) resettableIterator1);
      Iterator<BatchUpdateException> iterator1 = EmptyIterator.emptyIterator();
      String string0 = IteratorUtils.toString(iterator1);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      Hashtable<Object, IIOMetadataNode> hashtable0 = new Hashtable<Object, IIOMetadataNode>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashtable0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) zippingIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[2];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Transformer<BatchUpdateException, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) transformer0);
      assertEquals("[]", string0);
      
      Properties properties0 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[]");
      iIOMetadataNode0.getAttributeNodeNS("[]", "org.apache.commons.collections4.iterators.ObjectArrayListIterator");
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeName();
      iIOMetadataNode0.getChildNodes();
      iIOMetadataNode0.hasAttributes();
      ResettableListIterator<HashMap<ArrayList, EnumSet>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.getIterator(resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      Iterator<Properties> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) iterator0);
      Iterator<Properties> iterator2 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) iterator1, (Iterator<? extends Properties>) resettableIterator0);
      Enumeration<Properties> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator2);
      Iterator<Properties> iterator3 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration1);
      assertNotSame(iterator3, iterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<Properties> stack0 = new Stack<Properties>();
      String string0 = "8li";
      int int0 = 2059;
      SQLDataException sQLDataException0 = new SQLDataException("Cannot remove from list until next() or previous() called");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("8li", "8li", 2059, sQLDataException0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientException) sQLTransactionRollbackException0);
      UniquePredicate.uniquePredicate();
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) sQLDataException0);
      IteratorUtils.find((Iterator<SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) predicate0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
//      try { 
        treeSet0.headSet((Object) sQLTransactionRollbackException0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.sql.SQLTransactionRollbackException cannot be cast to java.lang.Comparable
//         //
//         verifyException("java.util.TreeMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      IteratorUtils.arrayIterator(objectArray0);
      Object object0 = new Object();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      OrderedMapIterator<Integer, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, SQLTimeoutException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLTimeoutException>) orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLTimeoutException>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<Integer, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, SQLTimeoutException>(orderedMapIterator0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) orderedMapIterator1, 7115);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      MapIterator<SQLClientInfoException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) mapIterator0, class0);
      List<DataTruncation> list1 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0);
      IteratorUtils.loopingListIterator(list1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      EmptyIterator.emptyIterator();
      MapIterator<SQLClientInfoException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) mapIterator0, class0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 6);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableListIterator0);
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      TreeSet<SQLTimeoutException> treeSet1 = new TreeSet<SQLTimeoutException>((SortedSet<SQLTimeoutException>) treeSet0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((SortedSet<?>) treeSet1);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) priorityQueue0);
      iteratorArray0[0] = iterator0;
      Iterator<SQLRecoverableException> iterator1 = EmptyIterator.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "S:E qk+$Y&6>rsMF)", 100, (Throwable) null);
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLNonTransientConnectionException0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super SQLRecoverableException>) predicate0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray1 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 4);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("S:E qk+$Y&6>rsMF)", "S:E qk+$Y&6>rsMF)", sQLNonTransientConnectionException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("6c13bQ\"*f,0RIt*C`8", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("6c13bQ\"*f,0RIt*C`8");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("S:E qk+$Y&6>rsMF)", "S:E qk+$Y&6>rsMF)", hashtable0, sQLTransactionRollbackException2);
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("6c13bQ\"*f,0RIt*C`8", sQLClientInfoException0);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("uk2!OXyk$y3(", "org.apache.commons.collections4.iterators.LoopingListIterator", 3, sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("uk2!OXyk$y3(", "8q", sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      iteratorArray1[0] = (Iterator<SQLTransactionRollbackException>) objectArrayListIterator0;
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray1[1] = (Iterator<SQLTransactionRollbackException>) orderedIterator0;
      OrderedIterator<SQLTransactionRollbackException> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      iteratorArray1[2] = (Iterator<SQLTransactionRollbackException>) orderedIterator1;
      MapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray1[3] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      Iterator<SQLTransientException> iterator2 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>[]) iteratorArray1);
      assertNotNull(iterator2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      Hashtable<Object, IIOMetadataNode> hashtable0 = new Hashtable<Object, IIOMetadataNode>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashtable0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.entrySet();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Transformer must not be null", "", sQLFeatureNotSupportedException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator1 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException1, true);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator1);
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(list0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) anyPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]9Sr&5", sQLFeatureNotSupportedException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator2 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) singletonIterator2, (Predicate<? super SQLSyntaxErrorException>) anyPredicate0);
      assertFalse(singletonIterator2.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      Hashtable<Object, IIOMetadataNode> hashtable0 = new Hashtable<Object, IIOMetadataNode>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashtable0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.entrySet();
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Transformer must not be null", "", sQLFeatureNotSupportedException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Transformer must not be null", sQLFeatureNotSupportedException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) anyPredicate0);
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.singletonIterator((Object) null);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<Properties> stack0 = new Stack<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) stack0);
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) resettableListIterator0, (Iterator<? extends Properties>) resettableListIterator0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator0);
      Iterator<Properties> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("z.1kW'BxZaGYmeY", "bIAs&8Ah]%u", 5);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "^ALv<Z/)|HG<z", sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("InstantiateTransformer: The constructor must exist and be public ", sQLRecoverableException1);
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.entrySet();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLWarning> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLWarning>) orderedMapIterator0);
      IteratorUtils.size(mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) onePredicate0;
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      ArrayDeque<Predicate<Object>> arrayDeque1 = arrayDeque0.clone();
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayDeque1);
      predicateArray0[2] = predicate1;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      UniquePredicate.uniquePredicate();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      assertFalse(listIterator0.hasNext());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLWarning> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLWarning>) orderedMapIterator0);
      IteratorUtils.size(mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(" NJp-", "9B[4{>4`H", 0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) nullIsFalsePredicate0);
      Predicate<Object> predicate2 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate1);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(nullIsFalsePredicate0, transformer0, transformer0);
      IfTransformer.ifTransformer((Predicate<? super Object>) nullIsFalsePredicate0, (Transformer<? super Object, ? extends String>) ifTransformer0, (Transformer<? super Object, ? extends String>) ifTransformer0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.entrySet();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", " NJp-", sQLRecoverableException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator1 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, false);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator1);
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(list0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate2);
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>(vector0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) priorityQueue0);
      assertNotNull(resettableIterator0);
      
      MapIterator<Properties, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Properties, DataTruncation> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends DataTruncation>) mapIterator0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator1);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) mapIterator1, (Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) mapIterator0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties[] propertiesArray0 = new Properties[6];
      propertiesArray0[0] = properties3;
      propertiesArray0[2] = properties4;
      propertiesArray0[0] = properties1;
      propertiesArray0[4] = properties4;
      propertiesArray0[5] = properties3;
      ObjectArrayIterator<Properties> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0, 17);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      FalsePredicate.falsePredicate();
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<?>) orderedIterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "transformer may not be null", 4);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("transformer may not be null", "transformer may not be null", sQLTransientException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      singletonIterator0.reset();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "transformer may not be null");
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      PredicateTransformer<String> predicateTransformer1 = new PredicateTransformer<String>(predicate0);
      predicateTransformer0.transform("transformer may not be null");
      ConstantTransformer<SQLException, Boolean> constantTransformer0 = new ConstantTransformer<SQLException, Boolean>((Boolean) null);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(constantTransformer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      IteratorUtils.isEmpty(resettableIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[3];
      intArray0[0] = 802;
      intArray0[1] = 802;
      intArray0[2] = 802;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Jp", "Jp", 802, intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("prefix may not be null", "Jp", 1651, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0, batchUpdateException1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Jp", "(B?<^J(", batchUpdateException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      singletonIterator0.reset();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) singletonIterator0);
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      PredicateTransformer<String> predicateTransformer1 = new PredicateTransformer<String>(predicate0);
      Boolean boolean0 = predicateTransformer1.transform("prefix may not be null");
      ConstantTransformer<SQLException, Boolean> constantTransformer0 = new ConstantTransformer<SQLException, Boolean>(boolean0);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(constantTransformer0);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) singletonIterator0, (Predicate<? super SQLRecoverableException>) transformerPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BoundedIterator<SQLTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, 0L);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) boundedIterator0, (Iterator<? extends SQLTransientConnectionException>) boundedIterator0);
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator1, 10);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 10
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>(vector0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", "K~)Kz8X`,\"\"e3,5");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("_AWV&!\"L#", "", sQLNonTransientConnectionException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) singletonIterator0);
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator");
      ConstantTransformer<SQLException, Boolean> constantTransformer0 = new ConstantTransformer<SQLException, Boolean>(boolean0);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(constantTransformer0);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) singletonIterator0, (Predicate<? super SQLRecoverableException>) transformerPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      IteratorUtils.arrayIterator(objectArray0);
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      OrPredicate<SQLRecoverableException> orPredicate1 = new OrPredicate<SQLRecoverableException>(orPredicate0, orPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeName();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      iIOMetadataNode0.hasAttributes();
      IteratorUtils.nodeListIterator(nodeList0);
      ResettableListIterator<HashMap<ArrayList, EnumSet>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.getIterator(resettableListIterator0);
      Enumeration<Integer> enumeration0 = null;
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      int int0 = (-1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, (-1), sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientException) sQLTransactionRollbackException0);
      Predicate<SQLTransientException> predicate0 = UniquePredicate.uniquePredicate();
      SQLTransientException sQLTransientException0 = IteratorUtils.find((Iterator<SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) predicate0);
      // Undeclared exception!
//      try { 
        treeSet0.headSet((Object) sQLTransientException0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.sql.SQLTransactionRollbackException cannot be cast to java.lang.Comparable
//         //
//         verifyException("java.util.TreeMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeName();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      iIOMetadataNode0.hasAttributes();
      IteratorUtils.nodeListIterator(nodeList0);
      ResettableListIterator<HashMap<ArrayList, EnumSet>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.getIterator(resettableListIterator0);
      Enumeration<Integer> enumeration0 = null;
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, (-1), sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientException) sQLTransactionRollbackException0);
      Predicate<SQLTransientException> predicate0 = UniquePredicate.uniquePredicate();
      SQLTransientException sQLTransientException0 = IteratorUtils.find((Iterator<SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) predicate0);
      // Undeclared exception!
//      try { 
        treeSet0.headSet((Object) sQLTransientException0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.sql.SQLTransactionRollbackException cannot be cast to java.lang.Comparable
//         //
//         verifyException("java.util.TreeMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>(vector0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      ArrayIterator<SQLTimeoutException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLTimeoutException>((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResettableIterator<PriorityQueue<SQLFeatureNotSupportedException>> resettableIterator0 = IteratorUtils.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLRecoverableException0, defaultEquator0);
      IteratorUtils.find((Iterator<PriorityQueue<SQLFeatureNotSupportedException>>) resettableIterator0, (Predicate<? super PriorityQueue<SQLFeatureNotSupportedException>>) equalPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      IteratorUtils.isEmpty(resettableIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[3];
      intArray0[0] = 802;
      intArray0[1] = 802;
      intArray0[2] = 802;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Jp", "Jp", 802, intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("prefix may not be null", "Jp", 1651, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 802;
      longArray0[1] = (long) 802;
      longArray0[2] = (long) 802;
      longArray0[3] = (long) 802;
      longArray0[4] = (long) 802;
      longArray0[5] = (long) 1651;
      longArray0[6] = (-781L);
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("prefix may not be null", "Jp", 1651, longArray0, batchUpdateException3);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      long[] longArray1 = new long[1];
      longArray1[0] = (-955L);
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("lBK3zKoeA'^)_=i=t", "Iterator getKey() can only be called after next() and before remove()", 802, longArray1, batchUpdateException0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException(intArray0, batchUpdateException5);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException("Jp", intArray0);
      BatchUpdateException batchUpdateException8 = new BatchUpdateException(batchUpdateException7);
      batchUpdateExceptionArray0[7] = batchUpdateException8;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 802);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getNodeName();
      iIOMetadataNode0.getChildNodes();
      iIOMetadataNode0.hasAttributes();
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("Enumeration must not be null", "Enumeration must not be null");
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.getIterator(nodeList0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) treeSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>(vector0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) priorityQueue0);
      EmptyMapIterator.emptyMapIterator();
      String string0 = "Dr9nbmY`&kk{NL:&O|";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Dr9nbmY`&kk{NL:&O|");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName((String) null);
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.getIterator(iIOMetadataNode0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) treeSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      vector0.add(iIOMetadataNode0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      IteratorUtils.isEmpty(resettableIterator0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      Hashtable<Object, IIOMetadataNode> hashtable0 = new Hashtable<Object, IIOMetadataNode>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashtable0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) zippingIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null, (-3631));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("start", "MapIterator[]");
      sQLTransientConnectionException0.printStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "MapIterator[]");
      sQLTransientConnectionException0.addSuppressed(sQLTransientException0);
      Spliterator<Throwable> spliterator0 = sQLTransientConnectionException0.spliterator();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("start", "=&,('!~fa96c|dE=");
      sQLTransientConnectionException0.spliterator();
      IteratorUtils.getIterator(sQLTransientConnectionException1);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) listIterator0, (Object) spliterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLTimeoutException> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) listIterator1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("start", "=&,('!~fa96c|dE=", sQLTransientConnectionException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Hashtable<Object, IIOMetadataNode> hashtable0 = new Hashtable<Object, IIOMetadataNode>();
      HashMap<Object, IIOMetadataNode> hashMap0 = new HashMap<Object, IIOMetadataNode>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashMap0);
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[5];
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException1;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransientConnectionException1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 1919);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", (-1), batchUpdateException0);
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) batchUpdateException0);
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) iterator0, 1L, 0L);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) boundedIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      MapIterator<SQLClientInfoException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) mapIterator0, class0);
      IteratorUtils.emptyIterator();
      Vector<IIOMetadataNode> vector1 = new Vector<IIOMetadataNode>();
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<SQLRecoverableException> allPredicate0 = new AllPredicate<SQLRecoverableException>(predicateArray0);
      OrderedMapIterator<String, Locale.Category> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, Locale.Category> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends Locale.Category>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) orderedMapIterator1, (-1212L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>(vector0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) priorityQueue0);
      MapIterator<Properties, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MapIterator<Properties, DataTruncation> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends DataTruncation>) mapIterator0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator1);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) mapIterator1, (Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) mapIterator1);
      EmptyOrderedIterator.emptyOrderedIterator();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      Properties[] propertiesArray0 = new Properties[6];
      propertiesArray0[0] = properties3;
      propertiesArray0[1] = properties3;
      propertiesArray0[2] = properties5;
      propertiesArray0[3] = properties1;
      propertiesArray0[4] = properties2;
      HashMap<Object, IIOMetadataNode> hashMap0 = new HashMap<Object, IIOMetadataNode>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashMap0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Entry does not exist: ");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLNonTransientConnectionException, SQLFeatureNotSupportedException> mapIterator2 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLFeatureNotSupportedException>) orderedMapIterator0);
      assertNotNull(mapIterator2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      IteratorUtils.arrayIterator(objectArray0);
      Object object0 = new Object();
      IteratorUtils.emptyListIterator();
      Hashtable<Locale.LanguageRange, DataTruncation> hashtable0 = new Hashtable<Locale.LanguageRange, DataTruncation>();
      EntrySetMapIterator<Locale.LanguageRange, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<Locale.LanguageRange, DataTruncation>(hashtable0);
      entrySetMapIterator0.hasNext();
      MapIterator<Locale.LanguageRange, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.LanguageRange, DataTruncation>) entrySetMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("start", "MapIterator[]");
      sQLTransientConnectionException0.printStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("MapIterator[]", "MapIterator[]");
      sQLTransientConnectionException0.addSuppressed(sQLTransientException0);
      Spliterator<Throwable> spliterator0 = sQLTransientConnectionException0.spliterator();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("start", "=&,('!~fa96c|dE=");
      sQLTransientConnectionException0.spliterator();
      IteratorUtils.getIterator(sQLTransientConnectionException1);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) listIterator0, (Object) spliterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLTimeoutException> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) listIterator1);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("start", "=&,('!~fa96c|dE=", sQLTransientConnectionException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("cI[", "start", sQLTransientConnectionException1);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException1);
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", sQLRecoverableException1);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator1 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException2);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      EmptyMapIterator.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      assertTrue(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableListIterator<LinkedHashSet<SQLFeatureNotSupportedException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      String string0 = "Z";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Z");
      iIOMetadataNode0.setUserObject(resettableListIterator0);
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) nodeListIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("]/", "]/", (Throwable) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("start", "MapIterator[]");
      sQLTransientConnectionException0.printStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "MapIterator[]");
      sQLTransientConnectionException0.addSuppressed(sQLTransientException0);
      Spliterator<Throwable> spliterator0 = sQLTransientConnectionException0.spliterator();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("start", "=&,('!~fa96c|dE=");
      sQLTransientConnectionException0.spliterator();
      IteratorUtils.getIterator(sQLTransientConnectionException1);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) listIterator0, (Object) spliterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLTimeoutException> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) listIterator1);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("start", "=&,('!~fa96c|dE=", sQLTransientConnectionException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(" NJp-", "Closure must not be null", (-2309));
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("cI[", "start", sQLTransientConnectionException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("MapIterator[]", sQLRecoverableException2);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("start", "", 858, sQLRecoverableException3);
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLRecoverableException2);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>(vector0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) priorityQueue0);
      EmptyIterator.emptyIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      SQLException sQLException0 = new SQLException("");
      SQLDataException sQLDataException0 = new SQLDataException("", sQLException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("oc", sQLException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException();
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("9n>Paw`~]VWmB):", sQLDataException0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("");
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("9n>Paw`~]VWmB):");
      sQLDataExceptionArray0[6] = sQLDataException6;
      IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) ifTransformer0, (Transformer<? super Object, ? extends String>) ifTransformer0);
      Vector<SQLTransientConnectionException> vector1 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector1);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) loopingListIterator0);
      MapIterator<SQLClientInfoException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) mapIterator0, class0);
      assertEquals(0, sQLClientInfoExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      IteratorUtils.arrayIterator(objectArray0);
      Object object0 = new Object();
      objectArray0[1] = object0;
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      DefaultEquator.defaultEquator();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 4);
      Boolean[] booleanArray0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Boolean[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector<SQLTransientException>[] vectorArray0 = (Vector<SQLTransientException>[]) Array.newInstance(Vector.class, 6);
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      vectorArray0[0] = vector0;
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      vectorArray0[1] = (Vector<SQLTransientException>) stack0;
      Stack<SQLTransientException> stack1 = new Stack<SQLTransientException>();
      vectorArray0[2] = (Vector<SQLTransientException>) stack1;
      Vector<SQLTransientException> vector1 = new Vector<SQLTransientException>();
      vectorArray0[3] = vector1;
      Stack<SQLTransientException> stack2 = new Stack<SQLTransientException>();
      vectorArray0[4] = (Vector<SQLTransientException>) stack2;
      Vector<SQLTransientException> vector2 = new Vector<SQLTransientException>();
      vectorArray0[5] = vector2;
      ObjectArrayListIterator<Vector<SQLTransientException>> objectArrayListIterator0 = new ObjectArrayListIterator<Vector<SQLTransientException>>(vectorArray0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Vector<SQLTransientException>>) objectArrayListIterator0, (Transformer<? super Vector<SQLTransientException>, String>) transformer0);
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 2);
      // Undeclared exception!
//      try { 
        FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLWarning> mapIterator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLWarning>(orderedMapIterator0);
      UniquePredicate.uniquePredicate();
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EmptyListIterator.resettableEmptyListIterator();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      SQLException[] sQLExceptionArray0 = new SQLException[5];
      SQLTransientException sQLTransientException0 = new SQLTransientException("'z0*0bBH6ngHLp", "'z0*0bBH6ngHLp");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("'z0*0bBH6ngHLp", sQLTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLInvalidAuthorizationSpecException0);
      sQLExceptionArray0[0] = (SQLException) sQLRecoverableException0;
      SQLException sQLException0 = new SQLException();
      sQLExceptionArray0[1] = sQLException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientException0);
      sQLExceptionArray0[2] = (SQLException) sQLFeatureNotSupportedException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("'z0*0bBH6ngHLp", "'z0*0bBH6ngHLp", sQLException0);
      sQLExceptionArray0[3] = (SQLException) sQLTransactionRollbackException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("'z0*0bBH6ngHLp", "'z0*0bBH6ngHLp", 1371);
      sQLExceptionArray0[4] = (SQLException) sQLTimeoutException0;
      ResettableListIterator<SQLException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLExceptionArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLException>) resettableListIterator1);
      assertEquals("[java.sql.SQLRecoverableException: java.sql.SQLInvalidAuthorizationSpecException: 'z0*0bBH6ngHLp, java.sql.SQLException, java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransientException: 'z0*0bBH6ngHLp, java.sql.SQLTransactionRollbackException: 'z0*0bBH6ngHLp, java.sql.SQLTimeoutException: 'z0*0bBH6ngHLp]", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap2 = new HashMap<String, ClientInfoStatus>();
      BiFunction<Object, Object, ClientInfoStatus> biFunction0 = (BiFunction<Object, Object, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      IteratorUtils.getIterator(clientInfoStatus0);
      EmptyIterator.emptyIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLTransactionRollbackException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("suffix may not be null", (String) null);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLNonTransientConnectionException1;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "[");
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null, "suffix may not be null");
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLNonTransientConnectionException2;
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLDataException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("org.apache.commons.collections4.collection.UnmodifiableCollection", "org.apache.commons.collections4.map.AbstractHashedMap$Values", sQLSyntaxErrorException0);
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLNonTransientConnectionException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.collection.UnmodifiableCollection", "jR;%ek@I|('J%{vlE&I", 123, sQLNonTransientConnectionException1);
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(object0, 2921, 32);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      EmptyIterator.emptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OrderedMapIterator<Integer, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLTimeoutException>) orderedMapIterator0);
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toArray(iterator0);
      ResettableListIterator<ArrayDeque<SQLSyntaxErrorException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, 123, 123);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>(vector0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", "K~)Kz8X`,\"\"e3,5");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("_AWV&!\"L#", "", sQLNonTransientConnectionException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) singletonIterator0);
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator");
      Transformer<SQLException, Boolean> transformer0 = new ConstantTransformer<SQLException, Boolean>(boolean0);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(transformer0);
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) singletonIterator0, (Predicate<? super SQLRecoverableException>) transformerPredicate0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap2 = new HashMap<String, ClientInfoStatus>();
      BiFunction<Object, Object, ClientInfoStatus> biFunction0 = (BiFunction<Object, Object, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = "IXoHa";
      IteratorUtils.getIterator((Object) null);
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      int int0 = 3242;
      int int1 = 2058;
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 2058);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2058
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      IteratorUtils.getIterator((Object) null);
      EmptyIterator.emptyIterator();
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>(vector0);
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      IteratorUtils.loopingListIterator(list0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap2 = new HashMap<String, ClientInfoStatus>();
      BiFunction<Object, Object, ClientInfoStatus> biFunction0 = (BiFunction<Object, Object, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      IteratorUtils.getIterator(clientInfoStatus0);
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      OrderedMapIterator<Integer, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, SQLTimeoutException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLTimeoutException>) orderedMapIterator0);
      OrderedMapIterator<Integer, SQLTimeoutException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLTimeoutException>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<Integer, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, SQLTimeoutException>(orderedMapIterator0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) orderedMapIterator2, 3242);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(list0);
      MapIterator<SQLClientInfoException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) mapIterator0, class0);
      List<DataTruncation> list1 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0);
      IteratorUtils.loopingListIterator(list1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(clientInfoStatus0);
      EmptyIterator.emptyIterator();
      MapIterator<SQLClientInfoException, Iterator<SQLClientInfoException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category.values();
      Iterator<?> iterator1 = IteratorUtils.getIterator(locale_Category0);
      assertNotSame(iterator1, iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>(vector0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) priorityQueue0);
      MapIterator<Properties, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Properties, DataTruncation> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends DataTruncation>) mapIterator0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator1);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) mapIterator1, (Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) mapIterator1);
      EmptyOrderedIterator.emptyOrderedIterator();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      Properties[] propertiesArray0 = new Properties[6];
      propertiesArray0[0] = properties3;
      propertiesArray0[1] = properties3;
      propertiesArray0[2] = properties5;
      propertiesArray0[3] = properties1;
      propertiesArray0[4] = properties2;
      propertiesArray0[5] = properties5;
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0, 3);
      assertEquals(3, objectArrayIterator0.getStartIndex());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLWarning> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLWarning>) orderedMapIterator0);
      IteratorUtils.size(mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Object object0 = new Object();
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLWarning> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLWarning>) orderedMapIterator0);
      IteratorUtils.size(mapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("9B[4{>4`H", "9B[4{>4`H", 0);
      int int0 = 317;
      DataTruncation dataTruncation0 = new DataTruncation(317, false, false, (-1), (-1236), sQLWarning0);
      ConstantTransformer<Object, DataTruncation> constantTransformer0 = new ConstantTransformer<Object, DataTruncation>(dataTruncation0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.objectGraphIterator(sQLWarning0, (Transformer<? super SQLWarning, ? extends SQLWarning>) constantTransformer0);
      MapIterator<Properties, SQLRecoverableException> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asIterable((Iterator<? extends Properties>) mapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iterator0, (-1236));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      int int0 = 1205;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("iteratr", "iteratr", 1205);
      sQLIntegrityConstraintViolationException0.getSuppressed();
      vector0.add(sQLIntegrityConstraintViolationException0);
      vector0.add(sQLIntegrityConstraintViolationException0);
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) vector0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      SQLDataException sQLDataException0 = new SQLDataException("iteratr", sQLIntegrityConstraintViolationException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>(vector0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) priorityQueue0);
      EmptyIterator.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 125, (Throwable) null);
      EqualPredicate.equalPredicate((SQLException) sQLNonTransientConnectionException0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) hashSet0);
      ResettableIterator<SQLClientInfoException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) hashSet0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator1);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) iterator0, class0);
      assertEquals(0, sQLClientInfoExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLException>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) iterator0);
      Iterator<DataTruncation> iterator1 = EmptyIterator.emptyIterator();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) iterator1);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap1.put("EB$X:](K8vko*", clientInfoStatus0);
      HashMap<String, ClientInfoStatus> hashMap2 = new HashMap<String, ClientInfoStatus>();
      BiFunction<Object, Object, ClientInfoStatus> biFunction0 = (BiFunction<Object, Object, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "EB$X:](K8vko*", 651, hashMap0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", "8B)FEC", sQLClientInfoException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) singletonListIterator0);
      EmptyMapIterator.emptyMapIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException0;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("G*;4t", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("G*;4t", "G*;4t", 1);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException2;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 1, 1);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) objectArrayIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      int int0 = (-2624);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (-2624));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantTransformer.nullTransformer();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Predicate<Object>>) null, (-2844));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (-2624));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((String) null, "Z*gD#Z!WpP0T9SM", 0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("Z*gD#Z!WpP0T9SM", "KpI|u");
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("Z*gD#Z!WpP0T9SM", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("", "");
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException5;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      assertFalse(resettableListIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Boolean, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Boolean, SQLSyntaxErrorException>(orderedMapIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractOrderedMapIteratorDecorator0.forEachRemaining(consumer0);
      IteratorUtils.pushbackIterator((Iterator<? extends Boolean>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 3);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("transformer may not be null", "transformer may not be null");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Array class must not be null", sQLNonTransientException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, false);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) singletonIterator0;
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) orderedIterator0;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":&!t{;>q~l=&1", "{mP4GRm*''mg5!EAk", sQLFeatureNotSupportedException0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", mockThrowable0);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("transformer may not be null", "org.apache.commons.collections4.map.AbstractLinkedMap");
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("", sQLFeatureNotSupportedException0);
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("(6T{", sQLNonTransientException0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap1.put("EB$X:](K8vko*", clientInfoStatus1);
      HashMap<String, ClientInfoStatus> hashMap2 = new HashMap<String, ClientInfoStatus>();
      BiFunction<Object, Object, ClientInfoStatus> biFunction0 = (BiFunction<Object, Object, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.computeIfPresent("", biFunction0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("EB$X:](K8vko*", "IXoHa", hashMap1);
      IteratorUtils.getIterator(clientInfoStatus0);
      ResettableIterator<Predicate<SQLException>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) null, 124);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>(vector0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) priorityQueue0);
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 125, (Throwable) null);
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLNonTransientConnectionException0);
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) vector0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      IteratorUtils.emptyListIterator();
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator((SQLNonTransientException[]) sQLDataExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayList<SQLTransientConnectionException>[] arrayListArray0 = (ArrayList<SQLTransientConnectionException>[]) Array.newInstance(ArrayList.class, 0);
      ResettableListIterator<ArrayList<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayListArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, 351, 351);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableListIterator0);
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      TreeSet<SQLTimeoutException> treeSet1 = new TreeSet<SQLTimeoutException>((SortedSet<SQLTimeoutException>) treeSet0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((SortedSet<?>) treeSet1);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) priorityQueue0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableListIterator0);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLWarning> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLWarning>) orderedMapIterator0);
      IteratorUtils.size(mapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("9B[4{>4`H", "9B[4{>4`H", 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2060;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 18;
      intArray0[4] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 18, intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("9B[4{>4`H", "prefix may not be null", (-871), intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("prefix may not be null", "iterator");
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0, sQLInvalidAuthorizationSpecException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "prefix may not be null");
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      PredicateTransformer<String> predicateTransformer1 = new PredicateTransformer<String>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform("prefix may not be null");
      ConstantTransformer<SQLException, Boolean> constantTransformer0 = new ConstantTransformer<SQLException, Boolean>(boolean0);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(constantTransformer0);
      Predicate<SQLRecoverableException> predicate1 = EqualPredicate.equalPredicate(sQLRecoverableException0);
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) singletonIterator0, (Predicate<? super SQLRecoverableException>) predicate1);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0, 1571);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) resettableListIterator0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      OrPredicate<SQLRecoverableException> orPredicate0 = new OrPredicate<SQLRecoverableException>(uniquePredicate0, uniquePredicate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 1571);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableListIterator0);
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      IteratorUtils.isEmpty(resettableIterator0);
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.singletonIterator(properties0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator1);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null, false);
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Object) singletonIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1840, (-525));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      IteratorUtils.arrayIterator(objectArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Object object0 = new Object();
      Properties properties0 = new Properties();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      DefaultEquator.defaultEquator();
      Hashtable<Object, IIOMetadataNode> hashtable0 = new Hashtable<Object, IIOMetadataNode>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashtable0);
      MapIterator<SQLInvalidAuthorizationSpecException, FilterInputStream> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) mapIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("start", "MapIterator[]");
      sQLTransientConnectionException0.printStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "MapIterator[]");
      sQLTransientConnectionException0.addSuppressed(sQLTransientException0);
      Spliterator<Throwable> spliterator0 = sQLTransientConnectionException0.spliterator();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("start", "=&,('!~fa96c|dE=");
      sQLTransientConnectionException0.spliterator();
      IteratorUtils.getIterator(sQLTransientConnectionException1);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) listIterator0, (Object) spliterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLTimeoutException> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) listIterator1);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("start", "=&,('!~fa96c|dE=", sQLTransientConnectionException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(" NJp-", "Closure must not be null", (-2309));
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("cI[", "start", sQLTransientConnectionException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("MapIterator[]", sQLRecoverableException2);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("InstantiateTransformer: InstantiationException", "MapIterator[]");
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("=/Klzk?@yEiE#EW&uH", sQLRecoverableException2);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("=/Klzk?@yEiE#EW&uH", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, (-2309));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) resettableListIterator0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      OrPredicate<SQLRecoverableException> orPredicate0 = new OrPredicate<SQLRecoverableException>(uniquePredicate0, uniquePredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) orPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Transformer<BatchUpdateException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<BatchUpdateException>) mapIterator0, (Transformer<? super BatchUpdateException, String>) transformer0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 8);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLDataException>(orderedMapIterator0);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Boolean, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Boolean, SQLSyntaxErrorException>(orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends Boolean>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 3);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("transformer may not be null", "transformer may not be null");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Array class must not be null", sQLNonTransientException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, false);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) singletonIterator0;
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) orderedIterator0;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Array class must not be null", "'", 0, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException0;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) objectArrayIterator0;
      Iterator<SQLException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, 7115);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Node must not be null");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("Node must not be null");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("Node must not be null");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("Node must not be null");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      int int0 = (-1248);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, (-1248));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLException sQLException0 = new SQLException((String) null, "");
      SQLException sQLException1 = new SQLException(sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "", 150, sQLException1);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "Transformer must not be null", sQLException1);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", "b9S[5PR\"{{`]\"(Rl", 150);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("{x4V", "");
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException(sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 150, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLWarning> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLWarning>) orderedMapIterator0);
      IteratorUtils.size(mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLDataException sQLDataException0 = new SQLDataException("", "Qn!\"CR]Rwj`THa6Ph");
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      int int0 = 5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0, 5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(vector0, defaultEquator0);
      IteratorUtils.find((Iterator<PriorityQueue<SQLFeatureNotSupportedException>>) null, (Predicate<? super PriorityQueue<SQLFeatureNotSupportedException>>) equalPredicate0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<?>) null, (Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      Object object0 = new Object();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0, defaultEquator0);
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      SingletonIterator<PriorityQueue<SQLFeatureNotSupportedException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLFeatureNotSupportedException>>(priorityQueue0, false);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<PriorityQueue<SQLFeatureNotSupportedException>>) singletonIterator0, (Predicate<? super PriorityQueue<SQLFeatureNotSupportedException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Stack<SQLTimeoutException>();
      EmptyIterator.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLDataException sQLDataException0 = new SQLDataException("jsHU(wo+S?bGch", sQLRecoverableException0);
      SQLDataException sQLDataException1 = new SQLDataException("jsHU(wo+S?bGch");
      SQLDataException sQLDataException2 = new SQLDataException();
      SQLDataException sQLDataException3 = new SQLDataException("InstantiateTransformer: Constructor must be public", sQLDataException0);
      SQLDataException sQLDataException4 = new SQLDataException("SNTn/");
      SQLDataException sQLDataException5 = new SQLDataException("E7M$^q7v>?L!B|dpu");
      sQLDataException1.spliterator();
      SQLDataException sQLDataException6 = new SQLDataException();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException1;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      NullPredicate.nullPredicate();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("SNTn/", sQLDataException4);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[", "Predicate must not be null", 225, sQLRecoverableException0);
      EmptyListIterator.resettableEmptyListIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      FalsePredicate.falsePredicate();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      IteratorUtils.getIterator(hashMap1);
      EmptyIterator.emptyIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Properties properties0 = new Properties();
      MapIterator<SQLClientInfoException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) mapIterator0, class0);
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      Properties properties0 = new Properties();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Transformer<BatchUpdateException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<BatchUpdateException>) mapIterator0, (Transformer<? super BatchUpdateException, String>) transformer0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      int int0 = 952;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) transformer0, 952);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      singletonIterator0.reset();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      IteratorUtils.size(iterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, (-1058));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLWarning>) orderedMapIterator0);
      Object object0 = new Object();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) null, (-1736L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MapIterator<SQLDataException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) mapIterator0);
      IteratorUtils.skippingIterator(iterator0, 0L);
      int int0 = 2729;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 2729);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      EmptyIterator.emptyIterator();
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      EmptyIterator.emptyIterator();
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("Node must not be null", clientInfoStatus0);
      BiFunction<Object, Object, ClientInfoStatus> biFunction0 = (BiFunction<Object, Object, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.computeIfPresent("Node must not be null", biFunction0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Node must not be null", "\"Nq=Sqk\"UcjXB%(y.", hashMap0);
      IteratorUtils.getIterator(sQLClientInfoException0);
      ResettableIterator<Predicate<SQLException>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Transformer must not be null");
      Hashtable<Object, IIOMetadataNode> hashtable0 = new Hashtable<Object, IIOMetadataNode>();
      Transformer<Object, IIOMetadataNode> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashtable0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      IteratorUtils.getIterator(clientInfoStatus0);
      EmptyIterator.emptyIterator();
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      int[] intArray0 = new int[2];
      intArray0[0] = (-646);
      intArray0[1] = (-646);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("N=o", "N=o", (-646), intArray0, sQLRecoverableException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, batchUpdateException0);
      sQLClientInfoException0.spliterator();
      IteratorUtils.singletonIterator(sQLClientInfoException0);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "N=o", 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      IteratorUtils.emptyIterator();
      Vector<IIOMetadataNode> vector1 = new Vector<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object[]) null, (-760), (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = null;
      int int0 = 427;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, (-1716), 427);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        singletonListIterator0.remove();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.SingletonListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingletonIterator<Class<Object>> singletonIterator0 = new SingletonIterator<Class<Object>>(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Class<Object>>) singletonIterator0, 3243);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 3242
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "Transformer must not be null", 24);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "Iterator contains no elements";
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "Iterator contains no elements", 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("Array class must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The predicate and transformer map must not be null");
      sQLTimeoutException0.printStackTrace();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 6);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableListIterator0);
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      TreeSet<SQLTimeoutException> treeSet1 = new TreeSet<SQLTimeoutException>((SortedSet<SQLTimeoutException>) treeSet0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((SortedSet<?>) treeSet1);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) priorityQueue0);
      iteratorArray0[0] = iterator0;
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator0);
      iteratorArray0[1] = (Iterator<Properties>) zippingIterator0;
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[2] = (Iterator<Properties>) orderedIterator0;
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      iteratorArray0[3] = (Iterator<Properties>) objectArrayListIterator0;
      Properties[] propertiesArray1 = new Properties[5];
      propertiesArray1[0] = properties2;
      propertiesArray1[1] = properties2;
      propertiesArray1[2] = properties1;
      propertiesArray1[3] = properties0;
      propertiesArray1[4] = properties0;
      int int0 = 1239;
      ObjectArrayIterator<Properties> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray1, 1239);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeName();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      iIOMetadataNode0.hasAttributes();
      IteratorUtils.nodeListIterator(nodeList0);
      ResettableListIterator<HashMap<ArrayList, EnumSet>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.getIterator(resettableListIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) treeSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Object object0 = new Object();
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeName();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      iIOMetadataNode0.hasAttributes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyListIterator();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) treeSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableListIterator<ArrayDeque<SQLSyntaxErrorException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLWarning>) orderedMapIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      IteratorUtils.getIterator(hashMap0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      ArrayIterator<Integer> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<Integer>(clientInfoStatus0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      IteratorUtils.getIterator(hashMap1);
      EmptyIterator.emptyIterator();
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Transformer<BatchUpdateException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<BatchUpdateException>) mapIterator0, (Transformer<? super BatchUpdateException, String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) transformer0, 952);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>(vector0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) priorityQueue0);
      EmptyIterator.emptyIterator();
      Throwable throwable0 = null;
      String string0 = "";
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) stack0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLWarning>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<?>) resettableListIterator0);
      IteratorUtils.emptyMapIterator();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "tyn1^z.h(\"m,}@>o]";
      stringArray0[1] = "tYiK";
      stringArray0[2] = "`sjVW-\tI\"L";
      stringArray0[3] = "ListIterator must not be null";
      stringArray0[4] = "1g((W%VTG3UO";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(stringArray0, 680);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 100);
      ConstantTransformer<SQLException, SQLRecoverableException> constantTransformer0 = new ConstantTransformer<SQLException, SQLRecoverableException>(sQLRecoverableException0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) constantTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) resettableIterator0, 2067);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2058
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("9r-\nAs%4&x{JP%Vp", "org.apache.commons.collections4.functors.ComparatorPredicate$Criterion", 1358);
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.functors.ComparatorPredicate$Criterion", "9r-\nAs%4&x{JP%Vp", sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning0);
      Transformer<SQLTransientConnectionException, SQLTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) iterator0);
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientException>) vector0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 9);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>(stack0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) arrayDeque0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, 532, (-6370));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(object0, 32, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      stack0.ensureCapacity(128);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) stack0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Properties>) resettableListIterator0, (Predicate<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) predicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }
}
