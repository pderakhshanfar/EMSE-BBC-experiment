/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:48:43 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(stack0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Iterator<? extends SQLSyntaxErrorException>) loopingIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedHashSet<SQLSyntaxErrorException> linkedHashSet0 = new LinkedHashSet<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(linkedHashSet0);
      LoopingIterator<SQLSyntaxErrorException> loopingIterator1 = new LoopingIterator<SQLSyntaxErrorException>(linkedHashSet0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) loopingIterator0, (Iterator<? extends SQLSyntaxErrorException>) loopingIterator1, (Iterator<? extends SQLSyntaxErrorException>) loopingIterator1);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) objectArrayListIterator0, (Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) listIterator0, (Iterator<? extends DataTruncation>) objectArrayIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PriorityQueue<Properties> priorityQueue0 = new PriorityQueue<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(priorityQueue0);
      Properties[] propertiesArray0 = new Properties[3];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0);
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) loopingIterator0, (Iterator<? extends Properties>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Locale.FilteringMode>) objectArrayListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableListIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) objectArrayListIterator0, class0);
      assertEquals(7, sQLRecoverableExceptionArray1.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "Collection must not be null", mockThrowable0);
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLRecoverableException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      SkippingIterator<SQLNonTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, (long) 32);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=]~59f&;j/*>", "}", (-1781));
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) listIterator0);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<Properties>) singletonIterator0;
      iteratorArray0[1] = (Iterator<Properties>) singletonIterator0;
      iteratorArray0[2] = (Iterator<Properties>) singletonIterator0;
      iteratorArray0[3] = (Iterator<Properties>) singletonIterator0;
      iteratorArray0[4] = (Iterator<Properties>) singletonIterator0;
      iteratorArray0[5] = (Iterator<Properties>) singletonIterator0;
      iteratorArray0[6] = (Iterator<Properties>) singletonIterator0;
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 3);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) loopingIterator0;
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) loopingIterator0, (Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[0], (Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) zippingIterator0;
      iteratorArray0[2] = iteratorArray0[1];
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OrderedMapIterator<ArrayList<SQLSyntaxErrorException>, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<Object> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<?>) orderedMapIterator0, 1774L, 1022L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", (Map<String, ClientInfoStatus>) null);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      Transformer<SQLClientInfoException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "", "", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("$8Aqtr5<RFNvG!N", "#5S");
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      Transformer<SQLException, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<SQLNonTransientException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super SQLNonTransientException, Boolean>) transformer0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("");
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(stack0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("u9Qj", "u9Qj", (-83));
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Predicate<? super SQLFeatureNotSupportedException>) transformerPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTransientException>) null, 573);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) null, 3223L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Locale.LanguageRange[]) null, 1305, (-2642));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Vector<Integer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 8, 8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1577));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((ServiceLoader<SQLRecoverableException>[]) null, (-943));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(instanceofPredicateArray0, 2719);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((String[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("_Mn$U|]CMQUDxe", "Array class must not be null", (Map<String, ClientInfoStatus>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0, 10, (-1521));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 3);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("U^V|N\u0002}G3k\">>", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "Iterator must not be null", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, String>) transformer0, "", "Max parameter must not be negative.", "<BY_6i]ZzPT");
      assertEquals("Max parameter must not be negative.<BY_6i]ZzPT", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ArrayList<HashMap>>) null, (Predicate<? super ArrayList<HashMap>>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MapIterator<Integer, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) mapIterator0, (-472L), 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(".@kxwDfS(0", ".@kxwDfS(0", (Map<String, ClientInfoStatus>) null);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, ".@kxwDfS(0", "", ".@kxwDfS(0");
      assertEquals("null.@kxwDfS(0", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Transformer<SQLNonTransientException, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<String> class0 = String.class;
      Factory<String> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      FactoryTransformer<String, String> factoryTransformer0 = new FactoryTransformer<String, String>(factory0);
      String[] stringArray0 = new String[8];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) objectArrayListIterator0, (Transformer<? super String, String>) factoryTransformer0, stringArray0[5], "Array class must not be null", stringArray0[2]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (Map<String, ClientInfoStatus>) null);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, String>) null, (String) null, (String) null, "/lDNA'\";|");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      int int0 = IteratorUtils.size(orderedIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Properties properties1 = IteratorUtils.get((Iterator<Properties>) singletonIterator0, 0);
      assertEquals(0, properties1.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Properties>) singletonIterator0, 198);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 197
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Predicate<Object>>) resettableIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>();
      ArrayList<SQLWarning>[] arrayListArray0 = (ArrayList<SQLWarning>[]) Array.newInstance(ArrayList.class, 4);
      arrayListArray0[0] = arrayList0;
      ResettableIterator<ArrayList<SQLWarning>> resettableIterator0 = IteratorUtils.arrayIterator(arrayListArray0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayList<SQLWarning>>) resettableIterator0, (Predicate<? super ArrayList<SQLWarning>>) notPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>();
      ArrayList<SQLWarning>[] arrayListArray0 = (ArrayList<SQLWarning>[]) Array.newInstance(ArrayList.class, 1);
      arrayListArray0[0] = arrayList0;
      ResettableIterator<ArrayList<SQLWarning>> resettableIterator0 = IteratorUtils.arrayIterator(arrayListArray0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayList<SQLWarning>>) resettableIterator0, (Predicate<? super ArrayList<SQLWarning>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      ArrayList<SQLWarning>[] arrayListArray0 = (ArrayList<SQLWarning>[]) Array.newInstance(ArrayList.class, 6);
      ResettableIterator<ArrayList<SQLWarning>> resettableIterator0 = IteratorUtils.arrayIterator(arrayListArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<ArrayList<SQLWarning>>) resettableIterator0, (Predicate<? super ArrayList<SQLWarning>>) transformerPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Transformer must return an instanceof Boolean, it was a null object
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<ArrayList<SQLWarning>>) null, (Predicate<? super ArrayList<SQLWarning>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) singletonIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Predicate<? super SQLFeatureNotSupportedException>) allPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Iterator<ServiceLoader<SQLDataException>> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super ServiceLoader<SQLDataException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("The transformer array must not contain a null transformer, index ");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLWarning0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SQLRecoverableException sQLRecoverableException1 = IteratorUtils.find((Iterator<SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertNotNull(sQLRecoverableException1);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      SQLRecoverableException sQLRecoverableException0 = IteratorUtils.find((Iterator<SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate0);
      assertNull(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) orderedMapIterator0, (Predicate<? super SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("^U0", "^U0");
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      IteratorUtils.find((Iterator<SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 9);
      ResettableIterator<ArrayDeque<StringTokenizer>> resettableIterator0 = IteratorUtils.arrayIterator(arrayDequeArray0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(61, closure0);
      IteratorUtils.apply((Iterator<ArrayDeque<StringTokenizer>>) resettableIterator0, (Closure<? super ArrayDeque<StringTokenizer>>) forClosure0);
      assertEquals(61, forClosure0.getCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedMapIterator<Vector<InstanceofPredicate>, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Vector<InstanceofPredicate>, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Vector<InstanceofPredicate>, Integer>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Vector<InstanceofPredicate>>) abstractOrderedMapIteratorDecorator0, (Closure<? super Vector<InstanceofPredicate>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>(iIOMetadataNode0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      IteratorUtils.apply((Iterator<Vector<InstanceofPredicate>>) null, (Closure<? super Vector<InstanceofPredicate>>) closure0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("O$S|r@hW</+f'", "A", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) reverseListIterator0, (-1994));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) null, 166);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTimeoutException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, Class<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, class0);
      assertEquals(0, sQLInvalidAuthorizationSpecExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(stack0);
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) loopingIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterable<SQLFeatureNotSupportedException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends Closure<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterable<Object> iterable0 = IteratorUtils.asIterable((Iterator<?>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null, (Collection<? super String>) priorityQueue0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(stack0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) loopingIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) stack0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) objectArrayIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("transformer may not be null");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) stack0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLFeatureNotSupportedException0, (Equator<SQLException>) defaultEquator0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) instanceofPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[0], (Predicate<? super SQLSyntaxErrorException>) uniquePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) loopingIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) null, (Transformer<? super DataTruncation, ? extends SQLFeatureNotSupportedException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashMap0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(arrayDeque0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) loopingIterator0, (Transformer<? super DataTruncation, ? extends SQLFeatureNotSupportedException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<Locale.FilteringMode>) null, 980L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 21, 21);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("underlying nodeList has no more elements");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0, 1352);
      assertFalse(list0.contains(1352));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 59, 59);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(instanceofPredicateArray0, (-1), (-1686));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedMapIterator<String, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) orderedMapIterator0, (Iterator<? extends String>) orderedMapIterator0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) zippingIterator0, 3503);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Object, IIOMetadataNode> hashMap0 = new HashMap<Object, IIOMetadataNode>();
      Transformer<Object, IIOMetadataNode> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashMap0);
      IfTransformer<IIOMetadataNode, IIOMetadataNode> ifTransformer0 = new IfTransformer<IIOMetadataNode, IIOMetadataNode>((Predicate<? super IIOMetadataNode>) null, transformer0, transformer0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator((IIOMetadataNode) null, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) ifTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OrderedMapIterator<DataTruncation, ArrayDeque<SQLTransientConnectionException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<SQLWarning> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) orderedMapIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Locale.LanguageRange>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) predicate0, 123, 23);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(integerArray0, (-591));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      boolean boolean0 = IteratorUtils.contains((Iterator<ArrayDeque<SQLWarning>>) null, (Object) singletonIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Transformer<Object, InstanceofPredicate> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) transformer0, (-4586));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (Map<String, ClientInfoStatus>) null);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedIterator<Vector<InstanceofPredicate>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) orderedIterator0, 1099);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 0);
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) linkedList0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
