/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 03:22:50 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) objectArrayListIterator0, 4701);
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(list0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) objectArrayListIterator0, (Iterator<? extends SQLClientInfoException>) objectArrayListIterator0, (Iterator<? extends SQLClientInfoException>) reverseListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) orderedIterator0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>) iterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Iterator<Class<SQLRecoverableException>> iterator0 = EmptyIterator.emptyIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super Class<SQLRecoverableException>, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableListIterator0, 2412);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) objectArrayIterator0, class0);
      assertNotSame(sQLNonTransientConnectionExceptionArray0, sQLNonTransientConnectionExceptionArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<DataTruncation, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(orderedMapIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIteratorWrapper0;
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) listIteratorWrapper0, 0L);
      iteratorArray0[1] = (Iterator<DataTruncation>) boundedIterator0;
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) iteratorArray0[1], (Iterator<? extends DataTruncation>) listIteratorWrapper0);
      iteratorArray0[2] = (Iterator<DataTruncation>) zippingIterator0;
      Iterator<SQLWarning> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) priorityQueue0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) resettableIterator0;
      iteratorArray0[1] = (Iterator<InstanceofPredicate>) resettableIterator0;
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) resettableIterator0;
      iteratorArray0[3] = (Iterator<InstanceofPredicate>) resettableIterator0;
      iteratorArray0[4] = (Iterator<InstanceofPredicate>) resettableIterator0;
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 0);
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0, 0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashSet<Object>[] hashSetArray0 = (HashSet<Object>[]) Array.newInstance(HashSet.class, 4);
      ResettableIterator<HashSet<Object>> resettableIterator0 = IteratorUtils.arrayIterator(hashSetArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Iterator<EnumSet<Locale.Category>>[] iteratorArray0 = (Iterator<EnumSet<Locale.Category>>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Object>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(";%D\"_Kxb:L@3_", ";%D\"_Kxb:L@3_");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLIntegrityConstraintViolationException0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLRecoverableException0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) singletonIterator0);
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(list0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%");
      arrayList0.add(iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTransientException>) null, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Factory<SQLTimeoutException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLTransientException, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<SQLTransientException, SQLTimeoutException>(factory0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) factoryTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.size(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      arrayList0.add(sQLFeatureNotSupportedException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayList0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Properties properties0 = new Properties();
      Stack<Properties> stack0 = new Stack<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(stack0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("^y/Xbd\"4l+BO9!8M{");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLFeatureNotSupportedException0);
      stack0.add(properties0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Properties>) loopingListIterator0, (Predicate<? super Properties>) predicate0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTransientConnectionException>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator0, (Iterator<? extends SQLNonTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 3);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) iteratorArray0[0], (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OrderedMapIterator<SQLDataException, HashMap<SQLNonTransientConnectionException, IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, 1498L, (-3118L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) null, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null, 5, 32);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayDeque<Locale.Category>[] arrayDequeArray0 = (ArrayDeque<Locale.Category>[]) Array.newInstance(ArrayDeque.class, 3);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(arrayDequeArray0, 0, (-3287));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Transformer<InstanceofPredicate, DataTruncation>[]) null, 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 1863);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 3534, 3534);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedMapIterator<Object, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 2598);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Stack<Integer>[] stackArray0 = (Stack<Integer>[]) Array.newInstance(Stack.class, 3);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stackArray0, 916);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-438), (-438));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) linkedHashSet0, 8);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Iterator<Class<SQLRecoverableException>> iterator0 = EmptyIterator.emptyIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("prefix may not be null");
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super Class<SQLRecoverableException>, String>) constantTransformer0, "prefix may not be null", "Estimated size must be greater than 0", "Gs%sC??o85DoA|3J-2C");
      assertEquals("Estimated size must be greater than 0Gs%sC??o85DoA|3J-2C", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResettableIterator<ArrayDeque<Iterator<Stack<Integer>>>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      ResettableIterator<Class<SQLNonTransientException>> resettableIterator0 = IteratorUtils.singletonIterator(class0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("prefix may not be null");
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SingletonListIterator<Class<SQLRecoverableException>> singletonListIterator0 = new SingletonListIterator<Class<SQLRecoverableException>>(class0);
      String string0 = IteratorUtils.toString((Iterator<Class<SQLRecoverableException>>) singletonListIterator0, (Transformer<? super Class<SQLRecoverableException>, String>) constantTransformer0, "NodeList must not be null", "Closure must not be null", "NodeList must not be null");
      assertEquals("Closure must not be nullprefix may not be nullNodeList must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("p63X&f#ak`\"P");
      String string0 = IteratorUtils.toString((Iterator<Class<SQLRecoverableException>>) null, (Transformer<? super Class<SQLRecoverableException>, String>) constantTransformer0, "Ae%n^R|K+)<o", "il`a.44c^yT Nvna", "il`a.44c^yT Nvna");
      assertEquals("il`a.44c^yT Nvnail`a.44c^yT Nvna", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Iterator<Class<SQLRecoverableException>> iterator0 = EmptyIterator.emptyIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("Gs%sC??o85DoA|3J-2C");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Class<SQLRecoverableException>, String>) constantTransformer0, "Estimated size must be greater than 0", "!7'FXa^{yE`Fv", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Class<SQLRecoverableException>>) null, (Transformer<? super Class<SQLRecoverableException>, String>) transformer0, "", (String) null, ";3Q8|Ein&7");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Closure<SQLTransientException>>) null, (Transformer<? super Closure<SQLTransientException>, String>) constantTransformer0, (String) null, (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLFeatureNotSupportedException0, true);
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(";%D\"_Kxb:L@3_", ";%D\"_Kxb:L@3_");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLIntegrityConstraintViolationException0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLRecoverableException0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) singletonIterator0);
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(list0);
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)IteratorUtils.get((Iterator<Object>) loopingListIterator0, 1);
      assertEquals(0, sQLRecoverableException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("6)Q{O", "");
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) singletonIterator0, 128);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 127
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      boolean boolean0 = IteratorUtils.isEmpty(objectArrayListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[8];
      propertiesArray0[0] = properties0;
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0, 0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) properties0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Properties>) objectArrayIterator0, (Predicate<? super Properties>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) instanceofPredicateArray0[0]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(stack0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicateArray0[0]);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Properties>) loopingListIterator0, (Predicate<? super Properties>) nullIsTruePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, sQLClientInfoException0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) null, (Object) sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLFeatureNotSupportedException0, true);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Object object0 = IteratorUtils.find((Iterator<Object>) singletonIterator0, (Predicate<? super Object>) predicate0);
      assertNotNull(object0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(835, false, true, 835, 61);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(dataTruncation0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLSyntaxErrorException0, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLInvalidAuthorizationSpecException0, (Equator<Object>) defaultEquator0);
      IteratorUtils.find((Iterator<Object>) singletonIterator0, (Predicate<? super Object>) predicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Transformer<Object, BatchUpdateException> transformer0 = IteratorUtils.find((Iterator<Transformer<Object, BatchUpdateException>>) null, (Predicate<? super Transformer<Object, BatchUpdateException>>) predicate0);
      assertNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedMapIterator<SQLDataException, HashMap<SQLNonTransientConnectionException, IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(orderedMapIterator0, true);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Object>) singletonIterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(properties0, false);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Object>) singletonIterator0, (Predicate<? super Object>) anyPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<Vector<ServiceLoader>>) null, (Closure<? super Vector<ServiceLoader>>) closure0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("6]8&", "6]8&", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<Object, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) objectArrayIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) null, 2016);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      DataTruncation[] dataTruncationArray0 = IteratorUtils.toArray((Iterator<? extends DataTruncation>) orderedMapIterator0, class0);
      assertEquals(0, dataTruncationArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(stack0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) linkedHashSet0);
      Iterable<SQLFeatureNotSupportedException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Enumeration<Properties> enumeration0 = (Enumeration<Properties>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) loopingListIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLNonTransientConnectionException>(mapIterator0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) abstractMapIteratorDecorator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(vector0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<SQLClientInfoException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLClientInfoException>>) priorityQueue0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) reverseListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("InstantiateTransformer: InstantiationException", hashtable0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) loopingListIterator0, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLNonTransientException0, (Equator<SQLException>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) equalPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      OrderedMapIterator<SQLDataException, HashMap<SQLNonTransientConnectionException, IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<SQLDataException> instantiateFactory0 = new InstantiateFactory<SQLDataException>(class0, classArray0, iteratorArray0);
      Transformer<SQLException, SQLDataException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) instantiateFactory0);
      TransformedPredicate<SQLDataException> transformedPredicate0 = new TransformedPredicate<SQLDataException>(transformer0, (Predicate<? super SQLDataException>) null);
      Iterator<SQLDataException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Predicate<? super SQLDataException>) transformedPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(4330, true, true, (-251), 33);
      ConstantTransformer<SQLException, DataTruncation> constantTransformer0 = new ConstantTransformer<SQLException, DataTruncation>(dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, ? extends DataTruncation>) constantTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("1sStG$l<{vm)(G[`aE");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation((-625), true, true, (-625), (-625), sQLTimeoutException0);
      ConstantTransformer<SQLException, DataTruncation> constantTransformer0 = new ConstantTransformer<SQLException, DataTruncation>(dataTruncation0);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends DataTruncation>) constantTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) objectArrayListIterator0, 4701);
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(list0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) objectArrayListIterator0, (Iterator<? extends SQLClientInfoException>) reverseListIterator0, (Iterator<? extends SQLClientInfoException>) reverseListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, LinkedHashSet<LinkedHashSet>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) orderedMapIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MapIterator<Properties, LinkedList<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) mapIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<Properties>) listIterator0, (Transformer<? super Properties, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("' does not exist");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 4857, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator((Object[]) instanceofPredicateArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) objectArrayListIterator0, (Iterator<? extends SQLClientInfoException>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-1221), chainedClosure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, forClosure0, chainedClosure0);
      IteratorUtils.apply((Iterator<Vector<ServiceLoader>>) iterator0, (Closure<? super Vector<ServiceLoader>>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MapIterator<Properties, LinkedList<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Properties, LinkedList<BatchUpdateException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((String[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, (-1097), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException>[] linkedHashSetArray0 = (LinkedHashSet<SQLNonTransientConnectionException>[]) Array.newInstance(LinkedHashSet.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(linkedHashSetArray0, 0, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("remove() can not be called before calling next()", "remove() can not be called before calling next()", 0);
      SQLDataException sQLDataException0 = new SQLDataException("^y/Xbd\"4l+BO9!8M{", sQLTransientException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, false);
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) singletonIterator0, (long) 0, (long) 0);
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) boundedIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.objectGraphIterator((EnumSet<Locale.Category>) null, (Transformer<? super EnumSet<Locale.Category>, ? extends EnumSet<Locale.Category>>) null);
      Iterable<EnumSet<Locale.Category>> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends EnumSet<Locale.Category>>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("]", "]", (-1035));
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(4, false, false, 4, 0, sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, LinkedHashSet<LinkedHashSet>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 100, 75);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 7);
      ResettableListIterator<Class<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MapIterator<EnumSet<Locale.Category>, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      boolean boolean0 = IteratorUtils.contains((Iterator<EnumSet<Locale.Category>>) mapIterator0, (Object) sQLInvalidAuthorizationSpecException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, EnumSet<Locale.Category>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0);
      assertTrue(listIterator0.hasNext());
  }
}
