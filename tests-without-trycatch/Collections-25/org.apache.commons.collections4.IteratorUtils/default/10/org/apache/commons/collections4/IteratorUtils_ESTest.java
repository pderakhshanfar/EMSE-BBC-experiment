/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:44:17 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("");
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 9);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[2] = class2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      classArray0[3] = class3;
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      classArray0[4] = class4;
      Class<IIOMetadataNode> class5 = IIOMetadataNode.class;
      classArray0[5] = class5;
      Class<IIOMetadataNode> class6 = IIOMetadataNode.class;
      classArray0[7] = class6;
      Class<IIOMetadataNode> class7 = IIOMetadataNode.class;
      classArray0[8] = class7;
      InvokerTransformer<String, String> invokerTransformer0 = new InvokerTransformer<String, String>((String) null, classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) invokerTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("B5oX");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("B5oX");
      SQLWarning sQLWarning0 = new SQLWarning("Estimated size must be greater than 0", "B5oX");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("B5oX", "B5oX", sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException1, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 16);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLNonTransientConnectionException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "");
      IteratorUtils.filteredIterator((Iterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator("");
      int int0 = 0;
      int int1 = (-927);
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("");
      Comparator<String> comparator0 = null;
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Hashtable<DataTruncation, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<DataTruncation, SQLIntegrityConstraintViolationException>();
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(19, false, false, 94, 19);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(94, false, false, 19, 216, dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-4582), false, false, 216, (-2417));
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(216, false, true, 94, (-2417));
      dataTruncationArray0[3] = dataTruncation3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 1, (-4582));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 5);
      HashMap<DataTruncation, SQLNonTransientConnectionException> hashMap0 = new HashMap<DataTruncation, SQLNonTransientConnectionException>();
      EntrySetMapIterator<DataTruncation, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLNonTransientConnectionException>(hashMap0);
      AbstractMapIteratorDecorator<DataTruncation, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLNonTransientConnectionException>(entrySetMapIterator0);
      SkippingIterator<DataTruncation> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<DataTruncation>) abstractMapIteratorDecorator0, (long) 0);
      iteratorArray0[0] = (Iterator<DataTruncation>) skippingIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      Vector<StringTokenizer> vector1 = new Stack<StringTokenizer>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) reverseListIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) iterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      SQLDataException sQLDataException0 = new SQLDataException("[?+9L)ch4OnWA?");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("delimiter may not be null", sQLNonTransientConnectionException1);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("[?+9L)ch4OnWA?", (String) null, (-203), sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("/f)eH.0<h^WbH", "[?+9L)ch4OnWA?", 1187, sQLNonTransientConnectionException1);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException(sQLDataException1);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("/f)eH.0<h^WbH", sQLDataException3);
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("delimiter may not be null", sQLDataException3);
      sQLDataExceptionArray0[6] = sQLDataException6;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(resettableIterator0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLDataException>) listIteratorWrapper0, 1073741823);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) null, 215L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6vk]");
      Hashtable<DataTruncation, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<DataTruncation, SQLIntegrityConstraintViolationException>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("rt\"'\"O(eB");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("&P ", "", (-1), (Throwable) null);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, false);
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) constantTransformer0, "6vk]", "6vk]", "Hw500&4uE2IV>Lso5");
      assertEquals("6vk]rt\"'\"O(eBHw500&4uE2IV>Lso5", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("");
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      Hashtable<DataTruncation, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<DataTruncation, SQLIntegrityConstraintViolationException>();
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque1 = new ArrayDeque<SQLFeatureNotSupportedException>();
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(arrayDeque1);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) loopingIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) constantTransformer0, "]p", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Object object0 = new Object();
      int[] intArray0 = new int[4];
      intArray0[0] = 3365;
      intArray0[1] = 3367;
      intArray0[2] = (-1481);
      intArray0[3] = (-399);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      ConstantTransformer<Object, SQLTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLTransientConnectionException>(sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) null, (Transformer<? super SQLWarning, ? extends SQLTransientConnectionException>) constantTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredIterator((Iterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ConstantTransformer<Object, SQLTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLTransientConnectionException>(sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) null, (Transformer<? super SQLWarning, ? extends SQLTransientConnectionException>) constantTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IdentityPredicate.identityPredicate((Object) "");
      Properties properties0 = new Properties();
      IteratorUtils.getIterator("");
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      String string0 = "";
      IdentityPredicate.identityPredicate((Object) "");
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Boolean> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>[]) iteratorArray0);
      Hashtable<Object, SQLClientInfoException> hashtable0 = new Hashtable<Object, SQLClientInfoException>();
      Transformer<Object, SQLClientInfoException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLClientInfoException>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends Boolean>) iterator0, (Transformer<? super Boolean, ? extends SQLClientInfoException>) transformer0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      Transformer<SQLException, SQLSyntaxErrorException> transformer1 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer1);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) iterator1);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<SQLSyntaxErrorException> iterator2 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack0);
      assertFalse(iterator2.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Object object0 = new Object();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("%7b2yAH]");
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, String>) constantTransformer0, "[]", "[]", "[]");
      assertEquals("[][]", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) singletonIterator0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.LanguageRange>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>(vector0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>(hashMap0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("e|_S}S#)1DfrvJ>w$7", "e|_S}S#)1DfrvJ>w$7", hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashMap0, sQLNonTransientConnectionException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("e|_S}S#)1DfrvJ>w$7", "e|_S}S#)1DfrvJ>w$7", hashMap0, sQLNonTransientConnectionException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("e|_S}S#)1DfrvJ>w$7", "e|_S}S#)1DfrvJ>w$7", hashMap0, sQLNonTransientConnectionException0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) resettableListIterator0);
      Iterable<SQLClientInfoException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) listIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("]");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) singletonListIterator0, (Class<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>(vector0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, LinkedList<ServiceLoader>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("LESS", "1tF20v{P$P-'R", 0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0, class0);
      Vector<Iterator<HashSet<Object>>> vector0 = new Vector<Iterator<HashSet<Object>>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      assertNotNull(resettableIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6Gks");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("6Gks");
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) singletonListIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      predicateArray0[0] = (Predicate<Object>) andPredicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "6Gks", (Equator<Object>) defaultEquator0);
      predicateArray0[1] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Object>) anyPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>(vector0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      assertNotNull(iterator0);
      
      Iterator<Closure<Object>>[] iteratorArray0 = (Iterator<Closure<Object>>[]) Array.newInstance(Iterator.class, 1);
      MapIterator<Closure<Object>, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<Closure<Object>>) mapIterator0;
      ZippingIterator<Closure<Object>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Closure<Object>>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) resettableIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator1, 0);
      IteratorUtils.isEmpty(resettableIterator1);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("FEY!>i#r74.1r");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("FEY!>i#r74.1r");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode("org.apache.commons.collections4.functors.SwitchTransformer");
      iIOMetadataNodeArray0[8] = iIOMetadataNode8;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) objectArrayListIterator0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) zippingIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLClientInfoException0);
      sQLClientInfoException0.initCause(sQLTimeoutException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLClientInfoException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("/#gnsxK/e", "");
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(iterator0);
      int int0 = 44;
      int int1 = 2053;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("You must invoke setComparator() to set a comparator first.", "4r?Wk`Am_", 2053, sQLClientInfoException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTimeoutException1);
      // Undeclared exception!
      IteratorUtils.find((Iterator<Object>) listIteratorWrapper0, (Predicate<? super Object>) predicate0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>(vector0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("Enumeration must not be null");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstantiateFactory<SQLTimeoutException> instantiateFactory0 = new InstantiateFactory<SQLTimeoutException>(class0);
      Transformer<Object, SQLTimeoutException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTimeoutException>) instantiateFactory0);
      Closure<IIOMetadataNode> closure0 = TransformerClosure.transformerClosure((Transformer<? super IIOMetadataNode, ?>) transformer0);
      IteratorUtils.apply((Iterator<IIOMetadataNode>) objectArrayIterator0, (Closure<? super IIOMetadataNode>) closure0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLClientInfoException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("/#gnsxK/e", "");
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(iterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Entry does not exist: ", "4r?Wk`Am_", 44, sQLClientInfoException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTimeoutException0);
      Object object0 = IteratorUtils.find((Iterator<Object>) listIteratorWrapper0, (Predicate<? super Object>) predicate0);
      assertNull(object0);
      
      IfTransformer<SQLFeatureNotSupportedException, String> ifTransformer0 = new IfTransformer<SQLFeatureNotSupportedException, String>(predicate0, (Transformer<? super SQLFeatureNotSupportedException, ? extends String>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends String>) null);
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>();
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(vector0);
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) loopingIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) ifTransformer0, "/#gnsxK/e", "qmlX[S]", "5}0:kl_kw");
      assertEquals("qmlX[S]5}0:kl_kw", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ResettableIterator<BatchUpdateException> resettableIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(list0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator0);
      TreeSet<SQLNonTransientException> treeSet0 = new TreeSet<SQLNonTransientException>();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((SortedSet<?>) treeSet0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) priorityQueue0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning();
      TreeSet<SQLTransientException> treeSet1 = new TreeSet<SQLTransientException>();
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) orderedMapIterator0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 6);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      classArray0[4] = class4;
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      classArray0[5] = class5;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("The comparator must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string0 = IteratorUtils.toString((Iterator<TreeSet<SQLDataException>>) null, (Transformer<? super TreeSet<SQLDataException>, String>) transformer0, "", "D", "");
      assertEquals("D", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) resettableIterator0);
      Hashtable<DataTruncation, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<DataTruncation, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLIntegrityConstraintViolationException>(hashtable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("1e@:]j')!+2#IT^i");
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.constantTransformer(sQLTransientConnectionException0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) entrySetMapIterator0, (Transformer<? super SQLWarning, ? extends SQLTransientConnectionException>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) iterator0, (Iterator<? extends SQLTransientConnectionException>) iterator0, (Iterator<? extends SQLTransientConnectionException>) iterator0);
      Iterator<?> iterator1 = IteratorUtils.getIterator(entrySetMapIterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "^l7r=)", (-11), sQLTransientException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "");
      sQLTimeoutException0.addSuppressed(sQLTransientException0);
      IteratorUtils.filteredIterator((Iterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      Properties properties0 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "9-5vH>IR/";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("9-5vH>IR/");
      sQLTransactionRollbackException0.fillInStackTrace();
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.asIterable((Iterator<?>) singletonListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>(vector0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) list0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<IIOMetadataNode>) resettableIterator0, (Closure<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("*", "");
      vector0.add(stringTokenizer0);
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>(vector0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Vector<IIOMetadataNode>>) null, (Iterator<? extends Vector<IIOMetadataNode>>) null, (Iterator<? extends Vector<IIOMetadataNode>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("prefix may not be null");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("prefix may not be null");
      IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) constantTransformer0);
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) orderedIterator0);
      int int0 = 1477;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1477);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6Gkl");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("6Gkl");
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      UniquePredicate<SQLNonTransientConnectionException> uniquePredicate0 = new UniquePredicate<SQLNonTransientConnectionException>();
      UniquePredicate<String> uniquePredicate1 = new UniquePredicate<String>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      IteratorUtils.emptyIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "", (-1), sQLNonTransientConnectionException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Consumer<SQLFeatureNotSupportedException> consumer0 = (Consumer<SQLFeatureNotSupportedException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      IfTransformer<SQLFeatureNotSupportedException, String> ifTransformer0 = new IfTransformer<SQLFeatureNotSupportedException, String>((Predicate<? super SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends String>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends String>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) ifTransformer0, (String) null, "~ewJ*(DFl8#Q=yx%=", "sg;B");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLClientInfoException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("/#gnsxK/e", "");
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(iterator0);
      int[] intArray0 = new int[2];
      intArray0[0] = 44;
      intArray0[1] = 44;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLClientInfoException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, true);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) onePredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("suffix may not be null", "4r?Wk`Am_", sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) consumer0, 2791, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "^l7r=)", (-11), sQLTransientException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "");
      IteratorUtils.filteredIterator((Iterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-11);
      intArray0[1] = (-11);
      intArray0[2] = (-11);
      intArray0[3] = (-1012);
      intArray0[4] = (-11);
      intArray0[5] = (-11);
      intArray0[6] = (-11);
      intArray0[7] = (-11);
      intArray0[8] = (-11);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("^l7r=)", "", intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, true);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "Array class must not be null", sQLTransientException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) linkedList0, (-1), (-1012));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<?>) resettableListIterator0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(andPredicate0, andPredicate0);
      IteratorUtils.getIterator(predicate0);
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      IteratorUtils.loopingIterator((Collection<? extends String>) set0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>((BatchUpdateException) null, true);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) orPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null, (Throwable) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, 1, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<String> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator1, defaultEquator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator1, (Predicate<? super String>) equalPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) defaultEquator0, (-1), (-277));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "`-:SF $kR2[Zx!J", 547, sQLSyntaxErrorException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) listIterator0, class0);
      Vector<Iterator<HashSet<Object>>> vector0 = new Vector<Iterator<HashSet<Object>>>();
      LoopingListIterator<Iterator<HashSet<Object>>> loopingListIterator0 = new LoopingListIterator<Iterator<HashSet<Object>>>(vector0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLSyntaxErrorException1);
      SQLWarning sQLWarning0 = new SQLWarning(sQLIntegrityConstraintViolationException0);
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException1, 2793, 547);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6vk]");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("6vk]");
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      UniquePredicate<SQLNonTransientConnectionException> uniquePredicate0 = new UniquePredicate<SQLNonTransientConnectionException>();
      UniquePredicate<String> uniquePredicate1 = new UniquePredicate<String>();
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(priorityQueue0);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super BatchUpdateException>>) arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<BatchUpdateException>) loopingIterator0, (Predicate<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) objectArrayIterator0, (Transformer<? super SQLWarning, ? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      MapIterator<SQLWarning, HashSet<InstanceofPredicate>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      ConstantTransformer<SQLWarning, SQLTransientConnectionException> constantTransformer0 = new ConstantTransformer<SQLWarning, SQLTransientConnectionException>(sQLTransientConnectionException0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) mapIterator0, (Transformer<? super SQLWarning, ? extends SQLTransientConnectionException>) constantTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "^l7r=)", 4, sQLTransientException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "");
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("sg;B");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransientException0);
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) resettableIterator0);
      Hashtable<DataTruncation, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<DataTruncation, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLIntegrityConstraintViolationException>(hashtable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("^l7r=)");
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.constantTransformer(sQLTransientConnectionException0);
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) entrySetMapIterator0, (Transformer<? super SQLWarning, ? extends SQLTransientConnectionException>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) iterator1, (Iterator<? extends SQLTransientConnectionException>) iterator1, (Iterator<? extends SQLTransientConnectionException>) iterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, (-1661), (-1661));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Y9Ca", "!rER)`sQ{2ux_it", (-1), intArray0, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.addSuppressed(batchUpdateException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<DataTruncation> class1 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("b]tF~`1l1VF", "b]tF~`1l1VF");
      vector0.add(stringTokenizer0);
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>(vector0);
      PriorityQueue<SQLNonTransientConnectionException>[] priorityQueueArray0 = (PriorityQueue<SQLNonTransientConnectionException>[]) Array.newInstance(PriorityQueue.class, 0);
      IteratorUtils.arrayIterator(priorityQueueArray0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(stack0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`T#8J.s=/JMvHG(q[");
      stack0.add((SQLTransientException) sQLTransactionRollbackException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(comparatorPredicate0, comparatorPredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLSyntaxErrorException0);
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) resettableIterator0);
      IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<SQLException> allPredicate0 = new AllPredicate<SQLException>(predicateArray0);
      Predicate<String> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6vk]");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("6vk]");
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      UniquePredicate<SQLNonTransientConnectionException> uniquePredicate0 = new UniquePredicate<SQLNonTransientConnectionException>();
      UniquePredicate<String> uniquePredicate1 = new UniquePredicate<String>();
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(priorityQueue0);
      Predicate<BatchUpdateException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super BatchUpdateException>>) arrayList0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) loopingIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) uniquePredicate1, (-1766), 5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6vk]");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("6vk]");
      IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) constantTransformer0);
      assertEquals(1, singletonListIterator0.nextIndex());
      
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(priorityQueue0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<BatchUpdateException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super BatchUpdateException>>) treeSet0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<BatchUpdateException>) loopingIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 7201;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, 7201, 7201);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("&oK1");
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      vector0.add((SQLTransientException) sQLTransactionRollbackException0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion1 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(comparatorPredicate_Criterion0, comparator0, comparatorPredicate_Criterion1);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(comparatorPredicate0, comparatorPredicate0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[2];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      IteratorUtils.matchesAny((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) comparatorPredicate0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "6vk]";
      int int0 = 4;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      String string1 = "zAr-T";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "zAr-T", 4, sQLTransientException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "6vk]");
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      UniquePredicate<SQLNonTransientConnectionException> uniquePredicate0 = new UniquePredicate<SQLNonTransientConnectionException>();
      UniquePredicate<String> uniquePredicate1 = new UniquePredicate<String>();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      String string0 = "1YwAnuM5B txr\"3,x(";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("^l7r=)", "1YwAnuM5B txr\"3,x(", 13, sQLTransientException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) uniquePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6vk]");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("6vk]");
      IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) constantTransformer0);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      ExceptionClosure.exceptionClosure();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<X5WRwcyiPxSZ}-", (String) null, 174, sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[6vk]]", "6vk]", 1021, sQLSyntaxErrorException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, "6vk]", 1021, sQLTimeoutException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("TlKs65e}KtO", "6vk]");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException((String) null, sQLSyntaxErrorException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("TlKs65e}KtO", "@z<B|");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException((Throwable) null);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) objectArrayListIterator0, (Iterator<? extends SQLTransientConnectionException>) iterator0, (Iterator<? extends SQLTransientConnectionException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 174, 1021);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<SQLException> allPredicate0 = new AllPredicate<SQLException>(predicateArray0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<SQLNonTransientConnectionException> predicate0 = new UniquePredicate<SQLNonTransientConnectionException>();
      Predicate<String> predicate1 = new UniquePredicate<String>();
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) allPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) arrayList0, (-1766), (-1766));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<SQLException> allPredicate0 = new AllPredicate<SQLException>(predicateArray0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLNonTransientConnectionException>>) arrayList0);
      AllPredicate.allPredicate((Predicate<? super String>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) allPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) arrayList0, 0, (-1766));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("");
      IteratorUtils.getIterator((Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("ok");
      singletonListIterator0.next();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<?>) singletonListIterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) resettableListIterator0);
      IteratorUtils.filteredIterator((Iterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      int int0 = 4;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "^l7r=)", 4, sQLTransientException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "");
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("sg;B");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("4r?Wk`Am_", "", 4, sQLTransientException0);
      ArrayListIterator<SQLTransientConnectionException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransientConnectionException>(sQLNonTransientConnectionException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("~ewJ*(DFl8#Q=yx%=", "~ewJ*(DFl8#Q=yx%=", 1696, sQLNonTransientConnectionException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IfTransformer<SQLFeatureNotSupportedException, String> ifTransformer0 = new IfTransformer<SQLFeatureNotSupportedException, String>((Predicate<? super SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends String>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends String>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) ifTransformer0, "0)|LU|<y_f", "org.apache.commons.collection[4.list.AbstractLinkedList$LinkedListIterator", "org.apache.commons.collection[4.list.AbstractLinkedList$LinkedListIterator");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("", "`-:SF $kR2[Zx!J", sQLWarning0);
      sQLDataException0.addSuppressed(sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`-:SF $kR2[Zx!J", "~ewJ*(DFl8#Q=yx%=", (-2216), sQLDataException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IfTransformer<SQLFeatureNotSupportedException, String> ifTransformer0 = new IfTransformer<SQLFeatureNotSupportedException, String>((Predicate<? super SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends String>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends String>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) ifTransformer0, "org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", "~ewJ*(DFl8#Q=yx%=", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>(vector0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("gUp|?YW|i 0$Tb_!:", "gUp|?YW|i 0$Tb_!:");
      vector1.add(stringTokenizer0);
      ResettableListIterator<StringTokenizer> resettableListIterator1 = IteratorUtils.loopingListIterator((List<StringTokenizer>) vector1);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) iterator0, (long) (-1445), (long) (-1445));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "");
      IteratorUtils.filteredIterator((Iterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      Properties properties0 = new Properties();
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) resettableListIterator0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      ExceptionClosure.exceptionClosure();
      EmptyListIterator.emptyListIterator();
      Vector<Iterator<HashSet<Object>>> vector0 = new Vector<Iterator<HashSet<Object>>>();
      ReverseListIterator<Iterator<HashSet<Object>>> reverseListIterator0 = new ReverseListIterator<Iterator<HashSet<Object>>>(vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Iterator<HashSet<Object>>>) reverseListIterator0, (Predicate<? super Iterator<HashSet<Object>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ExceptionClosure.exceptionClosure();
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, andPredicate0);
      OrderedMapIterator<Object, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Object, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, DataTruncation>(orderedMapIterator0);
      IteratorUtils.find((Iterator<Object>) abstractOrderedMapIteratorDecorator0, (Predicate<? super Object>) predicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) resettableIterator0);
      int[] intArray0 = new int[4];
      intArray0[0] = 10;
      intArray0[1] = 547;
      intArray0[2] = 4544;
      intArray0[3] = 2039;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLSyntaxErrorException0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) singletonListIterator0);
      ListIterator<BatchUpdateException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) andPredicate0);
      SkippingIterator<BatchUpdateException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) listIterator1, (long) 4544);
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) skippingIterator0, 1L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6vk]");
      Transformer<String, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(arrayList0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) reverseListIterator0;
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) reverseListIterator0;
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) reverseListIterator0;
      iteratorArray0[3] = (Iterator<SQLTransientConnectionException>) reverseListIterator0;
      iteratorArray0[4] = (Iterator<SQLTransientConnectionException>) reverseListIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      reverseListIterator0.reset();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("YR");
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, 1187);
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      HashMap<SQLInvalidAuthorizationSpecException, Stack<SQLClientInfoException>> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Stack<SQLClientInfoException>>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Stack<SQLClientInfoException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Stack<SQLClientInfoException>>(hashMap0);
      MapIterator<SQLInvalidAuthorizationSpecException, Stack<SQLClientInfoException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, Stack<SQLClientInfoException>>) entrySetMapIterator0);
      AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Stack<SQLClientInfoException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Stack<SQLClientInfoException>>(mapIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractMapIteratorDecorator0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) zippingIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      // Undeclared exception!
//      try { 
        OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 0 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<?>) resettableListIterator0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(andPredicate0, andPredicate0);
      IteratorUtils.getIterator(predicate0);
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) set0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("YXk_W", "0Zt%q%!!<2]=", 10);
      IteratorUtils.contains((Iterator<String>) resettableIterator0, (Object) sQLIntegrityConstraintViolationException0);
      IteratorUtils.emptyOrderedIterator();
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      Integer integer0 = new Integer((-17));
      IteratorUtils.singletonIterator(integer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("s#e^Vy[b;@#\"$qa", "EMn2]siNvWMe^[b8");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0, true);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) singletonIterator0, 1);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/#gnsxK/e", "");
      sQLTransientConnectionException0.fillInStackTrace();
      sQLClientInfoException0.initCause(sQLTransientConnectionException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLClientInfoException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("/#gnsxK/e", "");
      Iterator<Object> iterator1 = IteratorUtils.chainedIterator(iterator0, iterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Entry does not exist: ", "4r?Wk`Am_", 44, sQLClientInfoException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTimeoutException0);
      IteratorUtils.find(iterator1, (Predicate<? super Object>) predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("delimiter may not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLSyntaxErrorException0);
      OrderedMapIterator<SQLClientInfoException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLFeatureNotSupportedException>(orderedMapIterator0);
      OrderedMapIterator<SQLClientInfoException, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) orderedMapIterator1);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransientConnectionException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(iterator0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 44;
      longArray0[1] = (long) 44;
      longArray0[2] = (long) 44;
      longArray0[3] = (-1L);
      longArray0[4] = (long) 44;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 44, longArray0, sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "xuP", 44, batchUpdateException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "4r?Wk`Am_");
      IteratorUtils.find((Iterator<Object>) listIteratorWrapper0, (Predicate<? super Object>) predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("No Collection associated with this Iterator");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("A6?^m&L+0rvkps8t", "7I5L", 44);
      ArrayListIterator<SQLTransientConnectionException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransientConnectionException>(sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<InstanceofPredicate, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<InstanceofPredicate, SQLTransactionRollbackException>(orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends InstanceofPredicate, ? extends SQLTransactionRollbackException>) abstractMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends InstanceofPredicate>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("vk]", "`-:pF $kR2eZx!J", sQLWarning0);
      sQLDataException0.addSuppressed(sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLDataException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientConnectionException) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 0);
      assertNull(sQLNonTransientConnectionException1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.emptyIterator();
      BoundedIterator<EnumSet<Locale.Category>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6vk]");
      Transformer<String, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0);
      DataTruncation dataTruncation0 = new DataTruncation(3375, false, false, (-1248), (-1248));
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.size(singletonIterator0);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(linkedList0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) reverseListIterator0);
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator1 = new ReverseListIterator<SQLTransientConnectionException>(linkedList0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = iterator0;
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) reverseListIterator1;
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      reverseListIterator1.reset();
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) iterator0, 1187);
      OrderedMapIterator<Locale.Category, LinkedList<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) zippingIterator1);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate.nonePredicate((Predicate<? super SQLException>[]) predicateArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.Category>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) iterator0, 1L, 0L);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("6vk]");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator1 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) singletonIterator1, class0);
      assertEquals(1, sQLSyntaxErrorExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Eym;8Yimbm=V", "1tF20v{P$P-'R", 0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) listIterator0, class0);
      Vector<Iterator<HashSet<Object>>> vector0 = new Vector<Iterator<HashSet<Object>>>();
      LoopingListIterator<Iterator<HashSet<Object>>> loopingListIterator0 = new LoopingListIterator<Iterator<HashSet<Object>>>(vector0);
      ListIterator<Iterator<HashSet<Object>>> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<Iterator<HashSet<Object>>>) loopingListIterator0);
      SkippingIterator<Iterator<HashSet<Object>>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Iterator<HashSet<Object>>>) listIterator1, (long) 0);
      Iterable<Iterator<HashSet<Object>>> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends Iterator<HashSet<Object>>>) skippingIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null, 3099);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class0);
      Consumer<DataTruncation> consumer0 = (Consumer<DataTruncation>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.spliterator();
      Iterator<DataTruncation> iterator0 = serviceLoader0.iterator();
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) iterator0, class0);
      IteratorUtils.size(orderedIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", 0, sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", sQLTimeoutException1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null, 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(arrayList0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.filteredIterator((Iterator<?>) reverseListIterator0, (Predicate<? super Object>) notPredicate0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(stack0);
      Object object0 = new Object();
      IteratorUtils.isEmpty(reverseListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<?>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) null, 1187);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>(arrayList0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>(vector0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("gUp|?YW|i 0$Tb_!:", "gUp|?YW|i 0$Tb_!:");
      vector1.add(stringTokenizer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.loopingListIterator((List<StringTokenizer>) vector1);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      IteratorUtils.isEmpty(resettableListIterator0);
      ArrayList<EnumSet<Locale.Category>> arrayList0 = new ArrayList<EnumSet<Locale.Category>>();
      LoopingListIterator<EnumSet<Locale.Category>> loopingListIterator0 = new LoopingListIterator<EnumSet<Locale.Category>>(arrayList0);
      ListIterator<EnumSet<Locale.Category>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.Category>>) loopingListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Ed=<_'28+fCN'MWc ", "Ed=<_'28+fCN'MWc ", 1, (Map<String, ClientInfoStatus>) null, sQLClientInfoExceptionArray0[0]);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("+97c]NX&*z", "+97c]NX&*z", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException2.getSuppressed();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException2;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 1);
      objectArrayListIterator0.next();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) objectArrayListIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) listIterator0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) objectArrayListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) resettableListIterator0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      AndPredicate.andPredicate((Predicate<? super SQLException>) andPredicate0, (Predicate<? super SQLException>) predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(andPredicate0, andPredicate0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) orPredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("$),RoJBb");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("$),RoJBb", "$),RoJBb", sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("ZiC", sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 0);
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Ed=<_'28+fCN'MWc ", "Ed=<_'28+fCN'MWc ", 1, (Map<String, ClientInfoStatus>) null, sQLClientInfoExceptionArray0[0]);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("+97c]NX&*z", "+97c]NX&*z", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException2.getSuppressed();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException2;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 1);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) objectArrayListIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) listIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6vk]");
      ConstantTransformer.nullTransformer();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("6vk]", "`-:SF $kR2[Zx!J", sQLWarning0);
      sQLDataException0.addSuppressed(sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLDataException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 0);
      MapIterator<SQLTransientException, LinkedHashSet<SQLTimeoutException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) mapIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(singletonListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedIterator0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/#gnsxK/e", "");
      sQLTransientConnectionException0.fillInStackTrace();
      sQLClientInfoException0.initCause(sQLTransientConnectionException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      IteratorUtils.getIterator(sQLClientInfoException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("??F62b%1dkRKVgR");
      IteratorUtils.getIterator(stringTokenizer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator((BatchUpdateException) null);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      TreeSet<SQLException> treeSet0 = new TreeSet<SQLException>(priorityQueue0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("mig\"");
      IteratorUtils.toArray(iterator0);
      ArrayList<HashSet<Object>> arrayList0 = new ArrayList<HashSet<Object>>();
      LoopingListIterator<HashSet<Object>> loopingListIterator0 = new LoopingListIterator<HashSet<Object>>(arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) enumeration0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.skippingIterator(iterator0, 1206L);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'";
      stringArray0[1] = "Closure must not be null";
      stringArray0[2] = ">}|*3fbAfAv";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) objectArrayIterator0);
      Iterator<String> iterator1 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      Iterator<String> iterator2 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator1, (Iterator<? extends String>) objectArrayIterator0);
      assertFalse(iterator2.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class0);
      Consumer<DataTruncation> consumer0 = (Consumer<DataTruncation>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      serviceLoader0.spliterator();
      serviceLoader0.reload();
      Iterator<DataTruncation> iterator0 = serviceLoader0.iterator();
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) iterator0, class0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.size(orderedIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", 0, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Properties properties0 = new Properties();
      StringTokenizer stringTokenizer0 = new StringTokenizer("-5vH>R/");
      properties0.put("-5vH>R/", stringTokenizer0);
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Ed=<_'28+fCN'MWc ", "Ed=<_'28+fCN'MWc ", 1, (Map<String, ClientInfoStatus>) null, sQLClientInfoExceptionArray0[0]);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("+97c]NX&*z", "+97c]NX&*z", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException2.fillInStackTrace();
      sQLClientInfoException2.getSuppressed();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException2;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode0;
      iIOMetadataNodeArray0[7] = iIOMetadataNode0;
      iIOMetadataNodeArray0[8] = iIOMetadataNode0;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class0);
      Consumer<DataTruncation> consumer0 = (Consumer<DataTruncation>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.spliterator();
      serviceLoader0.reload();
      Iterator<DataTruncation> iterator0 = serviceLoader0.iterator();
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) iterator0, class0);
      IteratorUtils.size(orderedIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", 0, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLTimeoutException1);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 548);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 547
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6vk]");
      Transformer<String, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0);
      DataTruncation dataTruncation0 = new DataTruncation(3375, false, false, (-1248), (-1248));
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.size(singletonIterator0);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(linkedList0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) reverseListIterator0);
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator1 = new ReverseListIterator<SQLTransientConnectionException>(linkedList0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = iterator0;
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) reverseListIterator1;
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      reverseListIterator1.reset();
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) iterator0, 1187);
      OrderedMapIterator<Locale.Category, LinkedList<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      Iterator<SQLException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) zippingIterator1);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Predicate<? super SQLException>[]) predicateArray0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super SQLException>) predicate0);
      Iterable<Locale.Category> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.Category>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      List<StringTokenizer> list0 = new Vector<StringTokenizer>();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>(list0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("gUp|?YW|i 0$Tb_!:", "gUp|?YW|i 0$Tb_!:");
      vector0.add(stringTokenizer0);
      IteratorUtils.loopingListIterator((List<StringTokenizer>) vector0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(arrayDeque0);
      List<SQLTransientConnectionException> list0 = new ArrayList<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) list0);
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) iterator0, (-2003));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class0);
      Consumer<DataTruncation> consumer0 = (Consumer<DataTruncation>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      serviceLoader0.spliterator();
      serviceLoader0.reload();
      Iterator<DataTruncation> iterator0 = serviceLoader0.iterator();
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) iterator0, class0);
      IteratorUtils.size(orderedIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", 0, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("' cannot be accessed", "", 0, sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException();
      IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("' cannot be accessed", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", (-4504));
      ArrayDeque<SQLException> arrayDeque0 = new ArrayDeque<SQLException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) null, (Collection<? super SQLInvalidAuthorizationSpecException>) arrayDeque0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null, (Collection<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "Iterator[]");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLSyntaxErrorException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ConstantTransformer<Object, SQLTransactionRollbackException> constantTransformer0 = new ConstantTransformer<Object, SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) constantTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLTransientException, String>) null, "Iterator[]", "GAwu(6X}kozsdAe'4$", "GAwu(6X}kozsdAe'4$");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("ok");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("ok");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<?>) resettableListIterator0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(andPredicate0, andPredicate0);
      IteratorUtils.getIterator(predicate0);
      Locale locale0 = Locale.UK;
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>((BatchUpdateException) null, true);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.apply((Iterator<IIOMetadataNode>) listIterator0, (Closure<? super IIOMetadataNode>) closure0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) listIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "", (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{B`%e");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("{B`%e", "us", sQLIntegrityConstraintViolationException0);
      DataTruncation dataTruncation0 = new DataTruncation(91, false, false, 0, (-277), sQLNonTransientConnectionException0);
      dataTruncation0.getStackTrace();
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.size(singletonIterator0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) reverseListIterator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) reverseListIterator0);
      iteratorArray0[1] = iterator0;
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator1 = new ReverseListIterator<SQLTransientConnectionException>(linkedList0);
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) reverseListIterator1;
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      reverseListIterator1.reset();
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) iterator1, 1);
      OrderedMapIterator<Locale.Category, LinkedList<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6vk]");
      Transformer<String, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("No Collection associated with this Iterator");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLNonTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException("Wkgi-", "j{@/KU", sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("`-:SF $kR2[Zx!J", sQLSyntaxErrorException0);
      OrderedMapIterator<SQLDataException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLDataException, SQLTransientException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, SQLTransientException>) orderedMapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0, (-147), 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Ed=<_'28+fCN'MWc ", "Ed=<_'28+fCN'MWc ", 1, (Map<String, ClientInfoStatus>) null, sQLClientInfoExceptionArray0[0]);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueue0.remove((Object) "Ed=<_'28+fCN'MWc ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/ e3X@!", (String) null);
      priorityQueue0.add(sQLNonTransientConnectionException0);
      PriorityQueue<SQLNonTransientConnectionException>[] priorityQueueArray0 = (PriorityQueue<SQLNonTransientConnectionException>[]) Array.newInstance(PriorityQueue.class, 6);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue2 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[0] = priorityQueue2;
      priorityQueueArray0[1] = priorityQueue1;
      priorityQueueArray0[2] = priorityQueue1;
      priorityQueueArray0[3] = priorityQueue0;
      priorityQueueArray0[4] = priorityQueue0;
      priorityQueueArray0[5] = priorityQueue1;
      IteratorUtils.arrayIterator(priorityQueueArray0);
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(vector0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("&>GZ^ ");
      vector0.add((SQLTransientException) sQLTransactionRollbackException0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException(", ", "/ e3X@!", (-1233));
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException>[] priorityQueueArray0 = (PriorityQueue<SQLNonTransientConnectionException>[]) Array.newInstance(PriorityQueue.class, 8);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue2 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue3 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue4 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue5 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[5] = priorityQueue5;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue6 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[6] = priorityQueue6;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue7 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueue7.remove((Object) priorityQueueArray0[4]);
      priorityQueueArray0[7] = priorityQueue7;
      IteratorUtils.arrayIterator(priorityQueueArray0);
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(vector0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("9\"L]M3AZ6F1");
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      IteratorUtils.matchesAny((Iterator<SQLTransientException>) loopingListIterator0, (Predicate<? super SQLTransientException>) andPredicate0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) null, 1L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Ed=<_'28+fCN'MWc ", "Ed=<_'28+fCN'MWc ", 1, (Map<String, ClientInfoStatus>) null, sQLClientInfoExceptionArray0[0]);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("+97c]NX&*z", "+97c]NX&*z", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException2.getSuppressed();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException2;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) iterator0, (-2225));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLWarning sQLWarning0 = new SQLWarning("Pkqf2j'hJv2MHYIMU", "/qlrI ", 1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLWarning0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Ed=<_'28+fCN'MWc ", "4OUM#=xQe. V", 1, hashMap0, sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("}PIC%f", (String) null, hashMap0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("f", "[", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException4.spliterator();
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException4;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException2;
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException2;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 1);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) objectArrayListIterator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) objectArrayListIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) listIterator0);
      OrderedMapIterator<ClientInfoStatus, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(arrayList0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) arrayList0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>(arrayDeque0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) hashSet0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      arrayDeque0.add(sQLFeatureNotSupportedException0);
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(resettableIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIteratorWrapper0);
      IteratorUtils.loopingIterator((Collection<?>) hashSet0);
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(arrayList0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) arrayList0);
      int int0 = 61;
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 61);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 61
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>(arrayDeque0);
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) hashSet0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) listIterator0, (-2003));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6vk]");
      Transformer<String, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("Wkgi-", "`-:SF $kR2[Zx!J", sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLDataException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 0);
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 0, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Ed=<_'28+fCN'MWc ", "Ed=<_'28+fCN'MWc ", 1, (Map<String, ClientInfoStatus>) null, sQLClientInfoExceptionArray0[0]);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("+97c]NX&*z", "+97c]NX&*z", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException2;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("Ed=<_'28+fCN'MWc ", "Ed=<_'28+fCN'MWc ", hashtable0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException3;
      sQLClientInfoException0.spliterator();
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException4;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 1);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) objectArrayListIterator0);
      Iterable<SQLClientInfoException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) listIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) predicate0);
      TreeSet<SQLSyntaxErrorException> treeSet1 = new TreeSet<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
//      try { 
        treeSet1.add(sQLSyntaxErrorException0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) orPredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SQLWarning sQLWarning0 = new SQLWarning(sQLNonTransientConnectionException0);
      assertEquals(0, sQLWarning0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("E9N&;^(.egU|=");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("pPW2X|H-%3ksfJ.@e|Z");
      IdentityPredicate.identityPredicate((Object) singletonListIterator0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.apply((Iterator<IIOMetadataNode>) listIterator0, (Closure<? super IIOMetadataNode>) closure0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLRecoverableException0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate1);
      IteratorUtils.emptyOrderedIterator();
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = IteratorUtils.find((Iterator<SQLSyntaxErrorException>) orderedIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate1);
      assertNull(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) resettableListIterator0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(andPredicate0, andPredicate0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) orPredicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("$),RoJBb");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("$),RoJBb");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("$),RoJBb", "Closure must not be null", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 123, 123);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6Gkl");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("6Gkl");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "V!");
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate0);
      ExceptionClosure.exceptionClosure();
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<IIOMetadataNode>) listIterator0, (Closure<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException>[] priorityQueueArray0 = (PriorityQueue<SQLNonTransientConnectionException>[]) Array.newInstance(PriorityQueue.class, 8);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue2 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue3 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue4 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue5 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue6 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue7 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueue1.remove((Object) priorityQueue4);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("!Hx[)z4Nv(Jo=|f*AWa", "or/}&3sAx1_Pij");
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue8 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueue8.add(sQLNonTransientConnectionException0);
      IteratorUtils.arrayIterator(priorityQueueArray0);
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(vector0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      vector0.add((SQLTransientException) sQLTransactionRollbackException0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      Predicate<SQLException> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLTransientException>) loopingListIterator0, (Predicate<? super SQLTransientException>) predicate0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "");
      IteratorUtils.filteredIterator((Iterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLNonTransientException0);
      IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      MapIterator<SQLWarning, HashSet<InstanceofPredicate>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("bO~", "");
      ConstantTransformer<SQLWarning, SQLTransientConnectionException> constantTransformer0 = new ConstantTransformer<SQLWarning, SQLTransientConnectionException>(sQLTransientConnectionException1);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) mapIterator0, (Transformer<? super SQLWarning, ? extends SQLTransientConnectionException>) constantTransformer0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("bO~");
      ListIteratorWrapper<String> listIteratorWrapper0 = new ListIteratorWrapper<String>(resettableIterator0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) listIteratorWrapper0, (Iterator<? extends String>) listIteratorWrapper0);
      Iterator<String> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends String>) zippingIterator0);
      boolean boolean0 = IteratorUtils.contains(iterator1, (Object) iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException>[] priorityQueueArray0 = (PriorityQueue<SQLNonTransientConnectionException>[]) Array.newInstance(PriorityQueue.class, 8);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue2 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue3 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue4 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue5 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[5] = priorityQueue5;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue6 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[6] = priorityQueue6;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue7 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueue7.remove((Object) priorityQueue4);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/ e3X@!", "");
      priorityQueue3.add(sQLNonTransientConnectionException0);
      priorityQueueArray0[7] = priorityQueue7;
      IteratorUtils.arrayIterator(priorityQueueArray0);
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(vector0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("9\"L]M3AZ6F1");
      vector0.add((SQLTransientException) sQLTransactionRollbackException0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLTransientException>) loopingListIterator0, (Predicate<? super SQLTransientException>) andPredicate0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-25);
      intArray0[1] = (-1309);
      intArray0[2] = (-1309);
      intArray0[3] = (-1309);
      intArray0[4] = (-1309);
      intArray0[5] = (-25);
      intArray0[6] = (-25);
      intArray0[7] = (-25);
      intArray0[8] = (-1309);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      DataTruncation dataTruncation0 = new DataTruncation((-25), true, true, (-1309), (-25), batchUpdateException0);
      dataTruncation0.setNextException(batchUpdateException0);
      dataTruncation0.getDataSize();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLWarning>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Locale.Category[]) null, (-25), (-1309));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Predicate<Object>>) resettableListIterator0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) loopingListIterator0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0, (Collection<? super SQLTransientConnectionException>) vector0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 282, 282);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      OrderedIterator<InstanceofPredicate> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>(arrayDeque0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) hashSet0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      arrayDeque0.add(sQLFeatureNotSupportedException0);
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(resettableIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIteratorWrapper0);
      IteratorUtils.loopingIterator((Collection<?>) hashSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U0wu!u,Sr,%<[");
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 3130);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 3130
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("{A_(@W):;}");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("0#kN5ZG.kN`1iz<v*m");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6vk]");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("6vk]");
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0, class0);
      Vector<Iterator<HashSet<Object>>> vector0 = new Vector<Iterator<HashSet<Object>>>();
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class0);
      Consumer<DataTruncation> consumer0 = (Consumer<DataTruncation>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      serviceLoader0.spliterator();
      serviceLoader0.reload();
      Iterator<DataTruncation> iterator0 = serviceLoader0.iterator();
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) iterator0, class0);
      IteratorUtils.size(orderedIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", 0, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("' cannot be accessed", "", 0, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) resettableListIterator0, (-4504));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -4504
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", "5", hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "5", hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("", (String) null, hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(hashtable0, sQLClientInfoException4);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", "k+Fi{&+OFB3Qe", hashMap0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", (String) null, hashMap0, sQLClientInfoException6);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) objectArrayListIterator0);
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      ResettableIterator<LinkedHashSet<DataTruncation>> resettableIterator0 = IteratorUtils.singletonIterator(linkedHashSet0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>((String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super String, String>) factoryTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 6);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLDataException>) resettableListIterator0;
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      iteratorArray0[1] = (Iterator<SQLDataException>) loopingListIterator0;
      LoopingListIterator<SQLDataException> loopingListIterator1 = new LoopingListIterator<SQLDataException>(linkedList0);
      iteratorArray0[2] = (Iterator<SQLDataException>) loopingListIterator1;
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator0);
      iteratorArray0[3] = (Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0;
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      SQLDataException sQLDataException0 = new SQLDataException("");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("", sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("PrototypeCloneFactory: Clone method threw an exception", (String) null, 0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("Nf");
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("/R/{r;3MnRb", "Nf", 0);
      sQLDataExceptionArray0[5] = sQLDataException5;
      MockThrowable mockThrowable0 = new MockThrowable("Nf", sQLDataException4);
      SQLDataException sQLDataException6 = new SQLDataException("/R/{r;3MnRb", "", mockThrowable0);
      sQLDataExceptionArray0[6] = sQLDataException6;
      ResettableListIterator<SQLDataException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0, 0);
      iteratorArray0[4] = (Iterator<SQLDataException>) resettableListIterator1;
      MapIterator<SQLDataException, LinkedList<SQLRecoverableException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[5] = (Iterator<SQLDataException>) mapIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, (long) 0);
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) skippingIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object object0 = new Object();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) linkedList0);
      iteratorArray0[1] = (Iterator<String>) resettableListIterator0;
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", false);
      iteratorArray0[3] = (Iterator<String>) singletonIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "{B`%e";
      String string1 = "5`@s";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{B`%e");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("{B`%e", "5`@s", sQLIntegrityConstraintViolationException0);
      DataTruncation dataTruncation0 = new DataTruncation(91, false, false, 0, (-277), sQLNonTransientConnectionException0);
      dataTruncation0.getStackTrace();
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.size(singletonIterator0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      Iterator<HashSet<Object>>[] iteratorArray0 = (Iterator<HashSet<Object>>[]) Array.newInstance(Iterator.class, 5);
      ArrayList<HashSet<Object>> arrayList0 = new ArrayList<HashSet<Object>>();
      LoopingListIterator<HashSet<Object>> loopingListIterator0 = new LoopingListIterator<HashSet<Object>>(arrayList0);
      iteratorArray0[0] = (Iterator<HashSet<Object>>) loopingListIterator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super HashSet<Object>>) comparator0, (Iterator<? extends HashSet<Object>>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) linkedList0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) resettableListIterator0);
      ResettableListIterator<StringTokenizer> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) resettableListIterator1, (Iterator<? extends StringTokenizer>) resettableListIterator0);
      ArrayIterator<SQLNonTransientConnectionException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLNonTransientConnectionException>("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("ok");
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("ok");
      String string0 = IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) constantTransformer0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals("[ok]", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 637);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      String string0 = "";
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      int int0 = 0;
      IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode2, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLException>) stack0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 3858, (-1446));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) orderedIterator0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(", ");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("JL<eLmqZi%mZ", "$),RoJB", sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("$),RoJB", sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLIntegrityConstraintViolationException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterable<Object> iterable0 = IteratorUtils.asIterable((Iterator<?>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Properties properties0 = new Properties();
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 6);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class4;
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      classArray0[5] = class5;
      Transformer<Object, Properties> transformer0 = InvokerTransformer.invokerTransformer("/i", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) properties0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.getIterator(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 1083, 1083);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Predicate<SQLDataException> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) predicate0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getFirstChild();
      iIOMetadataNode0.getParentNode();
      iIOMetadataNode0.setPrefix("");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      int int0 = 4;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "5 t8QJa/kGFALL", 4, sQLTransientException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(priorityQueue0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>(4);
      loopingIterator0.hasNext();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super BatchUpdateException>>) arrayList0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) loopingIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 4, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 0;
      int int1 = 1547;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 1547);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, 3, 3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class0);
      serviceLoader0.spliterator();
      serviceLoader0.reload();
      Iterator<DataTruncation> iterator0 = serviceLoader0.iterator();
      Class<DataTruncation> class1 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) iterator0, class1);
      IteratorUtils.size((Iterator<?>) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "Estimated size must be greater than 0");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Estimated size must be greater than 0", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", 0, sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", "org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", sQLTimeoutException0);
      sQLDataException0.addSuppressed(sQLTimeoutException1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLTimeoutException1);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (-1311));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -1311
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>((String) null);
      OrderedMapIterator<String, HashSet<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<String>) orderedMapIterator0, (Transformer<? super String, String>) constantTransformer0);
      int int0 = IteratorUtils.size(singletonListIterator0);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) resettableListIterator0, (Iterator<? extends Properties>) resettableListIterator0);
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.arrayIterator(propertiesArray0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.LoopingIterator", "org.apache.commons.collections4.iterators.LoopingIterator", 8);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.LoopingIterator", "org.apache.commons.collections4.iterators.LoopingIterator", 8);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.LoopingIterator", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("4v[_", "4v[_", 8, sQLNonTransientConnectionException3);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("", "");
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException8;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0;
      ArrayListIterator<SQLNonTransientConnectionException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, sQLTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1048), true, true, (-1048), (-1048), sQLTransientException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-1048), true, true, (-1048), 0);
      dataTruncationArray0[1] = dataTruncation1;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>(arrayList0);
      PriorityQueue<SQLNonTransientConnectionException>[] priorityQueueArray0 = (PriorityQueue<SQLNonTransientConnectionException>[]) Array.newInstance(PriorityQueue.class, 1);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[0] = priorityQueue0;
      IteratorUtils.arrayIterator(priorityQueueArray0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(stack0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`T#8J.s=/JMvHG(q[");
      stack0.add((SQLTransientException) sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLIntegrityConstraintViolationException0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(comparatorPredicate0, predicate0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[2];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      IteratorUtils.matchesAny((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) uniquePredicate0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>(vector0);
      PriorityQueue<SQLNonTransientConnectionException>[] priorityQueueArray0 = (PriorityQueue<SQLNonTransientConnectionException>[]) Array.newInstance(PriorityQueue.class, 0);
      IteratorUtils.arrayIterator(priorityQueueArray0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(stack0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`T#8J.s=/JMvHG(q[");
      stack0.add((SQLTransientException) sQLTransactionRollbackException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(comparatorPredicate0, comparatorPredicate0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[6] = (SQLTransientException) sQLTransactionRollbackException0;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      IteratorUtils.matchesAny((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) comparatorPredicate0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = new SingletonIterator<Object>(object0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      boolean boolean0 = IteratorUtils.contains((Iterator<Integer>) resettableIterator0, (Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Object object0 = new Object();
      HashMap<SQLNonTransientConnectionException, SQLClientInfoException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLClientInfoException>();
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLClientInfoException>(hashMap0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) entrySetMapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) treeSet0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, StringTokenizer> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, StringTokenizer>) orderedMapIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Object object0 = new Object();
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("YEg.9i");
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Object object0 = new Object();
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLTimeoutException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, ServiceLoader<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLSyntaxErrorException, ServiceLoader<Object>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, ServiceLoader<Object>>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MapIterator<Vector<Properties>, ArrayList<Iterator<DataTruncation>>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Vector<Properties>, ArrayList<Iterator<DataTruncation>>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) mapIterator1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("z", "z", true);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      ExceptionClosure.exceptionClosure();
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator((StringTokenizer) null);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) listIterator0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Iterator<InstanceofPredicate> iterator0 = EmptyIterator.emptyIterator();
      List<Predicate<Object>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<Object>>) iterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Properties properties0 = new Properties();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Closure must not be null", "Closure must not be null", sQLWarning0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("V<+l");
      properties0.put(sQLInvalidAuthorizationSpecException0, sQLNonTransientException0);
      properties0.values();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/#gnsxK/e", "");
      sQLTransientConnectionException0.fillInStackTrace();
      sQLClientInfoException0.initCause(sQLTransientConnectionException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      IteratorUtils.getIterator(sQLClientInfoException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("??F62b%1dkRKVgR");
      IteratorUtils.getIterator(stringTokenizer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator((BatchUpdateException) null);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Xb<'AKu}e.+V", "Xb<'AKu}e.+V", 0, sQLClientInfoException0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, true);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, "Xb<'AKu}e.+V", (-2973));
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException(";oV(|uY#2hGCN", (String) null, 2788);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("setValue() is not supported", "Xb<'AKu}e.+V", 1914);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException(sQLRecoverableException3);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("i0k^HrVde%", "setValue() is not supported", 1914, sQLRecoverableException3);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("b;[U0+5r\"8?XGv\"oBb", sQLRecoverableException3);
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 12, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u+0(*bb*2");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("LESS", "org.apache.commons.collections4.IteratorUtils");
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("LESS", (int[]) null, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(batchUpdateException0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      IteratorUtils.toString(iterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataException0.getStackTrace();
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.singletonListIterator(sQLDataException0);
      assertTrue(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("oVg.apach.commons.collectins4.trie.AbstractPatriciaTrie$TrieMapIterator", "'(}m", (-1431));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, (-1431));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, 24);
      sQLDataExceptionArray0[0] = sQLDataException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 24, 24);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = 9;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Locale.Category[]) null, 9, 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ArrayList<SQLWarning>[] arrayListArray0 = (ArrayList<SQLWarning>[]) Array.newInstance(ArrayList.class, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(arrayListArray0, (-1137), (-1137));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("T<Kb3m");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "Cannot use setValue() when the object being set is already in the map");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<SQLException> allPredicate0 = new AllPredicate<SQLException>(predicateArray0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      UniquePredicate<SQLNonTransientConnectionException> uniquePredicate0 = new UniquePredicate<SQLNonTransientConnectionException>();
      UniquePredicate<String> uniquePredicate1 = new UniquePredicate<String>();
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) allPredicate0);
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) resettableIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, (-1233));
      sQLTimeoutException0.printStackTrace();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      int int0 = 1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) listIterator0, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, (-2341));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 2);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<BatchUpdateException>) listIterator0;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[9];
      int[] intArray0 = new int[2];
      intArray0[0] = 14;
      intArray0[1] = 14;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("@EQ", "@EQ", 14, intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "@EQ", 0, intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("@EQ", "@EQ", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException();
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 14;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "@EQ");
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("", "m_xqt+vVp0cDF", 14, longArray0, sQLTimeoutException0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException();
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException("m_xqt+vVp0cDF", "org.apache.commons.collections4.functors.UniquePredicate", 0, intArray0);
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      BatchUpdateException batchUpdateException8 = new BatchUpdateException("", "delimiter may not be null", intArray0, sQLTimeoutException0);
      batchUpdateExceptionArray0[8] = batchUpdateException8;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      iteratorArray0[1] = (Iterator<BatchUpdateException>) objectArrayIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(iteratorArray0, 10);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      ArrayDeque<SQLTransientException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientException>[]) Array.newInstance(ArrayDeque.class, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(arrayDequeArray0, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      String[] stringArray0 = new String[0];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ", ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "o?j/#E1-e{&B";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(stringArray0, (-1856));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, (-3127));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLWarning0);
      DataTruncation dataTruncation0 = new DataTruncation((-1875), true, true, (-1875), (-1875), sQLTransientException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, (-1875));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("|K%B");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException0);
      ConstantTransformer<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException> constantTransformer0 = new ConstantTransformer<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) constantTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((String[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("6vk]");
      Transformer<String, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.apply((Iterator<IIOMetadataNode>) listIterator0, (Closure<? super IIOMetadataNode>) closure0);
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>("6vk]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<IIOMetadataNode>) null, (Closure<? super IIOMetadataNode>) closure0);
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.apply((Iterator<IIOMetadataNode>) listIterator0, (Closure<? super IIOMetadataNode>) closure0);
      assertFalse(listIterator0.hasNext());
  }
}
