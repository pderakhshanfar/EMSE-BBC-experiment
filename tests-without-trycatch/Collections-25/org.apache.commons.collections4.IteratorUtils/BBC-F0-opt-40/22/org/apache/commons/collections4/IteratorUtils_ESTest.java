/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 09:10:04 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "-/1gIMWaDb'qQ& 9", sQLTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientException0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 0);
      Hashtable<SQLException, String> hashtable0 = new Hashtable<SQLException, String>(370);
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      SwitchTransformer<SQLDataException, String> switchTransformer0 = new SwitchTransformer<SQLDataException, String>((Predicate<? super SQLDataException>[]) null, transformerArray0, transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, String>) switchTransformer0, "", "Closure must not be null", "-/1gIMWaDb'qQ& 9");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("|Xzmk%\"5zk", "%4d/iz", map0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLDataException sQLDataException0 = new SQLDataException("The current criterion '", sQLClientInfoException1);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map0, sQLDataException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException((String) null, "}3#PHp$syJ", hashMap0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(predicateTransformer0);
      IteratorUtils.find((Iterator<SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) transformerPredicate0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      IteratorUtils.singletonListIterator(priorityQueue0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("rC:_uxDVX[FW_p-v}", "5)ec;-(<~C%");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<IIOMetadataNode, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<IIOMetadataNode, IIOMetadataNode>("5)ec;-(<~C%", classArray0, classArray0);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) invokerTransformer0);
      Iterator<IIOMetadataNode> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) iterator1, (Iterator<? extends IIOMetadataNode>) iterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '5)ec;-(<~C%' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("s", "{ihjT/w3*EhetoERkT~", 78, sQLNonTransientException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLRecoverableException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0, sQLTransientException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(78, true, false, 0, 0, sQLTransientException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-912), false, true, (-267), 123);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-2281), false, false, (-2007), 123, dataTruncation1);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-267), false, true, (-924), 410, dataTruncation3);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(0, false, true, 3577, 410);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(0, false, true, 0, (-3285));
      dataTruncationArray0[6] = dataTruncation6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 0, (-2281));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) singletonIterator0, 0);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties(properties2);
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties(properties1);
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Transformer<Object, StringTokenizer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Properties, StringTokenizer> ifTransformer0 = new IfTransformer<Properties, StringTokenizer>(predicate0, transformer0, transformer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableIterator0, (Transformer<? super Properties, ? extends StringTokenizer>) ifTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super StringTokenizer>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Closure<ArrayList>>) singletonIterator0, (Predicate<? super Closure<ArrayList>>) transformerPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<InstanceofPredicate, ClientInfoStatus> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) mapIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Predicate<Object>>) enumeration0, (Collection<? super Predicate<Object>>) hashSet0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("2g7N3a");
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, 606L);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '2g7N3a' on 'class java.sql.SQLSyntaxErrorException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) singletonIterator0, 0);
      sQLNonTransientConnectionException0.getStackTrace();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[7];
      intArray0[1] = 0;
      intArray0[2] = (-788);
      intArray0[3] = 0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      intArray0[4] = 251;
      intArray0[5] = 0;
      intArray0[6] = 1;
      SQLException sQLException0 = new SQLException("bX7s[S@|ocjB+hI|", "bX7s[S@|ocjB+hI|", 1, sQLNonTransientConnectionException1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException();
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1331), 0, 0, 0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) batchUpdateException3, comparator0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, (Closure<? super Object>) null, (Closure<? super Object>) null);
      Hashtable<InstanceofPredicate, Closure<Object>> hashtable0 = new Hashtable<InstanceofPredicate, Closure<Object>>();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>(hashtable0);
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<Locale.FilteringMode>) singletonListIterator0, (Closure<? super Locale.FilteringMode>) closure0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1013;
      intArray0[1] = 935;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) singletonListIterator0, (Predicate<? super BatchUpdateException>) nullIsFalsePredicate0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[1] = (Iterator<DataTruncation>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) resettableListIterator0;
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
      iteratorArray0[2] = (Iterator<DataTruncation>) listIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      Predicate<SQLException> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) predicate0);
      PredicateTransformer<SQLDataException> predicateTransformer0 = new PredicateTransformer<SQLDataException>(predicate1);
      SQLDataException sQLDataException0 = new SQLDataException();
      Boolean boolean0 = predicateTransformer0.transform(sQLDataException0);
      PredicateTransformer.predicateTransformer((Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      booleanArray0[0] = boolean0;
      sQLDataException0.getSuppressed();
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.arrayIterator(booleanArray0);
      IteratorUtils.matchesAll((Iterator<Boolean>) resettableIterator0, (Predicate<? super Boolean>) predicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("List must not be null", "List must not be null", (-1), sQLDataException0);
      IteratorUtils.getIterator(sQLTimeoutException0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(identityPredicate0, (Closure<? super Object>) null);
      IfClosure.ifClosure((Predicate<? super SQLRecoverableException>) identityPredicate0, (Closure<? super SQLRecoverableException>) ifClosure0);
      IteratorUtils.apply((Iterator<SQLTransientException>) null, (Closure<? super SQLTransientException>) ifClosure0);
      MapIterator<DataTruncation, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(o>@63k;(4)8iAq");
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) singletonIterator0, 0);
      HashSet<SQLNonTransientConnectionException> hashSet0 = new HashSet<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(hashSet0);
      IteratorUtils.size(loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("b]hIb");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransactionRollbackException0, false);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("&qfXeH_|~|_1oIa'", sQLTransactionRollbackException0);
      SQLWarning sQLWarning0 = new SQLWarning("b]hIb", sQLTimeoutException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLWarning0);
      predicateArray0[1] = predicate0;
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[2] = predicate1;
      PredicateTransformer<SQLDataException> predicateTransformer0 = new PredicateTransformer<SQLDataException>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform((SQLDataException) null);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(boolean0);
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      Predicate<Object> predicate2 = TruePredicate.truePredicate();
      predicateArray0[4] = predicate2;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      sQLTimeoutException0.getStackTrace();
      Predicate<Object> predicate3 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) allPredicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate3);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLTransientException>) singletonIterator0, (Predicate<? super SQLTransientException>) notPredicate0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("~uM#0<e:,;e^REw");
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) singletonIterator0, 0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("V8", "ZhlsH@J");
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IteratorUtils.isEmpty(singletonIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ZhlsH@J", "", (-496), sQLNonTransientConnectionException0);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("V8", "");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, (Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0);
      iteratorArray0[0] = iterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("V8", "ZhlsH@J");
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) singletonIterator0, 0);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ta%pP", sQLNonTransientConnectionException0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2887);
      intArray0[1] = (-2887);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Iterator getValue() can only be called after next() and before remove()", "(o>@63k;(4)8\"iAq", (-2887), intArray0, sQLNonTransientConnectionException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[1] = predicate1;
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate2 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      predicateArray0[2] = predicate2;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[3] = (Predicate<Object>) comparatorPredicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLNonTransientConnectionException0);
      predicateArray0[4] = (Predicate<Object>) identityPredicate0;
      Predicate<Object> predicate3 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate2);
      predicateArray0[5] = predicate3;
      Properties properties0 = new Properties();
      Predicate<Object> predicate4 = EqualPredicate.equalPredicate((Object) properties0);
      predicateArray0[6] = predicate4;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(onePredicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLTransientConnectionException>) nullIsTruePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) predicate1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Collection must not be null");
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Transformer<? super Locale.FilteringMode, ? extends String>) transformer0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1462);
      intArray0[1] = (-1462);
      intArray0[2] = 4;
      SQLException sQLException0 = new SQLException("Collection must not be null", "ci`r}&OLQ`vkdpa+");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ci`r}&OLQ`vkdpa+");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Collection must not be null", "Collection must not be null", (-1462), intArray0, sQLException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLTransientConnectionException>) predicate0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) nullIsTruePredicate0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1462);
      objectArray0[1] = (Object) listIterator0;
      objectArray0[2] = (Object) "Collection must not be null";
      objectArray0[3] = (Object) iterator0;
      IteratorUtils.arrayIterator(objectArray0, 4);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.getIterator("(o>@63k;(4)8iq");
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLInvalidAuthorizationSpecException>>) null, (Transformer<? super Iterator<SQLInvalidAuthorizationSpecException>, ? extends SQLTransactionRollbackException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("V8", "V8");
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) listIterator0);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) listIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      IteratorUtils.singletonListIterator(locale_FilteringMode0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Enumeration must not be null", sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(":iZLsFV", sQLTransientException0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-45);
      intArray0[1] = (-45);
      intArray0[2] = (-45);
      intArray0[3] = (-45);
      intArray0[4] = (-45);
      intArray0[5] = (-45);
      intArray0[6] = (-45);
      intArray0[7] = (-45);
      intArray0[8] = 1810;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(":iZLsFV", (String) null, (-45), intArray0, sQLTransientConnectionException0);
      ListIterator<BatchUpdateException> listIterator1 = IteratorUtils.singletonListIterator(batchUpdateException0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLTransientConnectionException>) nullIsTruePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) listIterator1, (Predicate<? super BatchUpdateException>) nullIsTruePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) listIterator0);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) listIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ListIterator<Locale.FilteringMode> listIterator1 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null, (Closure<? super Object>) null);
      Closure<Locale.FilteringMode>[] closureArray0 = (Closure<Locale.FilteringMode>[]) Array.newInstance(Closure.class, 4);
      Closure<Locale.FilteringMode> closure0 = ExceptionClosure.exceptionClosure();
      closureArray0[0] = closure0;
      Closure<Locale.FilteringMode> closure1 = ExceptionClosure.exceptionClosure();
      closureArray0[1] = closure1;
      Closure<Locale.FilteringMode> closure2 = NOPClosure.nopClosure();
      closureArray0[2] = closure2;
      ForClosure<Locale.FilteringMode> forClosure0 = new ForClosure<Locale.FilteringMode>((-849), closure1);
      closureArray0[3] = (Closure<Locale.FilteringMode>) forClosure0;
      ChainedClosure<Locale.FilteringMode> chainedClosure0 = new ChainedClosure<Locale.FilteringMode>(closureArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Locale.FilteringMode>) listIterator1, (Closure<? super Locale.FilteringMode>) chainedClosure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) listIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLNonTransientConnectionException0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 32;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 686;
      intArray0[7] = (-3138);
      intArray0[8] = 32;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fq", "Iterator getValue() can only be called after next() and before remove()", 32, intArray0, sQLNonTransientConnectionException0);
      ListIterator<BatchUpdateException> listIterator1 = IteratorUtils.singletonListIterator(batchUpdateException0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) listIterator0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLTransientConnectionException>) nullIsTruePredicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) listIterator1, (Predicate<? super BatchUpdateException>) notPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Transformer<SQLNonTransientException, Class<SQLNonTransientConnectionException>>[]) null, 100, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("b]hIb");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransactionRollbackException0, false);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("&qfXeH_|~|_1oIa'", sQLTransactionRollbackException0);
      SQLWarning sQLWarning0 = new SQLWarning("b]hIb", sQLTimeoutException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLWarning0);
      predicateArray0[1] = predicate0;
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[2] = predicate1;
      PredicateTransformer<SQLDataException> predicateTransformer0 = new PredicateTransformer<SQLDataException>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform((SQLDataException) null);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(boolean0);
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      Predicate<Object> predicate2 = TruePredicate.truePredicate();
      predicateArray0[4] = predicate2;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Predicate<Object> predicate3 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) allPredicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate3);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLTransientException>) singletonIterator0, (Predicate<? super SQLTransientException>) notPredicate0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) listIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) linkedHashSet0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 7);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Iterator getValue() can only be called after next() and before remove()", sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Node must not be null", "1{[NQ9X[C9l=f7Cx_", 0, intArray0, sQLSyntaxErrorException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      NullIsTruePredicate<Object> nullIsTruePredicate1 = new NullIsTruePredicate<Object>(predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLTransientConnectionException>) predicate0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) nullIsTruePredicate1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      TruePredicate.truePredicate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null, (Closure<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Locale.FilteringMode>) listIterator0, (Closure<? super Locale.FilteringMode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ExceptionFactory.exceptionFactory();
      Class<String> class0 = String.class;
      Factory<String> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("Z5b)Pj~Kbr");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) factoryTransformer0, "Class to instantiate must not be null", (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) listIterator0);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) listIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ListIterator<Locale.FilteringMode> listIterator1 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null, (Closure<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Locale.FilteringMode>) listIterator1, (Closure<? super Locale.FilteringMode>) ifClosure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[8];
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<StringTokenizer> class1 = StringTokenizer.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      Class<SQLDataException> class3 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class3);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      Class<SQLNonTransientException> class4 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class4);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class5);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class6);
      instanceofPredicateArray0[6] = instanceofPredicate6;
      Class<IIOMetadataNode> class7 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate7 = new InstanceofPredicate(class7);
      instanceofPredicateArray0[7] = instanceofPredicate7;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableListIterator0, 10);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      MapIterator<SQLSyntaxErrorException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      IteratorUtils.emptyMapIterator();
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(linkedList0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 235, batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTimeoutException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      MapIterator<SQLSyntaxErrorException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      MapIterator<SQLWarning, ArrayDeque<Properties>> mapIterator1 = IteratorUtils.emptyMapIterator();
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(linkedList0);
      IteratorUtils.peekingIterator((Iterator<? extends StringTokenizer>) reverseListIterator0);
      Integer integer0 = new Integer(4228);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) mapIterator1, (Transformer<? super SQLWarning, String>) null, "*|5WuH2(", "*|5WuH2(", "*|5WuH2(");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      OrderedMapIterator<BatchUpdateException, Locale.FilteringMode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) orderedMapIterator0, (Predicate<? super BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Properties properties0 = new Properties();
      Transformer<Object, Properties> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int[] intArray0 = new int[9];
      intArray0[0] = (-534);
      intArray0[1] = (-534);
      intArray0[2] = (-534);
      intArray0[3] = (-534);
      intArray0[4] = (-1);
      intArray0[5] = (-534);
      intArray0[6] = (-534);
      intArray0[7] = (-534);
      intArray0[8] = (-534);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("The predicate to call must not be null", intArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The predicate to call must not be null", "", (-534), batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTimeoutException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLSyntaxErrorException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) nullIsTruePredicate0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      MapIterator<DataTruncation, String> mapIterator1 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, String>(mapIterator1);
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) abstractMapIteratorDecorator0);
      ListIterator<SQLWarning> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) iterator0);
      IteratorUtils.toString((Iterator<SQLWarning>) listIterator1, (Transformer<? super SQLWarning, String>) factoryTransformer0, "", "", "");
      IteratorUtils.asIterable((Iterator<?>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<Object>) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(stack0);
      IteratorUtils.isEmpty(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientException[]) null, (-2552));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) listIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) listIterator0, 61);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.NullIsTruePredicate", "Estimated size must be greater than 0", 1693);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("%", "Estimated size must be greater than 0", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.NullIsTruePredicate", "Estimated size must be greater than 0", sQLDataException0);
      SQLDataException sQLDataException2 = new SQLDataException("%", "Estimated size must be greater than 0", sQLInvalidAuthorizationSpecException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("%", "", 16, sQLDataException1);
      sQLDataExceptionArray0[3] = sQLDataException3;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      Transformer<SQLDataException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLDataException>) objectArrayIterator0, (Transformer<? super SQLDataException, String>) transformer0, "", "", "");
      IteratorUtils.singletonListIterator((IIOMetadataNode) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      String string0 = "org.apache.commons.collections4.IteratorUtils";
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.IteratorUtils");
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Transformer<? super Locale.FilteringMode, ? extends String>) transformer0);
      IteratorUtils.isEmpty(orderedIterator0);
      IteratorUtils.emptyListIterator();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator");
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      MapIterator<StringTokenizer, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<StringTokenizer, Integer> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends Integer>) mapIterator0);
      String string0 = "6/<4)[(";
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      Class<Integer> class8 = Integer.class;
      classArray0[8] = class8;
      Transformer<Object, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("6/<4)[(", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) mapIterator1, (Transformer<? super StringTokenizer, ? extends SQLTransientConnectionException>) transformer0);
      iteratorArray0[0] = iterator0;
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      MapIterator<SQLSyntaxErrorException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      IteratorUtils.emptyMapIterator();
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(linkedList0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends StringTokenizer>) reverseListIterator0);
      Integer integer0 = new Integer(4228);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      Closure<StringTokenizer> closure0 = TransformerClosure.transformerClosure((Transformer<? super StringTokenizer, ?>) constantTransformer0);
      IteratorUtils.apply(iterator0, (Closure<? super StringTokenizer>) closure0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) listIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) linkedHashSet0);
      IteratorUtils.getIterator(enumeration0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<BatchUpdateException> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) resettableListIterator0);
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) listIterator1, (Predicate<? super BatchUpdateException>) instanceofPredicate0);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("9(A2RHmE(MQ");
      Iterator<Integer> iterator2 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) iterator1, (Transformer<? super BatchUpdateException, ? extends Integer>) transformer0);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator2);
      IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) iterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.IteratorUtils");
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Transformer<? super Locale.FilteringMode, ? extends String>) transformer0);
      IteratorUtils.isEmpty(orderedIterator0);
      IteratorUtils.emptyListIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) factoryTransformer0, "", "Cannot add to list until next() or previous() called", "Cannot add to list until next() or previous() called");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      MapIterator<SQLSyntaxErrorException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getParentNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      MapIterator<SQLWarning, ArrayDeque<Properties>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      IteratorUtils.asIterable((Iterator<?>) listIterator0);
      OrderedIterator<SQLWarning> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("T<:");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      IteratorUtils.toString((Iterator<SQLWarning>) orderedIterator0, (Transformer<? super SQLWarning, String>) factoryTransformer0, "B^}0BQ$H4&Ma-^pz+)", "T<:", "T<:");
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      IteratorUtils.asIterable((Iterator<?>) listIterator0);
      EmptyOrderedIterator.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) mapIterator1;
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) zippingIterator0, (Transformer<? super SQLWarning, String>) factoryTransformer0, (String) null, "bAyP[ ", "T;{45/_]@{!h9I>P@b");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      MapIterator<SQLSyntaxErrorException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 5);
      MapIterator<Locale.FilteringMode, Locale.FilteringMode> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<Locale.FilteringMode>) mapIterator1;
      BoundedIterator<Locale.FilteringMode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator1, 0L, 282L);
      iteratorArray0[1] = (Iterator<Locale.FilteringMode>) boundedIterator0;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      iteratorArray0[2] = (Iterator<Locale.FilteringMode>) singletonIterator0;
      Iterator<Locale.FilteringMode> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[3] = iterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iteratorArray0[0]);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>) listIterator0, (Iterator<? extends Predicate<Object>>) resettableIterator0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.emptyMapIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate1 = new UniquePredicate<InstanceofPredicate>();
      IteratorUtils.asIterable((Iterator<?>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      MapIterator<SQLSyntaxErrorException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      IteratorUtils.emptyMapIterator();
      MapIterator<IIOMetadataNode, SQLClientInfoException> mapIterator1 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) mapIterator1, (Transformer<? super IIOMetadataNode, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Iterator<SQLTransientException> iterator0 = EmptyIterator.emptyIterator();
      SkippingIterator<SQLTransientException> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 807L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) skippingIterator0, (Iterator<? extends SQLTransientException>) skippingIterator0, (Iterator<? extends SQLTransientException>) iterator0);
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyMapIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<Stack<ArrayList>>) listIterator0, (Transformer<? super Stack<ArrayList>, String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "[]", "Transformer must not be null", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      UniquePredicate<InstanceofPredicate> uniquePredicate1 = new UniquePredicate<InstanceofPredicate>();
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      IteratorUtils.asIterable((Iterator<?>) listIterator0);
      OrderedIterator<SQLWarning> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("B^}0BQ$H4&Ma-^pz+)");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      IteratorUtils.toString((Iterator<SQLWarning>) orderedIterator0, (Transformer<? super SQLWarning, String>) factoryTransformer0, "B^}0BQ$H4&Ma-^pz+)", "B^}0BQ$H4&Ma-^pz+)", "B^}0BQ$H4&Ma-^pz+)");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OrderedMapIterator<SQLException, PriorityQueue<Transformer>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.contains((Iterator<SQLException>) orderedMapIterator0, (Object) orderedMapIterator0);
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) resettableListIterator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("t4ayiBf3", "t4ayiBf3");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("Hh!!", "Unsupported object type: null", 100);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("Unsupported object type: null", "h6.la");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("", "t4ayiBf3", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) uniquePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("add() not supported for empty Iterator", "add() not supported for empty Iterator");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("add() not supported for empty Iterator", "add() not supported for empty Iterator", sQLSyntaxErrorException0);
      IteratorUtils.singletonListIterator((SQLException) sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) null, 721);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) listIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) linkedHashSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("=RRvmAC{o:S-H-S5");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("Entry does not exist: ", "Entry does not exist: ");
      IteratorUtils.nodeListIterator(nodeList0);
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 7);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      int int0 = 3905;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 3905, 10);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(iterator0);
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) listIteratorWrapper0);
      IteratorUtils.size(iterator1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.emptyMapIterator();
      MapIterator<String, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<String>) mapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLDataException.class) , any(java.sql.SQLDataException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<SQLDataException> comparatorPredicate0 = new ComparatorPredicate<SQLDataException>(sQLDataException0, comparator0, comparatorPredicate_Criterion0);
      PredicateTransformer<SQLDataException> predicateTransformer0 = new PredicateTransformer<SQLDataException>(comparatorPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) boolean0, 1854, (-1195));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedIterator0, (Class<SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedIterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size(listIterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<?>) orderedIterator0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) singletonIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Hashtable<Integer, String> hashtable0 = new Hashtable<Integer, String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 2386;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("B4T<'zt", "B4T<'zt", 2386);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, true);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) singletonIterator0, 2386);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2385
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) singletonIterator0, (Predicate<? super InstanceofPredicate>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("G4sc^jRe$94^wSBHlN+", "G4sc^jRe$94^wSBHlN+");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      IteratorUtils.singletonListIterator(priorityQueue0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(stack0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) loopingIterator0);
      IteratorUtils.emptyMapIterator();
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) orderedIterator0);
      IteratorUtils.loopingListIterator(list0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, 123, 100);
      IteratorUtils.getIterator(dataTruncation0);
      IteratorUtils.isEmpty(listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1328);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-263));
      integerArray0[3] = integer3;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(integerArray0, 91);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>((Comparator<? super InstanceofPredicate>) null);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>((SortedSet<? extends InstanceofPredicate>) treeSet0);
      Predicate<Locale.FilteringMode> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Locale.FilteringMode>>) priorityQueue0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Transformer<? super Locale.FilteringMode, ? extends String>) transformer0);
      IteratorUtils.isEmpty(orderedIterator0);
      Iterator<DataTruncation> iterator1 = EmptyIterator.emptyIterator();
      OrderedIterator<DataTruncation> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) iterator1, (Iterator<? extends DataTruncation>) iterator1, (Iterator<? extends DataTruncation>) iterator1);
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedIterator1, class0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.getIterator(listIterator0);
      EmptyOrderedIterator.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      OrderedIterator<String> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator1);
      
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedIterator1);
      assertNotNull(enumeration0);
      
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      assertNotNull(iterator0);
      
      OrderedIterator<Integer> orderedIterator2 = IteratorUtils.emptyOrderedIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      IteratorUtils.toString((Iterator<Integer>) orderedIterator2, (Transformer<? super Integer, String>) constantTransformer0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[3] = 0;
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ListIterator<Stack<SQLDataException>> listIterator0 = IteratorUtils.singletonListIterator(stack0);
      EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) "fIC", comparator0);
      IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) predicate0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[14];
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<DataTruncation> class1 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<InstanceofPredicate> class2 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0, 9);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) objectArrayListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate2);
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) listIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      IteratorUtils.find((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) instanceofPredicate1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends String>) orderedIterator0);
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<?>) orderedIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 1872);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 928;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null, 928, 928);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 2386);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.iterators.EmptyMapIterator", "org.apache.commons.collections4.iterators.EmptyMapIterator");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.iterators.EmptyMapIterator", sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Zp=mL=uE:", sQLRecoverableException0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLTimeoutException0);
      IteratorUtils.contains((Iterator<SQLException>) singletonListIterator0, (Object) sQLTimeoutException0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      IteratorUtils.singletonListIterator(stack0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(singletonListIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "\";{E4oM~H9;&q5", sQLTimeoutException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLRecoverableException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "]", 3575, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.iterators.EmptyMapIterator", "Zp=mL=uE:", 3575, sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("!iF`>_?a6O]u");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("Closure must not be null", "", (-544), sQLRecoverableException0);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<?>) orderedIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("{}vG%", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("+_WeO%&S5\u0000", sQLNonTransientException0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      IteratorUtils.contains((Iterator<SQLException>) singletonListIterator0, (Object) sQLTransientConnectionException0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ListIterator<Stack<SQLDataException>> listIterator0 = IteratorUtils.singletonListIterator(stack0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(listIterator0);
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) iterator0);
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("<~V'7{1))@C&", map0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      sQLClientInfoException1.getLocalizedMessage();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("<~V'7{1))@C&", map0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      sQLClientInfoException2.spliterator();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "6,f2m~ 6op<LM1@", "$.YExN?'%,AM-k~H", 512);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("<~V'7{1))@C&", "<~V'7{1))@C&", "", (-2192));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("6,f2m~ 6op<LM1@", "6,f2m~ 6op<LM1@", "", 10);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLClientInfoException0.setStackTrace(stackTraceElementArray0);
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) objectArrayListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Locale.FilteringMode[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLNonTransientException0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = 0;
      intArray0[3] = 0;
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLRecoverableException0);
      IteratorUtils.contains((Iterator<SQLException>) singletonListIterator0, (Object) singletonListIterator0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      IteratorUtils.singletonListIterator(stack0);
      OrderedIterator<InstanceofPredicate> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) iterator0);
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-217);
      intArray0[2] = 10;
      intArray0[3] = 0;
      intArray0[1] = 0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("-X", (String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("-X", intArray0, sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<?>) orderedIterator0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      int int0 = 1872;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) class0, 1872);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.AndPredicate");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.functors.AndPredicate");
      IteratorUtils.getIterator(sQLTimeoutException0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedMapIterator<TreeSet<BatchUpdateException>, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<TreeSet<BatchUpdateException>, SQLNonTransientException>) orderedMapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super EnumSet<Locale.FilteringMode>>) comparator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      IteratorUtils.singletonListIterator(priorityQueue0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      String string0 = null;
      String string1 = "rC:_uxDVX[FW_p-v}";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "rC:_uxDVX[FW_p-v}");
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[9];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[8] = sQLInvalidAuthorizationSpecException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLInvalidAuthorizationSpecException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Hashtable<Integer, String> hashtable0 = new Hashtable<Integer, String>();
      EntrySetMapIterator<Integer, String> entrySetMapIterator0 = new EntrySetMapIterator<Integer, String>(hashtable0);
      hashtable0.keySet();
      InvokerTransformer.invokerTransformer("dUmY");
      Class<Integer> class0 = Integer.class;
      IteratorUtils.toArray((Iterator<? extends Integer>) entrySetMapIterator0, class0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) entrySetMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<?>) null, (Collection<? super Object>) list0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      LoopingIterator<Locale.FilteringMode> loopingIterator0 = new LoopingIterator<Locale.FilteringMode>(treeSet0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) loopingIterator0, (Transformer<? super Locale.FilteringMode, ? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "org.apache.commons.collections4.list.CursorableLinkedList$Cursor", (-1922), sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "wRzr.Df2n}ONe", 1);
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "W-^", 1073741824, sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException(sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException6;
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("\"$7N\":b?leWZIv3s^");
      Iterator<String> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Transformer<? super Locale.FilteringMode, ? extends String>) transformer0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) iterator1);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      Iterator<DataTruncation> iterator2 = EmptyIterator.emptyIterator();
      MapIterator<DataTruncation, Transformer<SQLTransientException, Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) iterator2, (Iterator<? extends DataTruncation>) iterator2, (Iterator<? extends DataTruncation>) mapIterator0);
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) zippingIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "org.apache.commons.collections4.list.CursorableLinkedList$Cursor", (-1922), sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "wRzr.Df2n}ONe", 1);
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "W-^", 1073741824, sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException(sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException6;
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("\"$7N\":b?leWZIv3s^");
      Iterator<String> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Transformer<? super Locale.FilteringMode, ? extends String>) transformer0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) iterator1);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("wRzr.Df2n}ONe", "h9by", sQLSyntaxErrorException1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLTimeoutException0, comparator0);
      IteratorUtils.find((Iterator<HashSet<String>>) null, (Predicate<? super HashSet<String>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate1);
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate2);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedIterator();
      Integer integer0 = new Integer((-2748));
      int int0 = (-1232);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) integer0, (-1232));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "transformer may not be null";
      int int0 = 2110;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("transformer may not be null", "transformer may not be null", 2110);
      IteratorUtils.getIterator(sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "transformer may not be null", 552);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "org.apache.commons.collections4.list.CursorableLinkedList$Cursor", (-1922), sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "wRzr.Df2n}ONe", 1);
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "W-^", 1073741824, sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException(sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", sQLSyntaxErrorException1);
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "W-^", 1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      IteratorUtils.singletonListIterator(priorityQueue0);
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>();
      PriorityQueue<SQLTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLTransientConnectionException>((SortedSet<? extends SQLTransientConnectionException>) treeSet0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) priorityQueue1);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) iterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(resettableIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) listIteratorWrapper0);
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(arrayDeque0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) loopingIterator0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) listIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0, (Collection<? super InstanceofPredicate>) linkedHashSet0);
      IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) listIterator0, 1854);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("mAlkeoT");
      iIOMetadataNode0.getAttributeNodeNS("", "");
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.removeAttributeNode((Attr) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2525);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2525);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2525);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(530);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2525);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(928);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(928);
      integerArray0[8] = integer8;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 4);
      objectArrayIterator0.reset();
      IteratorUtils.toArray((Iterator<? extends Integer>) objectArrayIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      IteratorUtils.singletonListIterator(priorityQueue0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLNonTransientException0);
      String string0 = "org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator";
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", intArray0, sQLNonTransientException0);
      Iterator<SQLException> iterator0 = null;
      IteratorUtils.contains((Iterator<SQLException>) null, (Object) "org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator");
      Stack<SQLDataException> stack1 = new Stack<SQLDataException>();
      IteratorUtils.singletonListIterator(stack1);
      OrderedIterator<InstanceofPredicate> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) priorityQueue0, 100, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Hashtable<Integer, String> hashtable0 = new Hashtable<Integer, String>();
      EntrySetMapIterator<Integer, String> entrySetMapIterator0 = new EntrySetMapIterator<Integer, String>(hashtable0);
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("dUmY");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(hashtable0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(comparatorPredicate0, comparatorPredicate0);
      predicateArray0[1] = (Predicate<Object>) andPredicate0;
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      predicateArray0[2] = predicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[3] = predicate1;
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[4] = predicate2;
      Predicate<Object> predicate3 = NotNullPredicate.notNullPredicate();
      predicateArray0[5] = predicate3;
      int int0 = 1159;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("$jM#I/tjU#HKT`V.(y", "", 1159);
      Predicate<Object> predicate4 = EqualPredicate.equalPredicate((Object) sQLTimeoutException0);
      predicateArray0[6] = predicate4;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Predicate<Object> predicate5 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) allPredicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate5);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Integer>) entrySetMapIterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Iterator<SQLTransientException> iterator0 = EmptyIterator.emptyIterator();
      SkippingIterator<SQLTransientException> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 807L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) skippingIterator0, (Iterator<? extends SQLTransientException>) iterator0, (Iterator<? extends SQLTransientException>) iterator0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<Predicate<Object>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>) resettableIterator0, (Iterator<? extends Predicate<Object>>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Predicate<Object>>) zippingIterator0, (Predicate<? super Predicate<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hashtable<Integer, String> hashtable0 = new Hashtable<Integer, String>();
      EntrySetMapIterator<Integer, String> entrySetMapIterator0 = new EntrySetMapIterator<Integer, String>(hashtable0);
      InvokerTransformer.invokerTransformer("dUmY");
      Class<Integer> class0 = Integer.class;
      IteratorUtils.toArray((Iterator<? extends Integer>) entrySetMapIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 14);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) null, (Predicate<? super String>) nullIsTruePredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<SQLException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      int[] intArray0 = new int[13];
      intArray0[0] = 0;
      intArray0[1] = (-217);
      intArray0[2] = 10;
      intArray0[3] = 0;
      intArray0[6] = 0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("-X", (String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientException0);
      batchUpdateException0.getNextException();
      sQLNonTransientException0.initCause((Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("-X", intArray0, sQLRecoverableException0);
      IteratorUtils.contains((Iterator<SQLException>) mapIterator0, (Object) batchUpdateException1);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLException>) mapIterator0, 928);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLNonTransientException0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = 0;
      intArray0[3] = 0;
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLRecoverableException0);
      IteratorUtils.contains((Iterator<SQLException>) singletonListIterator0, (Object) singletonListIterator0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ListIterator<Stack<SQLDataException>> listIterator0 = IteratorUtils.singletonListIterator(stack0);
      OrderedIterator<InstanceofPredicate> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) listIterator0, 10, (-169));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MapIterator<SQLException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      int[] intArray0 = new int[13];
      intArray0[0] = 0;
      intArray0[1] = (-217);
      intArray0[2] = 10;
      intArray0[3] = 0;
      intArray0[6] = 0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("-X", (String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("-X", intArray0, sQLRecoverableException0);
      IteratorUtils.contains((Iterator<SQLException>) mapIterator0, (Object) batchUpdateException0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      IteratorUtils.singletonListIterator(stack0);
      OrderedIterator<InstanceofPredicate> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) orderedIterator0, (Predicate<? super InstanceofPredicate>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "org.apache.commons.collections4.list.CursorableLinkedList$Cursor", (-1922), sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "wRzr.Df2n}ONe", 1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "W-^", 1073741824, sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException(sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException6;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) listIterator0, (long) (-1922));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 8);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) listIterator0;
      SQLWarning sQLWarning0 = new SQLWarning("Jwo(M'g_.<", "Node must not be null", 1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLWarning0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0;
      HashMap<Object, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Object, SQLInvalidAuthorizationSpecException>();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLInvalidAuthorizationSpecException>) hashMap0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      iteratorArray0[2] = iterator0;
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      iteratorArray0[3] = iterator1;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      iteratorArray0[4] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0;
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      iteratorArray0[5] = (Iterator<SQLInvalidAuthorizationSpecException>) listIterator1;
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[6] = (Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("c|-dq#<kR9y", "W]h:3eh^]s/KD*bj5I", 1);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1);
      iteratorArray0[7] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) listIterator0, 2386);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2386
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Hashtable<Integer, String> hashtable0 = new Hashtable<Integer, String>();
      EntrySetMapIterator<Integer, String> entrySetMapIterator0 = new EntrySetMapIterator<Integer, String>(hashtable0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLException, Boolean>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null, (-500));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<StringTokenizer, SQLTransientException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, SQLTransientException>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) mapIterator0, (Iterator<? extends StringTokenizer>) orderedMapIterator0, (Iterator<? extends StringTokenizer>) mapIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Iterator<SQLClientInfoException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) null, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) null, (-3694));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -3694
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer integer0 = new Integer((-4649));
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedIterator();
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) orderedIterator0, (long) (-4649));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator0;
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>((SQLIntegrityConstraintViolationException) null);
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      iteratorArray0[2] = iterator0;
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      iteratorArray0[3] = (Iterator<SQLIntegrityConstraintViolationException>) listIterator0;
      SkippingIterator<SQLIntegrityConstraintViolationException> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 1440L);
      iteratorArray0[4] = (Iterator<SQLIntegrityConstraintViolationException>) skippingIterator0;
      TreeSet<SQLIntegrityConstraintViolationException> treeSet0 = new TreeSet<SQLIntegrityConstraintViolationException>();
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(treeSet0);
      iteratorArray0[5] = (Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[6] = (Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0;
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator1, 1440L);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator1, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      String string0 = "/(-}$ho5BCj)";
      iIOMetadataNode0.getAttributeNode("/(-}$ho5BCj)");
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("Do2oHWk", sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("'", "'", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLWarning sQLWarning0 = new SQLWarning(mockThrowable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("j", "j", sQLWarning0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLWarning0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("-hQ", "-hQ", 1073741824, mockThrowable0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("j", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("-hQ", (String) null, 1073741824);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("j");
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(list0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) loopingIterator0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLRecoverableException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends SQLRecoverableException>) orderedMapIterator0);
      MapIterator<SQLInvalidAuthorizationSpecException, SQLRecoverableException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, SQLRecoverableException>) orderedMapIterator1);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0;
      int int0 = (-1320);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(iteratorArray0, (-1320));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) null, (-805L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      IteratorUtils.singletonListIterator(priorityQueue0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(stack0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) loopingIterator0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) null, 252L, 252L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) null, (Predicate<? super Properties>) instanceofPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, 0, 3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MapIterator<SQLException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      String string0 = "-X";
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-217);
      intArray0[2] = 10;
      intArray0[3] = 0;
      intArray0[4] = 0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("-X", (String) null);
      assertEquals("java.sql.SQLNonTransientException: -X", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("-X", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: -X", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("-X", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("-X", intArray0, sQLRecoverableException0);
      assertArrayEquals(new int[] {0, (-217), 10, 0, 0}, intArray0);
      assertEquals("java.sql.SQLNonTransientException: -X", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("-X", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("-X", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: -X", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      assertEquals(5, intArray0.length);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLException>) mapIterator0, (Object) batchUpdateException0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-217), 10, 0, 0}, intArray0);
      assertEquals("java.sql.SQLNonTransientException: -X", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("-X", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("-X", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: -X", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(5, intArray0.length);
      
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      IteratorUtils.singletonListIterator(stack0);
      OrderedIterator<InstanceofPredicate> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "'m<5\\*.RmFR^*^";
      int int0 = 2003;
      SQLDataException sQLDataException0 = new SQLDataException("'m<5*.RmFR^*^", "'m<5*.RmFR^*^", 2003);
      assertEquals("java.sql.SQLDataException: 'm<5*.RmFR^*^", sQLDataException0.toString());
      assertEquals("'m<5*.RmFR^*^", sQLDataException0.getMessage());
      assertEquals("'m<5*.RmFR^*^", sQLDataException0.getSQLState());
      assertEquals(2003, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0, (-1997));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OrderedIterator<TreeSet<SQLTransientException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      OrderedMapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      MapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      assertNotNull(uniquePredicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) resettableIterator0, (Predicate<? super InstanceofPredicate>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "[t`\",|YZRmgA|,Uy", 10);
      assertEquals(10, sQLWarning0.getErrorCode());
      assertEquals("[t`\",|YZRmgA|,Uy", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("(6\"e8^'", "(6\"e8^'", 10, sQLWarning0);
      assertEquals(10, sQLWarning0.getErrorCode());
      assertEquals("[t`\",|YZRmgA|,Uy", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertEquals("(6\"e8^'", sQLTimeoutException0.getMessage());
      assertEquals("(6\"e8^'", sQLTimeoutException0.getSQLState());
      assertEquals(10, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: (6\"e8^'", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      assertEquals(10, sQLWarning0.getErrorCode());
      assertEquals("[t`\",|YZRmgA|,Uy", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertEquals("(6\"e8^'", sQLTimeoutException0.getMessage());
      assertEquals("(6\"e8^'", sQLTimeoutException0.getSQLState());
      assertEquals(10, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: (6\"e8^'", sQLTimeoutException0.toString());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertNotNull(singletonListIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) singletonListIterator0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("(o>@63k?(4t8iAq");
      assertNotNull(iterator0);
      
      int int0 = 552;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 552);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("Entry does not exist: ", "Collection must not be null");
      assertEquals(5, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      int int0 = 100;
      String string0 = stringTokenizer0.nextToken();
      assertEquals("E", string0);
      assertEquals(4, stringTokenizer0.countTokens());
      assertNotNull(string0);
      
      String string1 = stringTokenizer0.nextToken("ZZnSNF8NThlY");
      assertEquals("try does ", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(string1);
      
      String string2 = stringTokenizer0.nextToken("XTPwi");
      assertEquals("not ex", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(string2);
      
      boolean boolean0 = stringTokenizer0.hasMoreElements();
      assertTrue(boolean0);
      assertEquals(1, stringTokenizer0.countTokens());
      
      int int1 = (-1599);
      String string3 = stringTokenizer0.nextToken();
      assertEquals("st: ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(string3);
      
      // Undeclared exception!
//      try { 
        stringTokenizer0.nextToken("0|t%(");
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.StringTokenizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MapIterator<SQLException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-217);
      intArray0[2] = 10;
      intArray0[3] = 0;
      intArray0[4] = 0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("-X", (String) null);
      assertEquals("-X", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: -X", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLNonTransientException0);
      assertEquals("-X", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: -X", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("-X", intArray0, sQLRecoverableException0);
      assertArrayEquals(new int[] {0, (-217), 10, 0, 0}, intArray0);
      assertEquals("-X", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: -X", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("-X", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: -X", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      assertEquals(5, intArray0.length);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLException>) mapIterator0, (Object) batchUpdateException0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-217), 10, 0, 0}, intArray0);
      assertEquals("-X", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: -X", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("-X", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: -X", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(5, intArray0.length);
      
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      SQLDataException sQLDataException0 = new SQLDataException("-X");
      assertEquals("java.sql.SQLDataException: -X", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("-X", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      boolean boolean1 = stack0.add(sQLDataException0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[java.sql.SQLDataException: -X]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals("java.sql.SQLDataException: -X", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("-X", sQLDataException0.getMessage());
      assertTrue(stack0.contains(sQLDataException0));
      
      ListIterator<Stack<SQLDataException>> listIterator0 = IteratorUtils.singletonListIterator(stack0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[java.sql.SQLDataException: -X]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(stack0.contains(sQLDataException0));
      assertNotNull(listIterator0);
      
      OrderedIterator<InstanceofPredicate> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Integer integer0 = new Integer((-3288));
      assertEquals((-3288), (int)integer0);
      assertNotNull(integer0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer0);
      assertNotNull(iterator0);
      
      boolean boolean2 = IteratorUtils.isEmpty(orderedIterator0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      assertNotNull(transformerPredicate0);
      
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(transformerPredicate0, transformerPredicate0);
      assertNotNull(andPredicate0);
      
      Transformer<Object, InstanceofPredicate> transformer1 = InvokerTransformer.invokerTransformer("Array class must not be null");
      assertNotNull(transformer1);
      
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.objectGraphIterator((Predicate<Object>) andPredicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer1);
      assertNotNull(iterator0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotNull(enumSet0);
      
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotNull(resettableIterator0);
      
      Iterator<EnumSet<Locale.FilteringMode>> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotNull(iterator1);
      
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: ", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", (String) null, sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: ", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertNotNull(sQLSyntaxErrorException1);
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      assertEquals(2, sQLSyntaxErrorExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      OrderedIterator<String> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator1);
      
      Iterable<Object> iterable0 = IteratorUtils.asIterable((Iterator<?>) orderedIterator0);
      assertNotNull(iterable0);
      
      int int0 = 10;
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      assertNotNull(resettableIterator0);
      assertEquals(5, integerArray0.length);
      
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) resettableIterator0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertEquals(5, integerArray0.length);
      
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>((Integer) int0);
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Integer integer1 = IteratorUtils.find((Iterator<Integer>) singletonIterator0, (Predicate<? super Integer>) predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(singletonIterator0.hasNext());
      assertNull(integer1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) predicate1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 776);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Hashtable<Integer, String> hashtable0 = new Hashtable<Integer, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<Integer, String> entrySetMapIterator0 = new EntrySetMapIterator<Integer, String>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("dUmY");
      assertNotNull(transformer0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(hashtable0, comparator0, comparatorPredicate_Criterion0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(comparatorPredicate0);
      
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(comparatorPredicate0, comparatorPredicate0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(andPredicate0);
      
      predicateArray0[1] = (Predicate<Object>) andPredicate0;
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      predicateArray0[2] = predicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      predicateArray0[3] = predicate1;
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      predicateArray0[4] = predicate2;
      Predicate<Object> predicate3 = NotNullPredicate.notNullPredicate();
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertNotNull(predicate3);
      
      predicateArray0[5] = predicate3;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("$jM#I/tjU#HKT`V.(y", "", 1159);
      assertEquals("java.sql.SQLTimeoutException: $jM#I/tjU#HKT`V.(y", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals(1159, sQLTimeoutException0.getErrorCode());
      assertEquals("$jM#I/tjU#HKT`V.(y", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      Predicate<Object> predicate4 = EqualPredicate.equalPredicate((Object) sQLTimeoutException0);
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertEquals("java.sql.SQLTimeoutException: $jM#I/tjU#HKT`V.(y", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals(1159, sQLTimeoutException0.getErrorCode());
      assertEquals("$jM#I/tjU#HKT`V.(y", sQLTimeoutException0.getMessage());
      assertNotNull(predicate4);
      
      predicateArray0[6] = predicate4;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      assertNotNull(allPredicate0);
      assertEquals(7, predicateArray0.length);
      
      Predicate<Object> predicate5 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) allPredicate0);
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertNotNull(predicate5);
      assertEquals(7, predicateArray0.length);
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate5);
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertNotNull(nullIsTruePredicate0);
      assertEquals(7, predicateArray0.length);
      
      Integer integer0 = IteratorUtils.find((Iterator<Integer>) entrySetMapIterator0, (Predicate<? super Integer>) nullIsTruePredicate0);
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(integer0);
      assertEquals(7, predicateArray0.length);
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      assertNotNull(identityPredicate0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) identityPredicate0, 1159);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      OrderedIterator<String> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator1);
      
      int int0 = 0;
      String string0 = null;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2782);
      intArray0[1] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLRecoverableException0);
      assertArrayEquals(new int[] {(-2782), 0}, intArray0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      assertEquals(2, intArray0.length);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) int0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[6] = integer0;
      integerArray0[7] = (Integer) 0;
      integerArray0[8] = (Integer) 0;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      assertNotNull(resettableIterator0);
      assertEquals(9, integerArray0.length);
      
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) resettableIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertEquals(9, integerArray0.length);
      
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      Integer integer1 = IteratorUtils.find((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) predicate0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertNotNull(integer1);
      assertEquals(9, integerArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) integer1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = (-4649);
      Integer integer0 = new Integer((-4649));
      assertEquals((-4649), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0, (Predicate<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayList<Properties>[] arrayListArray0 = (ArrayList<Properties>[]) Array.newInstance(ArrayList.class, 6);
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      arrayListArray0[0] = arrayList0;
      ArrayList<Properties> arrayList1 = new ArrayList<Properties>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      arrayListArray0[1] = arrayList1;
      ArrayList<Properties> arrayList2 = new ArrayList<Properties>();
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(arrayList2);
      
      arrayListArray0[2] = arrayList2;
      ArrayList<Properties> arrayList3 = new ArrayList<Properties>();
      assertTrue(arrayList3.equals((Object)arrayList0));
      assertTrue(arrayList3.equals((Object)arrayList1));
      assertTrue(arrayList3.equals((Object)arrayList2));
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertNotNull(arrayList3);
      
      arrayListArray0[3] = arrayList3;
      ArrayList<Properties> arrayList4 = new ArrayList<Properties>();
      assertTrue(arrayList4.equals((Object)arrayList3));
      assertTrue(arrayList4.equals((Object)arrayList1));
      assertTrue(arrayList4.equals((Object)arrayList0));
      assertTrue(arrayList4.equals((Object)arrayList2));
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      assertNotNull(arrayList4);
      
      arrayListArray0[4] = arrayList4;
      ArrayList<Properties> arrayList5 = new ArrayList<Properties>();
      assertTrue(arrayList5.equals((Object)arrayList0));
      assertTrue(arrayList5.equals((Object)arrayList2));
      assertTrue(arrayList5.equals((Object)arrayList1));
      assertTrue(arrayList5.equals((Object)arrayList3));
      assertTrue(arrayList5.equals((Object)arrayList4));
      assertTrue(arrayList5.isEmpty());
      assertEquals(0, arrayList5.size());
      assertNotNull(arrayList5);
      
      arrayListArray0[5] = arrayList5;
      ResettableIterator<ArrayList<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(arrayListArray0, 0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(6, arrayListArray0.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Locale.FilteringMode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Locale.FilteringMode>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      // Undeclared exception!
//      try { 
        abstractOrderedMapIteratorDecorator0.previous();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // Iterator contains no elements
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 392;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 392);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getNextSibling();
      assertNull(node0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MapIterator<SQLException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-217);
      intArray0[2] = 10;
      intArray0[3] = 0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(",k[lD(Rg]$`fCcbB", "");
      assertEquals(",k[lD(Rg]$`fCcbB", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ,k[lD(Rg]$`fCcbB", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("-X", (String) null, 0, intArray1);
      assertArrayEquals(new int[] {0, 10}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: -X", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("-X", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertEquals(2, intArray1.length);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      assertArrayEquals(new int[] {0, 10}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: -X", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("-X", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: -X", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.BatchUpdateException: -X", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertEquals(2, intArray1.length);
      
      Predicate<Object> predicate0 = null;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("/$JXjetSb~^x;st");
      assertNotNull(iIOMetadataNode0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Integer integer0 = new Integer(1723);
      assertEquals(1723, (int)integer0);
      assertNotNull(integer0);
      
      Transformer<Object, SQLException> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) integer0, (Transformer<? super Object, ?>) transformer0);
      assertNotNull(iterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      int int0 = 6006;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1723, 6006);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<BatchUpdateException, SQLDataException>[] hashMapArray0 = (HashMap<BatchUpdateException, SQLDataException>[]) Array.newInstance(HashMap.class, 2);
      HashMap<BatchUpdateException, SQLDataException> hashMap0 = new HashMap<BatchUpdateException, SQLDataException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.IfTransformer", "org.apache.commons.collections4.functors.IfTransformer", 0, (Throwable) null);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.IfTransformer", sQLDataException0.toString());
      assertEquals("org.apache.commons.collections4.functors.IfTransformer", sQLDataException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.IfTransformer", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SQLDataException sQLDataException1 = (SQLDataException)sQLDataException0.fillInStackTrace();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.IfTransformer", sQLDataException0.toString());
      assertEquals("org.apache.commons.collections4.functors.IfTransformer", sQLDataException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.IfTransformer", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.IfTransformer", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.IfTransformer", sQLDataException1.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.IfTransformer", sQLDataException1.getMessage());
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertNotNull(sQLDataException1);
      
      SQLDataException sQLDataException2 = hashMap0.put((BatchUpdateException) null, sQLDataException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.IfTransformer", sQLDataException0.toString());
      assertEquals("org.apache.commons.collections4.functors.IfTransformer", sQLDataException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.IfTransformer", sQLDataException0.getMessage());
      assertSame(sQLDataException0, sQLDataException1);
      assertNull(sQLDataException2);
      
      hashMapArray0[0] = hashMap0;
      HashMap<BatchUpdateException, SQLDataException> hashMap1 = new HashMap<BatchUpdateException, SQLDataException>();
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      hashMapArray0[1] = hashMap1;
      ResettableListIterator<HashMap<BatchUpdateException, SQLDataException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashMapArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      assertEquals(2, hashMapArray0.length);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = (IIOMetadataNode)iIOMetadataNode0.cloneNode(false);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertNotNull(iIOMetadataNode1);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      int[] intArray0 = new int[7];
      intArray0[0] = 833;
      intArray0[1] = 1410;
      intArray0[2] = (-59);
      intArray0[3] = (-1972);
      intArray0[4] = 0;
      intArray0[5] = 91;
      intArray0[6] = 4549;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("delimiter may not be null", intArray0);
      assertArrayEquals(new int[] {833, 1410, (-59), (-1972), 0, 91, 4549}, intArray0);
      assertEquals("delimiter may not be null", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: delimiter may not be null", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      assertEquals(7, intArray0.length);
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 4549;
      longArray0[1] = 2773L;
      longArray0[2] = (-57L);
      longArray0[3] = (long) (-1972);
      longArray0[4] = (long) 833;
      longArray0[5] = (long) 91;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "delimiter may not be null", (-1), longArray0, batchUpdateException0);
      assertArrayEquals(new int[] {833, 1410, (-59), (-1972), 0, 91, 4549}, intArray0);
      assertArrayEquals(new long[] {4549L, 2773L, (-57L), (-1972L), 833L, 91L}, longArray0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertEquals((-1), batchUpdateException1.getErrorCode());
      assertEquals("delimiter may not be null", batchUpdateException1.getSQLState());
      assertEquals("", batchUpdateException1.getMessage());
      assertEquals("delimiter may not be null", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: delimiter may not be null", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException1);
      assertEquals(7, intArray0.length);
      assertEquals(6, longArray0.length);
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0, batchUpdateException1);
      assertArrayEquals(new int[] {833, 1410, (-59), (-1972), 0, 91, 4549}, intArray0);
      assertArrayEquals(new long[] {4549L, 2773L, (-57L), (-1972L), 833L, 91L}, longArray0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertEquals((-1), batchUpdateException1.getErrorCode());
      assertEquals("delimiter may not be null", batchUpdateException1.getSQLState());
      assertEquals("", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException2.getMessage());
      assertNull(batchUpdateException2.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: ", batchUpdateException2.toString());
      assertEquals("delimiter may not be null", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: delimiter may not be null", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException2);
      assertEquals(7, intArray0.length);
      assertEquals(6, longArray0.length);
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", intArray0);
      assertArrayEquals(new int[] {833, 1410, (-59), (-1972), 0, 91, 4549}, intArray0);
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertNull(batchUpdateException3.getSQLState());
      assertEquals("", batchUpdateException3.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException3.toString());
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertNotNull(batchUpdateException3);
      assertEquals(7, intArray0.length);
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 770;
      intArray1[1] = (-59);
      intArray1[2] = 4;
      intArray1[3] = (-1);
      intArray1[4] = 5;
      intArray1[5] = 91;
      intArray1[6] = 0;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException(intArray1, batchUpdateException0);
      assertArrayEquals(new int[] {833, 1410, (-59), (-1972), 0, 91, 4549}, intArray0);
      assertArrayEquals(new int[] {770, (-59), 4, (-1), 5, 91, 0}, intArray1);
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: delimiter may not be null", batchUpdateException4.toString());
      assertEquals(0, batchUpdateException4.getErrorCode());
      assertNull(batchUpdateException4.getSQLState());
      assertEquals("java.sql.BatchUpdateException: delimiter may not be null", batchUpdateException4.getMessage());
      assertEquals("delimiter may not be null", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: delimiter may not be null", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException4);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("2`ZIl4b~", "", 0, longArray0, batchUpdateException2);
      assertArrayEquals(new int[] {833, 1410, (-59), (-1972), 0, 91, 4549}, intArray0);
      assertArrayEquals(new long[] {4549L, 2773L, (-57L), (-1972L), 833L, 91L}, longArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertEquals("", batchUpdateException5.getSQLState());
      assertEquals("java.sql.BatchUpdateException: 2`ZIl4b~", batchUpdateException5.toString());
      assertEquals("2`ZIl4b~", batchUpdateException5.getMessage());
      assertEquals(0, batchUpdateException5.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertEquals((-1), batchUpdateException1.getErrorCode());
      assertEquals("delimiter may not be null", batchUpdateException1.getSQLState());
      assertEquals("", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException2.getMessage());
      assertNull(batchUpdateException2.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: ", batchUpdateException2.toString());
      assertEquals("delimiter may not be null", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: delimiter may not be null", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException5);
      assertEquals(7, intArray0.length);
      assertEquals(6, longArray0.length);
      
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-59);
      intArray2[1] = (-2243);
      intArray2[2] = (-1);
      intArray2[3] = 91;
      intArray2[4] = (-1972);
      intArray2[5] = 770;
      intArray2[6] = (-2243);
      intArray2[7] = 1410;
      intArray2[8] = 0;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("", "", (-2243), intArray2);
      assertArrayEquals(new int[] {(-59), (-2243), (-1), 91, (-1972), 770, (-2243), 1410, 0}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException2));
      assertEquals("", batchUpdateException6.getSQLState());
      assertEquals((-2243), batchUpdateException6.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException6.toString());
      assertEquals("", batchUpdateException6.getMessage());
      assertNotNull(batchUpdateException6);
      assertEquals(9, intArray2.length);
      
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException(intArray1, batchUpdateException3);
      assertArrayEquals(new int[] {833, 1410, (-59), (-1972), 0, 91, 4549}, intArray0);
      assertArrayEquals(new int[] {770, (-59), 4, (-1), 5, 91, 0}, intArray1);
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException6));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException6));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: ", batchUpdateException7.toString());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException7.getMessage());
      assertNull(batchUpdateException7.getSQLState());
      assertEquals(0, batchUpdateException7.getErrorCode());
      assertNull(batchUpdateException3.getSQLState());
      assertEquals("", batchUpdateException3.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException3.toString());
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertNotNull(batchUpdateException7);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 971);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      String string0 = "";
      String string1 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "prefix may not be null", sQLSyntaxErrorException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("prefix may not be null", "o&#CLna\"io b", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 0, 131);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "org.apache.commons.collections4.bidimap.TreeBidiMap", 0, 44);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }
}
