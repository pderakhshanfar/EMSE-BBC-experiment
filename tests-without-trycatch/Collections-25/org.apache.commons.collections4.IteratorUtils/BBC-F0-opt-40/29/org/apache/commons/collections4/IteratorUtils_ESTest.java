/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 09:24:35 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      SingletonListIterator<ArrayDeque<SQLNonTransientException>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<SQLNonTransientException>>(arrayDeque0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<ArrayDeque<SQLNonTransientException>>) singletonListIterator0, 1395);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1394
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<DataTruncation, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends DataTruncation>) orderedMapIterator0);
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) orderedMapIterator1, (Iterator<? extends SQLWarning>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Iterator<String> iterator0 = linkedList0.iterator();
      Iterator<String> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String> iterator2 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator1);
      assertFalse(iterator2.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      DataTruncation dataTruncation0 = new DataTruncation(348, false, false, 0, 0, batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 0, 561);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Vector<Closure<Object>> vector0 = new Vector<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) vector0);
      IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) closure0);
      assertFalse(vector0.contains(closure0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      stack0.add(iIOMetadataNode0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Collection must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Collection must not be null", "Collection must not be null", 93, sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResettableListIterator<Vector<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<Vector<SQLInvalidAuthorizationSpecException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Vector<SQLInvalidAuthorizationSpecException>>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PriorityQueue<Integer>[] priorityQueueArray0 = (PriorityQueue<Integer>[]) Array.newInstance(PriorityQueue.class, 1);
      ResettableListIterator<PriorityQueue<Integer>> resettableListIterator0 = IteratorUtils.arrayListIterator(priorityQueueArray0);
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      String string0 = IteratorUtils.toString((Iterator<PriorityQueue<Integer>>) resettableListIterator0, (Transformer<? super PriorityQueue<Integer>, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) resettableIterator0, 100);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, class0);
      assertNotSame(sQLNonTransientConnectionExceptionArray0, sQLNonTransientConnectionExceptionArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MapIterator<Integer, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("$TvSTan0jpX-;g0{", "$TvSTan0jpX-;g0{", 16, sQLRecoverableException0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      long[] longArray0 = new long[5];
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.functors.IdentityPredicate");
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 3275, (-564), sQLTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.NotNullPredicate", "org.apache.commons.collections4.functors.NotNullPredicate", dataTruncation0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("9}O", "org.apache.commons.collections4.functors.NotNullPredicate", sQLTransactionRollbackException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.NotNullPredicate", "7rOYTUx_g8W4", 0, longArray0, sQLIntegrityConstraintViolationException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      BatchUpdateException batchUpdateException1 = IteratorUtils.get((Iterator<BatchUpdateException>) objectArrayIterator0, 0);
      assertNotNull(batchUpdateException1);
      assertTrue(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>> singletonIterator0 = new SingletonIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>(serviceLoader0);
      boolean boolean0 = IteratorUtils.contains((Iterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>) singletonIterator0, (Object) serviceLoader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator0, (Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MapIterator<SQLDataException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<Object> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Object>) null, (Iterator<?>) mapIterator0, (Iterator<?>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.emptyListIterator();
      BoundedIterator<Boolean> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Boolean>) resettableListIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashSet<SQLDataException>[] hashSetArray0 = (HashSet<SQLDataException>[]) Array.newInstance(HashSet.class, 1);
      ResettableIterator<HashSet<SQLDataException>> resettableIterator0 = IteratorUtils.arrayIterator(hashSetArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedMapIterator<Integer, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, String>(orderedMapIterator0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) listIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ArrayDeque<Transformer>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, Predicate<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.objectGraphIterator((Predicate<Object>) uniquePredicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, 1L);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<HashSet<StringTokenizer>>) null, (-3959L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[", "mOCoQP", 4);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(predicateArray0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Predicate<Object>>) resettableListIterator0, (Predicate<? super Predicate<Object>>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(allPredicate0);
      predicateArray0[2] = (Predicate<Object>) nullIsExceptionPredicate0;
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(predicateArray0, 1);
      // Undeclared exception!
      IteratorUtils.matchesAll((Iterator<Predicate<Object>>) resettableListIterator0, (Predicate<? super Predicate<Object>>) predicateArray0[2]);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Properties>) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("&/.-BaFC<Cn");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "&/.-BaFC<Cn");
      DataTruncation dataTruncation0 = new DataTruncation((-1753), false, false, 0, (-1753), sQLTransientException0);
      Transformer<SQLWarning, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super DataTruncation>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.LanguageRange>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Iterator<Iterator<SQLRecoverableException>> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Iterator<SQLRecoverableException>>) iterator0, (Iterator<? extends Iterator<SQLRecoverableException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<?>) mapIterator0, (-2420L), 3897L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, 16, (-2339));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 0, (-2271));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 4, (-1278));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Iterator<SQLRecoverableException>[]) null, (-144));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, (-1864));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("G}K\"pm*!ft~", ";'fX-;x[Kt6trF!' b.", false);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0, (-67), 1696);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "[]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 293, 293);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 31, 1140);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 762);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      closureArray0[0] = closure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Closure<Hashtable>>) iterator0, (Closure<? super Closure<Hashtable>>) chainedClosure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Collection must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Collection must not be null", "Collection must not be null", 93, sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLInvalidAuthorizationSpecException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(batchUpdateException0, comparator0, comparatorPredicate_Criterion0);
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      WhileClosure<SQLException> whileClosure0 = new WhileClosure<SQLException>(comparatorPredicate0, closure0, false);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) whileClosure0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("&/.-BaFC<Cn");
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      Factory<String> factory0 = ConstantFactory.constantFactory("&/.-BaFC<Cn");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) listIterator0, (Transformer<? super SQLDataException, String>) transformer0, "&/.-BaFC<Cn", "&/.-BaFC<Cn", "&/.-BaFC<Cn");
      assertEquals("&/.-BaFC<Cn&/.-BaFC<Cn&/.-BaFC<Cn", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (Throwable) null);
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLFeatureNotSupportedException0, true);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("uayN&$ UJ|-9?|W(");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) singletonIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "", "GHK2So~sw", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'uayN&$ UJ|-9?|W(' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OrderedMapIterator<Object, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Object>) orderedMapIterator0, (Transformer<? super Object, String>) null, "", "Lh;3)", "8Rmh1O.%Z^S4ISh");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MapIterator<SQLDataException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLDataException>) mapIterator0, (Predicate<? super SQLDataException>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer(100);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator0, 100);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<Object> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<?>) orderedMapIterator0, 0L, 1L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<IIOMetadataNode, LinkedHashSet<SQLFeatureNotSupportedException>> hashMap0 = new HashMap<IIOMetadataNode, LinkedHashSet<SQLFeatureNotSupportedException>>();
      EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<SQLFeatureNotSupportedException>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, LinkedHashSet<SQLFeatureNotSupportedException>>(hashMap0);
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) entrySetMapIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<Predicate<Object>>) null, (Transformer<? super Predicate<Object>, String>) transformer0, "!p0Pe+@?\"F>a/", " H;M|ib7k>-W~<'g", "!p0Pe+@?\"F>a/");
      assertEquals(" H;M|ib7k>-W~<'g!p0Pe+@?\"F>a/", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<SQLException, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "7rOYTUx_g8W4", "&p?", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ListIterator<Predicate<Object>> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Predicate<Object>>) listIterator0, (Transformer<? super Predicate<Object>, String>) transformer0, "", (String) null, "(!/mao");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Predicate<Object>>) resettableListIterator0, (Transformer<? super Predicate<Object>, String>) factoryTransformer0, (String) null, (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(3);
      linkedHashSet0.add(integer0);
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.size(loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(linkedHashSet0);
      int int0 = IteratorUtils.size(loopingIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[9];
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0, 1);
      BatchUpdateException batchUpdateException0 = IteratorUtils.get((Iterator<BatchUpdateException>) objectArrayIterator0, 1);
      assertNull(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("7rOYTUx_g8W4");
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<SQLException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) treeSet0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLDataException>) resettableIterator0, (Predicate<? super SQLDataException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(predicateArray0, 1);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Predicate<Object>>) resettableListIterator0, (Predicate<? super Predicate<Object>>) uniquePredicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(predicateArray0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<Predicate<Object>>) resettableListIterator0, (Predicate<? super Predicate<Object>>) predicateArray0[2]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>((Predicate<? super SQLException>) null, (Predicate<? super SQLException>) null);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) orPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      stack0.add(clientInfoStatus0);
      LoopingIterator<ClientInfoStatus> loopingIterator0 = new LoopingIterator<ClientInfoStatus>(stack0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) loopingIterator0);
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<ClientInfoStatus>) loopingIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      stack0.add(clientInfoStatus0);
      LoopingIterator<ClientInfoStatus> loopingIterator0 = new LoopingIterator<ClientInfoStatus>(stack0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) clientInfoStatus0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ClientInfoStatus>) loopingIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLDataException>) orderedIterator0, (Predicate<? super SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = IteratorUtils.find(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = IteratorUtils.find(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertNull(sQLFeatureNotSupportedException1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Predicate<DataTruncation> predicate0 = ExceptionPredicate.exceptionPredicate();
      DataTruncation dataTruncation0 = IteratorUtils.find((Iterator<DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
      assertNull(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Locale.Category>) resettableIterator0, (Predicate<? super Locale.Category>) equalPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      Closure<SQLDataException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLDataException>>) arrayDeque0);
      IteratorUtils.apply((Iterator<SQLDataException>) null, (Closure<? super SQLDataException>) closure0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, (Closure<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<Closure<Hashtable>>) iterator0, (Closure<? super Closure<Hashtable>>) chainedClosure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("<|: jFK=F~#n,_tWGA");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("!TRS");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("clT1DTnP", (String) null, (Throwable) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) listIteratorWrapper0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException>(hashMap0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) entrySetMapIterator0, class0);
      assertEquals(0, sQLNonTransientConnectionExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (Class<SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, Class<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTransientConnectionException, Class<IIOMetadataNode>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, Class<IIOMetadataNode>>(orderedMapIterator0);
      Iterable<SQLTransientConnectionException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) abstractMapIteratorDecorator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("Iterator must not be null");
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) listIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null, (Collection<? super String>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      Iterator<Integer> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("VZ:pCG%B]5qr3");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer integer0 = new Integer(100);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator0);
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends Integer>) list0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator1, 100);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "j~Hl?L_", 0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.map.Flat3Map$Values", "", hashMap0, sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (String) null, 0, sQLClientInfoException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, (byte)1, sQLTransientException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) null, (Predicate<? super Integer>) identityPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedMapIterator<Integer, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, String>(orderedMapIterator0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) abstractOrderedMapIteratorDecorator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(orderedMapIterator0);
      ListIterator<Integer> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) identityPredicate0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, Class<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0, (Predicate<? super SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLDataException>(orderedMapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTimeoutException0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) abstractOrderedMapIteratorDecorator0, (Predicate<? super DataTruncation>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstantiateFactory<SQLFeatureNotSupportedException> instantiateFactory0 = new InstantiateFactory<SQLFeatureNotSupportedException>(class0);
      Transformer<Iterator<SQLRecoverableException>, SQLFeatureNotSupportedException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLFeatureNotSupportedException>) instantiateFactory0);
      Iterator<Iterator<SQLRecoverableException>> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLRecoverableException>>) iterator0, (Transformer<? super Iterator<SQLRecoverableException>, ? extends SQLFeatureNotSupportedException>) transformer0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLRecoverableException>>) null, (Transformer<? super Iterator<SQLRecoverableException>, ? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vector<Iterator<SQLRecoverableException>> vector0 = new Vector<Iterator<SQLRecoverableException>>();
      ResettableListIterator<Iterator<SQLRecoverableException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Iterator<SQLRecoverableException>>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLRecoverableException>>) resettableListIterator0, (Transformer<? super Iterator<SQLRecoverableException>, ? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.LanguageRange>) null, (Iterator<? extends Locale.LanguageRange>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0, false);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(list0);
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) loopingListIterator0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) zippingIterator0, 1046L);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) skippingIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.IteratorUtils");
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      Transformer<SQLDataException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 10, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Locale.Category[]) null, 12);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Iterator<EnumSet<Locale.Category>>[] iteratorArray0 = (Iterator<EnumSet<Locale.Category>>[]) Array.newInstance(Iterator.class, 20);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableIterator<LinkedHashSet<PriorityQueue>> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTransactionRollbackException, DataTruncation> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((ClientInfoStatus[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 0, 3);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 4, (-1536));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[9];
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0, 1);
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) objectArrayIterator0);
      String string0 = IteratorUtils.toString(iterator0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals("[null, null, null, null, null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long[] longArray0 = new long[6];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("MfuAc", "Closure must not be null", hashtable0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Enumeration must not be null", (String) null, 749, longArray0, sQLClientInfoException0);
      Factory<BatchUpdateException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, BatchUpdateException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends BatchUpdateException>) factory0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 749);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) resettableListIterator0, (-2564L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1), (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayList<ServiceLoader<SQLInvalidAuthorizationSpecException>> arrayList0 = new ArrayList<ServiceLoader<SQLInvalidAuthorizationSpecException>>();
      ReverseListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>> reverseListIterator0 = new ReverseListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>(arrayList0);
      boolean boolean0 = IteratorUtils.contains((Iterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>) reverseListIterator0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Iterator<ClientInfoStatus> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }
}
