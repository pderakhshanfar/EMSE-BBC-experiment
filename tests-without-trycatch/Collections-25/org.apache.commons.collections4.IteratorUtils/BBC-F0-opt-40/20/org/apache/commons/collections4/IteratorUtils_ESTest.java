/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 04:13:54 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 3525;
      longArray0[1] = (long) 3525;
      longArray0[2] = (long) 3525;
      longArray0[4] = (long) 3525;
      longArray0[5] = (long) 3525;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]-lOCkVk^cdj^dG8", "]-lOCkVk^cdj^dG8", 3525);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("]-lOCkVk^cdj^dG8", "]-lOCkVk^cdj^dG8", 3525, longArray0, sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("]-lOCkVk^cdj^dG8", "]-lOCkVk^cdj^dG8", batchUpdateException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      Predicate<Object> predicate0 = new EqualPredicate<Object>((Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      int[] intArray0 = new int[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      intArray0[0] = 4;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "Node must not be null");
      SQLDataException sQLDataException0 = new SQLDataException("", "", 4, sQLTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 4, intArray0, sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Node must not be null");
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException1);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 3525;
      longArray0[1] = (long) 3525;
      longArray0[2] = (long) 3525;
      longArray0[3] = (long) 3525;
      longArray0[4] = (long) 3525;
      longArray0[5] = (long) 3525;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]-lOCkVk^cdj^dG8", "]-lOCkVk^cdj^dG8", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("]-lOCkVk^cdj^dG8", "]-lOCkVk^cdj^dG8", 3525, longArray0, sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLInvalidAuthorizationSpecException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLRecoverableException>) null, (Object) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Transformer must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) null, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Tk$)s6t~g?ob", "Tk$)s6t~g?ob");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[12];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[11] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      IteratorUtils.get((Iterator<SQLNonTransientException>) resettableListIterator0, 4);
      IteratorUtils.emptyOrderedIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) objectArrayIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(transformerPredicate0, transformerPredicate0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) transformerPredicate0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      IteratorUtils.apply((Iterator<ArrayDeque<ArrayList>>) singletonListIterator0, (Closure<? super ArrayDeque<ArrayList>>) closure0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(transformerPredicate0, transformerPredicate0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) andPredicate0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, (Closure<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<ArrayDeque<ArrayList>>) singletonListIterator0, (Closure<? super ArrayDeque<ArrayList>>) ifClosure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Transformer must return an instanceof Boolean, it was a null object
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ListIterator<SQLClientInfoException> listIterator0 = arrayList0.listIterator();
      arrayList0.iterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", (-288), hashMap0, sQLSyntaxErrorException0);
      arrayList0.add(sQLClientInfoException0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) listIterator0, class0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[8];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      Closure<Object> closure0 = null;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, 8, 32);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<SQLTransientException, LinkedHashSet<IIOMetadataNode>> hashMap0 = new HashMap<SQLTransientException, LinkedHashSet<IIOMetadataNode>>(198);
      EntrySetMapIterator<SQLTransientException, LinkedHashSet<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientException, LinkedHashSet<IIOMetadataNode>>(hashMap0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[", "[", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("C{VJ1j#zpEW", "C{VJ1j#zpEW", 198, sQLNonTransientException0);
      ConstantTransformer<Object, SQLNonTransientException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientException>(sQLIntegrityConstraintViolationException0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      IteratorUtils.apply((Iterator<ArrayDeque<ArrayList>>) entrySetMapIterator0, (Closure<? super ArrayDeque<ArrayList>>) closure0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashtable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap1, sQLNonTransientException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLDataException sQLDataException0 = new SQLDataException(sQLClientInfoException0);
      sQLNonTransientException0.addSuppressed(sQLDataException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(";0k*WJPw-msMz$|WF", "!P(\"@;aco~5", 198, hashMap1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      Object object0 = new Object();
      IteratorUtils.getIterator("C{VJ1j#zpEW");
      IteratorUtils.asIterable((Iterator<? extends SQLException>) entrySetMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-3744), (-23));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Properties, String> transformer0 = MapTransformer.mapTransformer((Map<? super Properties, ? extends String>) hashtable0);
      String string0 = "NodeList must not be null";
      OrderedMapIterator<Properties, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLTransactionRollbackException>(orderedMapIterator0);
      OrderedMapIterator<Properties, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) orderedMapIterator1, (Transformer<? super Properties, String>) transformer0, "", "", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, (Closure<? super Object>) null);
      IteratorUtils.apply((Iterator<ArrayDeque<ArrayList>>) null, (Closure<? super ArrayDeque<ArrayList>>) ifClosure0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      arrayList0.listIterator();
      int[] intArray0 = new int[6];
      intArray0[0] = 1371;
      intArray0[1] = 1371;
      intArray0[2] = 1371;
      intArray0[3] = 1371;
      intArray0[4] = 1371;
      intArray0[5] = 1371;
      SQLException sQLException0 = new SQLException("", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("reLib7", sQLException0);
      SQLDataException sQLDataException0 = new SQLDataException("v4.<7E-,xftNKc\"", "*!zP4+cj%GD", (-3462), sQLTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("*!zP4+cj%GD", "v4.<7E-,xftNKc\"", 1371, intArray0, sQLDataException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) batchUpdateException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, DataTruncation>) abstractOrderedMapIteratorDecorator0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      Properties properties0 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "NodeList must not be null");
      IteratorUtils.contains((Iterator<SQLRecoverableException>) null, (Object) sQLTransactionRollbackException0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "NodeList must not be null";
      stringArray0[1] = "NodeList must not be null";
      stringArray0[2] = "NodeList must not be null";
      stringArray0[3] = "NodeList must not be null";
      stringArray0[4] = "NodeList must not be null";
      stringArray0[5] = "";
      IteratorUtils.arrayListIterator(stringArray0, 6);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("setValue() is not supported");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[8];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("e.n==r^\"XcT!gg3u", "Tk$)s6t~g?ob", 948, sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      int int0 = 4;
      IteratorUtils.get((Iterator<SQLNonTransientException>) resettableListIterator0, 4);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation>(orderedMapIterator0);
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends DataTruncation>) orderedMapIterator0);
      MapIterator<StringTokenizer, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, DataTruncation>) orderedMapIterator1);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) abstractOrderedMapIteratorDecorator0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null);
      IteratorUtils.apply((Iterator<ArrayDeque<ArrayList>>) mapIterator0, (Closure<? super ArrayDeque<ArrayList>>) ifClosure0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = stack0.listIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.toString((Iterator<Integer>) null);
      Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException>();
      DataTruncation dataTruncation0 = new DataTruncation(44, true, true, 25, 25);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[]", "", dataTruncation0);
      hashtable0.replace(dataTruncation0, sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException0);
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException>();
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "FYZ;s{MqY4f+(?F", (-968));
      DataTruncation dataTruncation0 = new DataTruncation((-487), false, true, 462, (-487), sQLTransientConnectionException0);
      dataTruncation0.getDataSize();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("FYZ;s{MqY4f+(?F", "", (-968));
      sQLInvalidAuthorizationSpecException0.setNextException(sQLTransientConnectionException0);
      hashMap0.put(dataTruncation0, sQLInvalidAuthorizationSpecException0);
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      IteratorUtils.matchesAll((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) instanceofPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<ArrayDeque<ArrayDeque>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLWarning>) linkedList0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      IteratorUtils.matchesAll((Iterator<SQLWarning>) resettableListIterator0, (Predicate<? super SQLWarning>) instanceofPredicate0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("GREATER_OR_EQUAL");
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator("org.apache.commons.collections4.map.Flat3Map$KeySet");
      IteratorUtils.size(iterator0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      SingletonIterator<ClientInfoStatus> singletonIterator0 = new SingletonIterator<ClientInfoStatus>(clientInfoStatus0);
      IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.contains((Iterator<SQLRecoverableException>) null, (Object) "x:Pscw$");
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      String string0 = "O|";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "O|");
      ConstantTransformer<Object, SQLIntegrityConstraintViolationException> constantTransformer0 = new ConstantTransformer<Object, SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Iterator<SQLRecoverableException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, ? extends SQLIntegrityConstraintViolationException>) constantTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation>(orderedMapIterator0);
      String string0 = "_PIGgi(nh()";
      Throwable throwable0 = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("_PIGgi(nh()", "BNSemX=moyA:i%g!X", 2283, (Throwable) null);
      ConstantTransformer.constantTransformer(sQLIntegrityConstraintViolationException0);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) reverseListIterator0, (Transformer<? super SQLRecoverableException, ? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null, (Collection<? super SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      Integer integer0 = new Integer(3733);
      Integer integer1 = new Integer((-2141));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer1);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) singletonListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.NotNullPredicate");
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) stack0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find(iterator0, (Predicate<? super Integer>) instanceofPredicate0);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.NotNullPredicate", "org.apache.commons.collections4.functors.NotNullPredicate");
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      arrayList0.listIterator();
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("GREATER_OR_EQUAL");
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      SQLWarning sQLWarning0 = new SQLWarning();
      linkedList0.add(sQLWarning0);
      IteratorUtils.loopingListIterator((List<SQLWarning>) linkedList0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.singletonListIterator(priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Properties, String> transformer0 = MapTransformer.mapTransformer((Map<? super Properties, ? extends String>) null);
      IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) transformer0, "P4=OOWV0b~Z5i ", "NodeList must not be null", "The transformer array must not be null");
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("sn<9TbuM", (String) null);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      IteratorUtils.isEmpty(listIterator0);
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) resettableIterator0, (Transformer<? super String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Z", "Nn``3(V%7X~:/a", 10, (long[]) null, sQLClientInfoException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, batchUpdateException0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "Nn``3(V%7X~:/a", 2002, sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      Transformer<Properties, String> transformer0 = MapTransformer.mapTransformer((Map<? super Properties, ? extends String>) null);
      IteratorUtils.toString((Iterator<Properties>) singletonListIterator0, (Transformer<? super Properties, String>) transformer0, "NodeList must not be null", "NodeList must not be null", "EObN");
      OrderedMapIterator<SQLTimeoutException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) resettableListIterator0, (Iterator<?>) orderedMapIterator0);
      Integer integer0 = new Integer(105);
      IteratorUtils.singletonListIterator(integer0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation>(orderedMapIterator0);
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator1 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation>(orderedMapIterator0);
      MapIterator<StringTokenizer, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, DataTruncation>) orderedMapIterator1);
      MapIterator<StringTokenizer, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) mapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) mapIterator1);
      DataTruncation dataTruncation0 = new DataTruncation(38, true, true, 62, (-678));
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) listIterator1, (Predicate<? super DataTruncation>) predicate1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      arrayList0.listIterator();
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("GREATER_OR_EQUAL");
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      String string0 = null;
      Throwable throwable0 = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "_PIGgi(nh()", 2283, (Throwable) null);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.constantTransformer(sQLIntegrityConstraintViolationException0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      ArrayDeque<ClientInfoStatus> arrayDeque0 = new ArrayDeque<ClientInfoStatus>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (String) null);
      // Undeclared exception!
//      try { 
        linkedList0.add(2283, sQLRecoverableException0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2283, Size: 0
//         //
//         verifyException("java.util.LinkedList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      arrayList0.listIterator();
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      Properties properties2 = new Properties(properties1);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties2);
      Transformer<Properties, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) transformer0, "EObN", "Node must not be null", "5x!d8zU");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.util.Properties' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) resettableListIterator1, 0L, (long) 0);
      OrderedMapIterator<Boolean, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Boolean, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Boolean, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Boolean, SQLFeatureNotSupportedException>(orderedMapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Boolean>) abstractOrderedMapIteratorDecorator0, (-421L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.clone();
      IteratorUtils.singletonIterator(properties0);
      Integer integer0 = new Integer(128);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) singletonListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.NotNullPredicate");
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) stack0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate((Class<?>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Integer>) singletonListIterator0, (Predicate<? super Integer>) instanceofPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.InstanceofPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = new SingletonListIterator<Properties>(properties0);
      Integer integer0 = new Integer(128);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) singletonListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.NotNullPredicate");
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) stack0);
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find((Iterator<Integer>) singletonListIterator0, (Predicate<? super Integer>) instanceofPredicate0);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      IteratorUtils.getIterator(singletonListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) listIterator0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 2);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 14;
      SQLDataException sQLDataException0 = new SQLDataException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("InstantiateTransformer: Input object was not an instanceof Class, it was a null object", "transformer may not be null", 14, longArray0, sQLDataException0);
      batchUpdateException0.getNextException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, (Throwable) null);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) resettableIterator0;
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) listIteratorWrapper0;
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) iterator0, class0);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(priorityQueue0);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      PriorityQueue<BatchUpdateException> priorityQueue1 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.singletonListIterator(priorityQueue1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIteratorWrapper<SQLNonTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientConnectionException>(mapIterator0);
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) listIteratorWrapper0, 3166L);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) boundedIterator0);
      IteratorUtils.emptyIterator();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(",$8'Q:,+Jf", "`M):31N-", (-3762), intArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("l", "yVCY$", (-3762), batchUpdateException0);
      batchUpdateException0.getLargeUpdateCounts();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",$8'Q:,+Jf", "Q<ILzl\"+h", sQLFeatureNotSupportedException0);
      IteratorUtils.contains((Iterator<SQLRecoverableException>) null, (Object) sQLTransientConnectionException0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) listIteratorWrapper0, (Iterator<? extends SQLNonTransientConnectionException>) boundedIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) mapIterator0, (Iterator<?>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Properties properties0 = new Properties();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Collection must not be null", "+_N?,]~(b[C3nMvR");
      BiFunction<Object, Object, SQLException> biFunction0 = (BiFunction<Object, Object, SQLException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.merge(sQLTimeoutException0, "+_N?,]~(b[C3nMvR", biFunction0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      MapTransformer.mapTransformer((Map<? super Properties, ? extends String>) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "EzRObN";
      stringArray0[1] = "EzRObN";
      OrderedMapIterator<String, PriorityQueue<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, PriorityQueue<Object>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, PriorityQueue<Object>>(orderedMapIterator0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      Iterator<StringTokenizer> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      IteratorUtils.contains((Iterator<SQLRecoverableException>) null, (Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      IteratorUtils.emptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.contains((Iterator<SQLRecoverableException>) null, (Object) "x:Pscw$");
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null, 123);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableIterator<Stack<BatchUpdateException>> resettableIterator0 = IteratorUtils.emptyIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "%&", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[", "C{VJ1j#zpEW", (-1), (Throwable) null);
      ConstantTransformer<Object, SQLNonTransientException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientException>(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLIntegrityConstraintViolationException1);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      IteratorUtils.apply((Iterator<ArrayDeque<ArrayList>>) resettableIterator0, (Closure<? super ArrayDeque<ArrayList>>) closure0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.singletonListIterator(priorityQueue0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("C{VJ1j#zpEW");
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) singletonListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, (String) null, "TEfs]5wI]r", "C{VJ1j#zpEW");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Properties, String> transformer0 = MapTransformer.mapTransformer((Map<? super Properties, ? extends String>) hashMap0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<Properties>) resettableListIterator0, (Transformer<? super Properties, String>) transformer0, "EObN", "NodeList must not be null", "List must not be null");
      OrderedMapIterator<SQLTimeoutException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1, 0L);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      OrderedMapIterator<SQLFeatureNotSupportedException, IIOMetadataNode> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLFeatureNotSupportedException, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, IIOMetadataNode>) orderedMapIterator2);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("List must not be null", sQLSyntaxErrorException0);
      IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) mapIterator0, (Object) sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2=O~w`i4z>xbgC;q");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NodeList must not be nullList must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties1);
      MapTransformer.mapTransformer((Map<? super Properties, ? extends String>) null);
      String string0 = "EObN";
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) null, "v:$h$", "", "k%H55xL");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      MapTransformer.mapTransformer((Map<? super Properties, ? extends String>) null);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("NodeList must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<String>) resettableIterator0, 106);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 105
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation>(orderedMapIterator0);
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      MapIterator<StringTokenizer, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, DataTruncation>) orderedMapIterator1);
      MapIterator<StringTokenizer, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) mapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) mapIterator1);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(priorityQueue0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("GREATER_OR_EQUAL", "GREATER_OR_EQUAL");
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator((SQLDataException) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) null, comparator0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate0);
      IteratorUtils.size(listIterator0);
      Transformer<SQLTransactionRollbackException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) transformer0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) comparator0;
      int int0 = 1677;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(objectArray0, 1677);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      Vector<Object> vector0 = new Vector<Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "72Jx");
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      ListIterator<Integer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) nullIsTruePredicate0);
      ListIterator<Integer> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends Integer>) listIterator0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) listIterator1);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) vector0);
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation>(orderedMapIterator0);
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, DataTruncation>) orderedMapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<SQLTransientException, LinkedHashSet<IIOMetadataNode>> hashMap0 = new HashMap<SQLTransientException, LinkedHashSet<IIOMetadataNode>>(198);
      EntrySetMapIterator<SQLTransientException, LinkedHashSet<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientException, LinkedHashSet<IIOMetadataNode>>(hashMap0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[", "[", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("C{VJ1j#zpEW", "C{VJ1j#zpEW", 198, sQLNonTransientException0);
      ConstantTransformer<Object, SQLNonTransientException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientException>(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLNonTransientException0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      IteratorUtils.apply((Iterator<ArrayDeque<ArrayList>>) entrySetMapIterator0, (Closure<? super ArrayDeque<ArrayList>>) closure0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.singletonListIterator(priorityQueue0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) singletonListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "[", (String) null, "TEfs]5wI]r");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation>(orderedMapIterator0);
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      MapIterator<StringTokenizer, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, DataTruncation>) orderedMapIterator1);
      MapIterator<StringTokenizer, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) mapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) mapIterator1);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((HashMap<Properties, IIOMetadataNode>[]) null, 3065, 3065);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 198;
      HashMap<SQLTransientException, LinkedHashSet<IIOMetadataNode>> hashMap0 = new HashMap<SQLTransientException, LinkedHashSet<IIOMetadataNode>>(198);
      EntrySetMapIterator<SQLTransientException, LinkedHashSet<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientException, LinkedHashSet<IIOMetadataNode>>(hashMap0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[", "[", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("C{VJ1j#zpEW", "C{VJ1j#zpEW", 198, sQLNonTransientException0);
      ConstantTransformer<Object, SQLNonTransientException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientException>(sQLIntegrityConstraintViolationException0);
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      EntrySetMapIterator<SQLTransientException, LinkedHashSet<IIOMetadataNode>> entrySetMapIterator1 = new EntrySetMapIterator<SQLTransientException, LinkedHashSet<IIOMetadataNode>>(hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<ArrayDeque<ArrayList>>) entrySetMapIterator1, (Closure<? super ArrayDeque<ArrayList>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      arrayList0.listIterator();
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("GREATER_OR_EQUAL");
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList1 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, 396);
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(list0);
      PriorityQueue<BatchUpdateException> priorityQueue1 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.singletonListIterator(priorityQueue1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) listIterator0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      String string0 = "org.apache.commons.collections4.functors.NotNullPredicate";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.NotNullPredicate");
      HashMap<Integer, SQLDataException> hashMap0 = new HashMap<Integer, SQLDataException>();
      EntrySetMapIterator<Integer, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<Integer, SQLDataException>(hashMap0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) entrySetMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      EntrySetMapIterator<String, Object> entrySetMapIterator0 = new EntrySetMapIterator<String, Object>(hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<String>) null, 106);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<SQLTransientException, LinkedHashSet<IIOMetadataNode>> hashMap0 = new HashMap<SQLTransientException, LinkedHashSet<IIOMetadataNode>>(198);
      EntrySetMapIterator<SQLTransientException, LinkedHashSet<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientException, LinkedHashSet<IIOMetadataNode>>(hashMap0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[", "[", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("C{VJ1j#zpEW", "C{VJ1j#zpEW", 198, sQLNonTransientException0);
      ConstantTransformer<Object, SQLNonTransientException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientException>(sQLIntegrityConstraintViolationException0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      IteratorUtils.apply((Iterator<ArrayDeque<ArrayList>>) entrySetMapIterator0, (Closure<? super ArrayDeque<ArrayList>>) closure0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashtable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap1, sQLNonTransientException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(";0k*WJPw-msMz$|WF", "!P(\"@;aco~5", 198, hashMap1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      Object object0 = new Object();
      IteratorUtils.getIterator("C{VJ1j#zpEW");
      IteratorUtils.asIterable((Iterator<? extends SQLException>) entrySetMapIterator0);
      int[] intArray0 = new int[3];
      intArray0[0] = 198;
      intArray0[1] = 100;
      intArray0[2] = 22;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("C{VJ1j#zpEW", "`D]C~", 22, intArray0, (Throwable) null);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) singletonListIterator0, 100);
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(list0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) loopingIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedMapIterator<LinkedList<Transformer<IIOMetadataNode, SQLSyntaxErrorException>>, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-89);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<Transformer<IIOMetadataNode, SQLSyntaxErrorException>>, SQLTimeoutException>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((EnumSet<ComparatorPredicate.Criterion>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      ListIterator<SQLClientInfoException> listIterator0 = arrayList0.listIterator();
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("GREATER_OR_EQUAL");
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0, defaultEquator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("z");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Iterator setValue() can only be called after next() and before remove()", "", 1, hashtable0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) singletonIterator0, class0);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(priorityQueue0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("GREATER_OR_EQUAL");
      OrderedMapIterator<String, PriorityQueue<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, PriorityQueue<Object>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, PriorityQueue<Object>>(orderedMapIterator0);
      PriorityQueue<BatchUpdateException> priorityQueue1 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.singletonListIterator(priorityQueue1);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) loopingIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator((BatchUpdateException) null);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableIterator0;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, (-1631L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.emptyListIterator();
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      IteratorUtils.loopingListIterator((List<SQLWarning>) vector0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(arrayList0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) loopingListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) instanceofPredicate0);
      HashMap<SQLIntegrityConstraintViolationException, IIOMetadataNode> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, IIOMetadataNode>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode>(hashMap0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) entrySetMapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) entrySetMapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.NotNullPredicate");
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) vector0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find(iterator0, (Predicate<? super Integer>) instanceofPredicate0);
      Iterator<DataTruncation>[] iteratorArray0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("iterator");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Iterator setValue() can only be called after next() and before remove()", "", 1, hashtable0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) singletonIterator0, class0);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(priorityQueue0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("GREATER_OR_EQUAL");
      OrderedMapIterator<String, PriorityQueue<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, PriorityQueue<Object>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, PriorityQueue<Object>>(orderedMapIterator0);
      PriorityQueue<BatchUpdateException> priorityQueue1 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.singletonListIterator(priorityQueue1);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      IteratorUtils.arrayIterator(dataTruncationArray0, 0, 0);
      EnumSet<ClientInfoStatus>[] enumSetArray0 = (EnumSet<ClientInfoStatus>[]) Array.newInstance(EnumSet.class, 6);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[7];
      clientInfoStatusArray0[0] = clientInfoStatus0;
      clientInfoStatusArray0[1] = clientInfoStatus0;
      clientInfoStatusArray0[2] = clientInfoStatus0;
      clientInfoStatusArray0[3] = clientInfoStatus0;
      clientInfoStatusArray0[4] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[5] = clientInfoStatus1;
      clientInfoStatusArray0[6] = clientInfoStatus0;
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class0);
      enumSetArray0[3] = enumSet0;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      EnumSet<ClientInfoStatus> enumSet1 = EnumSet.of(clientInfoStatus2, clientInfoStatus0);
      enumSetArray0[4] = enumSet1;
      EnumSet.of(clientInfoStatus0, clientInfoStatus0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Closure must not be null");
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.singletonListIterator(priorityQueue0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("iterator");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Iterator setValue() can only be called after next() and before remove()", "", 1, hashtable0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) singletonIterator0, class0);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(priorityQueue0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("GREATER_OR_EQUAL");
      OrderedMapIterator<String, PriorityQueue<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, PriorityQueue<Object>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, PriorityQueue<Object>>(orderedMapIterator0);
      PriorityQueue<BatchUpdateException> priorityQueue1 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.singletonListIterator(priorityQueue1);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(573);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-996));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-978));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(128);
      integerArray0[4] = integer4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(integerArray0, (-1219), 388);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.toString((Iterator<Integer>) null);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      Hashtable<SQLIntegrityConstraintViolationException, IIOMetadataNode> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[]");
      hashtable0.getOrDefault(predicate0, iIOMetadataNode0);
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode>(hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) entrySetMapIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class0);
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      EnumSet<ClientInfoStatus> enumSet1 = EnumSet.of(clientInfoStatus1, clientInfoStatus2);
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      EnumSet<ClientInfoStatus> enumSet2 = EnumSet.of(clientInfoStatus3, clientInfoStatus0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U0f|k/INf5");
      EnumSet<ClientInfoStatus>[] enumSetArray0 = (EnumSet<ClientInfoStatus>[]) Array.newInstance(EnumSet.class, 8);
      enumSetArray0[0] = enumSet1;
      enumSetArray0[1] = enumSet1;
      enumSetArray0[2] = enumSet2;
      enumSetArray0[3] = enumSet2;
      enumSetArray0[4] = enumSet2;
      enumSetArray0[5] = enumSet2;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      enumSet2.add(clientInfoStatus4);
      enumSetArray0[6] = enumSet0;
      enumSetArray0[7] = enumSet1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(enumSetArray0, 1299);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "SOSQFNfo1]c#");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (String) null, hashMap0, sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(":HM", (String) null, 57, sQLClientInfoException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("ns^m)VI'");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(":HM", (String) null);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("org.apache.commons.collections4.iterators.EmptyOrderedIterator", (String) null, (-2429), sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("", (String) null, (-2429), sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException((String) null, "remove() method is not supported for an ObjectArrayIterator", 57, sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException((String) null, "j<c/6q&", (-2429), sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      Hashtable<Object, DataTruncation> hashtable0 = new Hashtable<Object, DataTruncation>();
      Transformer<Object, DataTruncation> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends DataTruncation>) hashtable0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      predicateArray0[0] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) nonePredicate0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) objectArrayIterator0, (Predicate<? super SQLNonTransientException>) transformedPredicate0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.collections4.functors.OnePredicate";
      stringArray0[1] = "f|bA~9m,r#U`";
      stringArray0[2] = "8YHvG%7Dv7V`";
      stringArray0[3] = "Ep2y+c(riQmpkPE";
      stringArray0[4] = "*";
      stringArray0[5] = "_f'+_qWw{>y]f$";
      stringArray0[6] = "add() not supported for empty Iterator";
      stringArray0[7] = "Estimated size must be greater than 0";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      IteratorUtils.toList((Iterator<? extends String>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, (-307));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Class<Properties> class1 = Properties.class;
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      classArray0[0] = class1;
      classArray0[1] = class0;
      ObjectArrayListIterator<Class<Properties>> objectArrayListIterator0 = new ObjectArrayListIterator<Class<Properties>>(classArray0);
      FalsePredicate.falsePredicate();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find((Iterator<Class<Properties>>) null, (Predicate<? super Class<Properties>>) predicate0);
      ArrayListIterator<IIOMetadataNode> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<IIOMetadataNode>(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.NotNullPredicate");
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) vector0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find(iterator0, (Predicate<? super Integer>) instanceofPredicate0);
      IteratorUtils.emptyMapIterator();
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) null, class1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      arrayList0.listIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) reverseListIterator0, class0);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(priorityQueue0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("GREATER_OR_EQUAL");
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) zippingIterator0, (Predicate<? super DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 9);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[2] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[3] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[4] = class3;
      Class<Properties> class4 = Properties.class;
      classArray0[5] = class4;
      Class<Properties> class5 = Properties.class;
      classArray0[6] = class5;
      InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.NotNullPredicate");
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find((Iterator<Integer>) resettableListIterator0, (Predicate<? super Integer>) instanceofPredicate0);
      IteratorUtils.emptyMapIterator();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) instanceofPredicate0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) instanceofPredicate0;
      objectArray0[4] = (Object) resettableListIterator0;
      objectArray0[7] = (Object) resettableListIterator0;
      OrderedIterator<ArrayList<SQLIntegrityConstraintViolationException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) orderedIterator0, 2897, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) linkedList0);
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) listIterator0);
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      IteratorUtils.loopingListIterator((List<SQLWarning>) vector0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(arrayList0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) loopingListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator1, (Iterator<? extends SQLIntegrityConstraintViolationException>) loopingListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Locale.FilteringMode>) resettableListIterator0);
      String string0 = "LgaAEXef-";
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 9);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[2] = class2;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Properties[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("iterator");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(linkedList0);
      IteratorUtils.toString((Iterator<Integer>) null);
      Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashtable0);
      MapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends DataTruncation>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResettableIterator<Stack<BatchUpdateException>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException("HZ2.&1f", "HZ2.&1f", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("HZ2.&1f", "HZ2.&1f", sQLDataException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("HZ2.&1f");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException(" :& 3+tRa@Y(rnMg\"Zn", "HZ2.&1f", 100, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("HZ2.&1f", "0vX/g.!C;7#ND%@p");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 413, sQLTimeoutException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.spliterator();
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0, 128);
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) list0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.singletonListIterator(priorityQueue0);
      IteratorUtils.getIterator(singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      Transformer<Properties, String> transformer0 = MapTransformer.mapTransformer((Map<? super Properties, ? extends String>) null);
      IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) transformer0, "org.apache.commons.collections4.map.Flat3Map$KeySet", "org.apache.commons.collections4.map.Flat3Map$KeySet", "EObN");
      OrderedMapIterator<SQLTimeoutException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      Properties properties1 = new Properties();
      Properties[] propertiesArray0 = new Properties[5];
      propertiesArray0[0] = properties1;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties0;
      propertiesArray0[3] = properties1;
      propertiesArray0[4] = properties0;
      ResettableListIterator<Properties> resettableListIterator0 = new SingletonListIterator<Properties>(properties1);
      IteratorUtils.contains((Iterator<Properties>) resettableListIterator0, (Object) null);
      int int0 = 16;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, (-1408), (-1676));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(orderedMapIterator0, comparator0, comparatorPredicate_Criterion0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-756);
      intArray0[1] = 261;
      intArray0[2] = (-1267);
      intArray0[3] = 125;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties[] propertiesArray0 = new Properties[7];
      propertiesArray0[0] = properties2;
      propertiesArray0[1] = properties2;
      propertiesArray0[2] = properties0;
      propertiesArray0[3] = properties1;
      propertiesArray0[4] = properties0;
      propertiesArray0[5] = properties1;
      propertiesArray0[6] = properties2;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      IteratorUtils.contains((Iterator<Properties>) resettableListIterator0, (Object) properties0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, (Throwable) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, (-435));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) resettableListIterator0);
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ResettableListIterator<Properties> resettableListIterator1 = IteratorUtils.arrayListIterator(propertiesArray0);
      IteratorUtils.contains((Iterator<Properties>) resettableListIterator1, (Object) properties0);
      int int0 = 16;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator1, 16, (-1408));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(priorityQueue0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("GREATER_OR_EQUAL");
      OrderedMapIterator<String, PriorityQueue<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, PriorityQueue<Object>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, PriorityQueue<Object>>(orderedMapIterator0);
      Vector<LinkedList<SQLIntegrityConstraintViolationException>> vector0 = new Vector<LinkedList<SQLIntegrityConstraintViolationException>>();
      IteratorUtils.loopingListIterator((List<LinkedList<SQLIntegrityConstraintViolationException>>) vector0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(22).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(orderedMapIterator0, comparator0, comparatorPredicate_Criterion0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-756);
      intArray0[1] = 261;
      intArray0[2] = (-1267);
      intArray0[3] = 125;
      intArray0[4] = (-109);
      intArray0[5] = (-1);
      intArray0[6] = 0;
      intArray0[7] = 2577;
      intArray0[8] = 0;
      SQLException sQLException0 = new SQLException("GyuEH/\u0005%)X'3tId+c6", "Array class must not be null");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(":nl)`B.n){\"!;", ":nl)`B.n){\"!;", intArray0, sQLException0);
      comparatorPredicate0.evaluate(batchUpdateException0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      IteratorUtils.matchesAll((Iterator<StringTokenizer>) orderedMapIterator0, (Predicate<? super StringTokenizer>) predicate0);
      IteratorUtils.size(orderedMapIterator0);
      MapIterator<SQLDataException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) mapIterator0, (Iterator<? extends SQLException>) mapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(orderedMapIterator0, comparator0, comparatorPredicate_Criterion0);
      String string0 = ":nl)`B.n){\"!;";
      int[] intArray0 = new int[9];
      intArray0[0] = (-756);
      intArray0[1] = 261;
      Closure<DataTruncation> closure0 = ExceptionClosure.exceptionClosure();
      Comparator<Closure<DataTruncation>> comparator1 = (Comparator<Closure<DataTruncation>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(closure0, comparator1);
      intArray0[2] = (-1267);
      intArray0[3] = 125;
      intArray0[4] = (-109);
      intArray0[5] = (-1);
      intArray0[6] = 0;
      intArray0[7] = 2577;
      intArray0[8] = 0;
      SQLException sQLException0 = new SQLException("GyuEH/\u0005%)X'3tId+c6", "Array class must not be null");
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      IteratorUtils.matchesAll((Iterator<StringTokenizer>) orderedMapIterator0, (Predicate<? super StringTokenizer>) predicate0);
      IteratorUtils.size(orderedMapIterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Array class must not be null", hashtable0);
      ConstantTransformer<Object, SQLClientInfoException> constantTransformer0 = new ConstantTransformer<Object, SQLClientInfoException>(sQLClientInfoException0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) constantTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) iterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      MapTransformer.mapTransformer((Map<? super Properties, ? extends String>) null);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("NodeList must not be null");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NodeList must not be null");
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) zippingIterator0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) listIterator0);
      Stack<Integer> stack0 = new Stack<Integer>();
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) stack0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find(iterator0, (Predicate<? super Integer>) instanceofPredicate0);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      IteratorUtils.getIterator(resettableIterator0);
      IteratorUtils.isEmpty(listIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("NodeList must not be null");
      Transformer<SQLTimeoutException, SQLTimeoutException> transformer0 = CloneTransformer.cloneTransformer();
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) iterator1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      IteratorUtils.arrayIterator(dataTruncationArray0, 0, 0);
      EnumSet<ClientInfoStatus>[] enumSetArray0 = (EnumSet<ClientInfoStatus>[]) Array.newInstance(EnumSet.class, 6);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[7];
      clientInfoStatusArray0[0] = clientInfoStatus0;
      clientInfoStatusArray0[1] = clientInfoStatus0;
      clientInfoStatusArray0[2] = clientInfoStatus0;
      clientInfoStatusArray0[3] = clientInfoStatus0;
      clientInfoStatusArray0[4] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[5] = clientInfoStatus1;
      clientInfoStatusArray0[6] = clientInfoStatus0;
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class0);
      enumSetArray0[3] = enumSet0;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      EnumSet<ClientInfoStatus> enumSet1 = EnumSet.of(clientInfoStatus2, clientInfoStatus0);
      enumSetArray0[4] = enumSet1;
      EnumSet<ClientInfoStatus> enumSet2 = EnumSet.of(clientInfoStatus0, clientInfoStatus1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Closure must not be null");
      enumSetArray0[5] = enumSet2;
      IteratorUtils.arrayIterator(enumSetArray0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "(K=`~X}Y[K6TjQrDI?", 2897, 2897);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableIterator<Stack<BatchUpdateException>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      String string0 = "org.apache.commons.collections4.functors.NotNullPredicate";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.NotNullPredicate");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.functors.NotNullPredicate", "Collection must not be null", (-2095));
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U(V&MWgZg-H x%vDbjq");
      int int0 = 2902;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 2902);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableListIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.NotNullPredicate");
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) vector0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find(iterator0, (Predicate<? super Integer>) instanceofPredicate0);
      IteratorUtils.emptyMapIterator();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) instanceofPredicate0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) instanceofPredicate0;
      ObjectArrayIterator<Object> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0, (-660));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "zx!0";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zx!0");
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Locale.FilteringMode>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("}01DZ", sQLRecoverableException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientException0);
      sQLNonTransientException0.spliterator();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorException0.getStackTrace();
      IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 664, sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "", sQLSyntaxErrorException0);
      IteratorUtils.singletonListIterator(sQLSyntaxErrorException1);
      sQLSyntaxErrorException0.getStackTrace();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("JDBliRfZ=m[UXc");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNode0.isSupported("?d.gauO&bgGKkP k", "\"%)PWn");
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLSyntaxErrorException0);
      IteratorUtils.skippingIterator((Iterator<SQLException>) singletonIterator0, 1L);
      StringTokenizer stringTokenizer0 = new StringTokenizer("vgP~:gj5w");
      IteratorUtils.getIterator("");
      ArrayListIterator<SQLTransientException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransientException>("vgP~:gj5w");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<PriorityQueue<DataTruncation>> linkedList0 = new LinkedList<PriorityQueue<DataTruncation>>();
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      linkedList0.add(0, priorityQueue0);
      ReverseListIterator<PriorityQueue<DataTruncation>> reverseListIterator0 = new ReverseListIterator<PriorityQueue<DataTruncation>>(linkedList0);
      reverseListIterator0.next();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<PriorityQueue<DataTruncation>>) reverseListIterator0, (Transformer<? super PriorityQueue<DataTruncation>, String>) transformer0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 2374);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "N?C*358#?");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException((String) null, (String) null, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      sQLTimeoutException3.spliterator();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (-5L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) reverseListIterator0, class0);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      arrayList0.add((SQLClientInfoException) null);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet2 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) reverseListIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) orderedIterator0, class0);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(priorityQueue0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>(arrayDeque0);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet2 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      HashSet<SQLFeatureNotSupportedException>[] hashSetArray0 = (HashSet<SQLFeatureNotSupportedException>[]) Array.newInstance(HashSet.class, 3);
      hashSetArray0[0] = (HashSet<SQLFeatureNotSupportedException>) linkedHashSet1;
      hashSetArray0[1] = (HashSet<SQLFeatureNotSupportedException>) linkedHashSet0;
      hashSetArray0[2] = hashSet0;
      IteratorUtils.arrayListIterator(hashSetArray0, 1);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(objectArray0, 44);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      Transformer<Properties, String> transformer0 = MapTransformer.mapTransformer((Map<? super Properties, ? extends String>) null);
      MapIterator<Properties, Class<Properties>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<Properties>) mapIterator0, (Transformer<? super Properties, String>) transformer0, "NodeList must not be null", "suffix may not be null", "Node must not be null");
      OrderedMapIterator<SQLTimeoutException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      IteratorUtils.size(orderedMapIterator0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (long) 0);
      IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) boundedIterator0, (Object) "Node must not be null");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("_q?MM");
      int int0 = (-1676);
      ArrayListIterator<SQLSyntaxErrorException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLSyntaxErrorException>(listIterator0, (-1676));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      IteratorUtils.arrayIterator(dataTruncationArray0, 0, 0);
      EnumSet<ClientInfoStatus>[] enumSetArray0 = (EnumSet<ClientInfoStatus>[]) Array.newInstance(EnumSet.class, 6);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[7];
      clientInfoStatusArray0[0] = clientInfoStatus0;
      clientInfoStatusArray0[1] = clientInfoStatus0;
      clientInfoStatusArray0[2] = clientInfoStatus0;
      clientInfoStatusArray0[3] = clientInfoStatus0;
      clientInfoStatusArray0[4] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[5] = clientInfoStatus1;
      clientInfoStatusArray0[6] = clientInfoStatus0;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatusArray0);
      enumSetArray0[0] = enumSet0;
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet1 = EnumSet.allOf(class0);
      enumSetArray0[1] = enumSet1;
      EnumSet<ClientInfoStatus> enumSet2 = enumSet0.clone();
      enumSetArray0[2] = enumSet2;
      EnumSet<ClientInfoStatus> enumSet3 = EnumSet.noneOf(class0);
      enumSetArray0[3] = enumSet3;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      EnumSet<ClientInfoStatus> enumSet4 = EnumSet.of(clientInfoStatus2, clientInfoStatus0);
      enumSetArray0[4] = enumSet4;
      EnumSet<ClientInfoStatus> enumSet5 = EnumSet.of(clientInfoStatus0, clientInfoStatus1);
      enumSetArray0[5] = enumSet5;
      IteratorUtils.arrayIterator(enumSetArray0, 0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      int int0 = 11;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 11, 11);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, DataTruncation>(orderedMapIterator0);
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      MapIterator<StringTokenizer, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, DataTruncation>) orderedMapIterator1);
      MapIterator<StringTokenizer, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLWarning>) mapIterator0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) mapIterator1);
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      HashSet<SQLFeatureNotSupportedException> hashSet0 = null;
//      try {
        hashSet0 = new HashSet<SQLFeatureNotSupportedException>((Collection<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.HashSet", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorException0.getStackTrace();
      IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 664, sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "", sQLSyntaxErrorException0);
      IteratorUtils.singletonListIterator(sQLSyntaxErrorException1);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("JDBliRfZ=m[UXc");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLSyntaxErrorException0);
      IteratorUtils.skippingIterator((Iterator<SQLException>) singletonIterator0, 1L);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator1);
      ListIterator<Locale.FilteringMode> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) listIterator1, (Predicate<? super Locale.FilteringMode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      int int0 = 0;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0, 0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<DataTruncation>) resettableIterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 3);
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asEnumeration((Iterator<?>) resettableListIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("RH%!w8", "RH%!w8", 1574, hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) objectArrayListIterator0);
      TreeSet<SQLNonTransientConnectionException>[] treeSetArray0 = (TreeSet<SQLNonTransientConnectionException>[]) Array.newInstance(TreeSet.class, 3);
      TreeSet<SQLNonTransientConnectionException> treeSet0 = new TreeSet<SQLNonTransientConnectionException>();
      treeSetArray0[0] = treeSet0;
      TreeSet<SQLNonTransientConnectionException> treeSet1 = new TreeSet<SQLNonTransientConnectionException>();
      treeSetArray0[1] = treeSet1;
      TreeSet<SQLNonTransientConnectionException> treeSet2 = new TreeSet<SQLNonTransientConnectionException>();
      treeSetArray0[2] = treeSet2;
      IteratorUtils.arrayListIterator(treeSetArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3869);
      intArray0[1] = (-3869);
      intArray0[2] = (-3869);
      intArray0[3] = (-3869);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Z<", "Iterator must not be null");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "Iterator must not be null", (-3869), intArray0, sQLIntegrityConstraintViolationException0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, 0L, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.contains((Iterator<SQLRecoverableException>) null, (Object) null);
      Comparator<Object> comparator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Object>) null, (Iterator<?>) null, (Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      Transformer<Properties, String> transformer0 = MapTransformer.mapTransformer((Map<? super Properties, ? extends String>) null);
      IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) transformer0, "NodeList must not be null", "NodeList must not be null", "EObN");
      OrderedMapIterator<SQLTimeoutException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, 0L);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) boundedIterator0, (Object) "EObN");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("NodeList must not be null");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NodeList must not be nullnullEObN");
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(list0);
      // Undeclared exception!
//      try { 
        loopingIterator0.remove();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) linkedList0);
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) listIterator0);
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      IteratorUtils.loopingListIterator((List<SQLWarning>) vector0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("'gI_*<tav~\"");
      IteratorUtils.matchesAny((Iterator<SQLException>) null, (Predicate<? super SQLException>) identityPredicate0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0, 128, 128);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.contains((Iterator<SQLRecoverableException>) null, (Object) "x:Pscw$");
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) resettableIterator0, (Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<BatchUpdateException> iterator0 = null;
      // Undeclared exception!
//      try { 
        AndPredicate.andPredicate((Predicate<? super Object>) null, (Predicate<? super Object>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 4);
      Iterator<SQLRecoverableException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 9);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[3] = class3;
      Class<Properties> class4 = Properties.class;
      classArray0[4] = class4;
      Class<Properties> class5 = Properties.class;
      classArray0[5] = class5;
      Class<Properties> class6 = Properties.class;
      classArray0[6] = class6;
      Class<Properties> class7 = Properties.class;
      classArray0[7] = class7;
      Class<Properties> class8 = Properties.class;
      classArray0[8] = class8;
      ObjectArrayListIterator<Class<Properties>> objectArrayListIterator0 = new ObjectArrayListIterator<Class<Properties>>(classArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find((Iterator<Class<Properties>>) objectArrayListIterator0, (Predicate<? super Class<Properties>>) predicate0);
      ArrayListIterator<IIOMetadataNode> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<IIOMetadataNode>((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableIterator<Predicate<Object>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Predicate<Object>>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("iterator");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<SQLTimeoutException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) orderedMapIterator0);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.fillInStackTrace();
      sQLSyntaxErrorException0.getLocalizedMessage();
      int int0 = 93;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, (-1380), 93);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) listIterator0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(list0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.singletonListIterator(priorityQueue0);
      SQLDataException sQLDataException0 = new SQLDataException("Transformer must not be null");
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator1, (Predicate<? super SQLDataException>) predicate0);
      IteratorUtils.size(listIterator1);
      Transformer<SQLTransactionRollbackException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) transformer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[]";
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(objectArray0, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      Transformer<Properties, String> transformer0 = MapTransformer.mapTransformer((Map<? super Properties, ? extends String>) null);
      IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) transformer0, "NodeList must not be null", "NodeList must not be null", "EObN");
      OrderedMapIterator<SQLTimeoutException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      IteratorUtils.size(orderedMapIterator0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, 0L);
      IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) boundedIterator0, (Object) "EObN");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("NodeList must not be null");
      ArrayListIterator<SQLSyntaxErrorException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLSyntaxErrorException>(sQLTransactionRollbackException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.toString((Iterator<Integer>) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "[]", (Equator<Object>) defaultEquator0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsTruePredicate0, nullIsTruePredicate0);
      NotPredicate.notPredicate((Predicate<? super Object>) andPredicate0);
      IteratorUtils.matchesAll((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) andPredicate0);
      ArrayIterator<SQLSyntaxErrorException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLSyntaxErrorException>(nullIsTruePredicate0, (-2716));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) linkedList0);
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) listIterator0);
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLWarning>) vector0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      IteratorUtils.matchesAll((Iterator<SQLWarning>) resettableListIterator0, (Predicate<? super SQLWarning>) predicate0);
      ArrayIterator<SQLSyntaxErrorException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLSyntaxErrorException>(vector0, 1855);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(orderedMapIterator0, comparator0, comparatorPredicate_Criterion0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-756);
      intArray0[1] = 261;
      intArray0[2] = (-1267);
      intArray0[3] = 125;
      intArray0[4] = (-109);
      intArray0[5] = (-1);
      intArray0[6] = 0;
      intArray0[7] = 2577;
      intArray0[8] = 0;
      SQLException sQLException0 = new SQLException("GyuEH/\u0005%)X'3tId+c6", "Array class must not be null");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(":nl)`B.n){\"!;", ":nl)`B.n){\"!;", intArray0, sQLException0);
      comparatorPredicate0.evaluate(batchUpdateException0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      IteratorUtils.matchesAll((Iterator<StringTokenizer>) orderedMapIterator0, (Predicate<? super StringTokenizer>) predicate0);
      IteratorUtils.size(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.toString((Iterator<Integer>) null);
      Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashtable0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableIterator<Stack<BatchUpdateException>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.emptyIterator();
      int int0 = 0;
      SQLDataException sQLDataException0 = new SQLDataException("HZ2.&1f", "HZ2.&1f", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("HZ2.&1f", "HZ2.&1f", sQLDataException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 9);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[2] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[3] = class2;
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "org.apache.commons.collections4.map.Flat3Map$KeySetIterator", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "org.apache.commons.collections4.map.Flat3Map$KeySetIterator", sQLDataException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0, 100);
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) list0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.singletonListIterator(priorityQueue0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "dOPo@'_(\"BdPJ1,\"BS", (-1), sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("oP3@{cr5", "oP3@{cr5");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException1, true);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException1.forEach(consumer0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Null output stream
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<SQLTransientException, LinkedHashSet<IIOMetadataNode>> hashMap0 = new HashMap<SQLTransientException, LinkedHashSet<IIOMetadataNode>>(208);
      EntrySetMapIterator<SQLTransientException, LinkedHashSet<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientException, LinkedHashSet<IIOMetadataNode>>(hashMap0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[", "[", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("C{VJ1j#zpEW", "C{VJ1j#zpEW", 594, sQLNonTransientException0);
      ConstantTransformer<Object, SQLNonTransientException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientException>(sQLIntegrityConstraintViolationException0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      IteratorUtils.apply((Iterator<ArrayDeque<ArrayList>>) entrySetMapIterator0, (Closure<? super ArrayDeque<ArrayList>>) closure0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashtable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("!P(\"@;aco~5", "!P(\"@;aco~5", hashMap1, (Throwable) null);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap1, sQLNonTransientException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(";0k*WJPw-msMz$|WF", "!P(\"@;aco~5", 208, hashMap1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("\"+lgLkwxT?Q", "", 0, hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException3.getFailedProperties();
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("[", "[", 594, map0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", hashtable0, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", hashMap1, (Throwable) null);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", map0, sQLClientInfoException6);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 208, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.NotNullPredicate");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<PriorityQueue<DataTruncation>> linkedList0 = new LinkedList<PriorityQueue<DataTruncation>>();
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      linkedList0.add(0, priorityQueue0);
      ReverseListIterator<PriorityQueue<DataTruncation>> reverseListIterator0 = new ReverseListIterator<PriorityQueue<DataTruncation>>(linkedList0);
      reverseListIterator0.next();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<PriorityQueue<DataTruncation>>) reverseListIterator0, (Transformer<? super PriorityQueue<DataTruncation>, String>) transformer0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 2374);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "N?C*358#?");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException((String) null, (String) null, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      sQLTimeoutException3.spliterator();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, 0L);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) resettableListIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      // Undeclared exception!
//      try { 
        AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 0 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      int int0 = (-1676);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) orderedIterator0, (-1676));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("jj#P6hT&%)", "| RXSy4V=QrLpz*", (-132));
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 3);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      classArray0[0] = class0;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[1] = class1;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[2] = class2;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>((String) null, classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) invokerTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(object0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 11);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) null);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) singletonListIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.NotNullPredicate");
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) vector0);
      Class<Boolean> class1 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      IteratorUtils.find((Iterator<Integer>) singletonListIterator0, (Predicate<? super Integer>) instanceofPredicate0);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      IteratorUtils.toArray(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("Closure must not be null");
      IteratorUtils.chainedIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Closure must not be null", "Closure must not be null");
      int int0 = (-2462);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, (-2462));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      arrayList0.listIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) reverseListIterator0, class0);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("x.4<PyG,]", "x.4<PyG,]");
      priorityQueue0.add(stringTokenizer0);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(priorityQueue0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      IteratorUtils.collatedIterator((Comparator<? super Object>) null, (Iterator<?>) reverseListIterator0, (Iterator<?>) reverseListIterator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", (-4449));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLNonTransientException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      String string0 = "w;!vmcK:FTa^&U";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "w;!vmcK:FTa^&U", 0, sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "org.apache.commons.collections4.IteratorUtils", 0, sQLNonTransientException0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException(">0!", "", (-1835), sQLIntegrityConstraintViolationException3);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("", "transformer may not be null", (-1835));
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator0, (Iterator<? extends SQLNonTransientException>) objectArrayListIterator0, (Iterator<? extends SQLNonTransientException>) objectArrayListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, (-3370));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ResettableIterator<HashMap<SQLClientInfoException, SQLIntegrityConstraintViolationException>> resettableIterator0 = IteratorUtils.emptyIterator();
      Properties properties0 = new Properties();
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, (-290), sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientException0);
      properties0.put(resettableIterator0, batchUpdateException0);
      IteratorUtils.singletonListIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*$fane4D1w?W9E}H>", "*$fane4D1w?W9E}H>", (-2380));
      sQLTimeoutException0.getStackTrace();
      IteratorUtils.getIterator(sQLTimeoutException0);
      IteratorUtils.emptyListIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("*$fane4D1w?W9E}H>", sQLTimeoutException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("$", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("*$fane4D1w?W9E}H>", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("org.apache.commons.collections4.functors.PredicateTransformer", sQLRecoverableException2);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException(sQLRecoverableException3);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("2bD2r", (String) null);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("suffix may not be null", "", (-2380));
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("qWJ;;),&8");
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      SQLRecoverableException sQLRecoverableException8 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[8] = sQLRecoverableException8;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0, 0);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableListIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) reverseListIterator0, class0);
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(priorityQueue0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      HashSet<SQLFeatureNotSupportedException>[] hashSetArray0 = (HashSet<SQLFeatureNotSupportedException>[]) Array.newInstance(HashSet.class, 4);
      HashSet<SQLFeatureNotSupportedException> hashSet0 = null;
//      try {
        hashSet0 = new HashSet<SQLFeatureNotSupportedException>((Collection<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.HashSet", e);
//      }
  }
}
