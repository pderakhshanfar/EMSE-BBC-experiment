/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 11:45:11 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 0);
      IteratorUtils.toListIterator((Iterator<?>) objectArrayListIterator0);
      ArrayIterator<SQLFeatureNotSupportedException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLFeatureNotSupportedException>(objectArrayListIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 0);
      objectArrayListIterator0.previous();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<PriorityQueue<ServiceLoader>>) objectArrayListIterator0, (Closure<? super PriorityQueue<ServiceLoader>>) transformerClosure0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      UniquePredicate<Locale.FilteringMode> uniquePredicate0 = new UniquePredicate<Locale.FilteringMode>();
      UniquePredicate.uniquePredicate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      uniquePredicate0.evaluate(locale_FilteringMode0);
      IteratorUtils.getIterator(uniquePredicate0);
      Integer integer0 = new Integer(5);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) integer0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IfTransformer<Integer, Integer> ifTransformer0 = new IfTransformer<Integer, Integer>(predicate0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Integer, ? extends Integer>) null);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) ifTransformer0);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 0L);
      Transformer<Integer, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Integer>) skippingIterator0, (Transformer<? super Integer, String>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends String>) resettableListIterator0, (Class<String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<Stack<SQLDataException>> stack0 = new Stack<Stack<SQLDataException>>();
      Stack<SQLDataException> stack1 = new Stack<SQLDataException>();
      stack0.add(stack1);
      ResettableListIterator<Stack<SQLDataException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Stack<SQLDataException>>) stack0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.getIterator("S@,");
      MapIterator<SQLRecoverableException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Collection must not be null", intArray0);
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 0);
      Transformer<SQLException, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("S@,", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'S@,' on 'class java.sql.BatchUpdateException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      UniquePredicate<Locale.FilteringMode> uniquePredicate0 = new UniquePredicate<Locale.FilteringMode>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) uniquePredicate0;
      objectArray0[1] = (Object) uniquePredicate0;
      objectArray0[2] = (Object) uniquePredicate0;
      objectArray0[3] = (Object) uniquePredicate0;
      objectArray0[4] = (Object) uniquePredicate0;
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>(";");
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) singletonIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      Transformer<Object, Locale.FilteringMode> transformer0 = ExceptionTransformer.exceptionTransformer();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      uniquePredicate0.evaluate(locale_FilteringMode0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      Iterator<Object> iterator1 = IteratorUtils.filteredIterator((Iterator<?>) iterator0, (Predicate<? super Object>) transformedPredicate0);
      int int0 = 15;
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator1, 15);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      IteratorUtils.arrayListIterator(objectArray0, 1);
      Class<Locale.LanguageRange>[] classArray0 = (Class<Locale.LanguageRange>[]) Array.newInstance(Class.class, 7);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      classArray0[0] = class0;
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      classArray0[1] = class1;
      Class<Locale.LanguageRange> class2 = Locale.LanguageRange.class;
      classArray0[2] = class2;
      Class<Locale.LanguageRange> class3 = Locale.LanguageRange.class;
      classArray0[3] = class3;
      Class<Locale.LanguageRange> class4 = Locale.LanguageRange.class;
      classArray0[4] = class4;
      Class<Locale.LanguageRange> class5 = Locale.LanguageRange.class;
      classArray0[5] = class5;
      Class<Locale.LanguageRange> class6 = Locale.LanguageRange.class;
      classArray0[6] = class6;
      InvokerTransformer<String, String> invokerTransformer0 = new InvokerTransformer<String, String>("N?[B%t <zyCj", classArray0, classArray0);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("N?[B%t <zyCj", (Transformer<? super String, ? extends String>) invokerTransformer0);
      Class<String> class7 = String.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends String>) iterator0, class7);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'N?[B%t <zyCj' on 'class java.lang.String' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.getIterator("Oy7g_F,i9&'\"uc");
      ArrayList<SQLIntegrityConstraintViolationException>[] arrayListArray0 = (ArrayList<SQLIntegrityConstraintViolationException>[]) Array.newInstance(ArrayList.class, 9);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[0] = arrayList0;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList1 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[1] = arrayList1;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList2 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[2] = arrayList2;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList3 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[3] = arrayList3;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList4 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[4] = arrayList4;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList5 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[5] = arrayList5;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList6 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[6] = arrayList6;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "Invalid index:", 347);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      arrayList4.add(sQLIntegrityConstraintViolationException0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList7 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[7] = arrayList7;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList8 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[8] = arrayList8;
      ResettableListIterator<ArrayList<SQLIntegrityConstraintViolationException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayListArray0);
      IteratorUtils.contains((Iterator<ArrayList<SQLIntegrityConstraintViolationException>>) resettableListIterator0, (Object) arrayList4);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.getIterator("");
      IteratorUtils.emptyMapIterator();
      SQLWarning sQLWarning0 = new SQLWarning("G&7tmSE*<", "G&7tmSE*<", (-2703));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "B0C^/fwdaS 6@M0{", (-2703), sQLWarning0);
      Transformer<SQLTransientException, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ResettableIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(serviceLoader0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Transformer<? super ServiceLoader<SQLInvalidAuthorizationSpecException>, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.util.ServiceLoader' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 1);
      IteratorUtils.get((Iterator<Object>) resettableListIterator0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.getIterator(class0);
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.singletonIterator(transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1590), (-1590));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      Iterator<Transformer<Object, BatchUpdateException>>[] iteratorArray0 = (Iterator<Transformer<Object, BatchUpdateException>>[]) Array.newInstance(Iterator.class, 5);
      Transformer<Object, BatchUpdateException>[] transformerArray0 = (Transformer<Object, BatchUpdateException>[]) Array.newInstance(Transformer.class, 0);
      ObjectArrayIterator<Transformer<Object, BatchUpdateException>> objectArrayIterator0 = new ObjectArrayIterator<Transformer<Object, BatchUpdateException>>(transformerArray0);
      iteratorArray0[0] = (Iterator<Transformer<Object, BatchUpdateException>>) objectArrayIterator0;
      Iterator<Transformer<Object, BatchUpdateException>> iterator0 = EmptyIterator.emptyIterator();
      Iterator<Transformer<Object, BatchUpdateException>> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Transformer<Object, BatchUpdateException>>) iterator0);
      iteratorArray0[1] = iterator1;
      ListIteratorWrapper<Transformer<Object, BatchUpdateException>> listIteratorWrapper0 = new ListIteratorWrapper<Transformer<Object, BatchUpdateException>>(iterator1);
      iteratorArray0[2] = (Iterator<Transformer<Object, BatchUpdateException>>) listIteratorWrapper0;
      LinkedList<Transformer<Object, BatchUpdateException>> linkedList0 = new LinkedList<Transformer<Object, BatchUpdateException>>();
      LoopingListIterator<Transformer<Object, BatchUpdateException>> loopingListIterator0 = new LoopingListIterator<Transformer<Object, BatchUpdateException>>(linkedList0);
      iteratorArray0[3] = (Iterator<Transformer<Object, BatchUpdateException>>) loopingListIterator0;
      MapIterator<Transformer<Object, BatchUpdateException>, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[4] = (Iterator<Transformer<Object, BatchUpdateException>>) mapIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(iteratorArray0, 2, (-3007));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`|n8ZW4> Ztx$f^", "Lo=?M%Q.J(/c", 3270);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) resettableIterator1);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) listIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, (String) null, "Lo=?M%Q.J(/c", "jp0~");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.FilteringMode, ServiceLoader<SQLTimeoutException>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 903);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLIntegrityConstraintViolationException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1, 1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.singletonIterator(linkedList0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Iterator<Object> iterator0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 5);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) singletonIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      HashSet<SQLTransactionRollbackException> hashSet1 = new HashSet<SQLTransactionRollbackException>();
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      HashSet<SQLTransactionRollbackException> hashSet2 = new LinkedHashSet<SQLTransactionRollbackException>();
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet1 = new LinkedHashSet<SQLTransactionRollbackException>();
      HashSet<SQLTransactionRollbackException> hashSet3 = new HashSet<SQLTransactionRollbackException>();
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.emptyListIterator();
      SQLException[] sQLExceptionArray0 = new SQLException[3];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("0", "0");
      sQLExceptionArray0[0] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Y|h*V$~d_+*jaPHA", sQLInvalidAuthorizationSpecException0);
      sQLExceptionArray0[1] = (SQLException) sQLRecoverableException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("?XtYB7y(", "8", 0);
      sQLExceptionArray0[2] = (SQLException) sQLTransactionRollbackException0;
      IteratorUtils.arrayIterator(sQLExceptionArray0, 0, 0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("{wKt{gyUUhD*ka}LLjf", "{wKt{gyUUhD*ka}LLjf");
      sQLSyntaxErrorException0.setNextException(sQLFeatureNotSupportedException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p1ihnoWO");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLSyntaxErrorException0, defaultEquator0);
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(equalPredicate0);
      predicateTransformer0.transform(">zb]?_~`[0");
      predicateTransformer0.transform((String) null);
      Boolean boolean0 = predicateTransformer0.transform((String) null);
      IteratorUtils.getIterator(boolean0);
      EqualPredicate.equalPredicate("GqIsQM\u0007Vs5C&X4&X)");
      IteratorUtils.getIterator(equalPredicate0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLSyntaxErrorException0);
      Transformer<SQLException, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      sQLDataException0.setNextException(sQLSyntaxErrorException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLDataException>) equalPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) orderedMapIterator0, class0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, 0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException();
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("N\"q'cz{mT4*it>&M", "N\"q'cz{mT4*it>&M");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("N\"q'cz{mT4*it>&M");
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("N\"q'cz{mT4*it>&M");
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("N\"q'cz{mT4*it>&M", (String) null, sQLDataException5);
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("N\"q'cz{mT4*it>&M");
      sQLDataExceptionArray0[7] = sQLDataException7;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0, 3);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) resettableListIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Integer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[16];
      objectArray0[3] = (Object) "K5u*d1)LE|6";
      MapIterator<Vector<DataTruncation>, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(objectArray0[3], (Equator<Object>) defaultEquator0);
      IteratorUtils.matchesAny((Iterator<Vector<DataTruncation>>) mapIterator0, (Predicate<? super Vector<DataTruncation>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<Iterator<HashSet<Object>>, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Iterator<HashSet<Object>>>) mapIterator0, (Iterator<? extends Iterator<HashSet<Object>>>) mapIterator0);
      String string0 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("PnB]7E$");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("PnB]7E$", "", sQLTransactionRollbackException0);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[16];
      objectArray0[3] = (Object) "K5u*d1)LE|6";
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 1);
      IteratorUtils.get((Iterator<Object>) resettableListIterator0, 1);
      LinkedList<SQLDataException>[] linkedListArray0 = (LinkedList<SQLDataException>[]) Array.newInstance(LinkedList.class, 6);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLDataException> linkedList1 = new LinkedList<SQLDataException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLDataException> linkedList2 = new LinkedList<SQLDataException>();
      linkedListArray0[2] = linkedList2;
      LinkedList<SQLDataException> linkedList3 = new LinkedList<SQLDataException>();
      linkedListArray0[3] = linkedList3;
      LinkedList<SQLDataException> linkedList4 = new LinkedList<SQLDataException>();
      linkedListArray0[4] = linkedList4;
      LinkedList<SQLDataException> linkedList5 = new LinkedList<SQLDataException>();
      linkedListArray0[5] = linkedList5;
      ResettableListIterator<LinkedList<SQLDataException>> resettableListIterator1 = IteratorUtils.arrayListIterator(linkedListArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[1] = predicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      predicateArray0[2] = (Predicate<Object>) notPredicate0;
      NotPredicate<Object> notPredicate1 = new NotPredicate<Object>(predicate0);
      predicateArray0[3] = (Predicate<Object>) notPredicate1;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[4] = predicate1;
      Predicate<Object> predicate2 = FalsePredicate.falsePredicate();
      predicateArray0[5] = predicate2;
      Predicate<Object> predicate3 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<LinkedList<SQLDataException>>) resettableListIterator1, (Predicate<? super LinkedList<SQLDataException>>) predicate3);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 84);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 84, sQLInvalidAuthorizationSpecException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException((String) null);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("$qd9rMnX)R\u0001Gz", "", 84, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0, 84);
      IteratorUtils.loopingListIterator((List<Stack<ArrayList>>) list0);
      ListIterator<Locale.LanguageRange> listIterator0 = EmptyListIterator.emptyListIterator();
      List<Locale.LanguageRange> list1 = IteratorUtils.toList((Iterator<? extends Locale.LanguageRange>) listIterator0);
      ReverseListIterator<Locale.LanguageRange> reverseListIterator0 = new ReverseListIterator<Locale.LanguageRange>(list1);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Locale.LanguageRange>) reverseListIterator0, 84);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 84
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("_");
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("Yw7^L");
      DataTruncation dataTruncation0 = new DataTruncation((-637), true, true, 512, (-637));
      SingletonIterator<DataTruncation> singletonIterator1 = new SingletonIterator<DataTruncation>(dataTruncation0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-2017), closure0);
      IteratorUtils.apply((Iterator<DataTruncation>) singletonIterator1, (Closure<? super DataTruncation>) forClosure0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("ListIteratorWrapper does not support optional operations of ListIterator.");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) predicate0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "ListIteratorWrapper does not support optional operations of ListIterator.");
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>((DataTruncation) null);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      Transformer<Object, Properties> transformer0 = ConstantTransformer.nullTransformer();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      closureArray0[0] = (Closure<Object>) ifClosure0;
      IfClosure<Object> ifClosure1 = new IfClosure<Object>(predicate0, closureArray0[0]);
      closureArray0[1] = (Closure<Object>) ifClosure1;
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closureArray0[0], false);
      closureArray0[2] = (Closure<Object>) whileClosure0;
      Closure<Object> closure1 = ExceptionClosure.exceptionClosure();
      closureArray0[3] = closure1;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      closureArray0[4] = (Closure<Object>) chainedClosure0;
      Closure<Object> closure2 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      Closure<DataTruncation> closure3 = IfClosure.ifClosure((Predicate<? super DataTruncation>) predicate0, (Closure<? super DataTruncation>) closure2);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<DataTruncation>) singletonIterator0, (Closure<? super DataTruncation>) closure3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) orderedMapIterator0, class0);
      Hashtable<SQLSyntaxErrorException, BatchUpdateException> hashtable0 = new Hashtable<SQLSyntaxErrorException, BatchUpdateException>();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 33);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) orderedMapIterator0, class0);
      Hashtable<SQLSyntaxErrorException, BatchUpdateException> hashtable0 = new Hashtable<SQLSyntaxErrorException, BatchUpdateException>();
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Transformer<? super SQLException, ? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MapIterator<SQLWarning, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapIterator<Integer, SQLSyntaxErrorException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<Integer>) mapIterator1);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 4);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      HashMap<SQLTransactionRollbackException, String> hashMap0 = new HashMap<SQLTransactionRollbackException, String>(1783);
      EntrySetMapIterator<SQLTransactionRollbackException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, String>(hashMap0);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) entrySetMapIterator0;
      ListIterator<SQLTransactionRollbackException> listIterator1 = EmptyListIterator.emptyListIterator();
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) listIterator1;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ExceptionClosure.exceptionClosure();
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      linkedList0.offerLast(locale_FilteringMode0);
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      int int0 = (-1308);
      Integer integer0 = new Integer((-1308));
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(integer0, comparator1);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) comparatorPredicate0, (Predicate<? super Object>) comparatorPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) resettableListIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EqualPredicate.equalPredicate((Object) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ExceptionClosure.exceptionClosure();
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("1");
      SQLDataException sQLDataException0 = new SQLDataException("o", "Mj5t%");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("MFe:~JZ,ahQ_2Ji%f[");
      iIOMetadataNode0.hasAttributes();
      IteratorUtils.getIterator(iIOMetadataNode0);
      Hashtable<Object, SQLSyntaxErrorException> hashtable0 = new Hashtable<Object, SQLSyntaxErrorException>();
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) closure0;
      objectArray0[1] = (Object) linkedHashSet0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) orderedMapIterator0, (Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) uniquePredicate0);
      objectArray0[2] = null;
      objectArray0[3] = (Object) closure0;
      objectArray0[4] = (Object) closure0;
      objectArray0[5] = (Object) linkedHashSet0;
      objectArray0[6] = (Object) closure0;
      objectArray0[7] = (Object) linkedHashSet0;
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Object>) resettableListIterator0);
      IteratorUtils.get((Iterator<Object>) resettableListIterator0, 0);
      LinkedList<BatchUpdateException>[] linkedListArray0 = (LinkedList<BatchUpdateException>[]) Array.newInstance(LinkedList.class, 8);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<BatchUpdateException> linkedList1 = new LinkedList<BatchUpdateException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<BatchUpdateException> linkedList2 = new LinkedList<BatchUpdateException>();
      linkedListArray0[2] = linkedList2;
      LinkedList<BatchUpdateException> linkedList3 = new LinkedList<BatchUpdateException>();
      linkedListArray0[3] = linkedList3;
      LinkedList<BatchUpdateException> linkedList4 = new LinkedList<BatchUpdateException>();
      linkedListArray0[4] = linkedList4;
      LinkedList<BatchUpdateException> linkedList5 = new LinkedList<BatchUpdateException>();
      linkedListArray0[5] = linkedList5;
      LinkedList<BatchUpdateException> linkedList6 = new LinkedList<BatchUpdateException>();
      linkedListArray0[6] = linkedList6;
      LinkedList<BatchUpdateException> linkedList7 = new LinkedList<BatchUpdateException>();
      linkedListArray0[7] = linkedList7;
      ObjectArrayListIterator<LinkedList<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedList<BatchUpdateException>>(linkedListArray0);
      IteratorUtils.toString((Iterator<LinkedList<BatchUpdateException>>) objectArrayListIterator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("I", "org.apache.commons.collections4.iterators.SkippingIterator");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("[[], [], [], [], [], [], [], []]");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("org.apache.commons.collections4.iterators.SkippingIterator");
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("fCBm9lJl5^]gyk:=izi", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("fCBm9lJl5^]gyk:=izi", sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException(sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("L|Ln", "org.apache.commons.collections4.iterators.NodeListIterator", 0);
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      SQLSyntaxErrorException sQLSyntaxErrorException8 = new SQLSyntaxErrorException("", "R", 40);
      sQLSyntaxErrorExceptionArray0[8] = sQLSyntaxErrorException8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0, 40);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Hashtable<Object, SQLSyntaxErrorException> hashtable0 = new Hashtable<Object, SQLSyntaxErrorException>();
      Transformer<SQLRecoverableException, SQLSyntaxErrorException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) hashtable0);
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Transformer<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) transformer0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) null, 65);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Hashtable<Object, SQLSyntaxErrorException> hashtable0 = new Hashtable<Object, SQLSyntaxErrorException>();
      Transformer<SQLRecoverableException, SQLSyntaxErrorException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) hashtable0);
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Transformer<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<?>) iterator1, (-989L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) predicate0);
      MapIterator<Object, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Hashtable<LinkedHashSet, Class<BatchUpdateException>>>) mapIterator0, (Transformer<? super Hashtable<LinkedHashSet, Class<BatchUpdateException>>, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) predicate0);
      IteratorUtils.emptyMapIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      DataTruncation dataTruncation0 = new DataTruncation((-282), false, true, (-282), (-519), sQLTransientException0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<DataTruncation>) resettableIterator0, (Closure<? super DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) "K5u*d1)LE|6";
      ResettableListIterator<Object> resettableListIterator0 = new SingletonListIterator<Object>((Object) null);
      IteratorUtils.unmodifiableListIterator((ListIterator<Object>) resettableListIterator0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTimeoutException0);
      singletonIterator0.next();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      String string0 = "06<b:)Rqx<Jw$/Dw(";
      String string1 = "";
      int int0 = 533;
      StackTraceElement stackTraceElement0 = new StackTraceElement("06<b:)Rqx<Jw$/Dw(", "", "remove() can only be called once after next()", 533);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string2 = "delimiter may not be null";
      StackTraceElement stackTraceElement1 = null;
//      try {
        stackTraceElement1 = new StackTraceElement((String) null, "delimiter may not be null", (String) null, 533);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Declaring class is null
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) objectArrayIterator0, class0);
      Hashtable<SQLSyntaxErrorException, BatchUpdateException> hashtable0 = new Hashtable<SQLSyntaxErrorException, BatchUpdateException>();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      IteratorUtils.isEmpty((Iterator<?>) null);
      Integer integer0 = new Integer(2432);
      IteratorUtils.getIterator((Object) null);
      OrderedMapIterator<ArrayList<Iterator<HashSet<Object>>>, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<ArrayList<Iterator<HashSet<Object>>>, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<ArrayList<Iterator<HashSet<Object>>>, BatchUpdateException>) orderedMapIterator0);
      int int0 = 123;
      int int1 = 2401;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<ArrayList<Iterator<HashSet<Object>>>>) mapIterator0, 2401);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 2401
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransientException sQLTransientException0 = new SQLTransientException(mockThrowable0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) mockThrowable0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<PriorityQueue<ArrayList>>) null, (Predicate<? super PriorityQueue<ArrayList>>) predicate1);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ExceptionClosure.exceptionClosure();
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      IteratorUtils.getIterator(orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 4);
      Class<SQLWarning> class0 = SQLWarning.class;
      classArray0[0] = class0;
      Class<SQLWarning> class1 = SQLWarning.class;
      classArray0[1] = class1;
      Class<SQLWarning> class2 = SQLWarning.class;
      classArray0[2] = class2;
      Class<SQLWarning> class3 = SQLWarning.class;
      classArray0[3] = class3;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, orPredicate0);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicateArray0[1]);
      predicateArray0[2] = (Predicate<Object>) nullIsFalsePredicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) "", (Equator<Object>) defaultEquator0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) orPredicate0);
      predicateArray0[4] = predicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) class0, comparator0);
      predicateArray0[5] = predicate1;
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicateArray0[1], (Predicate<? super Object>) nullIsFalsePredicate0);
      predicateArray0[6] = predicate2;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[7] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate3 = NotNullPredicate.notNullPredicate();
      predicateArray0[8] = predicate3;
      NonePredicate<Object> nonePredicate1 = new NonePredicate<Object>(predicateArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[C5Iq");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyMapIterator();
      EqualPredicate.equalPredicate((Object) orderedMapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      IteratorUtils.getIterator(orderedMapIterator0);
      Hashtable<Object, SQLSyntaxErrorException> hashtable0 = new Hashtable<Object, SQLSyntaxErrorException>();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.singletonIterator("@");
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("@");
      SQLDataException sQLDataException0 = new SQLDataException("o", "@");
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<DataTruncation> forClosure0 = new ForClosure<DataTruncation>(10, closure0);
      IteratorUtils.apply((Iterator<DataTruncation>) zippingIterator0, (Closure<? super DataTruncation>) forClosure0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = 12;
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 1380, sQLTransientException0);
      sQLSyntaxErrorException0.setNextException(sQLTransientException0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLSyntaxErrorException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("ListIteratorWrapper does not support optional operations of ListIterator.");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) predicate0);
      Hashtable<SQLSyntaxErrorException, BatchUpdateException> hashtable0 = new Hashtable<SQLSyntaxErrorException, BatchUpdateException>();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      IteratorUtils.isEmpty(listIterator0);
      Hashtable<Object, SQLSyntaxErrorException> hashtable1 = new Hashtable<Object, SQLSyntaxErrorException>();
      Transformer<SQLRecoverableException, SQLSyntaxErrorException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) hashtable1);
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Transformer<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator0, (Closure<? super DataTruncation>) closure0);
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) iterator0, 256L);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ConstantTransformer.constantTransformer((SQLSyntaxErrorException) null);
      Transformer<Object, SQLSyntaxErrorException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) uniquePredicate0, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) transformer0, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) boundedIterator0, (Transformer<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) transformer1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IteratorUtils.singletonIterator("@");
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("@");
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("uc@OpB-p8:g00a,ZL");
      ResettableIterator<SQLWarning> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) resettableIterator0, (Transformer<? super SQLWarning, String>) transformer0, ", ", ", ", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("@");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.objectGraphIterator(predicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) null);
      Iterator<Predicate<Object>> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Predicate<Object>>) iterator0);
      IteratorUtils.toList((Iterator<? extends Predicate<Object>>) iterator1, 10);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      int int0 = 12;
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 12, sQLTransientException0);
      sQLSyntaxErrorException0.setNextException(sQLTransientException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IteratorUtils.singletonIterator("@");
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("@");
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      objectArrayListIterator0.next();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) objectArrayListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("}", "@");
      objectArrayListIterator0.hasNext();
      IteratorUtils.getIterator("@");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      ExceptionClosure.exceptionClosure();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 8);
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      HashSet<SQLTransactionRollbackException> hashSet1 = new HashSet<SQLTransactionRollbackException>();
      Hashtable<Object, SQLSyntaxErrorException> hashtable0 = new Hashtable<Object, SQLSyntaxErrorException>();
      MapTransformer.mapTransformer((Map<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) hashtable0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getFirstChild();
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      Hashtable<SQLSyntaxErrorException, StringTokenizer> hashtable1 = new Hashtable<SQLSyntaxErrorException, StringTokenizer>();
      EntrySetMapIterator<SQLSyntaxErrorException, StringTokenizer> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, StringTokenizer>(hashtable1);
      MapIterator<SQLSyntaxErrorException, StringTokenizer> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, StringTokenizer>) entrySetMapIterator0);
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) mapIterator1;
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("qj(']SYc", "Iterator remove() cannot be called at this time", (-3200), hashtable0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      Consumer<SQLException> consumer0 = (Consumer<SQLException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonListIterator0.forEachRemaining(consumer0);
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) singletonListIterator0);
      Enumeration<Boolean> enumeration0 = (Enumeration<Boolean>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<Boolean> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0);
      Enumeration<Boolean> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) iterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration1, (Collection<? super Boolean>) arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.singletonIterator("@");
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("@");
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) resettableListIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) listIterator0);
      ListIterator<Boolean> listIterator1 = EmptyListIterator.emptyListIterator();
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) listIterator1);
      Iterator<Boolean> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0);
      Enumeration<Boolean> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) iterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration1, (Collection<? super Boolean>) arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Hashtable<Object, SQLSyntaxErrorException> hashtable0 = new Hashtable<Object, SQLSyntaxErrorException>();
      MapTransformer.mapTransformer((Map<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) hashtable0);
      Iterator<Boolean> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) iterator0);
      Iterator<Boolean> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0);
      Enumeration<Boolean> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) iterator1);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration1, (Collection<? super Boolean>) arrayDeque0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      ExceptionClosure.exceptionClosure();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 8);
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      HashSet<SQLTransactionRollbackException> hashSet1 = new LinkedHashSet<SQLTransactionRollbackException>();
      Hashtable<Object, SQLSyntaxErrorException> hashtable0 = new Hashtable<Object, SQLSyntaxErrorException>();
      MapTransformer.mapTransformer((Map<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) hashtable0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getFirstChild();
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends BatchUpdateException>) orderedMapIterator0);
      Hashtable<SQLSyntaxErrorException, BatchUpdateException> hashtable0 = new Hashtable<SQLSyntaxErrorException, BatchUpdateException>();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      IteratorUtils.isEmpty(orderedMapIterator0);
      Hashtable<Object, SQLSyntaxErrorException> hashtable1 = new Hashtable<Object, SQLSyntaxErrorException>();
      Transformer<SQLRecoverableException, SQLSyntaxErrorException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) hashtable1);
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Transformer<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) transformer0);
      IteratorUtils.emptyListIterator();
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Boolean>) null, (Collection<? super Boolean>) stack0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      MapIterator<String, Locale.FilteringMode> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("o!F/EuDUq@Sf_");
      Node node0 = iIOMetadataNode0.insertBefore(iIOMetadataNode1, iIOMetadataNode1);
      Node node1 = iIOMetadataNode0.replaceChild(node0, node0);
      IteratorUtils.nodeListIterator(node1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      ExceptionClosure.exceptionClosure();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 8);
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      HashSet<SQLTransactionRollbackException> hashSet1 = new HashSet<SQLTransactionRollbackException>();
      Hashtable<Object, SQLSyntaxErrorException> hashtable0 = new Hashtable<Object, SQLSyntaxErrorException>();
      MapTransformer.mapTransformer((Map<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) hashtable0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) transformer0, "", "[$J+*WCO]w", "");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 1464);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Array class must not be null");
      SQLWarning[] sQLWarningArray0 = new SQLWarning[7];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("aIUDT\"HH", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, sQLTimeoutException0);
      dataTruncation0.getNextWarning();
      sQLWarningArray0[0] = null;
      SQLWarning sQLWarning0 = new SQLWarning("Uv>JHhGXj&{");
      sQLWarningArray0[1] = sQLWarning0;
      dataTruncation0.getNextWarning();
      sQLWarningArray0[2] = null;
      SQLWarning sQLWarning1 = new SQLWarning((Throwable) null);
      sQLWarningArray0[3] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning();
      sQLWarningArray0[4] = sQLWarning2;
      DataTruncation dataTruncation1 = new DataTruncation((-4398), false, false, 0, 0);
      sQLWarningArray0[5] = (SQLWarning) dataTruncation1;
      SQLWarning sQLWarning3 = new SQLWarning(sQLWarning0);
      sQLWarningArray0[6] = sQLWarning3;
      ObjectArrayListIterator<SQLWarning> objectArrayListIterator0 = new ObjectArrayListIterator<SQLWarning>(sQLWarningArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) objectArrayListIterator0, (Transformer<? super SQLWarning, String>) transformer0, "Q f$*ms`XOPBpkmk/", "Q f$*ms`XOPBpkmk/", "Array class must not be null");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'Array class must not be null' on 'class java.sql.SQLWarning' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("ListIteratorWrapper does not support optional operations of ListIterator.");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      ListIterator<String> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) predicate0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      IteratorUtils.matchesAny((Iterator<PriorityQueue<ArrayList>>) listIterator1, (Predicate<? super PriorityQueue<ArrayList>>) predicate0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      DataTruncation dataTruncation0 = new DataTruncation((-5), true, true, 0, (-5));
      dataTruncationArray0[0] = dataTruncation0;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0, 0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) resettableListIterator0);
      ListIterator<DataTruncation> listIterator2 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) iterator0);
      ListIterator<SQLWarning> listIterator3 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) listIterator2, (Predicate<? super SQLWarning>) predicate0);
      ListIterator<SQLWarning> listIterator4 = IteratorUtils.unmodifiableListIterator(listIterator3);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("%>4b*a5N");
      IteratorUtils.toString((Iterator<SQLWarning>) listIterator4, (Transformer<? super SQLWarning, String>) constantTransformer0, "%>4b*a5N", "delimiter may not be null", "org.apache.commons.collections4.iterators.EntrySetMapIterator");
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(constantTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) identityPredicate0, 100, (-4993));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TruePredicate.truePredicate();
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>((DataTruncation) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<DataTruncation>) singletonIterator0, (Closure<? super DataTruncation>) closure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionClosure invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "K5u*d1)LE|6";
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 1);
      IteratorUtils.unmodifiableListIterator((ListIterator<Object>) resettableListIterator0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      ExceptionClosure.exceptionClosure();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      ReverseListIterator<SQLNonTransientException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientException>(stack0);
      Factory<BatchUpdateException> factory0 = ConstantFactory.constantFactory((BatchUpdateException) null);
      Transformer<SQLException, BatchUpdateException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends BatchUpdateException>) factory0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) reverseListIterator0, (Transformer<? super SQLNonTransientException, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, 14);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      MapIterator<String, Locale.FilteringMode> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayList0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLTimeoutException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration1, (Collection<? super SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MapIterator<String, Locale.FilteringMode> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<DataTruncation, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator0, (Closure<? super DataTruncation>) closure0);
      Transformer<Object, BatchUpdateException>[] transformerArray0 = (Transformer<Object, BatchUpdateException>[]) Array.newInstance(Transformer.class, 0);
      IteratorUtils.arrayListIterator(transformerArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "RC6AmKrzRwE,diG";
      String string1 = "";
      int int0 = (-1);
      String string2 = null;
      SQLException sQLException0 = new SQLException("RC6AmKrzRwE,diG", (String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, (-1), (-1), sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.getStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("RC6AmKrzRwE,diG", "", (-1), dataTruncation0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, 343L, 2045L);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedHashSet0);
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TruePredicate.truePredicate();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) "K5u*d1)LE|6";
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 0);
      ListIterator<Object> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Object>) resettableListIterator0);
      IteratorUtils.get((Iterator<Object>) listIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.singletonIterator("@");
      EmptyIterator.resettableEmptyIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) objectArrayListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("}", "@");
      objectArrayListIterator0.hasNext();
      Integer integer0 = new Integer((-4549));
      IteratorUtils.getIterator("@");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("S5FVUkK1");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      ExceptionClosure.exceptionClosure();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[9];
      clientInfoStatusArray0[0] = clientInfoStatus3;
      clientInfoStatusArray0[1] = clientInfoStatus3;
      clientInfoStatusArray0[2] = clientInfoStatus1;
      clientInfoStatusArray0[3] = clientInfoStatus0;
      clientInfoStatusArray0[4] = clientInfoStatus3;
      clientInfoStatusArray0[5] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus5 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[6] = clientInfoStatus5;
      clientInfoStatusArray0[7] = clientInfoStatus2;
      clientInfoStatusArray0[8] = clientInfoStatus4;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0, 0);
      IteratorUtils.asIterable((Iterator<? extends ClientInfoStatus>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 8);
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      HashSet<SQLTransactionRollbackException> hashSet1 = new HashSet<SQLTransactionRollbackException>();
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      HashSet<SQLTransactionRollbackException> hashSet2 = new HashSet<SQLTransactionRollbackException>();
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet1 = new LinkedHashSet<SQLTransactionRollbackException>();
      HashSet<SQLTransactionRollbackException> hashSet3 = new HashSet<SQLTransactionRollbackException>();
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) resettableListIterator0, (long) 8);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>) skippingIterator0, (Iterator<? extends SQLRecoverableException>) skippingIterator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) iterator0, class0);
      IteratorUtils.toArray((Iterator<?>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("ListIteratorWrapper does not support optional operations of ListIterator.");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) predicate0);
      EmptyIterator.resettableEmptyIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ListIteratorWrapper does not support optional operations of ListIterator.", "ListIteratorWrapper does not support optional operations of ListIterator.", (-1), hashtable0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ListIteratorWrapper does not support optional operations of ListIterator.", sQLClientInfoException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("ListIteratorWrapper does not support optional operations of ListIterator.");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("ListIteratorWrapper does not support optional operations of ListIterator.", "ListIteratorWrapper does not support optional operations of ListIterator.", (-1), sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("5hvo:}{)1ByW#\"j");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException0;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) objectArrayListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("AraS.", (String) null);
      objectArrayListIterator0.hasNext();
      Integer integer0 = new Integer((-1));
      IteratorUtils.getIterator(hashtable0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator1 = new AbstractOrderedMapIteratorDecorator<DataTruncation, BatchUpdateException>(orderedMapIterator0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) orderedMapIterator1, class0);
      Hashtable<SQLSyntaxErrorException, BatchUpdateException> hashtable0 = new Hashtable<SQLSyntaxErrorException, BatchUpdateException>();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      IteratorUtils.isEmpty(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) null, "MXPgqO<bj1", "%>b*a5N", "{R\"A;f0?");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ExceptionClosure.exceptionClosure();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      MapIterator<String, Locale.FilteringMode> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator0);
      MapIterator<DataTruncation, BatchUpdateException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) mapIterator1);
      Closure<DataTruncation> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply(iterator0, (Closure<? super DataTruncation>) closure0);
      IteratorUtils.emptyMapIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayList0);
      EmptyIterator.resettableEmptyIterator();
      Iterator<ClientInfoStatus> iterator1 = EmptyIterator.emptyIterator();
      Iterator<ClientInfoStatus> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>) iterator1, (Iterator<? extends ClientInfoStatus>) iterator1);
      boolean boolean0 = true;
      String string0 = "?>/qwlgcg6_";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?>/qwlgcg6_", "?>/qwlgcg6_", 512);
      SQLWarning sQLWarning0 = new SQLWarning(sQLIntegrityConstraintViolationException0);
      DataTruncation dataTruncation0 = new DataTruncation(91, false, true, (-1), (-1), sQLWarning0);
      IteratorUtils.contains(iterator2, (Object) dataTruncation0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[6];
      StringTokenizer stringTokenizer0 = null;
//      try {
        stringTokenizer0 = new StringTokenizer((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.StringTokenizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("ListIteratorWrapper does not support optional operations of ListIterator.");
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      ListIterator<String> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) predicate0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "ListIteratorWrapper does not support optional operations of ListIterator.");
      IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      IteratorUtils.peekingIterator((Iterator<? extends String>) listIterator1);
      SQLWarning sQLWarning0 = new SQLWarning("?!ds$c)?XW!CMT", "ListIteratorWrapper does not support optional operations of ListIterator.");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "K5u*d1)LE|6", 1, sQLWarning0);
      IteratorUtils.asEnumeration((Iterator<? extends String>) singletonListIterator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<TreeSet<Predicate>>) listIterator1, (Predicate<? super TreeSet<Predicate>>) predicate0);
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      DataTruncation dataTruncation0 = new DataTruncation(8, true, true, 80, (-1190), sQLSyntaxErrorException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      IteratorUtils.matchesAny((Iterator<PriorityQueue<ArrayList>>) objectArrayIterator0, (Predicate<? super PriorityQueue<ArrayList>>) predicate0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("ListIteratorWrapper does not support optional operations of ListIterator.");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      ListIterator<String> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) predicate0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "ListIteratorWrapper does not support optional operations of ListIterator.");
      IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      IteratorUtils.peekingIterator((Iterator<? extends String>) listIterator1);
      SQLWarning sQLWarning0 = new SQLWarning("?!ds$c)?XW!CMT", "ListIteratorWrapper does not support optional operations of ListIterator.");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "K5u*d1)LE|6", 1, sQLWarning0);
      IteratorUtils.asEnumeration((Iterator<? extends String>) singletonListIterator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<TreeSet<Predicate>>) listIterator1, (Predicate<? super TreeSet<Predicate>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends BatchUpdateException>) orderedMapIterator0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) orderedMapIterator1, class0);
      Hashtable<SQLSyntaxErrorException, BatchUpdateException> hashtable0 = new Hashtable<SQLSyntaxErrorException, BatchUpdateException>();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      IteratorUtils.isEmpty(orderedMapIterator0);
      ArrayIterator<HashSet<SQLTransientException>> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<HashSet<SQLTransientException>>(hashSet0, 15, 4054);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLWarning sQLWarning0 = new SQLWarning("q", "q");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "getKey() can only be called after next() and before remove()", 2276, sQLSyntaxErrorException0);
      Iterator<String> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      DataTruncation dataTruncation0 = new DataTruncation(1422, true, true, 1422, (-1));
      ConstantTransformer<DataTruncation, DataTruncation> constantTransformer0 = new ConstantTransformer<DataTruncation, DataTruncation>(dataTruncation0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) constantTransformer0);
      Class<DataTruncation> class1 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) iterator0, class1);
      Hashtable<SQLSyntaxErrorException, BatchUpdateException> hashtable0 = new Hashtable<SQLSyntaxErrorException, BatchUpdateException>();
      EntrySetMapIterator<SQLSyntaxErrorException, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, BatchUpdateException>(hashtable0);
      MapIterator<SQLSyntaxErrorException, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, BatchUpdateException>) entrySetMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) entrySetMapIterator0, (Iterator<? extends SQLSyntaxErrorException>) mapIterator0, (Iterator<? extends SQLSyntaxErrorException>) entrySetMapIterator0);
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "P_-X  AW");
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("");
      IteratorUtils.chainedIterator((Iterator<? extends String>) singletonIterator0, (Iterator<? extends String>) singletonIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      IteratorUtils.peekingIterator((Iterator<? extends String>) singletonIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("P_-X  AW", "P_-X  AW");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("K5u*d1)LE|6", "", 16, sQLNonTransientConnectionException0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) sQLWarning0;
      objectArray0[1] = (Object) sQLNonTransientConnectionException0;
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 1);
      IteratorUtils.unmodifiableListIterator((ListIterator<Object>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) resettableListIterator0, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      OrderedMapIterator<DataTruncation, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ExceptionClosure.exceptionClosure();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 8);
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(8, false, false, 8, 8, (Throwable) null);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.matchesAny((Iterator<PriorityQueue<ArrayList>>) orderedMapIterator0, (Predicate<? super PriorityQueue<ArrayList>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, (-452), 628);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends BatchUpdateException>) orderedMapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      DataTruncation dataTruncation0 = new DataTruncation(4645, true, false, 1422, 15, sQLSyntaxErrorException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<PriorityQueue<ArrayList>>) orderedMapIterator0, (Predicate<? super PriorityQueue<ArrayList>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<DataTruncation, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      DataTruncation dataTruncation0 = new DataTruncation(80, true, true, 8, 80, sQLSyntaxErrorException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<PriorityQueue<ArrayList>>) orderedMapIterator0, (Predicate<? super PriorityQueue<ArrayList>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      Class<DataTruncation> class1 = DataTruncation.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends DataTruncation>) null, class1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<DataTruncation, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator0, (Closure<? super DataTruncation>) closure0);
      MapIterator<String, Locale.FilteringMode> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayList0);
      EmptyIterator.resettableEmptyIterator();
      Iterator<ArrayList<SQLException>> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super ArrayList<SQLException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      ExceptionClosure.exceptionClosure();
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("ListIteratorWrapper does not support optional operations of ListIterator.");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      ListIterator<String> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) predicate0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "ListIteratorWrapper does not support optional operations of ListIterator.");
      IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      IteratorUtils.peekingIterator((Iterator<? extends String>) listIterator1);
      SQLWarning sQLWarning0 = new SQLWarning("?!ds$c)?XW!CMT", "ListIteratorWrapper does not support optional operations of ListIterator.");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "K5u*d1)LE|6", 1, sQLWarning0);
      IteratorUtils.asEnumeration((Iterator<? extends String>) singletonListIterator0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<TreeSet<Predicate>>) listIterator1, (Predicate<? super TreeSet<Predicate>>) predicate0);
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLSyntaxErrorException>(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("ListIteratorWrapper does not support optional operations of ListIterator.");
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      ListIterator<String> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) predicate0);
      assertNotNull(listIterator1);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertTrue(listIterator1.hasNext());
      assertFalse(listIterator1.equals((Object)listIterator0));
      
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      assertNotNull(sQLTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "ListIteratorWrapper does not support optional operations of ListIterator.");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("ListIteratorWrapper does not support optional operations of ListIterator.", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      HashSet<SQLTransactionRollbackException> hashSet1 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet1);
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.equals((Object)hashSet0));
      
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet1 = new LinkedHashSet<SQLTransactionRollbackException>();
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      
      HashSet<SQLTransactionRollbackException> hashSet2 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet2);
      assertEquals(0, hashSet2.size());
      assertTrue(hashSet2.isEmpty());
      assertTrue(hashSet2.equals((Object)hashSet0));
      assertTrue(hashSet2.equals((Object)hashSet1));
      
      HashSet<SQLTransactionRollbackException> hashSet3 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet3);
      assertTrue(hashSet3.isEmpty());
      assertEquals(0, hashSet3.size());
      assertTrue(hashSet3.equals((Object)hashSet2));
      assertTrue(hashSet3.equals((Object)hashSet0));
      assertTrue(hashSet3.equals((Object)hashSet1));
      
      HashSet<SQLTransactionRollbackException> hashSet4 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet4);
      assertEquals(0, hashSet4.size());
      assertTrue(hashSet4.isEmpty());
      assertTrue(hashSet4.equals((Object)hashSet2));
      assertTrue(hashSet4.equals((Object)hashSet3));
      assertTrue(hashSet4.equals((Object)hashSet0));
      assertTrue(hashSet4.equals((Object)hashSet1));
      
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<TreeSet<SQLSyntaxErrorException>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("ListIteratorWrapper does not support optional operations of ListIterator.");
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      ListIterator<String> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) predicate0);
      assertNotNull(listIterator1);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertTrue(listIterator1.hasNext());
      assertFalse(listIterator1.equals((Object)listIterator0));
      
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      assertNotNull(sQLTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "ListIteratorWrapper does not support optional operations of ListIterator.");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("ListIteratorWrapper does not support optional operations of ListIterator.", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0);
      assertNotNull(iterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.equals((Object)listIterator1));
      
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      assertNotNull(singletonListIterator0);
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      
      Iterator<String> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends String>) listIterator1);
      assertNotNull(iterator1);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertTrue(listIterator1.hasNext());
      assertFalse(listIterator0.equals((Object)listIterator1));
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertFalse(iterator1.equals((Object)iterator0));
      
      SQLWarning sQLWarning0 = new SQLWarning("?!ds$c)?XW!CMT", "ListIteratorWrapper does not support optional operations of ListIterator.");
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning: ?!ds$c)?XW!CMT", sQLWarning0.toString());
      assertEquals("ListIteratorWrapper does not support optional operations of ListIterator.", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("?!ds$c)?XW!CMT", sQLWarning0.getMessage());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "K5u*d1)LE|6", 1, sQLWarning0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLWarning: ?!ds$c)?XW!CMT", sQLWarning0.toString());
      assertEquals("ListIteratorWrapper does not support optional operations of ListIterator.", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("?!ds$c)?XW!CMT", sQLWarning0.getMessage());
      assertEquals(1, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("K5u*d1)LE|6", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) iterator1;
      objectArray0[2] = (Object) iterator1;
      objectArray0[3] = (Object) "K5u*d1)LE|6";
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 0);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(4, objectArray0.length);
      
      ListIterator<Object> listIterator2 = IteratorUtils.unmodifiableListIterator((ListIterator<Object>) resettableListIterator0);
      assertNotNull(listIterator2);
      assertTrue(listIterator2.hasNext());
      assertFalse(listIterator2.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(4, objectArray0.length);
      
      Object object0 = IteratorUtils.get((Iterator<Object>) listIterator2, 1);
      assertNotNull(object0);
      assertTrue(listIterator2.hasPrevious());
      assertTrue(listIterator2.hasNext());
      assertTrue(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) listIterator2, (-2805));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -2805
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      predicateArray0[2] = predicate1;
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      assertNotNull(allPredicate0);
      assertEquals(4, predicateArray0.length);
      
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(predicate0));
      
      Predicate<Object> predicate2 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      assertNotNull(predicate2);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(vector0.contains(predicate0));
      
      Predicate<Object> predicate3 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate2);
      assertNotNull(predicate3);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(vector0.contains(predicate0));
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<TreeSet<Predicate>>) null, (Predicate<? super TreeSet<Predicate>>) predicate1);
      assertTrue(boolean0);
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLSyntaxErrorException>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      OrderedMapIterator<DataTruncation, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 8);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      HashSet<SQLTransactionRollbackException> hashSet1 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet1);
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.equals((Object)hashSet0));
      
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      HashSet<SQLTransactionRollbackException> hashSet2 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet2);
      assertEquals(0, hashSet2.size());
      assertTrue(hashSet2.isEmpty());
      assertTrue(hashSet2.equals((Object)hashSet0));
      assertTrue(hashSet2.equals((Object)hashSet1));
      
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet1 = new LinkedHashSet<SQLTransactionRollbackException>();
      assertNotNull(linkedHashSet1);
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      
      HashSet<SQLTransactionRollbackException> hashSet3 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet3);
      assertEquals(0, hashSet3.size());
      assertTrue(hashSet3.isEmpty());
      assertTrue(hashSet3.equals((Object)hashSet1));
      assertTrue(hashSet3.equals((Object)hashSet2));
      assertTrue(hashSet3.equals((Object)hashSet0));
      
      HashSet<SQLTransactionRollbackException> hashSet4 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet4);
      assertTrue(hashSet4.isEmpty());
      assertEquals(0, hashSet4.size());
      assertTrue(hashSet4.equals((Object)hashSet2));
      assertTrue(hashSet4.equals((Object)hashSet0));
      assertTrue(hashSet4.equals((Object)hashSet1));
      assertTrue(hashSet4.equals((Object)hashSet3));
      
      HashSet<SQLTransactionRollbackException> hashSet5 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet5);
      assertTrue(hashSet5.isEmpty());
      assertEquals(0, hashSet5.size());
      assertTrue(hashSet5.equals((Object)hashSet2));
      assertTrue(hashSet5.equals((Object)hashSet4));
      assertTrue(hashSet5.equals((Object)hashSet1));
      assertTrue(hashSet5.equals((Object)hashSet3));
      assertTrue(hashSet5.equals((Object)hashSet0));
      
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      OrderedMapIterator<Boolean, SQLDataException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<Boolean, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Boolean, SQLDataException>(orderedMapIterator1);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      OrderedMapIterator<Boolean, Object> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ?>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      
      ConstantTransformer<Boolean, String> constantTransformer0 = new ConstantTransformer<Boolean, String>((String) null);
      assertNotNull(constantTransformer0);
      
      String string0 = IteratorUtils.toString((Iterator<Boolean>) orderedMapIterator2, (Transformer<? super Boolean, String>) constantTransformer0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[9];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ClientInfoStatus clientInfoStatus5 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[5] = clientInfoStatus5;
      ClientInfoStatus clientInfoStatus6 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[6] = clientInfoStatus6;
      ClientInfoStatus clientInfoStatus7 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[7] = clientInfoStatus7;
      ClientInfoStatus clientInfoStatus8 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[8] = clientInfoStatus8;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0);
      assertNotNull(resettableIterator0);
      assertEquals(9, clientInfoStatusArray0.length);
      
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Array class must not be null", "Array class must not be null", hashMap0, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("Array class must not be null", sQLClientInfoException1.getSQLState());
      assertEquals("Array class must not be null", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: Array class must not be null", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      assertNotNull(hashtable1);
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.equals((Object)hashtable0));
      
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("Array class must not be null", "", 1, hashtable1);
      assertNotNull(sQLClientInfoException2);
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertEquals("java.sql.SQLClientInfoException: Array class must not be null", sQLClientInfoException2.toString());
      assertEquals("", sQLClientInfoException2.getSQLState());
      assertEquals("Array class must not be null", sQLClientInfoException2.getMessage());
      assertEquals(1, sQLClientInfoException2.getErrorCode());
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashMap0);
      assertNotNull(sQLClientInfoException3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException3.toString());
      assertNull(sQLClientInfoException3.getMessage());
      assertNull(sQLClientInfoException3.getSQLState());
      assertEquals(0, sQLClientInfoException3.getErrorCode());
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      assertNotNull(objectArrayIterator0);
      assertEquals(4, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(4, sQLClientInfoExceptionArray0.length);
      
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) objectArrayIterator0);
      assertNotNull(iterator0);
      assertEquals(4, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(4, sQLClientInfoExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      HashSet<SQLTransactionRollbackException> hashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<ClientInfoStatus>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) resettableIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
      
      IteratorUtils.apply((Iterator<DataTruncation>) boundedIterator0, (Closure<? super DataTruncation>) closure0);
      OrderedMapIterator<SQLWarning, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<SQLWarning, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLWarning, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      assertNotNull(transformer0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) orderedMapIterator1, (Transformer<? super SQLWarning, String>) transformer0, "Jy.I+&", (String) null, "Iterator must not be null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 13);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator((String) null);
      assertNotNull(resettableIterator0);
      
      iteratorArray0[0] = (Iterator<String>) resettableIterator0;
      ResettableIterator<String> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator1);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      iteratorArray0[1] = (Iterator<String>) resettableIterator1;
      MapIterator<String, Locale.FilteringMode> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      iteratorArray0[2] = (Iterator<String>) mapIterator0;
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator1);
      assertNotNull(enumeration0);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayList0);
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      ResettableIterator<Object> resettableIterator2 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator2);
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Array class must not be null", "TLJBIwR)',\"e'_p1");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("Array class must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: Array class must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("TLJBIwR)',\"e'_p1", sQLNonTransientConnectionException0.getSQLState());
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("TLJBIwR)',\"e'_p1");
      assertNotNull(sQLNonTransientConnectionException1);
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: TLJBIwR)',\"e'_p1", sQLNonTransientConnectionException1.toString());
      assertEquals("TLJBIwR)',\"e'_p1", sQLNonTransientConnectionException1.getMessage());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("4%GfAk5a.~lyWc|~/", sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException2);
      assertEquals("4%GfAk5a.~lyWc|~/", sQLNonTransientConnectionException2.getMessage());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 4%GfAk5a.~lyWc|~/", sQLNonTransientConnectionException2.toString());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals("Array class must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: Array class must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("TLJBIwR)',\"e'_p1", sQLNonTransientConnectionException0.getSQLState());
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("TLJBIwR)',\"e'_p1", "org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLNonTransientConnectionException1);
      assertNotNull(sQLNonTransientConnectionException3);
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: TLJBIwR)',\"e'_p1", sQLNonTransientConnectionException3.toString());
      assertEquals("TLJBIwR)',\"e'_p1", sQLNonTransientConnectionException3.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: TLJBIwR)',\"e'_p1", sQLNonTransientConnectionException1.toString());
      assertEquals("TLJBIwR)',\"e'_p1", sQLNonTransientConnectionException1.getMessage());
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      assertNotNull(objectArrayIterator0);
      assertEquals(4, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(4, sQLNonTransientConnectionExceptionArray0.length);
      
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) objectArrayIterator0);
      assertNotNull(list0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(4, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(4, sQLNonTransientConnectionExceptionArray0.length);
      assertTrue(list0.contains(sQLNonTransientConnectionException0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 13);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator((String) null);
      assertNotNull(resettableIterator0);
      
      iteratorArray0[0] = (Iterator<String>) resettableIterator0;
      ResettableIterator<String> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator1);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      iteratorArray0[1] = (Iterator<String>) resettableIterator1;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "U", (-3633));
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertEquals((-3633), sQLDataException0.getErrorCode());
      assertEquals("U", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      
      Throwable[] throwableArray0 = sQLDataException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertNull(sQLDataException0.getMessage());
      assertEquals((-3633), sQLDataException0.getErrorCode());
      assertEquals("U", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, throwableArray0.length);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "", sQLDataException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLDataException0.getMessage());
      assertEquals((-3633), sQLDataException0.getErrorCode());
      assertEquals("U", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      assertNotNull(objectArrayListIterator0);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, sQLNonTransientConnectionExceptionArray0.length);
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) objectArrayListIterator0);
      assertNotNull(listIterator0);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(0, sQLNonTransientConnectionExceptionArray0.length);
      
      SQLDataException sQLDataException1 = new SQLDataException("", (String) null);
      assertNotNull(sQLDataException1);
      assertEquals("java.sql.SQLDataException: ", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("", sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      boolean boolean0 = objectArrayListIterator0.hasNext();
      assertFalse(boolean0);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, sQLNonTransientConnectionExceptionArray0.length);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      assertNotNull(predicate0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertNull(sQLNonTransientConnectionException1);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(0, sQLNonTransientConnectionExceptionArray0.length);
      
      Integer integer0 = new Integer((-3633));
      assertEquals((-3633), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-4549));
      assertEquals((-4549), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer1);
      assertNotNull(iterator0);
      assertFalse(integer1.equals((Object)integer0));
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 13);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator((String) null);
      assertNotNull(resettableIterator0);
      
      iteratorArray0[0] = (Iterator<String>) resettableIterator0;
      ResettableIterator<String> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator1);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      OrderedMapIterator<SQLWarning, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<SQLWarning, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLWarning, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      OrderedMapIterator<SQLWarning, SQLNonTransientConnectionException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLWarning, ? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      assertSame(orderedMapIterator1, orderedMapIterator2);
      assertSame(orderedMapIterator2, orderedMapIterator1);
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator0));
      
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      assertNotNull(transformer0);
      
      Hashtable<SQLException, String> hashtable0 = new Hashtable<SQLException, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Transformer<SQLException, String> transformer1 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      assertNotNull(transformer1);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      String string0 = IteratorUtils.toString((Iterator<SQLWarning>) orderedMapIterator0, (Transformer<? super SQLWarning, String>) transformer1, "Jy.I+&", "Start index must not be less than zero", "#'hVc{I7rxd0E");
      assertEquals("Start index must not be less than zero#'hVc{I7rxd0E", string0);
      assertNotNull(string0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 13);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator((String) null);
      assertNotNull(resettableIterator0);
      
      iteratorArray0[0] = (Iterator<String>) resettableIterator0;
      ResettableIterator<String> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator1);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      iteratorArray0[1] = (Iterator<String>) resettableIterator1;
      MapIterator<String, Locale.FilteringMode> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      iteratorArray0[2] = (Iterator<String>) mapIterator0;
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator1);
      assertNotNull(enumeration0);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayList0);
      assertNotNull(iterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      SQLDataException sQLDataException0 = new SQLDataException("", "p", (-410));
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("p", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals((-410), sQLDataException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("p", "", sQLDataException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("p", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals((-410), sQLDataException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("p", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: p", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException0;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(3, sQLNonTransientConnectionExceptionArray0.length);
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) objectArrayListIterator0);
      assertNotNull(listIterator0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertEquals(3, sQLNonTransientConnectionExceptionArray0.length);
      
      SQLDataException sQLDataException1 = new SQLDataException("U^3GG7=DHmv", "Iterator[]");
      assertNotNull(sQLDataException1);
      assertEquals("Iterator[]", sQLDataException1.getSQLState());
      assertEquals("U^3GG7=DHmv", sQLDataException1.getMessage());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: U^3GG7=DHmv", sQLDataException1.toString());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      boolean boolean0 = objectArrayListIterator0.hasNext();
      assertTrue(boolean0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(3, sQLNonTransientConnectionExceptionArray0.length);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      assertNotNull(predicate0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) listIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertNull(sQLNonTransientConnectionException1);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(3, objectArrayListIterator0.nextIndex());
      assertEquals(2, objectArrayListIterator0.previousIndex());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals(3, sQLNonTransientConnectionExceptionArray0.length);
      
      Integer integer0 = new Integer(196);
      assertEquals(196, (int)integer0);
      assertNotNull(integer0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("Qtkw`", "", false);
      assertNotNull(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator1);
      assertEquals(1, stringTokenizer0.countTokens());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "Qtkw`", 100, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 9);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) iteratorArray0[0], (Iterator<? extends Properties>) resettableIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      OrderedMapIterator<DataTruncation, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator0, (Closure<? super DataTruncation>) closure0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<SQLWarning, SQLNonTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      OrderedMapIterator<SQLWarning, SQLNonTransientConnectionException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLWarning, ? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      assertNotNull(orderedMapIterator2);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
      
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLWarning>) orderedMapIterator2, (Transformer<? super SQLWarning, String>) transformer0, "", "", "Jy.I+&");
      assertEquals("Jy.I+&", string0);
      assertNotNull(string0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator2));
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      OrderedMapIterator<DataTruncation, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      SkippingIterator<SQLInvalidAuthorizationSpecException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, 0L);
      assertNotNull(skippingIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      HashMap<Object, BatchUpdateException> hashMap0 = new HashMap<Object, BatchUpdateException>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Transformer<Object, BatchUpdateException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends BatchUpdateException>) hashMap0);
      assertNotNull(transformer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) skippingIterator0, (Transformer<? super SQLNonTransientException, ? extends BatchUpdateException>) transformer0);
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 13);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator((String) null);
      assertNotNull(resettableIterator0);
      
      iteratorArray0[0] = (Iterator<String>) resettableIterator0;
      ResettableIterator<String> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator1);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      iteratorArray0[1] = (Iterator<String>) resettableIterator1;
      MapIterator<String, Locale.FilteringMode> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      iteratorArray0[2] = (Iterator<String>) mapIterator0;
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator1);
      assertNotNull(enumeration0);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayList0);
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      iteratorArray0[3] = iterator0;
      Iterator<String> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends String>) iteratorArray0[1], (Iterator<? extends String>) iterator0);
      assertNotNull(iterator1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(13, iteratorArray0.length);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      assertFalse(iterator1.equals((Object)iterator0));
      
      iteratorArray0[4] = iterator1;
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      assertNotNull(singletonListIterator0);
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      
      iteratorArray0[5] = (Iterator<String>) singletonListIterator0;
      Iterator<String> iterator2 = IteratorUtils.peekingIterator((Iterator<? extends String>) mapIterator0);
      assertNotNull(iterator2);
      assertFalse(iterator2.equals((Object)iterator1));
      assertFalse(iterator2.equals((Object)iterator0));
      
      SQLWarning sQLWarning0 = new SQLWarning("^cTa-K~wQp#<jo##0/", (String) null);
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("^cTa-K~wQp#<jo##0/", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ^cTa-K~wQp#<jo##0/", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "Transformer must not be null", 123, sQLWarning0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("^cTa-K~wQp#<jo##0/", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ^cTa-K~wQp#<jo##0/", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Transformer must not be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(123, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator1 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      assertNotNull(singletonListIterator1);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("^cTa-K~wQp#<jo##0/", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ^cTa-K~wQp#<jo##0/", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Transformer must not be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(123, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals((-1), singletonListIterator1.previousIndex());
      assertFalse(singletonListIterator1.hasPrevious());
      assertEquals(0, singletonListIterator1.nextIndex());
      assertTrue(singletonListIterator1.hasNext());
      
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator1);
      assertNotNull(listIterator0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("^cTa-K~wQp#<jo##0/", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ^cTa-K~wQp#<jo##0/", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Transformer must not be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(123, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals((-1), singletonListIterator1.previousIndex());
      assertFalse(singletonListIterator1.hasPrevious());
      assertEquals(0, singletonListIterator1.nextIndex());
      assertTrue(singletonListIterator1.hasNext());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      SkippingIterator<SQLInvalidAuthorizationSpecException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, 426L);
      assertNotNull(skippingIterator0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("^cTa-K~wQp#<jo##0/", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ^cTa-K~wQp#<jo##0/", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Transformer must not be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(123, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertFalse(singletonListIterator1.hasNext());
      assertTrue(singletonListIterator1.hasPrevious());
      assertEquals(0, singletonListIterator1.previousIndex());
      assertEquals(1, singletonListIterator1.nextIndex());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      
      HashMap<Object, BatchUpdateException> hashMap0 = new HashMap<Object, BatchUpdateException>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Transformer<Object, BatchUpdateException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends BatchUpdateException>) hashMap0);
      assertNotNull(transformer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Iterator<BatchUpdateException> iterator3 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) singletonListIterator1, (Transformer<? super SQLNonTransientException, ? extends BatchUpdateException>) transformer0);
      assertNotNull(iterator3);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("^cTa-K~wQp#<jo##0/", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ^cTa-K~wQp#<jo##0/", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Transformer must not be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(123, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertFalse(singletonListIterator1.hasNext());
      assertTrue(singletonListIterator1.hasPrevious());
      assertEquals(0, singletonListIterator1.previousIndex());
      assertEquals(1, singletonListIterator1.nextIndex());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      assertNotNull(anyPredicate0);
      assertEquals(5, predicateArray0.length);
      
      predicateArray0[2] = (Predicate<Object>) anyPredicate0;
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      predicateArray0[1] = predicate0;
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      Class<DataTruncation> class1 = DataTruncation.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class1);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      predicateArray0[3] = predicate1;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      assertNotNull(nonePredicate0);
      assertEquals(5, predicateArray0.length);
      
      predicateArray0[4] = (Predicate<Object>) nonePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      assertNotNull(allPredicate0);
      assertEquals(5, predicateArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("ListIteratorWrapper does not support optional operations of ListIterator.");
      assertNotNull(listIterator0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      ListIterator<String> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) predicate0);
      assertNotNull(listIterator1);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.equals((Object)listIterator0));
      
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "ListIteratorWrapper does not support optional operations of ListIterator.");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("ListIteratorWrapper does not support optional operations of ListIterator.", sQLNonTransientConnectionException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null, (-3633));
      assertNotNull(sQLDataException0);
      assertEquals((-3633), sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("p", "p", sQLTransientException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("p", sQLNonTransientConnectionException1.getMessage());
      assertEquals("p", sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: p", sQLNonTransientConnectionException1.toString());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(1, sQLNonTransientConnectionExceptionArray0.length);
      
      ListIterator<SQLNonTransientConnectionException> listIterator2 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) objectArrayListIterator0);
      assertNotNull(listIterator2);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(listIterator2.hasPrevious());
      assertTrue(listIterator2.hasNext());
      assertEquals(1, sQLNonTransientConnectionExceptionArray0.length);
      
      SQLDataException sQLDataException1 = new SQLDataException("Iterator[]", "k#D-/^::# \"");
      assertNotNull(sQLDataException1);
      assertEquals("Iterator[]", sQLDataException1.getMessage());
      assertEquals("k#D-/^::# \"", sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: Iterator[]", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      boolean boolean0 = objectArrayListIterator0.hasNext();
      assertTrue(boolean0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(1, sQLNonTransientConnectionExceptionArray0.length);
      
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) "");
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) listIterator2, (Predicate<? super SQLNonTransientConnectionException>) predicate1);
      assertNull(sQLNonTransientConnectionException2);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertEquals(1, objectArrayListIterator0.getEndIndex());
      assertFalse(listIterator2.hasNext());
      assertTrue(listIterator2.hasPrevious());
      assertEquals(1, sQLNonTransientConnectionExceptionArray0.length);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Integer integer0 = new Integer(1101);
      assertEquals(1101, (int)integer0);
      assertNotNull(integer0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 9);
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.equals((Object)properties0));
      
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 5);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(7, propertiesArray0.length);
      
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(2, int0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(7, propertiesArray0.length);
      
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (-519));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      OrderedMapIterator<DataTruncation, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 9);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      iteratorArray0[0] = (Iterator<Properties>) resettableIterator0;
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) iteratorArray0[0], (Iterator<? extends Properties>) resettableIterator0);
      assertNotNull(zippingIterator0);
      assertEquals(9, iteratorArray0.length);
      
      iteratorArray0[1] = (Iterator<Properties>) zippingIterator0;
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.equals((Object)properties0));
      
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      
      SQLWarning sQLWarning0 = new SQLWarning("5L.QYt\"#CWBaxerom]q", sQLSyntaxErrorException0);
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("5L.QYt\"#CWBaxerom]q", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: 5L.QYt\"#CWBaxerom]q", sQLWarning0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation(1422, true, true, 1422, (-3029), sQLWarning0);
      assertNotNull(dataTruncation0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("5L.QYt\"#CWBaxerom]q", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: 5L.QYt\"#CWBaxerom]q", sQLWarning0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      assertNotNull(singletonIterator0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("5L.QYt\"#CWBaxerom]q", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: 5L.QYt\"#CWBaxerom]q", sQLWarning0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertTrue(singletonIterator0.hasNext());
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<PriorityQueue<ArrayList>>) singletonIterator0, (Predicate<? super PriorityQueue<ArrayList>>) predicate0);
      assertFalse(boolean0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("5L.QYt\"#CWBaxerom]q", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: 5L.QYt\"#CWBaxerom]q", sQLWarning0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertFalse(singletonIterator0.hasNext());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iteratorArray0[0], (-2387), (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      assertNotNull(objectArrayIterator0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(1, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(1, integerArray0.length);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation(8, true, true, 80, (-1190), sQLSyntaxErrorException0);
      assertNotNull(dataTruncation0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      assertNotNull(singletonIterator0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertTrue(singletonIterator0.hasNext());
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<PriorityQueue<ArrayList>>) objectArrayIterator0, (Predicate<? super PriorityQueue<ArrayList>>) predicate0);
      assertFalse(boolean0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(1, objectArrayIterator0.getEndIndex());
      assertEquals(1, integerArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 1422, (-2101));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertTrue(properties1.equals((Object)properties0));
      
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      int int0 = (-3029);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      SQLWarning sQLWarning0 = new SQLWarning("eSSiRY-|'\"a}.o", sQLSyntaxErrorException0);
      assertNotNull(sQLWarning0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("eSSiRY-|'\"a}.o", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: eSSiRY-|'\"a}.o", sQLWarning0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation((-967), false, false, (-3029), (-967), sQLSyntaxErrorException0);
      assertNotNull(dataTruncation0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      assertNotNull(singletonIterator0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertTrue(singletonIterator0.hasNext());
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<PriorityQueue<ArrayList>>) singletonIterator0, (Predicate<? super PriorityQueue<ArrayList>>) predicate0);
      assertTrue(boolean0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertFalse(singletonIterator0.hasNext());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "eSSiRY-|'\"a}.o", 1596, (-2387));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      OrderedMapIterator<DataTruncation, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 8);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      HashSet<SQLTransactionRollbackException> hashSet1 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet1);
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.equals((Object)hashSet0));
      
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      HashSet<SQLTransactionRollbackException> hashSet2 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet2);
      assertEquals(0, hashSet2.size());
      assertTrue(hashSet2.isEmpty());
      assertTrue(hashSet2.equals((Object)hashSet0));
      assertTrue(hashSet2.equals((Object)hashSet1));
      
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet1 = new LinkedHashSet<SQLTransactionRollbackException>();
      assertNotNull(linkedHashSet1);
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      
      HashSet<SQLTransactionRollbackException> hashSet3 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet3);
      assertEquals(0, hashSet3.size());
      assertTrue(hashSet3.isEmpty());
      assertTrue(hashSet3.equals((Object)hashSet1));
      assertTrue(hashSet3.equals((Object)hashSet2));
      assertTrue(hashSet3.equals((Object)hashSet0));
      
      HashSet<SQLTransactionRollbackException> hashSet4 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet4);
      assertEquals(0, hashSet4.size());
      assertTrue(hashSet4.isEmpty());
      assertTrue(hashSet4.equals((Object)hashSet3));
      assertTrue(hashSet4.equals((Object)hashSet1));
      assertTrue(hashSet4.equals((Object)hashSet2));
      assertTrue(hashSet4.equals((Object)hashSet0));
      
      HashSet<SQLTransactionRollbackException> hashSet5 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet5);
      assertEquals(0, hashSet5.size());
      assertTrue(hashSet5.isEmpty());
      assertTrue(hashSet5.equals((Object)hashSet4));
      assertTrue(hashSet5.equals((Object)hashSet2));
      assertTrue(hashSet5.equals((Object)hashSet1));
      assertTrue(hashSet5.equals((Object)hashSet3));
      assertTrue(hashSet5.equals((Object)hashSet0));
      
      HashSet<SQLTransactionRollbackException>[] hashSetArray0 = (HashSet<SQLTransactionRollbackException>[]) Array.newInstance(HashSet.class, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(hashSetArray0, 3869);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResettableIterator<PriorityQueue<SQLTimeoutException>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "yr**");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("yr**", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLDataException sQLDataException0 = new SQLDataException("Enumeration must no2 be null", "^df", (-845));
      assertNotNull(sQLDataException0);
      assertEquals("Enumeration must no2 be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Enumeration must no2 be null", sQLDataException0.toString());
      assertEquals((-845), sQLDataException0.getErrorCode());
      assertEquals("^df", sQLDataException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("rh. .Bz", "", sQLDataException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("Enumeration must no2 be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Enumeration must no2 be null", sQLDataException0.toString());
      assertEquals((-845), sQLDataException0.getErrorCode());
      assertEquals("^df", sQLDataException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: rh. .Bz", sQLNonTransientConnectionException1.toString());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("rh. .Bz", sQLNonTransientConnectionException1.getMessage());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("Enumeration must no2 be null");
      assertNotNull(sQLNonTransientConnectionException2);
      assertEquals("Enumeration must no2 be null", sQLNonTransientConnectionException2.getMessage());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Enumeration must no2 be null", sQLNonTransientConnectionException2.toString());
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("^df", sQLDataException0);
      assertNotNull(sQLNonTransientConnectionException3);
      assertEquals("Enumeration must no2 be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Enumeration must no2 be null", sQLDataException0.toString());
      assertEquals((-845), sQLDataException0.getErrorCode());
      assertEquals("^df", sQLDataException0.getSQLState());
      assertNull(sQLNonTransientConnectionException3.getSQLState());
      assertEquals("^df", sQLNonTransientConnectionException3.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ^df", sQLNonTransientConnectionException3.toString());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException3;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException2);
      assertNotNull(sQLNonTransientConnectionException4);
      assertEquals("Enumeration must no2 be null", sQLNonTransientConnectionException2.getMessage());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Enumeration must no2 be null", sQLNonTransientConnectionException2.toString());
      assertNull(sQLNonTransientConnectionException4.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: Enumeration must no2 be null", sQLNonTransientConnectionException4.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException: Enumeration must no2 be null", sQLNonTransientConnectionException4.toString());
      assertEquals(0, sQLNonTransientConnectionException4.getErrorCode());
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException1;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      assertNotNull(objectArrayListIterator0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(7, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(7, sQLNonTransientConnectionExceptionArray0.length);
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) objectArrayListIterator0);
      assertNotNull(listIterator0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(7, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(7, sQLNonTransientConnectionExceptionArray0.length);
      
      SQLDataException sQLDataException1 = new SQLDataException("^df", "rh. .Bz");
      assertNotNull(sQLDataException1);
      assertEquals("rh. .Bz", sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: ^df", sQLDataException1.toString());
      assertEquals("^df", sQLDataException1.getMessage());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException1);
      assertNotSame(sQLDataException0, sQLDataException1);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException2);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException4);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException3);
      assertNotNull(predicate0);
      assertEquals("Enumeration must no2 be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Enumeration must no2 be null", sQLDataException0.toString());
      assertEquals((-845), sQLDataException0.getErrorCode());
      assertEquals("^df", sQLDataException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: rh. .Bz", sQLNonTransientConnectionException1.toString());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("rh. .Bz", sQLNonTransientConnectionException1.getMessage());
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException3));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertNotSame(sQLDataException0, sQLDataException1);
      assertNotSame(sQLNonTransientConnectionException5, sQLNonTransientConnectionException4);
      assertNotSame(sQLNonTransientConnectionException5, sQLNonTransientConnectionException3);
      assertNotSame(sQLNonTransientConnectionException5, sQLNonTransientConnectionException0);
      assertSame(sQLNonTransientConnectionException5, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException5, sQLNonTransientConnectionException2);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException2);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException5);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException4);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException3);
      assertNotNull(sQLNonTransientConnectionException5);
      assertEquals("Enumeration must no2 be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Enumeration must no2 be null", sQLDataException0.toString());
      assertEquals((-845), sQLDataException0.getErrorCode());
      assertEquals("^df", sQLDataException0.getSQLState());
      assertEquals("rh. .Bz", sQLNonTransientConnectionException5.getMessage());
      assertEquals(0, sQLNonTransientConnectionException5.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: rh. .Bz", sQLNonTransientConnectionException5.toString());
      assertEquals("", sQLNonTransientConnectionException5.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: rh. .Bz", sQLNonTransientConnectionException1.toString());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("rh. .Bz", sQLNonTransientConnectionException1.getMessage());
      assertTrue(objectArrayListIterator0.hasNext());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(7, objectArrayListIterator0.getEndIndex());
      assertEquals(4, objectArrayListIterator0.nextIndex());
      assertEquals(3, objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(7, sQLNonTransientConnectionExceptionArray0.length);
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException3));
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      assertNotSame(sQLDataException0, sQLDataException1);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException2);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException5);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException4);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException3);
      assertNotNull(predicate1);
      assertEquals("Enumeration must no2 be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Enumeration must no2 be null", sQLDataException0.toString());
      assertEquals((-845), sQLDataException0.getErrorCode());
      assertEquals("^df", sQLDataException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: rh. .Bz", sQLNonTransientConnectionException1.toString());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("rh. .Bz", sQLNonTransientConnectionException1.getMessage());
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(predicate1.equals((Object)predicate0));
      
      predicateArray0[2] = predicate1;
      predicateArray0[3] = predicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      assertNotNull(closure0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      closureArray0[0] = closure0;
      SwitchClosure<SQLException> switchClosure0 = new SwitchClosure<SQLException>(predicateArray0, closureArray0, closure0);
      assertNotNull(switchClosure0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(4, predicateArray0.length);
      assertEquals(1, closureArray0.length);
      
      IteratorUtils.apply((Iterator<SQLDataException>) null, (Closure<? super SQLDataException>) switchClosure0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(4, predicateArray0.length);
      assertEquals(1, closureArray0.length);
      
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException4);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException: Enumeration must no2 be null", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException: Enumeration must no2 be null", batchUpdateException0.toString());
      assertEquals("Enumeration must no2 be null", sQLNonTransientConnectionException2.getMessage());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Enumeration must no2 be null", sQLNonTransientConnectionException2.toString());
      assertNull(sQLNonTransientConnectionException4.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: Enumeration must no2 be null", sQLNonTransientConnectionException4.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException: Enumeration must no2 be null", sQLNonTransientConnectionException4.toString());
      assertEquals(0, sQLNonTransientConnectionException4.getErrorCode());
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLNonTransientConnectionException2);
      assertNotNull(batchUpdateException1);
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: Enumeration must no2 be null", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: Enumeration must no2 be null", batchUpdateException1.getMessage());
      assertEquals("Enumeration must no2 be null", sQLNonTransientConnectionException2.getMessage());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Enumeration must no2 be null", sQLNonTransientConnectionException2.toString());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", (int[]) null);
      assertNotNull(batchUpdateException2);
      assertNull(batchUpdateException2.getSQLState());
      assertEquals("", batchUpdateException2.getMessage());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException2.toString());
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException();
      assertNotNull(batchUpdateException3);
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException3.toString());
      assertNull(batchUpdateException3.getSQLState());
      assertNull(batchUpdateException3.getMessage());
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("=Iol", (int[]) null, batchUpdateException2);
      assertNotNull(batchUpdateException4);
      assertNull(batchUpdateException2.getSQLState());
      assertEquals("", batchUpdateException2.getMessage());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException2.toString());
      assertEquals(0, batchUpdateException4.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: =Iol", batchUpdateException4.toString());
      assertEquals("=Iol", batchUpdateException4.getMessage());
      assertNull(batchUpdateException4.getSQLState());
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("", (int[]) null);
      assertNotNull(batchUpdateException5);
      assertEquals(0, batchUpdateException5.getErrorCode());
      assertEquals("", batchUpdateException5.getMessage());
      assertNull(batchUpdateException5.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException5.toString());
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException1));
      
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException();
      assertNotNull(batchUpdateException6);
      assertNull(batchUpdateException6.getSQLState());
      assertNull(batchUpdateException6.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException6.toString());
      assertEquals(0, batchUpdateException6.getErrorCode());
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException2));
      
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException("Enumeration must no2 be null", (int[]) null, sQLNonTransientConnectionException1);
      assertNotNull(batchUpdateException7);
      assertEquals("Enumeration must no2 be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Enumeration must no2 be null", sQLDataException0.toString());
      assertEquals((-845), sQLDataException0.getErrorCode());
      assertEquals("^df", sQLDataException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: rh. .Bz", sQLNonTransientConnectionException1.toString());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("rh. .Bz", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: Enumeration must no2 be null", batchUpdateException7.toString());
      assertNull(batchUpdateException7.getSQLState());
      assertEquals("Enumeration must no2 be null", batchUpdateException7.getMessage());
      assertEquals(0, batchUpdateException7.getErrorCode());
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException6));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException3));
      
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, (-845), 4088);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      assertNotNull(objectArrayIterator0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(0, objectArrayIterator0.getEndIndex());
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, integerArray0.length);
      
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(stack0);
      assertNotNull(reverseListIterator0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) reverseListIterator0);
      assertNotNull(listIterator0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<DataTruncation>) listIterator0, (-3058L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      assertNotNull(singletonListIterator0);
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      
      DataTruncation dataTruncation0 = new DataTruncation((-1482), true, false, (-1482), (-1482), (Throwable) null);
      assertNotNull(dataTruncation0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      assertNotNull(resettableIterator0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) resettableIterator0);
      assertNotNull(iterator0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      Class<DataTruncation> class0 = DataTruncation.class;
      DataTruncation[] dataTruncationArray0 = IteratorUtils.toArray((Iterator<? extends DataTruncation>) iterator0, class0);
      assertNotNull(dataTruncationArray0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals(1, dataTruncationArray0.length);
      
      Hashtable<SQLSyntaxErrorException, BatchUpdateException> hashtable0 = new Hashtable<SQLSyntaxErrorException, BatchUpdateException>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(boolean0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      Hashtable<Object, SQLSyntaxErrorException> hashtable1 = new Hashtable<Object, SQLSyntaxErrorException>();
      assertNotNull(hashtable1);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      
      Transformer<SQLRecoverableException, SQLSyntaxErrorException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) hashtable1);
      assertNotNull(transformer0);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      
      Iterator<SQLRecoverableException> iterator1 = EmptyIterator.emptyIterator();
      assertNotNull(iterator1);
      
      Iterator<SQLSyntaxErrorException> iterator2 = IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) iterator1, (Transformer<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) transformer0);
      assertNotNull(iterator2);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("6qk{Rc'fL42d;b`qs", "G", (Map<String, ClientInfoStatus>) null);
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException: 6qk{Rc'fL42d;b`qs", sQLClientInfoException0.toString());
      assertEquals("G", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("6qk{Rc'fL42d;b`qs", sQLClientInfoException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("6qk{Rc'fL42d;b`qs", "6qk{Rc'fL42d;b`qs", sQLClientInfoException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLClientInfoException: 6qk{Rc'fL42d;b`qs", sQLClientInfoException0.toString());
      assertEquals("G", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("6qk{Rc'fL42d;b`qs", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 6qk{Rc'fL42d;b`qs", sQLTimeoutException0.toString());
      assertEquals("6qk{Rc'fL42d;b`qs", sQLTimeoutException0.getSQLState());
      assertEquals("6qk{Rc'fL42d;b`qs", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("6qk{Rc'fL42d;b`qs", "");
      assertNotNull(sQLTimeoutException1);
      assertEquals("", sQLTimeoutException1.getSQLState());
      assertEquals("6qk{Rc'fL42d;b`qs", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 6qk{Rc'fL42d;b`qs", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("org.apache.commons.collections4.functors.IfClosure", "G");
      assertNotNull(sQLTimeoutException2);
      assertEquals("org.apache.commons.collections4.functors.IfClosure", sQLTimeoutException2.getMessage());
      assertEquals("java.sql.SQLTimeoutException: org.apache.commons.collections4.functors.IfClosure", sQLTimeoutException2.toString());
      assertEquals("G", sQLTimeoutException2.getSQLState());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException((String) null, "org.apache.commons.collections4.functors.IfClosure", 10, sQLTimeoutException0);
      assertNotNull(sQLTimeoutException3);
      assertEquals("java.sql.SQLClientInfoException: 6qk{Rc'fL42d;b`qs", sQLClientInfoException0.toString());
      assertEquals("G", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("6qk{Rc'fL42d;b`qs", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 6qk{Rc'fL42d;b`qs", sQLTimeoutException0.toString());
      assertEquals("6qk{Rc'fL42d;b`qs", sQLTimeoutException0.getSQLState());
      assertEquals("6qk{Rc'fL42d;b`qs", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.IfClosure", sQLTimeoutException3.getSQLState());
      assertEquals(10, sQLTimeoutException3.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException3.toString());
      assertNull(sQLTimeoutException3.getMessage());
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("nyx/O:@^.(g", "org.apache.commons.collections4.functors.IfClosure", sQLTimeoutException3);
      assertNotNull(sQLTimeoutException4);
      assertEquals("java.sql.SQLClientInfoException: 6qk{Rc'fL42d;b`qs", sQLClientInfoException0.toString());
      assertEquals("G", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("6qk{Rc'fL42d;b`qs", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 6qk{Rc'fL42d;b`qs", sQLTimeoutException0.toString());
      assertEquals("6qk{Rc'fL42d;b`qs", sQLTimeoutException0.getSQLState());
      assertEquals("6qk{Rc'fL42d;b`qs", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.IfClosure", sQLTimeoutException3.getSQLState());
      assertEquals(10, sQLTimeoutException3.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException3.toString());
      assertNull(sQLTimeoutException3.getMessage());
      assertEquals(0, sQLTimeoutException4.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: nyx/O:@^.(g", sQLTimeoutException4.toString());
      assertEquals("org.apache.commons.collections4.functors.IfClosure", sQLTimeoutException4.getSQLState());
      assertEquals("nyx/O:@^.(g", sQLTimeoutException4.getMessage());
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException0));
      
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException5);
      assertEquals(0, sQLTimeoutException5.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException5.toString());
      assertNull(sQLTimeoutException5.getSQLState());
      assertNull(sQLTimeoutException5.getMessage());
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException2));
      
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("", "nyx/O:@^.(g", 10);
      assertNotNull(sQLTimeoutException6);
      assertEquals("", sQLTimeoutException6.getMessage());
      assertEquals(10, sQLTimeoutException6.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException6.toString());
      assertEquals("nyx/O:@^.(g", sQLTimeoutException6.getSQLState());
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException3));
      
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(7, sQLTimeoutExceptionArray0.length);
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) resettableIterator0);
      assertNotNull(iterator0);
      assertEquals(7, sQLTimeoutExceptionArray0.length);
      
      Iterator<SQLTransientException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>) iterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      assertNotNull(iterator1);
      assertEquals(7, sQLTimeoutExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      OrderedMapIterator<DataTruncation, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator0, (Closure<? super DataTruncation>) closure0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      String string0 = "-F~";
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      assertNotNull(constantTransformer0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
//      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // range=
//         //
//         verifyException("java.util.Locale$LanguageRange", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OrderedIterator<ServiceLoader<ServiceLoader>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Q f$*ms`XOPBpkmk/", (Throwable) null);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: Q f$*ms`XOPBpkmk/", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Q f$*ms`XOPBpkmk/", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      assertNotNull(listIterator0);
      assertEquals("java.sql.SQLTimeoutException: Q f$*ms`XOPBpkmk/", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Q f$*ms`XOPBpkmk/", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      ListIteratorWrapper<SQLException> listIteratorWrapper0 = new ListIteratorWrapper<SQLException>(listIterator0);
      assertNotNull(listIteratorWrapper0);
      assertEquals("java.sql.SQLTimeoutException: Q f$*ms`XOPBpkmk/", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Q f$*ms`XOPBpkmk/", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIteratorWrapper0.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIteratorWrapper0);
      assertNotNull(objectArray0);
      assertEquals("java.sql.SQLTimeoutException: Q f$*ms`XOPBpkmk/", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Q f$*ms`XOPBpkmk/", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("ListIteratorWrapper does not support optional operations of ListIterator.");
      assertNotNull(listIterator0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      ListIterator<String> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) predicate0);
      assertNotNull(listIterator1);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.equals((Object)listIterator0));
      
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      assertNotNull(sQLTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "ListIteratorWrapper does not support optional operations of ListIterator.");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("ListIteratorWrapper does not support optional operations of ListIterator.", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null, (-3633));
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals((-3633), sQLDataException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("[", "ListIteratorWrapper does not support optional operations of ListIterator.", (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("[", sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("ListIteratorWrapper does not support optional operations of ListIterator.", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: [", sQLNonTransientConnectionException1.toString());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      assertNotNull(objectArrayListIterator0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(2, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(2, sQLNonTransientConnectionExceptionArray0.length);
      
      ListIterator<SQLNonTransientConnectionException> listIterator2 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) objectArrayListIterator0);
      assertNotNull(listIterator2);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(2, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(listIterator2.hasNext());
      assertFalse(listIterator2.hasPrevious());
      assertEquals(2, sQLNonTransientConnectionExceptionArray0.length);
      
      SQLDataException sQLDataException1 = new SQLDataException("[", "p");
      assertNotNull(sQLDataException1);
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("[", sQLDataException1.getMessage());
      assertEquals("java.sql.SQLDataException: [", sQLDataException1.toString());
      assertEquals("p", sQLDataException1.getSQLState());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      boolean boolean0 = objectArrayListIterator0.hasNext();
      assertTrue(boolean0);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(2, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(2, sQLNonTransientConnectionExceptionArray0.length);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.BatchUpdateException", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.BatchUpdateException", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) sQLSyntaxErrorException0);
      assertNotNull(predicate1);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.BatchUpdateException", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.BatchUpdateException", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertFalse(predicate1.equals((Object)predicate0));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) listIterator2, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException0);
      assertNotSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException1);
      assertNotNull(sQLNonTransientConnectionException2);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException2.toString());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("ListIteratorWrapper does not support optional operations of ListIterator.", sQLNonTransientConnectionException2.getSQLState());
      assertEquals("", sQLNonTransientConnectionException2.getMessage());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(2, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertTrue(listIterator2.hasNext());
      assertTrue(listIterator2.hasPrevious());
      assertEquals(2, sQLNonTransientConnectionExceptionArray0.length);
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(predicate0.equals((Object)predicate1));
      
      Integer integer0 = new Integer(1177);
      assertEquals(1177, (int)integer0);
      assertNotNull(integer0);
      
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      assertNotNull(predicateTransformer0);
      assertFalse(predicate0.equals((Object)predicate1));
      
      Boolean boolean1 = predicateTransformer0.transform("suffix may not be null");
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertTrue(boolean1.equals((Object)boolean0));
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(boolean1);
      assertNotNull(iterator0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertTrue(boolean1.equals((Object)boolean0));
      
      int int0 = IteratorUtils.size(listIterator1);
      assertEquals(1, int0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator1.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator0.equals((Object)listIterator1));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(listIterator1.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ResettableIterator<PriorityQueue<SQLTimeoutException>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Transformer<SQLException, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("InstantiateTransformer: Input object was not an instanceof Class, it was a null object");
      assertNotNull(transformer0);
      
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
      
      int int1 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ResettableIterator<PriorityQueue<SQLTimeoutException>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Transformer<SQLException, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("InstantiateTransformer: Input object was not an instanceof Class, it was a null object");
      assertNotNull(transformer0);
      
      MapIterator<SQLInvalidAuthorizationSpecException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableIterator0);
      assertNotNull(predicate0);
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertNotNull(iterator0);
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator1, (-43L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(batchUpdateException0);
      assertNotNull(iterator0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      Iterator<SQLFeatureNotSupportedException> iterator1 = EmptyIterator.emptyIterator();
      assertNotNull(iterator1);
      
      Iterator<SQLFeatureNotSupportedException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator1, (Iterator<? extends SQLFeatureNotSupportedException>) iterator1);
      assertNotNull(iterator2);
      assertFalse(iterator2.equals((Object)iterator1));
      
      OrderedMapIterator<Stack<String>, HashSet<SQLTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      assertNotNull(resettableIterator0);
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Transformer must not be null", "");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: Transformer must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Transformer must not be null", sQLNonTransientConnectionException0.getMessage());
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLDataException sQLDataException0 = new SQLDataException("NX.+)<egv[G&AKX8", "p", 1409);
      assertNotNull(sQLDataException0);
      assertEquals("NX.+)<egv[G&AKX8", sQLDataException0.getMessage());
      assertEquals(1409, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: NX.+)<egv[G&AKX8", sQLDataException0.toString());
      assertEquals("p", sQLDataException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.SkippingIterator", (String) null, sQLDataException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("NX.+)<egv[G&AKX8", sQLDataException0.getMessage());
      assertEquals(1409, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: NX.+)<egv[G&AKX8", sQLDataException0.toString());
      assertEquals("p", sQLDataException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.SkippingIterator", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.iterators.SkippingIterator", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      assertNotNull(objectArrayListIterator0);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(2, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(2, sQLNonTransientConnectionExceptionArray0.length);
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) objectArrayListIterator0);
      assertNotNull(listIterator0);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(2, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertEquals(2, sQLNonTransientConnectionExceptionArray0.length);
      
      SQLDataException sQLDataException1 = new SQLDataException("Iterator[]", "");
      assertNotNull(sQLDataException1);
      assertEquals("Iterator[]", sQLDataException1.getMessage());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: Iterator[]", sQLDataException1.toString());
      assertEquals("", sQLDataException1.getSQLState());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("p", "", "Iterator[]", 1429);
      assertNotNull(stackTraceElement0);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("Iterator[]", stackTraceElement0.getFileName());
      assertEquals("p.(Iterator[]:1429)", stackTraceElement0.toString());
      assertEquals(1429, stackTraceElement0.getLineNumber());
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals("p", stackTraceElement0.getClassName());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: Transformer must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Transformer must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals(1, stackTraceElementArray0.length);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLDataException1);
      assertNotSame(sQLDataException1, sQLDataException0);
      assertNotNull(predicate0);
      assertEquals("Iterator[]", sQLDataException1.getMessage());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: Iterator[]", sQLDataException1.toString());
      assertEquals("", sQLDataException1.getSQLState());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) listIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertNotSame(sQLDataException1, sQLDataException0);
      assertNull(sQLNonTransientConnectionException2);
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(2, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals("Iterator[]", sQLDataException1.getMessage());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: Iterator[]", sQLDataException1.toString());
      assertEquals("", sQLDataException1.getSQLState());
      assertEquals(2, sQLNonTransientConnectionExceptionArray0.length);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ls9 kjfU|", "RfLREtF#;", sQLNonTransientConnectionException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("ls9 kjfU|", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ls9 kjfU|", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("RfLREtF#;", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: Transformer must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Transformer must not be null", sQLNonTransientConnectionException0.getMessage());
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Transformer must not be null", "ls9 kjfU|", (-1), batchUpdateException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException1.toString());
      assertEquals((-1), sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("ls9 kjfU|", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("Transformer must not be null", sQLFeatureNotSupportedException1.getMessage());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      assertNotNull(sQLFeatureNotSupportedException2);
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: Transformer must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Transformer must not be null", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLFeatureNotSupportedException2.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLNonTransientConnectionException: Transformer must not be null", sQLFeatureNotSupportedException2.toString());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Transformer must not be null", sQLFeatureNotSupportedException2.getMessage());
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "17|}Rt._", sQLDataException0);
      assertNotNull(sQLFeatureNotSupportedException3);
      assertEquals("NX.+)<egv[G&AKX8", sQLDataException0.getMessage());
      assertEquals(1409, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: NX.+)<egv[G&AKX8", sQLDataException0.toString());
      assertEquals("p", sQLDataException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException3.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException3.toString());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("17|}Rt._", sQLFeatureNotSupportedException3.getSQLState());
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException1);
      assertNotNull(sQLFeatureNotSupportedException4);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException1.toString());
      assertEquals((-1), sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("ls9 kjfU|", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("Transformer must not be null", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException4.getErrorCode());
      assertNull(sQLFeatureNotSupportedException4.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException4.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException4.toString());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException1));
      
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException((String) null, "RfLREtF#;", 10, sQLFeatureNotSupportedException3);
      assertNotNull(sQLFeatureNotSupportedException5);
      assertEquals(10, sQLFeatureNotSupportedException5.getErrorCode());
      assertEquals("RfLREtF#;", sQLFeatureNotSupportedException5.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException5.toString());
      assertNull(sQLFeatureNotSupportedException5.getMessage());
      assertEquals("NX.+)<egv[G&AKX8", sQLDataException0.getMessage());
      assertEquals(1409, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: NX.+)<egv[G&AKX8", sQLDataException0.toString());
      assertEquals("p", sQLDataException0.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException3.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException3.toString());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("17|}Rt._", sQLFeatureNotSupportedException3.getSQLState());
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException4));
      
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("Transformer must not be null", (String) null, 10);
      assertNotNull(sQLFeatureNotSupportedException6);
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException6.toString());
      assertEquals(10, sQLFeatureNotSupportedException6.getErrorCode());
      assertNull(sQLFeatureNotSupportedException6.getSQLState());
      assertEquals("Transformer must not be null", sQLFeatureNotSupportedException6.getMessage());
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException5));
      
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("]", "ls9 kjfU|", 1057);
      assertNotNull(sQLFeatureNotSupportedException7);
      assertEquals("ls9 kjfU|", sQLFeatureNotSupportedException7.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ]", sQLFeatureNotSupportedException7.toString());
      assertEquals("]", sQLFeatureNotSupportedException7.getMessage());
      assertEquals(1057, sQLFeatureNotSupportedException7.getErrorCode());
      assertFalse(sQLFeatureNotSupportedException7.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException7.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException7.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException7.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException7.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException7.equals((Object)sQLFeatureNotSupportedException6));
      assertFalse(sQLFeatureNotSupportedException7.equals((Object)sQLFeatureNotSupportedException5));
      
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.iterators.SkippingIterator");
      assertNotNull(sQLFeatureNotSupportedException8);
      assertNull(sQLFeatureNotSupportedException8.getSQLState());
      assertEquals("org.apache.commons.collections4.iterators.SkippingIterator", sQLFeatureNotSupportedException8.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4.iterators.SkippingIterator", sQLFeatureNotSupportedException8.toString());
      assertEquals(0, sQLFeatureNotSupportedException8.getErrorCode());
      assertFalse(sQLFeatureNotSupportedException8.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException8.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException8.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException8.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException8.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException8.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException8.equals((Object)sQLFeatureNotSupportedException7));
      assertFalse(sQLFeatureNotSupportedException8.equals((Object)sQLFeatureNotSupportedException6));
      
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException8;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(9, sQLFeatureNotSupportedExceptionArray0.length);
      
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertNotSame(sQLDataException1, sQLDataException0);
      assertNotNull(listIterator1);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertEquals("Iterator[]", sQLDataException1.getMessage());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: Iterator[]", sQLDataException1.toString());
      assertEquals("", sQLDataException1.getSQLState());
      assertEquals(9, sQLFeatureNotSupportedExceptionArray0.length);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 9);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator((String) null);
      assertNotNull(resettableIterator0);
      
      iteratorArray0[0] = (Iterator<String>) resettableIterator0;
      ResettableIterator<String> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator1);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      iteratorArray0[1] = (Iterator<String>) resettableIterator1;
      MapIterator<String, Locale.FilteringMode> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      iteratorArray0[2] = (Iterator<String>) mapIterator0;
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator1);
      assertNotNull(enumeration0);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayList0);
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      iteratorArray0[3] = iterator0;
      Iterator<String> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends String>) iteratorArray0[1], (Iterator<? extends String>) iterator0);
      assertNotNull(iterator1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(9, iteratorArray0.length);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      assertFalse(iterator1.equals((Object)iterator0));
      
      iteratorArray0[4] = iterator1;
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      iteratorArray0[5] = (Iterator<String>) resettableListIterator0;
      Iterator<String> iterator2 = IteratorUtils.peekingIterator((Iterator<? extends String>) mapIterator0);
      assertNotNull(iterator2);
      assertFalse(iterator2.equals((Object)iterator0));
      assertFalse(iterator2.equals((Object)iterator1));
      
      iteratorArray0[6] = iterator2;
      ResettableListIterator<String> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      assertSame(resettableListIterator1, resettableListIterator0);
      assertNotNull(resettableListIterator1);
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      
      iteratorArray0[7] = (Iterator<String>) resettableListIterator1;
      HashMap<String, Properties> hashMap0 = new HashMap<String, Properties>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      EntrySetMapIterator<String, Properties> entrySetMapIterator0 = new EntrySetMapIterator<String, Properties>(hashMap0);
      assertNotNull(entrySetMapIterator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      iteratorArray0[8] = (Iterator<String>) entrySetMapIterator0;
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
      assertEquals(9, iteratorArray0.length);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iteratorArray0[7]);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterator<StringTokenizer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (Iterator<? extends StringTokenizer>) resettableListIterator0);
      assertNotNull(iterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[ga0c", "[", (-862), hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: [ga0c", sQLClientInfoException0.toString());
      assertEquals("[", sQLClientInfoException0.getSQLState());
      assertEquals("[ga0c", sQLClientInfoException0.getMessage());
      assertEquals((-862), sQLClientInfoException0.getErrorCode());
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: [ga0c", sQLClientInfoException0.toString());
      assertEquals("[", sQLClientInfoException0.getSQLState());
      assertEquals("[ga0c", sQLClientInfoException0.getMessage());
      assertEquals((-862), sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: [ga0c", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLClientInfoException: [ga0c", sQLClientInfoException1.toString());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("[", "[", 100, hashMap0, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: [ga0c", sQLClientInfoException0.toString());
      assertEquals("[", sQLClientInfoException0.getSQLState());
      assertEquals("[ga0c", sQLClientInfoException0.getMessage());
      assertEquals((-862), sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: [", sQLClientInfoException2.toString());
      assertEquals(100, sQLClientInfoException2.getErrorCode());
      assertEquals("[", sQLClientInfoException2.getSQLState());
      assertEquals("[", sQLClientInfoException2.getMessage());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashMap0);
      assertNotNull(sQLClientInfoException3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException3.toString());
      assertEquals(0, sQLClientInfoException3.getErrorCode());
      assertNull(sQLClientInfoException3.getSQLState());
      assertNull(sQLClientInfoException3.getMessage());
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("Y-SdV5", hashMap0);
      assertNotNull(sQLClientInfoException4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException4.getSQLState());
      assertEquals("Y-SdV5", sQLClientInfoException4.getMessage());
      assertEquals("java.sql.SQLClientInfoException: Y-SdV5", sQLClientInfoException4.toString());
      assertEquals(0, sQLClientInfoException4.getErrorCode());
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      Throwable[] throwableArray0 = sQLClientInfoException4.getSuppressed();
      assertNotSame(sQLClientInfoException4, sQLClientInfoException0);
      assertNotSame(sQLClientInfoException4, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException4, sQLClientInfoException2);
      assertNotSame(sQLClientInfoException4, sQLClientInfoException3);
      assertNotNull(throwableArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException4.getSQLState());
      assertEquals("Y-SdV5", sQLClientInfoException4.getMessage());
      assertEquals("java.sql.SQLClientInfoException: Y-SdV5", sQLClientInfoException4.toString());
      assertEquals(0, sQLClientInfoException4.getErrorCode());
      assertEquals(0, throwableArray0.length);
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[ga0c", "-(^l/&OBm'n!Pkr", (-362), sQLClientInfoException4);
      assertNotNull(sQLTransactionRollbackException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException4.getSQLState());
      assertEquals("Y-SdV5", sQLClientInfoException4.getMessage());
      assertEquals("java.sql.SQLClientInfoException: Y-SdV5", sQLClientInfoException4.toString());
      assertEquals(0, sQLClientInfoException4.getErrorCode());
      assertEquals("-(^l/&OBm'n!Pkr", sQLTransactionRollbackException0.getSQLState());
      assertEquals("[ga0c", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: [ga0c", sQLTransactionRollbackException0.toString());
      assertEquals((-362), sQLTransactionRollbackException0.getErrorCode());
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("[ga0c", "[ga0c", 0, hashMap0, sQLTransactionRollbackException0);
      assertNotNull(sQLClientInfoException5);
      assertEquals("[ga0c", sQLClientInfoException5.getSQLState());
      assertEquals("[ga0c", sQLClientInfoException5.getMessage());
      assertEquals("java.sql.SQLClientInfoException: [ga0c", sQLClientInfoException5.toString());
      assertEquals(0, sQLClientInfoException5.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException4.getSQLState());
      assertEquals("Y-SdV5", sQLClientInfoException4.getMessage());
      assertEquals("java.sql.SQLClientInfoException: Y-SdV5", sQLClientInfoException4.toString());
      assertEquals(0, sQLClientInfoException4.getErrorCode());
      assertEquals("-(^l/&OBm'n!Pkr", sQLTransactionRollbackException0.getSQLState());
      assertEquals("[ga0c", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: [ga0c", sQLTransactionRollbackException0.toString());
      assertEquals((-362), sQLTransactionRollbackException0.getErrorCode());
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException6);
      assertEquals(0, sQLClientInfoException6.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: [ga0c", sQLClientInfoException6.getMessage());
      assertNull(sQLClientInfoException6.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLClientInfoException: [ga0c", sQLClientInfoException6.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: [ga0c", sQLClientInfoException0.toString());
      assertEquals("[", sQLClientInfoException0.getSQLState());
      assertEquals("[ga0c", sQLClientInfoException0.getMessage());
      assertEquals((-862), sQLClientInfoException0.getErrorCode());
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException5));
      
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      assertNotNull(resettableIterator0);
      assertEquals(7, sQLClientInfoExceptionArray0.length);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<PriorityQueue<ArrayList>>) resettableListIterator0, (Predicate<? super PriorityQueue<ArrayList>>) predicate0);
      assertFalse(boolean0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "[", (-2387), (-862));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 9);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      iteratorArray0[0] = (Iterator<Properties>) resettableIterator0;
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) iteratorArray0[0], (Iterator<? extends Properties>) resettableIterator0);
      assertNotNull(zippingIterator0);
      assertEquals(9, iteratorArray0.length);
      
      iteratorArray0[1] = (Iterator<Properties>) zippingIterator0;
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.equals((Object)properties0));
      
      propertiesArray0[1] = properties1;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 5);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(7, propertiesArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 13);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator((String) null);
      assertNotNull(resettableIterator0);
      
      iteratorArray0[0] = (Iterator<String>) resettableIterator0;
      ResettableIterator<String> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator1);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      iteratorArray0[1] = (Iterator<String>) resettableIterator1;
      MapIterator<String, Locale.FilteringMode> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      iteratorArray0[2] = (Iterator<String>) mapIterator0;
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator1);
      assertNotNull(enumeration0);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) arrayList0);
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      iteratorArray0[3] = iterator0;
      Iterator<String> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends String>) iteratorArray0[1], (Iterator<? extends String>) iterator0);
      assertNotNull(iterator1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(13, iteratorArray0.length);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      assertFalse(iterator1.equals((Object)iterator0));
      
      iteratorArray0[4] = iterator1;
      ResettableListIterator<String> resettableListIterator0 = new SingletonListIterator<String>((String) null);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      iteratorArray0[5] = (Iterator<String>) resettableListIterator0;
      Iterator<String> iterator2 = IteratorUtils.peekingIterator((Iterator<? extends String>) mapIterator0);
      assertNotNull(iterator2);
      assertFalse(iterator2.equals((Object)iterator1));
      assertFalse(iterator2.equals((Object)iterator0));
      
      iteratorArray0[6] = iterator2;
      ResettableListIterator<String> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator1);
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
      
      iteratorArray0[7] = (Iterator<String>) resettableListIterator1;
      HashMap<String, Properties> hashMap0 = new HashMap<String, Properties>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      EntrySetMapIterator<String, Properties> entrySetMapIterator0 = new EntrySetMapIterator<String, Properties>(hashMap0);
      assertNotNull(entrySetMapIterator0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      iteratorArray0[8] = (Iterator<String>) entrySetMapIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertNotNull(sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("uj(1'P:1q", "uj(1'P:1q");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: uj(1'P:1q", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("uj(1'P:1q", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("uj(1'P:1q", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      String string0 = "^u4-@ m1ax!=";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("^u4-@ m1ax!=");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("^u4-@ m1ax!=", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ^u4-@ m1ax!=", sQLInvalidAuthorizationSpecException0.toString());
      
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 0, (-81));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "ListIteratorWrapper does not support optional operations of ListIterator.";
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("ListIteratorWrapper does not support optional operations of ListIterator.");
      assertNotNull(listIterator0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      ListIterator<String> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) predicate0);
      assertNotNull(listIterator1);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.equals((Object)listIterator0));
      
      int int0 = 1101;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((LinkedHashSet<SQLWarning>[]) null, 1101);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OrderedMapIterator<String, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<String>) orderedMapIterator0, (Predicate<? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      SQLWarning sQLWarning0 = IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) predicate0);
      assertNull(sQLWarning0);
      
      String string0 = "m4?<HE,gZE 4C<]&L";
      String string1 = "|ku3.a<e[ 9x,t[~$kZ";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("m4?<HE,gZE 4C<]&L", "|ku3.a<e[ 9x,t[~$kZ", 10, (Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("m4?<HE,gZE 4C<]&L", sQLTransientConnectionException0.getMessage());
      assertEquals(10, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: m4?<HE,gZE 4C<]&L", sQLTransientConnectionException0.toString());
      assertEquals("|ku3.a<e[ 9x,t[~$kZ", sQLTransientConnectionException0.getSQLState());
      
      sQLTransientConnectionException0.setNextException((SQLException) null);
      assertEquals("m4?<HE,gZE 4C<]&L", sQLTransientConnectionException0.getMessage());
      assertEquals(10, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: m4?<HE,gZE 4C<]&L", sQLTransientConnectionException0.toString());
      assertEquals("|ku3.a<e[ 9x,t[~$kZ", sQLTransientConnectionException0.getSQLState());
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, 1373);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends BatchUpdateException>) orderedMapIterator0);
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      Class<DataTruncation> class0 = DataTruncation.class;
      DataTruncation[] dataTruncationArray0 = IteratorUtils.toArray((Iterator<? extends DataTruncation>) orderedMapIterator1, class0);
      assertNotNull(dataTruncationArray0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertEquals(0, dataTruncationArray0.length);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      
      Hashtable<SQLSyntaxErrorException, BatchUpdateException> hashtable0 = new Hashtable<SQLSyntaxErrorException, BatchUpdateException>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      EntrySetMapIterator<SQLSyntaxErrorException, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, BatchUpdateException>(hashtable0);
      assertNotNull(entrySetMapIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      MapIterator<SQLSyntaxErrorException, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, BatchUpdateException>) entrySetMapIterator0);
      assertNotNull(mapIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) entrySetMapIterator0, (Iterator<? extends SQLSyntaxErrorException>) entrySetMapIterator0, (Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      assertNotNull(zippingIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) anyPredicate0;
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate0;
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[2] = (Predicate<Object>) instanceofPredicate0;
      Class<DataTruncation> class1 = DataTruncation.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class1);
      predicateArray0[3] = predicate1;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[4] = (Predicate<Object>) nonePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) allPredicate0);
      Object object0 = new Object();
      Predicate<Object> predicate2 = null;
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      MapIterator<Object, SQLIntegrityConstraintViolationException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<?, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1);
      MapIterator<Object, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.find((Iterator<Object>) mapIterator1, (Predicate<? super Object>) allPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) mapIterator0, 1508);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1508
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends BatchUpdateException>) orderedMapIterator0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) orderedMapIterator1, class0);
      Hashtable<SQLSyntaxErrorException, BatchUpdateException> hashtable0 = new Hashtable<SQLSyntaxErrorException, BatchUpdateException>();
      EntrySetMapIterator<SQLSyntaxErrorException, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, BatchUpdateException>(hashtable0);
      MapIterator<SQLSyntaxErrorException, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, BatchUpdateException>) entrySetMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, (Iterator<? extends SQLSyntaxErrorException>) entrySetMapIterator0, (Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      Comparator<SQLInvalidAuthorizationSpecException> comparator0 = (Comparator<SQLInvalidAuthorizationSpecException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 7);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, 1413L, 1413L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[2];
      SQLWarning sQLWarning0 = new SQLWarning("~SeOl1.");
      SQLWarning sQLWarning1 = new SQLWarning("~SeOl1.", "Predicate must not be null", sQLWarning0);
      sQLWarning0.fillInStackTrace();
      sQLWarningArray0[0] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning(sQLWarning1);
      sQLWarningArray0[1] = sQLWarning2;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLWarningArray0, 1, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, 46);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      String string0 = "^~'<[q5.";
      SQLDataException sQLDataException0 = new SQLDataException("^~'<[q5.", batchUpdateException0);
      batchUpdateException0.addSuppressed(sQLDataException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.setNextException(sQLDataException0);
      batchUpdateException0.forEach(consumer0);
      batchUpdateException0.getSuppressed();
      int int0 = 10;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) iterator0, class0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ListIterator<Object> listIterator0 = EmptyListIterator.emptyListIterator();
      int int0 = (-3406);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) listIterator0, (-3406));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -3406
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<DataTruncation, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator0, (Closure<? super DataTruncation>) closure0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      OrderedMapIterator<SQLWarning, SQLNonTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLWarning, ? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<SQLWarning>) orderedMapIterator1, (Transformer<? super SQLWarning, String>) transformer0, "", "", "");
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLFeatureNotSupportedException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, IIOMetadataNode>(orderedMapIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends IIOMetadataNode>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, IIOMetadataNode>(orderedMapIterator1);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      ListIterator<Integer> listIterator0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(".}aR!,<", "", 0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) sQLTransactionRollbackException0, (Equator<Object>) defaultEquator0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 4);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      classArray0[3] = class3;
      // Undeclared exception!
//      try { 
        InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) iteratorArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The parameter types must match the arguments
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) null, (-4118));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[6];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(locale_FilteringModeArray0, (-3884), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IteratorUtils.getIterator(batchUpdateException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Integer integer0 = new Integer(0);
      IteratorUtils.singletonIterator(integer0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Transformer must not be null", "");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLDataException sQLDataException0 = new SQLDataException("NX.+)<egv[G&AKX8", "p", 1409);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.SkippingIterator", (String) null, sQLDataException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) objectArrayListIterator0);
      SQLDataException sQLDataException1 = new SQLDataException("Iterator[]", "");
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLDataException1);
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) listIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertFalse(listIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.emptyOrderedIterator();
      int int0 = 649;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object[]) null, 649);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      SQLDataException sQLDataException0 = new SQLDataException("Iterator must not be null.");
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0, sQLDataException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, true, (-1597), (-1848));
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-323), false, false, 1377, (-323), dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, (-1848), 0, sQLDataException0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(0, false, true, 93, 454, dataTruncation1);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(355, false, true, (-1597), 0, dataTruncation3);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(0, false, true, 93, 1377);
      dataTruncationArray0[6] = dataTruncation6;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("2>`m*?pd$M>s4Q9%K1H", "");
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientExceptionArray0[0]);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTimeoutException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("add() is not supported by this iterator", sQLTransientExceptionArray0[1]);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", (String) null, 1651, sQLIntegrityConstraintViolationException0);
      sQLTransientExceptionArray0[2] = sQLTransientException0;
      sQLTransientConnectionException0.spliterator();
      SQLTransientException sQLTransientException1 = new SQLTransientException("Closure must not be null", sQLTransientExceptionArray0[1]);
      sQLTransientExceptionArray0[3] = sQLTransientException1;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("x%aVd6}YdQBB1KLc?", "Closure must not be null", sQLIntegrityConstraintViolationException0);
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTimeoutException1;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("add() is not supported by this iterator", "]", sQLTransientException1);
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("");
      sQLTransientExceptionArray0[6] = (SQLTransientException) sQLTransientConnectionException1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransientExceptionArray0, 716);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      ExceptionClosure.exceptionClosure();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 8);
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      HashSet<SQLTransactionRollbackException> hashSet1 = new HashSet<SQLTransactionRollbackException>();
      Hashtable<Object, SQLSyntaxErrorException> hashtable0 = new Hashtable<Object, SQLSyntaxErrorException>();
      MapTransformer.mapTransformer((Map<? super SQLRecoverableException, ? extends SQLSyntaxErrorException>) hashtable0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "5y";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("5y", hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0);
      IdentityPredicate<DataTruncation> identityPredicate0 = new IdentityPredicate<DataTruncation>(dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) identityPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      String string0 = "InstantiateTransformer: Input object was not an instanceof Class, it was a null object";
      Transformer<SQLException, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("InstantiateTransformer: Input object was not an instanceof Class, it was a null object");
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) null, (Transformer<? super SQLNonTransientException, ? extends BatchUpdateException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 1);
      IteratorUtils.get((Iterator<Object>) resettableListIterator0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 6);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0);
      iteratorArray0[0] = (Iterator<Locale.FilteringMode>) resettableListIterator0;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode3, false);
      iteratorArray0[1] = (Iterator<Locale.FilteringMode>) singletonIterator0;
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) null, (Iterator<? extends Locale.FilteringMode>) iteratorArray0[1], (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      iteratorArray0[2] = iterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) locale_FilteringMode0, 2429);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "";
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      batchUpdateException0.spliterator();
      int int1 = 2608;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 2608);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(object0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Transformer<SQLDataException, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      String string0 = "vzSVPn=Ao%dzm+F";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("vzSVPn=Ao%dzm+F");
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLTimeoutException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLRecoverableException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLRecoverableException>(orderedMapIterator0);
      MapIterator<SQLTimeoutException, SQLRecoverableException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTimeoutException, ? extends SQLRecoverableException>) abstractMapIteratorDecorator0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) mapIterator0, class0);
      int int0 = 2130;
      Integer integer0 = new Integer(2130);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) integer0, 2130, 2130);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "", 0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLIntegrityConstraintViolationException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0, (-1173), (-698));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockThrowable0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "a60)0", sQLFeatureNotSupportedException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("jd/sh+zj!/>~m9", sQLIntegrityConstraintViolationException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("d<Kb~V )z6c6OB");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("*LV;", mockThrowable0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 705);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 9);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<Properties>) resettableIterator0;
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) iteratorArray0[0], (Iterator<? extends Properties>) resettableIterator0);
      iteratorArray0[1] = (Iterator<Properties>) zippingIterator0;
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, 9, 1885);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }
}
