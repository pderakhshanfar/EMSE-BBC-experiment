/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:51:28 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0[0]);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, 607);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 606
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLDataException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Object>(orderedMapIterator0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OrderedMapIterator<SQLException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLException, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLException, String>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLException, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLException, String>(abstractOrderedMapIteratorDecorator0);
      MapIterator<SQLException, String> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLException, String>) abstractMapIteratorDecorator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIteratorWrapper<SQLSyntaxErrorException> listIteratorWrapper0 = new ListIteratorWrapper<SQLSyntaxErrorException>(resettableListIterator0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) listIteratorWrapper0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OrderedMapIterator<LinkedHashSet<SQLInvalidAuthorizationSpecException>, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<LinkedHashSet<SQLInvalidAuthorizationSpecException>, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<LinkedHashSet<SQLInvalidAuthorizationSpecException>, SQLDataException>(orderedMapIterator0);
      Iterator<LinkedHashSet<SQLInvalidAuthorizationSpecException>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<LinkedHashSet<SQLInvalidAuthorizationSpecException>>) abstractMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) linkedList0);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableIterator0, 36);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>(hashMap0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) entrySetMapIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableListIterator0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      ListIteratorWrapper<Integer> listIteratorWrapper0 = new ListIteratorWrapper<Integer>(resettableListIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIteratorWrapper0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, 0);
      assertNull(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator0;
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      OrderedMapIterator<Integer, Locale.Category> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) resettableListIterator0, (Iterator<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 5);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("b 5q'Fj)4E@`aV", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) transformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'b 5q'Fj)4E@`aV' on 'class java.util.Properties' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("MS!^fU:g;-\"KyTQ_");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, false);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("Uhh;T");
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) nullIsTruePredicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) singletonIterator0, (Transformer<? super IIOMetadataNode, String>) transformer1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "Estimated size must be greater than 0", 23, (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(23, true, false, 23, 23, sQLNonTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException("iterator", (String) null, dataTruncation0);
      InvokerTransformer<Object, SQLDataException> invokerTransformer0 = new InvokerTransformer<Object, SQLDataException>("", (Class<?>[]) null, (Object[]) null);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLDataException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UE``].&;/V`,(;e*gs");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UE``].&;/V`,(;e*gs", "UE``].&;/V`,(;e*gs", 2156, sQLRecoverableException0);
      stack0.add(sQLSyntaxErrorException0);
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(stack0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("E<guX<", "E<guX<", (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning("", sQLRecoverableException0);
      hashSet0.add(sQLWarning0);
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) hashSet0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLWarning>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("#g*0#;s7b>fX=gutET5");
      Factory<SQLWarning> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLException, SQLWarning> factoryTransformer0 = new FactoryTransformer<SQLException, SQLWarning>(factory0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.objectGraphIterator(sQLWarning0, (Transformer<? super SQLWarning, ? extends SQLWarning>) factoryTransformer0);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) iterator0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) hashSet0);
      hashSet0.add((SQLWarning) null);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      Factory<SQLClientInfoException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLClientInfoException> factoryTransformer0 = new FactoryTransformer<Object, SQLClientInfoException>(factory0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IfTransformer<Object, SQLClientInfoException> ifTransformer0 = new IfTransformer<Object, SQLClientInfoException>(predicate0, factoryTransformer0, factoryTransformer0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLClientInfoException>) ifTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, 1472L);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<Integer>) null, (-214L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Iterator<IIOMetadataNode>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1841);
      integerArray0[0] = integer0;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) null, (int) integerArray0[0]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("'L[|UU");
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 2);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      AllPredicate<SQLException> allPredicate0 = new AllPredicate<SQLException>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) singletonIterator0, (Predicate<? super SQLRecoverableException>) allPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLFeatureNotSupportedException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ?>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) iterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) null, 2084L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OrderedMapIterator<String, HashSet<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) orderedMapIterator0, (-2992L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTransactionRollbackException[]) null, 1819, 1819);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 5, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(locale_CategoryArray0, 1758, 1758);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, 36);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 1585);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Integer[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) predicate0, 1841, 3398);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-822));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("rQS3S1\"31*C+7S5%", (String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(1292);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, (int) integer0, 1292);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 5271, (-1541));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 3542);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLInvalidAuthorizationSpecExceptionArray0[0]);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0, 1, (-2048));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) "", 834);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ax8QN69P\"eA_nQ8s%o3", "", 1511);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "K~{YG[6", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(linkedList0);
      Transformer<SQLSyntaxErrorException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) reverseListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "iojj66 7X+rH=,,", "");
      assertEquals("iojj66 7X+rH=,,", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "\"@!", "", "");
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      Transformer<SQLSyntaxErrorException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "!q|Y9~guYQ':O/_zu", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ConstantTransformer<SQLSyntaxErrorException, String> constantTransformer0 = new ConstantTransformer<SQLSyntaxErrorException, String>("9#1%q[");
      String string0 = IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) constantTransformer0, "q=2cqU>HpkJd]Q[", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Predicate<Integer> predicate0 = TruePredicate.truePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Integer>) null, (Predicate<? super Integer>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The object and transformer map must not be null", "The object and transformer map must not be null");
      SQLWarning sQLWarning0 = new SQLWarning("The object and transformer map must not be null", sQLTimeoutException0);
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.singletonIterator(sQLWarning0);
      Class<SQLWarning> class0 = SQLWarning.class;
      SQLWarning[] sQLWarningArray0 = IteratorUtils.toArray((Iterator<? extends SQLWarning>) resettableIterator0, class0);
      assertEquals(1, sQLWarningArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) orderedIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OrderedMapIterator<SQLException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) orderedMapIterator0, (Transformer<? super SQLException, String>) transformer0, "Enumeration must not be null", "$Mh\"j0%$n8", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<String, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<String>) orderedMapIterator0, (Transformer<? super String, String>) transformer0, "UV%2P%bh97ML}_)K%UW", (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, false);
      Transformer<SQLSyntaxErrorException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, (String) null, "!q|Y9~guYQ':O/_zu", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) null, ">G'y@;LeCA", ">G'y@;LeCA", "aq7GU");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResettableListIterator<Closure<Properties>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector0);
      SQLException sQLException0 = new SQLException("Array class must not be null", "aU0!4WV", (-2305), (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Array class must not be null", sQLException0);
      vector0.add(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, 1335);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, 0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) singletonListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      BoundedIterator<SQLTransactionRollbackException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, 0L, 0L);
      boolean boolean0 = IteratorUtils.isEmpty(boundedIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicate0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("nF2/smBBC%n7$S=ka");
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) null);
      boolean boolean0 = IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("gtL>T3p06Plw=:*I+.");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0, 16);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) resettableListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Predicate<? super SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer[] integerArray0 = new Integer[2];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      IdentityPredicate<Integer> identityPredicate0 = new IdentityPredicate<Integer>(integer0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Integer>) resettableListIterator0, (Predicate<? super Integer>) identityPredicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Object) resettableListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      IteratorUtils.find((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.find((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) identityPredicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = IteratorUtils.find((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) allPredicate0);
      assertNull(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLSyntaxErrorException>) reverseListIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("'L[|UU");
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 2);
      AllPredicate<SQLException> allPredicate0 = new AllPredicate<SQLException>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) singletonIterator0, (Predicate<? super SQLRecoverableException>) allPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Transformer<Object, Properties> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<String>) null, (Closure<? super String>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedMapIterator<String, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<String>) orderedMapIterator0, (Closure<? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Hashtable<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("Entry does not exist: ", "=[3Ct1;sxZxKy(p", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIteratorWrapper<SQLSyntaxErrorException> listIteratorWrapper0 = new ListIteratorWrapper<SQLSyntaxErrorException>(resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) listIteratorWrapper0, (-645));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) null, 2265);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) resettableListIterator0, (Class<SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) linkedList0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) singletonListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<SQLException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterable<Object> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<?>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterable<SQLException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null, (Collection<? super SQLException>) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      HashMap<Object, SQLClientInfoException> hashMap0 = new HashMap<Object, SQLClientInfoException>();
      Transformer<Object, SQLClientInfoException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLClientInfoException>) hashMap0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) zippingIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLClientInfoException>) transformer0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("n!", "n!", sQLInvalidAuthorizationSpecException0);
      arrayList0.add(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, 10);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("The current criterion '", "Array class must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("The current criterion '", "BpB:XP8qgF;L", 632, sQLTransientException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransactionRollbackException0, defaultEquator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) null, (Predicate<? super SQLWarning>) nullIsExceptionPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      AllPredicate<SQLException> allPredicate0 = new AllPredicate<SQLException>(predicateArray0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) objectArrayListIterator0, (Predicate<? super DataTruncation>) allPredicate0);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) listIterator0, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) iIOMetadataNode0);
      OrPredicate<IIOMetadataNode> orPredicate0 = new OrPredicate<IIOMetadataNode>(predicate0, predicate0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) orPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedMapIterator<Integer, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) orderedMapIterator0, (Transformer<? super Integer, ? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Factory<SQLClientInfoException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) factory0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, ? extends SQLClientInfoException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, ClientInfoStatus> invokerTransformer0 = new InvokerTransformer<Object, ClientInfoStatus>((String) null, classArray0, classArray0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) invokerTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) iterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("MS!^fU:g;-\"KyTQ_");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, false);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("Uhh;T");
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) singletonIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0);
      assertFalse(singletonIterator0.hasNext());
      assertEquals("[Uhh;T]", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 7048, 7048);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) resettableIterator0, (long) 0);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MapIterator<Integer, LinkedHashSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, SQLTransientException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransactionRollbackException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[9];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      HashSet<Closure<Object>> hashSet0 = new HashSet<Closure<Object>>();
      Closure<String> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super String>>) hashSet0);
      IteratorUtils.apply((Iterator<String>) resettableIterator0, (Closure<? super String>) closure0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MapIterator<SQLTimeoutException, ArrayList<SQLSyntaxErrorException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayDeque<Properties>[] arrayDequeArray0 = (ArrayDeque<Properties>[]) Array.newInstance(ArrayDeque.class, 6);
      ResettableListIterator<ArrayDeque<Properties>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(iteratorArray0, 0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      Iterator<String> iterator0 = IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>[]) iteratorArray0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("P[&u1");
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("P[&u1", (Class<?>[]) null, (Object[]) null);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 3363);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'P[&u1' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 36, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 4);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, class0);
      assertEquals(0, sQLTransientConnectionExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>((BatchUpdateException) null);
      boolean boolean0 = IteratorUtils.contains((Iterator<BatchUpdateException>) singletonIterator0, (Object) null);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<SQLSyntaxErrorException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0, 749L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 649);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }
}
