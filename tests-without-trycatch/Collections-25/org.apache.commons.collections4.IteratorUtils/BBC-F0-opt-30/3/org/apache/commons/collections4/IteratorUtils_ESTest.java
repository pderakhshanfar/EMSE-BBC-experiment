/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 09:36:51 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = new Object();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayList0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends Integer>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("o6;|;", "o6;|;", 0);
      linkedList0.add((Object) sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Object>) listIterator0, 3224);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator((Integer) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<?>) listIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, 0L);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      // Undeclared exception!
//      try { 
        OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 0 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLWarning> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) resettableIterator0);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("Ip8da[PciXki8eyp]C");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLWarning, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.singletonListIterator((Integer) null);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator((Integer) null);
      Predicate<Integer> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("EVvLI", "FH_b", 10, (Throwable) null);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.find((Iterator<SQLException>) singletonIterator0, (Predicate<? super SQLException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("/6)? 1");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<SQLSyntaxErrorException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Object>(orderedMapIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.size(nodeListIterator0);
      OrderedMapIterator<SQLTransientException, ArrayDeque<SQLWarning>> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/6)? 1", "/6)? 1", 1532, sQLClientInfoException0);
      IteratorUtils.isEmpty(orderedMapIterator1);
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) set0);
      Transformer<String, Properties> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends String>) resettableIterator0, (Transformer<? super String, ? extends Properties>) transformer0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Properties, String> factoryTransformer0 = new FactoryTransformer<Properties, String>(factory0);
      IteratorUtils.toString(iterator0, (Transformer<? super Properties, String>) factoryTransformer0, "Rk}:i GB>o/%Iq", "/6)? 1", "/6)? 1");
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLDataException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator((Integer) null);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(listIterator0);
      NullIsTruePredicate<Integer> nullIsTruePredicate0 = new NullIsTruePredicate<Integer>(identityPredicate0);
      NullIsExceptionPredicate<Integer> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Integer>(nullIsTruePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) nullIsExceptionPredicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Input Object must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Integer integer0 = new Integer((-4109));
      IteratorUtils.singletonListIterator(integer0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<Integer>) null, (Predicate<? super Integer>) uniquePredicate0);
      EmptyListIterator.emptyListIterator();
      SQLException sQLException0 = new SQLException();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator((Integer) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      ArrayList<SQLException>[] arrayListArray0 = (ArrayList<SQLException>[]) Array.newInstance(ArrayList.class, 9);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      arrayListArray0[0] = arrayList0;
      ArrayList<SQLException> arrayList1 = new ArrayList<SQLException>();
      arrayListArray0[1] = arrayList1;
      ArrayList<SQLException> arrayList2 = new ArrayList<SQLException>();
      arrayListArray0[2] = arrayList2;
      ArrayList<SQLException> arrayList3 = new ArrayList<SQLException>();
      arrayListArray0[3] = arrayList3;
      ArrayList<SQLException> arrayList4 = new ArrayList<SQLException>();
      arrayListArray0[4] = arrayList4;
      ArrayList<SQLException> arrayList5 = new ArrayList<SQLException>();
      arrayListArray0[5] = arrayList5;
      ArrayList<SQLException> arrayList6 = new ArrayList<SQLException>();
      arrayListArray0[6] = arrayList6;
      ArrayList<SQLException> arrayList7 = new ArrayList<SQLException>();
      arrayListArray0[7] = arrayList7;
      ArrayList<SQLException> arrayList8 = new ArrayList<SQLException>();
      arrayListArray0[8] = arrayList8;
      IteratorUtils.arrayIterator(arrayListArray0);
      NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<ArrayList<SQLException>>) null, (Predicate<? super ArrayList<SQLException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      DataTruncation dataTruncation0 = new DataTruncation((-1608), true, true, (-1608), 100);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) listIterator0);
      ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) listIterator1, (Predicate<? super DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator((Integer) null);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) predicate0);
      ListIterator<SQLDataException> listIterator1 = EmptyListIterator.emptyListIterator();
      SQLException sQLException0 = new SQLException();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) listIterator1, (Iterator<?>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(arrayDeque0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) loopingIterator0, (Predicate<? super DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.singletonListIterator((Integer) null);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 21);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>((Factory<? extends IIOMetadataNode>) null);
      IteratorUtils.transformedIterator((Iterator<?>) resettableListIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) factoryTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLException sQLException0 = new SQLException();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) listIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      Vector<SQLException> vector0 = new Vector<SQLException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLRecoverableException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator((SQLRecoverableException) null);
      IteratorUtils.get((Iterator<SQLRecoverableException>) resettableIterator0, 0);
      MapIterator<SQLNonTransientException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ArrayDeque<SQLFeatureNotSupportedException>[] arrayDequeArray0 = (ArrayDeque<SQLFeatureNotSupportedException>[]) Array.newInstance(ArrayDeque.class, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(arrayDequeArray0, 2650, 2650);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Integer> notPredicate0 = new NotPredicate<Integer>(uniquePredicate0);
      NotPredicate.notPredicate((Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
      NotPredicate.notPredicate((Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) null, (Predicate<? super Integer>) notPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator((Integer) null);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) predicate0);
      EmptyListIterator.emptyListIterator();
      ExceptionPredicate.exceptionPredicate();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, (-2202), 2);
      dataTruncationArray0[0] = dataTruncation0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-491));
      DataTruncation dataTruncation1 = new DataTruncation((-2202), false, false, (-976), (-2202), sQLTimeoutException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-97), false, true, (-491), 2, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-97), true, true, (-976), 2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-3761), true, false, (-1062), (-97));
      dataTruncationArray0[4] = dataTruncation4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 2, (-491));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      DataTruncation dataTruncation0 = new DataTruncation((-1608), true, true, (-1608), 100);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) listIterator0);
      SQLException sQLException0 = new SQLException();
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<DataTruncation>) resettableListIterator0;
      iteratorArray0[3] = (Iterator<DataTruncation>) resettableListIterator0;
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      IteratorUtils.emptyMapIterator();
      Integer integer0 = new Integer(1206);
      Properties properties0 = new Properties();
      Integer integer1 = new Integer(58);
      NotNullPredicate.notNullPredicate();
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) listIterator0);
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      SQLException sQLException0 = new SQLException();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "y:^H<wgvL-)r*e]$S?L", "");
      ArrayList<SQLException>[] arrayListArray0 = (ArrayList<SQLException>[]) Array.newInstance(ArrayList.class, 0);
      ResettableIterator<ArrayList<SQLException>> resettableIterator0 = IteratorUtils.arrayIterator(arrayListArray0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<ArrayList<SQLException>>) resettableIterator0, (Predicate<? super ArrayList<SQLException>>) predicate0);
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 8);
      MapIterator<SQLTimeoutException, ArrayList<InstanceofPredicate>> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) mapIterator0;
      MapIterator<SQLTimeoutException, Integer> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) mapIterator1;
      SkippingIterator<SQLTimeoutException> skippingIterator0 = IteratorUtils.skippingIterator(iteratorArray0[1], 1599L);
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) skippingIterator0;
      Comparator<SQLTimeoutException> comparator0 = (Comparator<SQLTimeoutException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = new Properties();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList1.offerLast(sQLSyntaxErrorException0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashtable0.put("ListIterator must not be null", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      Object object0 = new Object();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) null, "", "", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableListIterator0);
      Properties properties0 = new Properties();
      ResettableListIterator<DataTruncation> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableListIterator1);
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      IteratorUtils.emptyMapIterator();
      Integer integer0 = new Integer(0);
      Properties properties1 = new Properties();
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      singletonIterator0.reset();
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) singletonIterator0, (Iterator<? extends Integer>) singletonIterator0);
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<Integer>) zippingIterator0, (Predicate<? super Integer>) predicate0);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) listIterator0);
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      SQLException sQLException0 = new SQLException();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OrderedMapIterator<ArrayList<IIOMetadataNode>, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ArrayList<IIOMetadataNode>, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayList<IIOMetadataNode>, DataTruncation>(orderedMapIterator0);
      OrderedMapIterator<ArrayList<IIOMetadataNode>, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<ArrayList<IIOMetadataNode>, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.pushbackIterator((Iterator<? extends ArrayList<IIOMetadataNode>>) orderedMapIterator1);
      OrderedMapIterator<Properties, LinkedHashSet<SQLException>> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Properties, LinkedHashSet<SQLException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, LinkedHashSet<SQLException>>(orderedMapIterator2);
      MapIterator<Properties, LinkedHashSet<SQLException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, LinkedHashSet<SQLException>>) abstractMapIteratorDecorator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.find((Iterator<Properties>) mapIterator0, (Predicate<? super Properties>) predicate0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((Throwable) null);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("ListIterator must not be null", "Collection must not be null", 429);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("~DoN:H^]iv/^36F", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("*:X0rDMk(v_6zlj!ET", "~DoN:H^]iv/^36F", (-1), sQLTransientConnectionException4);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("", "", (-11), sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException((String) null);
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", ". #~e4_:B", "oWJFS*SfZ");
      ArrayList<SQLException>[] arrayListArray0 = (ArrayList<SQLException>[]) Array.newInstance(ArrayList.class, 6);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      arrayListArray0[0] = arrayList0;
      ArrayList<SQLException> arrayList1 = new ArrayList<SQLException>();
      arrayListArray0[1] = arrayList1;
      ArrayList<SQLException> arrayList2 = new ArrayList<SQLException>();
      arrayListArray0[2] = arrayList2;
      ArrayList<SQLException> arrayList3 = new ArrayList<SQLException>();
      arrayListArray0[3] = arrayList3;
      ArrayList<SQLException> arrayList4 = new ArrayList<SQLException>();
      arrayListArray0[4] = arrayList4;
      ArrayList<SQLException> arrayList5 = new ArrayList<SQLException>();
      arrayListArray0[5] = arrayList5;
      ResettableIterator<ArrayList<SQLException>> resettableIterator0 = IteratorUtils.arrayIterator(arrayListArray0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<ArrayList<SQLException>>) resettableIterator0, (Predicate<? super ArrayList<SQLException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator((SQLException[]) sQLTransientConnectionExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[3] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[4] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[5] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[6] = (Predicate<Object>) uniquePredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IteratorUtils.matchesAny((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) onePredicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) predicateArray0[1], (-2879), (-2879));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("/6)? 1", "");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "EYz:~:#2m0|tDX", sQLTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/6)? 1", sQLSyntaxErrorException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) listIterator0, 3131);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 3130
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(linkedList0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) loopingIterator0);
      IteratorUtils.skippingIterator((Iterator<DataTruncation>) listIterator0, 0L);
      IteratorUtils.isEmpty(objectArrayListIterator0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.singletonIterator((SQLNonTransientException) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Properties properties0 = new Properties();
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      sQLExceptionArray0[0] = (SQLException) null;
      sQLExceptionArray0[1] = (SQLException) null;
      sQLExceptionArray0[2] = (SQLException) null;
      String string0 = "A$>_)IY*_-?[pZX";
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 4406;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 1782;
      longArray0[6] = (long) 4406;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("vJ)pqk<", "A$>_)IY*_-?[pZX", 4406, longArray0, sQLExceptionArray0[0]);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 1782, 4406, batchUpdateException0);
      dataTruncation0.getNextWarning();
      sQLExceptionArray0[3] = (SQLException) null;
      sQLExceptionArray0[4] = (SQLException) null;
      sQLExceptionArray0[5] = (SQLException) null;
      sQLExceptionArray0[6] = (SQLException) null;
      sQLExceptionArray0[7] = (SQLException) null;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(onePredicate0, onePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) orPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate1;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) onePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) null, (Predicate<? super SQLWarning>) allPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      LinkedHashSet<SQLSyntaxErrorException> linkedHashSet0 = new LinkedHashSet<SQLSyntaxErrorException>(3, 1.0F);
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(linkedHashSet0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 5);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[3] = class3;
      Class<Properties> class4 = Properties.class;
      classArray0[4] = class4;
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) loopingIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Vector<Object> vector0 = new Vector<Object>();
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1105);
      intArray0[2] = 0;
      intArray0[3] = 0;
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, false, (-1105), (-1105));
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) listIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>((Factory<? extends IIOMetadataNode>) null);
      IteratorUtils.transformedIterator((Iterator<?>) resettableListIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) factoryTransformer0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      IteratorUtils.unmodifiableIterator(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Vector<Object> vector0 = new Vector<Object>();
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1105);
      OrderedMapIterator<SQLTransientException, ArrayDeque<SQLWarning>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      WhileClosure<SQLTransientException> whileClosure0 = new WhileClosure<SQLTransientException>(uniquePredicate0, (Closure<? super SQLTransientException>) null, true);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLTransientException>) orderedMapIterator0, (Closure<? super SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InvokerTransformer.invokerTransformer("nodeList must not be null!");
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientException) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ConstantFactory<IIOMetadataNode> constantFactory0 = new ConstantFactory<IIOMetadataNode>(iIOMetadataNode0);
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>(constantFactory0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("nodeList must not be null!", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) transformer0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      IteratorUtils.unmodifiableIterator(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("gEsG56");
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("");
      DataTruncation dataTruncation0 = new DataTruncation(2970, false, true, 2970, 18);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) listIterator0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<DataTruncation> listIterator2 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) listIterator1, (Predicate<? super DataTruncation>) predicate0);
      Iterator<DataTruncation> iterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      IteratorUtils.skippingIterator(iterator0, (long) 18);
      // Undeclared exception!
//      try { 
        IteratorUtils.isEmpty(listIterator2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Vector<Object> vector0 = new Vector<Object>();
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) null, (Transformer<? super Integer, ? extends InstanceofPredicate>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstantiateFactory<IIOMetadataNode> instantiateFactory0 = new InstantiateFactory<IIOMetadataNode>(class0);
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "!>6+d)", "", "!>6+d)");
      IteratorUtils.getIterator(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, IIOMetadataNode>[] transformerArray0 = (Transformer<Object, IIOMetadataNode>[]) Array.newInstance(Transformer.class, 4);
      IteratorUtils.singletonIterator((SQLNonTransientException) null);
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.unmodifiableIterator(iterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Object>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation((-4348), true, false, (-4348), (-4348));
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) singletonIterator0);
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) list0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) singletonIterator0, (-4348));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("gEsG56");
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      DataTruncation dataTruncation0 = new DataTruncation(2970, false, true, 2970, 18);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) listIterator0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<DataTruncation> listIterator2 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) listIterator1, (Predicate<? super DataTruncation>) predicate0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) listIterator2, (Iterator<? extends DataTruncation>) listIterator2);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator(iterator0, (long) 18);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0);
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>(list0);
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) treeSet0);
      int int0 = 18;
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      DataTruncation dataTruncation0 = new DataTruncation(106, false, false, 18, (-253));
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-1474), false, false, (-1474), (-253));
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(123, false, false, 18, (-2879), dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-1474), false, false, 18, (-1474), dataTruncation0);
      dataTruncationArray0[3] = dataTruncation3;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(dataTruncation2);
      DataTruncation dataTruncation4 = new DataTruncation(0, false, false, (-253), 3, sQLTransientConnectionException0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(8, false, false, 10, 8);
      dataTruncationArray0[5] = dataTruncation5;
      ResettableIterator<DataTruncation> resettableIterator1 = IteratorUtils.arrayIterator(dataTruncationArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator1, (-2879));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(";~<Z}q0wcrBVM_&");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Vector<Object> vector0 = new Vector<Object>();
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", (String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(linkedList0);
      DataTruncation dataTruncation0 = new DataTruncation(93, false, false, 10, 10, sQLTransientConnectionException0);
      arrayDeque0.add(dataTruncation0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<SQLWarning> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLWarning>>) hashSet0);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Predicate<? super DataTruncation>) predicate0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InvokerTransformer.invokerTransformer("nodeList must not be null!");
      IteratorUtils.singletonIterator((SQLNonTransientException) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Properties properties0 = new Properties();
      linkedList0.offerLast(properties0);
      linkedList0.subList(0, 0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      IteratorUtils.get((Iterator<Object>) listIterator0, 0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) singletonIterator0);
      StringValueTransformer.stringValueTransformer();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "X{SqRV3E,F[", "1gu/jn1!#(,", "nodeList must not be null!");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(arrayList0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) reverseListIterator0);
      OrderedMapIterator<SQLTransientException, ArrayDeque<SQLWarning>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      UniquePredicate.uniquePredicate();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      WhileClosure<SQLTransientException> whileClosure0 = new WhileClosure<SQLTransientException>(uniquePredicate0, closure0, true);
      IteratorUtils.apply((Iterator<SQLTransientException>) orderedMapIterator0, (Closure<? super SQLTransientException>) whileClosure0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) zippingIterator0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) zippingIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) zippingIterator1, 1788);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1788
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) listIterator0, 1820L, 1820L);
      BoundedIterator<DataTruncation> boundedIterator1 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) boundedIterator0, 0L);
      IteratorUtils.skippingIterator((Iterator<DataTruncation>) boundedIterator1, 1820L);
      IteratorUtils.isEmpty(listIterator0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      EmptyOrderedIterator.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("gEsG56");
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("OTLBGZE6D]-mOLiUiL/");
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException(sQLTransientException0);
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(arrayDeque0);
      DataTruncation dataTruncation0 = new DataTruncation(93, false, false, 10, 10, sQLTransientConnectionException2);
      arrayDeque0.add(dataTruncation0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) loopingIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) iterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0, 18);
      SkippingIterator<DataTruncation> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<DataTruncation>) resettableIterator0, (long) 18);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) resettableIterator0, (Iterator<? extends SQLWarning>) resettableIterator0, (Iterator<? extends SQLWarning>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("fromIndex = ");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Vector<Object> vector0 = new Vector<Object>();
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fromIndex = ", "fromIndex = ", 1666);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fromIndex = ", sQLTransientConnectionException0);
      linkedList0.add(sQLSyntaxErrorException0);
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) null);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(arrayList0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) reverseListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("");
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("");
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(arrayDeque0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) loopingIterator0, (Predicate<? super DataTruncation>) predicate0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-572), 2970);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      SQLException sQLException0 = new SQLException();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLException0);
      TransformerClosure<SQLException> transformerClosure0 = new TransformerClosure<SQLException>((Transformer<? super SQLException, ?>) null);
      hashMap0.put(equalPredicate0, transformerClosure0);
      SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLException[]) null, 6, 6);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("fromIndex = ");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Vector<Object> vector0 = new Vector<Object>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fromIndex = ", (String) null);
      vector0.add((Object) sQLTransactionRollbackException0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      IteratorUtils.emptyListIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "V.\"jl/F7Y*#dIx", 0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "V.\"jl/F7Y*#dIx", sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("fromIndex = ", sQLTransientException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("fromIndex = ");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) vector0);
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("/y_IF", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Transformer<? super SQLRecoverableException, ? extends IIOMetadataNode>) transformer0);
      IteratorUtils.singletonIterator(iterator1);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      IteratorUtils.skippingIterator((Iterator<DataTruncation>) resettableIterator0, (long) 100);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.clone();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null, (Collection<? super Properties>) arrayDeque0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((String[]) null, (-1622));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      List<DataTruncation> list0 = new Vector<DataTruncation>();
      IteratorUtils.skippingIterator((Iterator<DataTruncation>) resettableIterator0, (long) 100);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("{\"^=nfk");
      IteratorUtils.toString((Iterator<SQLTimeoutException>) null, (Transformer<? super SQLTimeoutException, String>) transformer0, "{\"^=nfk", "{\"^=nfk", "{\"^=nfk");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Vector<Object> vector0 = new Vector<Object>();
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1105);
      intArray0[2] = 0;
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "Closure must not be null", "!>6+d)", "");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0, 100);
      IteratorUtils.skippingIterator((Iterator<DataTruncation>) resettableIterator0, (long) 100);
      MapIterator<Properties, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Properties, Object> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<Properties, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, Object>(mapIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) abstractMapIteratorDecorator0, (Iterator<? extends Properties>) mapIterator1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(arrayList0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) reverseListIterator0);
      OrderedMapIterator<SQLTransientException, ArrayDeque<SQLWarning>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      WhileClosure<SQLTransientException> whileClosure0 = new WhileClosure<SQLTransientException>(uniquePredicate0, closure0, true);
      IteratorUtils.apply((Iterator<SQLTransientException>) orderedMapIterator0, (Closure<? super SQLTransientException>) whileClosure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning("J^HRV", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("0LtK\u0006)\"B<7<P,th%[", "0LtK\u0006)\"B<7<P,th%[", sQLWarning0);
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException1);
      sQLExceptionArray0[1] = (SQLException) batchUpdateException0;
      batchUpdateException0.spliterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("0LtK\u0006)\"B<7<P,th%[", "", 217);
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientConnectionException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLExceptionArray0[4] = (SQLException) sQLTransactionRollbackException0;
      sQLWarning0.spliterator();
      int[] intArray0 = new int[1];
      intArray0[0] = 217;
      sQLTransientConnectionException1.getSuppressed();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", 31, intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("J^HRV", sQLExceptionArray0[2]);
      batchUpdateException1.setNextException(sQLRecoverableException0);
      batchUpdateException1.setNextException(sQLRecoverableException0);
      sQLExceptionArray0[5] = (SQLException) batchUpdateException1;
      IteratorUtils.arrayIterator(sQLExceptionArray0);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 217;
      integerArray0[1] = (Integer) 217;
      integerArray0[2] = (Integer) 217;
      integerArray0[3] = (Integer) 217;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = ForClosure.forClosure(3368, (Closure<? super Object>) closure0);
      closureArray0[0] = closure1;
      Closure<Object> closure2 = NOPClosure.nopClosure();
      closureArray0[1] = closure2;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "0LtK\u0006)\"B<7<P,th%[", 3368, intArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(batchUpdateException2, comparator0, comparatorPredicate_Criterion0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(comparatorPredicate0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) notPredicate0, (Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate1;
      Predicate<Object> predicate2 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate2;
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate4 = NotPredicate.notPredicate((Predicate<? super Object>) predicate3);
      Predicate<Object> predicate5 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate4);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate5, closure1, closure0);
      closureArray0[2] = (Closure<Object>) ifClosure0;
      Closure<Object> closure3 = IfClosure.ifClosure((Predicate<? super Object>) notPredicate0, (Closure<? super Object>) closure0);
      closureArray0[3] = closure3;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<Integer>) objectArrayIterator0, (Closure<? super Integer>) chainedClosure0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(arrayList0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) reverseListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      WhileClosure<SQLTransientException> whileClosure0 = new WhileClosure<SQLTransientException>(uniquePredicate0, closure0, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Iterator getValue() can only be called after next() and before remove()", "org.apache.commons.collections4.functors.OnePredicate", sQLTransientConnectionException0);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientException) sQLTimeoutException0);
      IteratorUtils.apply((Iterator<SQLTransientException>) resettableIterator0, (Closure<? super SQLTransientException>) whileClosure0);
      Vector<Properties> vector0 = new Vector<Properties>();
      IteratorUtils.loopingListIterator((List<Properties>) vector0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<String, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<String> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends String>) orderedMapIterator0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) iterator0);
      Iterator<String> iterator1 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      Iterator<String> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends String>) iterator1, (Iterator<? extends String>) iterator0);
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator2, (Iterator<? extends String>) iterator1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Object>(orderedMapIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, ", ", ", ", "org.apache.commons.collections4.iterators.SingletonIterator");
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.isEmpty(resettableIterator0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLWarning sQLWarning0 = new SQLWarning("", (Throwable) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLWarning0);
      SQLDataException sQLDataException0 = new SQLDataException("x\"*0:5qS8|^", "x\"*0:5qS8|^", 3305, sQLTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "x\"*0:5qS8|^", sQLDataException0);
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLTransientConnectionException>) predicate1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 10, sQLTransactionRollbackException0);
      IteratorUtils.singletonIterator((SQLNonTransientException) sQLSyntaxErrorException0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Properties properties0 = new Properties();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.offerLast((Object) null);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.put("", clientInfoStatus0);
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator((DataTruncation) null);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 10, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0, 100);
      Stack<BatchUpdateException> stack1 = new Stack<BatchUpdateException>();
      IteratorUtils.skippingIterator((Iterator<DataTruncation>) resettableIterator0, (long) 100);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      BoundedIterator<SQLSyntaxErrorException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator1, 3716L);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) boundedIterator0, class0);
      IteratorUtils.emptyMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      ResettableListIterator<LinkedList<SQLIntegrityConstraintViolationException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<Object> class1 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0, class1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning("J^HRV", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("0LtK\u0006)\"B<7<P,th%[", "0LtK\u0006)\"B<7<P,th%[", sQLWarning0);
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException1);
      sQLExceptionArray0[1] = (SQLException) batchUpdateException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLExceptionArray0[0]);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(arrayList0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      arrayList0.retainAll(treeSet0);
      reverseListIterator0.add(sQLFeatureNotSupportedException1);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) reverseListIterator0);
      IteratorUtils.size(reverseListIterator0);
      OrderedMapIterator<SQLTransientException, ArrayDeque<SQLWarning>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      WhileClosure<SQLTransientException> whileClosure0 = new WhileClosure<SQLTransientException>(uniquePredicate0, closure0, true);
      IteratorUtils.apply((Iterator<SQLTransientException>) orderedMapIterator0, (Closure<? super SQLTransientException>) whileClosure0);
      IteratorUtils.emptyListIterator();
      HashMap<Boolean, SQLIntegrityConstraintViolationException>[] hashMapArray0 = (HashMap<Boolean, SQLIntegrityConstraintViolationException>[]) Array.newInstance(HashMap.class, 4);
      HashMap<Boolean, SQLIntegrityConstraintViolationException> hashMap1 = new HashMap<Boolean, SQLIntegrityConstraintViolationException>();
      hashMapArray0[0] = hashMap1;
      HashMap<Boolean, SQLIntegrityConstraintViolationException> hashMap2 = new HashMap<Boolean, SQLIntegrityConstraintViolationException>();
      hashMapArray0[1] = hashMap2;
      HashMap<Boolean, SQLIntegrityConstraintViolationException> hashMap3 = new HashMap<Boolean, SQLIntegrityConstraintViolationException>();
      hashMapArray0[2] = hashMap3;
      HashMap<Boolean, SQLIntegrityConstraintViolationException> hashMap4 = new HashMap<Boolean, SQLIntegrityConstraintViolationException>();
      hashMapArray0[3] = hashMap4;
      ResettableListIterator<HashMap<Boolean, SQLIntegrityConstraintViolationException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashMapArray0, 0);
      ListIterator<HashMap<Boolean, SQLIntegrityConstraintViolationException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<HashMap<Boolean, SQLIntegrityConstraintViolationException>>) resettableListIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.SingletonIterator", ", ", (-150));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(", ", sQLInvalidAuthorizationSpecException0);
      OrderedMapIterator<SQLSyntaxErrorException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Object>(orderedMapIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, ", ", ", ", "org.apache.commons.collections4.iterators.SingletonIterator");
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<SQLTimeoutException> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      Iterator<SQLTimeoutException> iterator1 = serviceLoader0.iterator();
      IteratorUtils.toString(iterator1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0, 100);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashtable0.put("Iterator must not be null", clientInfoStatus0);
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable1);
      Object object0 = new Object();
      IteratorUtils.getIterator((Object) null);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("");
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstantiateFactory<IIOMetadataNode> instantiateFactory0 = new InstantiateFactory<IIOMetadataNode>(class0);
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>(instantiateFactory0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) resettableListIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) factoryTransformer0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.singletonIterator((SQLNonTransientException) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Properties properties0 = new Properties();
      linkedList0.offerLast("");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      hashtable0.put("transformer may not be null", clientInfoStatus0);
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      Object object0 = new Object();
      IteratorUtils.getIterator(transformer0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator((DataTruncation) null);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) hashtable0, 100, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[21];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning("J^HRV", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("0LtK\u0006)\"B<7<P,th%[", "0LtK\u0006)\"B<7<P,th%[", sQLWarning0);
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException1);
      sQLExceptionArray0[1] = (SQLException) batchUpdateException0;
      batchUpdateException0.spliterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("0LtK\u0006)\"B<7<P,th%[", "", 217);
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientConnectionException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLExceptionArray0[4] = (SQLException) sQLTransactionRollbackException0;
      sQLWarning0.spliterator();
      int[] intArray0 = new int[1];
      intArray0[0] = 217;
      sQLTransientConnectionException1.getLocalizedMessage();
      sQLTransientConnectionException1.getSuppressed();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", 31, intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("J^HRV", sQLExceptionArray0[2]);
      batchUpdateException1.setNextException(sQLRecoverableException0);
      batchUpdateException1.setNextException(sQLRecoverableException0);
      sQLExceptionArray0[5] = (SQLException) batchUpdateException1;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      IteratorUtils.isEmpty(resettableIterator0);
      Vector<DataTruncation> vector1 = new Vector<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(vector1);
      IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) loopingListIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, 10);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException((String) null, sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("9Q@", "NodeList must not be null");
      SQLDataException sQLDataException2 = new SQLDataException((String) null, (String) null, sQLRecoverableException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add(0, (Object) resettableIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      vector0.add((Object) sQLNonTransientConnectionException0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0);
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) zippingIterator0, (Iterator<? extends String>) iterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 156;
      DataTruncation dataTruncation0 = new DataTruncation(125, false, false, 156, 465);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, (-2270), (-122));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "}4hPAzzZ;~Zv..snCp");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("%51B|hww=wU2Q}q", sQLSyntaxErrorExceptionArray0[0]);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException3;
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("}4hPAzzZ;~Zv..snCp", "B~;kN9C&<PfAhYj,C<");
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) sQLSyntaxErrorException3);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("nodeList must not be null!");
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientException) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("nodeList must not be null!", "nodeList must not be null!");
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) transformer0);
      Transformer<SQLException, String> transformer1 = StringValueTransformer.stringValueTransformer();
      LinkedList<SQLSyntaxErrorException> linkedList1 = new LinkedList<SQLSyntaxErrorException>();
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("suffix may not be null", "nodeList must not be null!", sQLNonTransientConnectionException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer1, "The predicate and transformer map must not be null", "The predicate and transformer map must not be null", "The predicate and transformer map must not be null");
      ArrayListIterator<String> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<String>(resettableIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[21];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning("J^HRV", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("0LtK\u0006)\"B<7<P,th%[", "0LtK\u0006)\"B<7<P,th%[", sQLWarning0);
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException1);
      sQLExceptionArray0[1] = (SQLException) batchUpdateException0;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Max parameter must not be negative.");
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", ", ");
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException(sQLExceptionArray0[1]);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException4;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException3;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException4;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(arrayDeque0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) loopingIterator0, (Iterator<? extends DataTruncation>) loopingIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) zippingIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      InvokerTransformer.invokerTransformer("");
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstantiateFactory<IIOMetadataNode> instantiateFactory0 = new InstantiateFactory<IIOMetadataNode>(class0);
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>(instantiateFactory0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) resettableListIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) factoryTransformer0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.singletonIterator((SQLNonTransientException) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Properties properties0 = new Properties();
      linkedList0.offerLast("");
      int int0 = (-4083);
      // Undeclared exception!
//      try { 
        linkedList0.listIterator((-4083));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: -4083, Size: 1
//         //
//         verifyException("java.util.LinkedList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator");
      singletonIterator0.reset();
      IteratorUtils.toListIterator((Iterator<? extends String>) singletonIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("b?j1yX2}(_S/&", "b?j1yX2}(_S/&");
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", mockThrowable0);
      SingletonIterator<SQLRecoverableException> singletonIterator1 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, true);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) singletonIterator1, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Vector<Object> vector0 = new Vector<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("B~;kN9(vC&<PfAh,C<", (String) null);
      IteratorUtils.emptyMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.emptyListIterator();
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 2);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      hashSetArray0[0] = (HashSet<BatchUpdateException>) linkedHashSet0;
      HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>();
      hashSetArray0[1] = hashSet0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, 93);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.skippingIterator((Iterator<DataTruncation>) resettableIterator0, 923L);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractMapDecorator", "");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.map.AbstractMapDecorator", (String) null, sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("org.apache.commons.collections4.IteratorUtils");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException2;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InvokerTransformer.invokerTransformer("vKn(6@T/F@>K'mjx]}");
      SQLNonTransientException sQLNonTransientException0 = null;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientException) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = 0;
      Properties properties0 = new Properties();
      linkedList0.offerLast(properties0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      Object object0 = IteratorUtils.get((Iterator<Object>) listIterator0, 0);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) resettableIterator0;
      int int1 = 0;
      IteratorUtils.arrayIterator(objectArray0, 0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Class<SQLClientInfoException>>) null, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning("J^HRV", sQLTransientConnectionException0);
      IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLNonTransientConnectionException>>) null, (Predicate<? super ArrayDeque<SQLNonTransientConnectionException>>) predicate0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableListIterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashtable0.put("transformer may not be null", clientInfoStatus0);
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable1);
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 2735, 5936);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning("0LtK\u0006)\"B<7<P,th%[", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("0LtK\u0006)\"B<7<P,th%[", (String) null, sQLWarning0);
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException1);
      sQLExceptionArray0[1] = (SQLException) batchUpdateException0;
      batchUpdateException0.spliterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "", 217);
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientConnectionException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLExceptionArray0[1]);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.list.CursorableLinkedList", "/pD6^2-", 217);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(vector0);
      IteratorUtils.skippingIterator((Iterator<DataTruncation>) reverseListIterator0, (long) 2809);
      IteratorUtils.isEmpty((Iterator<?>) null);
      Vector<DataTruncation> vector1 = new Vector<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(vector0);
      ReverseListIterator<DataTruncation> reverseListIterator1 = new ReverseListIterator<DataTruncation>(vector1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, sQLIntegrityConstraintViolationException0);
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException1;
      IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      int int0 = (-1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "ny4", (-1));
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "suffix may not be null");
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("Y>4\"|G,Y^xYxABf%#;h", "", (-1));
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) listIterator0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientConnectionException0.printStackTrace();
      IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      ResettableListIterator<ArrayDeque<SQLNonTransientConnectionException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLNonTransientConnectionException>>) resettableListIterator0, (Predicate<? super ArrayDeque<SQLNonTransientConnectionException>>) predicate0);
      ResettableListIterator<DataTruncation> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableListIterator1);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashtable0.put("", clientInfoStatus0);
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      Predicate<SQLException> predicate1 = AnyPredicate.anyPredicate((Predicate<? super SQLException>[]) predicateArray0);
      hashMap0.put(predicate1, closure0);
      WhileClosure<SQLTransientException> whileClosure0 = new WhileClosure<SQLTransientException>(predicate0, closure0, true);
      IteratorUtils.apply((Iterator<SQLTransientException>) null, (Closure<? super SQLTransientException>) closure0);
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[1] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[2] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[3] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[5] = (SQLException) sQLTransientConnectionException0;
      int int0 = (-2349);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, (-2349), 5314);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("gEsG56");
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      Vector<Object> vector0 = new Vector<Object>();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      vector0.add((Object) instanceofPredicate0);
      StringValueTransformer.stringValueTransformer();
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "gEsG56", "remove() is not supported", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractMapDecorator", "");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "YL76X>p/I", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException((String) null, "P'1", 540);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException2;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("swpF5VS+2t]o*=");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning("J^HRV", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("0LtK\u0006)\"B<7<P,th%[", "0LtK\u0006)\"B<7<P,th%[", sQLWarning0);
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException1);
      sQLExceptionArray0[1] = (SQLException) batchUpdateException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLExceptionArray0[0]);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(arrayList0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      reverseListIterator0.add(sQLFeatureNotSupportedException1);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) reverseListIterator0);
      IteratorUtils.size(reverseListIterator0);
      OrderedMapIterator<SQLTransientException, ArrayDeque<SQLWarning>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      WhileClosure<SQLTransientException> whileClosure0 = new WhileClosure<SQLTransientException>(uniquePredicate0, closure0, true);
      IteratorUtils.apply((Iterator<SQLTransientException>) orderedMapIterator0, (Closure<? super SQLTransientException>) whileClosure0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, (-1), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyIterator();
      int[] intArray0 = new int[5];
      intArray0[0] = 735;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 10;
      intArray0[4] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("]", (String) null, intArray0);
      Transformer<Object, BatchUpdateException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) null, 1L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "}4hPAzzZ;~Zv..snCp");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("%51B|hww=wU2Q}q", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("%51B|hww=wU2Q}q");
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("", sQLSyntaxErrorException4);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("}4hPAzzZ;~Zv..snCp", "B~;kN9C&<PfAhYj,C<");
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException6;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, class0);
      IteratorUtils.emptyMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) treeSet0);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) resettableIterator1, 2218L);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      vector0.add((Object) sQLNonTransientConnectionException0);
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, (String) null, "suffix may not be null", "]hfSU+O)tSzPBO/@Z");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Iterator<? extends BatchUpdateException>) mapIterator0, (Iterator<? extends BatchUpdateException>) mapIterator0);
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("remove() method not supported for a NodeListIterator.", "3Mo3]tW8_", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException0);
      batchUpdateException0.spliterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("sV~Z", "E$", 2);
      SQLTransientException sQLTransientException0 = new SQLTransientException("3Mo3]tW8_", "remove() method not supported for a NodeListIterator.");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarning0.spliterator();
      sQLTransientConnectionException0.getSuppressed();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLTransientException0);
      SQLException[] sQLExceptionArray0 = new SQLException[0];
      IteratorUtils.arrayIterator(sQLExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.SingletonIterator", ", ", (-150));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(", ", "", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Object>(orderedMapIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) orderedMapIterator0);
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "\"nGa{6KtFr4 qP=.-", "_", "org.apache.commons.collections4.iterators.SingletonIterator");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning("J^HRV", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("0LtK\u0006)\"B<7<P,th%[", "0LtK\u0006)\"B<7<P,th%[", sQLWarning0);
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException1);
      sQLExceptionArray0[1] = (SQLException) batchUpdateException0;
      batchUpdateException0.spliterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("0LtK\u0006)\"B<7<P,th%[", "", 217);
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientConnectionException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLExceptionArray0[4] = (SQLException) sQLTransactionRollbackException0;
      sQLWarning0.spliterator();
      int[] intArray0 = new int[1];
      intArray0[0] = 217;
      sQLTransientConnectionException1.getSuppressed();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", 31, intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("J^HRV", sQLExceptionArray0[2]);
      batchUpdateException1.setNextException(sQLRecoverableException0);
      batchUpdateException1.setNextException(sQLRecoverableException0);
      sQLExceptionArray0[5] = (SQLException) batchUpdateException1;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IteratorUtils.matchesAny((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) onePredicate0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/YC!xu,4", "", (-150));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.SingletonIterator", (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "or.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("gEsG56");
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractMapDecorator", "");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "", sQLTransientConnectionException3);
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(arrayDeque0);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) loopingIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("gEsG56");
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractMapDecorator", "");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "", sQLTransientConnectionException3);
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "OuH@H", sQLInvalidAuthorizationSpecException0);
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Node must not be null", sQLTimeoutException0);
      sQLTransientConnectionException0.getSuppressed();
      int[] intArray0 = new int[9];
      intArray0[0] = (-502);
      intArray0[1] = (-502);
      intArray0[2] = (-502);
      intArray0[3] = (-502);
      intArray0[4] = (-608);
      intArray0[5] = (-502);
      intArray0[6] = (-502);
      intArray0[7] = (-502);
      intArray0[8] = (-502);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "org.apache.commons.collections4.iterators.BoundedIterator", (-502), intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("s&P.tV6TL|_Kb-DLRPv", batchUpdateException0);
      batchUpdateException0.setNextException(sQLInvalidAuthorizationSpecException0);
      batchUpdateException0.setNextException(sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.SingletonIterator", ", ", (-150));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(", ", sQLInvalidAuthorizationSpecException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("_", (String) null, sQLInvalidAuthorizationSpecException1);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Object>(orderedMapIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, ", ", ", ", "org.apache.commons.collections4.iterators.SingletonIterator");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "ny4", (-1));
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "suffix may not be null");
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      Stack<String> stack0 = new Stack<String>();
      stack0.add("Y>4\"|G,Y^xYxABf%#;h");
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      IteratorUtils.loopingIterator((Collection<? extends String>) set0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends TreeSet<SQLInvalidAuthorizationSpecException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0, 100);
      Stack<BatchUpdateException> stack1 = new Stack<BatchUpdateException>();
      Stack<BatchUpdateException> stack2 = new Stack<BatchUpdateException>();
      Stack<BatchUpdateException> stack3 = new Stack<BatchUpdateException>();
      Stack<BatchUpdateException> stack4 = new Stack<BatchUpdateException>();
      Stack<BatchUpdateException> stack5 = new Stack<BatchUpdateException>();
      Stack<BatchUpdateException> stack6 = new Stack<BatchUpdateException>();
      Stack<BatchUpdateException> stack7 = new Stack<BatchUpdateException>();
      Stack<BatchUpdateException>[] stackArray0 = (Stack<BatchUpdateException>[]) Array.newInstance(Stack.class, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stackArray0, 1683, (-158));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("gEsG56");
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractMapDecorator", "");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "", sQLTransientConnectionException3);
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(instanceofPredicate0, defaultEquator0);
      String string0 = "Index '";
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Index '", "delimiter may not be null", hashtable0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", sQLClientInfoException0);
      DefaultEquator<SQLTransientException> defaultEquator1 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(sQLTransientException0, (Equator<SQLTransientException>) defaultEquator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) equalPredicate0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNode0.getAttributeNodeNS("", "UwTr!`-`wqAG;B^h8uV");
      int int0 = 0;
      int int1 = (-3078);
      iIOMetadataNode0.getNodeType();
      iIOMetadataNode0.getAttributeNS("", "UwTr!`-`wqAG;B^h8uV");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0, (-3078));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableListIterator0);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) arrayDeque0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      int int0 = 0;
      IteratorUtils.arrayListIterator(objectArray0, 0);
      Properties properties0 = new Properties();
      arrayDeque0.offerLast(properties0);
      arrayDeque0.add(properties0);
      ArrayListIterator<SQLNonTransientException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLNonTransientException>(arrayDeque0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      vector0.add((Object) sQLNonTransientConnectionException0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) vector0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedMapIterator();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLException>) resettableListIterator0, (Predicate<? super SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) resettableListIterator0);
      IteratorUtils.emptyMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLInvalidAuthorizationSpecException0);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[2] = predicate0;
      Transformer<Object, SQLTimeoutException>[] transformerArray0 = (Transformer<Object, SQLTimeoutException>[]) Array.newInstance(Transformer.class, 1);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 6);
      Class<StringTokenizer> class2 = StringTokenizer.class;
      classArray0[0] = class2;
      Class<StringTokenizer> class3 = StringTokenizer.class;
      classArray0[1] = class3;
      Class<StringTokenizer> class4 = StringTokenizer.class;
      classArray0[2] = class4;
      Class<StringTokenizer> class5 = StringTokenizer.class;
      classArray0[3] = class5;
      Class<StringTokenizer> class6 = StringTokenizer.class;
      classArray0[4] = class6;
      Class<StringTokenizer> class7 = StringTokenizer.class;
      classArray0[5] = class7;
      // Undeclared exception!
//      try { 
        InstantiateFactory.instantiateFactory(class1, (Class<?>[]) classArray0, (Object[]) classArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // InstantiateFactory: The constructor must exist and be public 
//         //
//         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 8);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1);
      enumSetArray0[0] = enumSet0;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category2, locale_Category3, locale_Category4, locale_Category0);
      enumSetArray0[1] = enumSet1;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet2 = EnumSet.of(locale_Category5, locale_Category5);
      enumSetArray0[2] = enumSet2;
      EnumSet<Locale.Category> enumSet3 = EnumSet.complementOf(enumSet1);
      enumSetArray0[3] = enumSet3;
      Locale.Category locale_Category6 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet4 = EnumSet.range(locale_Category1, locale_Category6);
      enumSetArray0[4] = enumSet4;
      Locale.Category locale_Category7 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet5 = EnumSet.range(locale_Category5, locale_Category7);
      enumSetArray0[5] = enumSet5;
      EnumSet<Locale.Category> enumSet6 = EnumSet.copyOf(enumSet4);
      enumSetArray0[6] = enumSet6;
      EnumSet<Locale.Category> enumSet7 = EnumSet.complementOf(enumSet6);
      enumSetArray0[7] = enumSet7;
      ObjectArrayListIterator<EnumSet<Locale.Category>> objectArrayListIterator0 = new ObjectArrayListIterator<EnumSet<Locale.Category>>(enumSetArray0);
      IteratorUtils.peekingIterator((Iterator<? extends EnumSet<Locale.Category>>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 5);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      classArray0[4] = class4;
      IteratorUtils.arrayListIterator(classArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      int int0 = 597;
      boolean boolean0 = false;
      DataTruncation dataTruncation0 = new DataTruncation(597, false, false, 597, 597);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 597, 597);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DataTruncation dataTruncation0 = new DataTruncation(597, false, false, 597, 597);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 597, 597);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("The transformer to call must not be null");
      stack0.add("");
      IteratorUtils.loopingIterator((Collection<? extends String>) stack0);
      IteratorUtils.contains((Iterator<TreeSet<SQLInvalidAuthorizationSpecException>>) null, (Object) stack0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      OrderedMapIterator<String, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Enumeration must not be null");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("iterator", "]");
      IteratorUtils.nodeListIterator(nodeList0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      DataTruncation dataTruncation0 = new DataTruncation(100, true, false, 100, 100);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(100, false, false, 2529, 2529);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-414), true, true, 519, 2333);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(519, true, true, 123, 2117);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-1), false, false, 2117, (-1), dataTruncation3);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(1028, true, true, 2333, 0, dataTruncation1);
      dataTruncationArray0[5] = dataTruncation5;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 0, (-414));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "OuH@H", sQLInvalidAuthorizationSpecException0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) resettableIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0, (String) null, "obD_Xk3", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 1);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) singletonIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Iterator<SQLDataException> iterator0 = null;
      // Undeclared exception!
//      try { 
        AllPredicate.allPredicate((Predicate<? super SQLException>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ob%Gn0epCqq1jxp*_2", "suffix may not be null", 3055);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Ob%Gn0epCqq1jxp*_2", sQLIntegrityConstraintViolationException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("Ob%Gn0epCqq1jxp*_2", "");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("]", sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("", "$u>c", (-2697));
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 2113);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning("J^HRV", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("0LtK\u0006)\"B<7<P,th%[", (String) null, sQLWarning0);
      sQLExceptionArray0[0] = (SQLException) sQLTransientConnectionException1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException1);
      sQLExceptionArray0[1] = (SQLException) batchUpdateException0;
      batchUpdateException0.spliterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "", 217);
      sQLExceptionArray0[2] = (SQLException) sQLNonTransientConnectionException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLExceptionArray0[1]);
      sQLExceptionArray0[3] = (SQLException) sQLIntegrityConstraintViolationException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLExceptionArray0[4] = (SQLException) sQLTransactionRollbackException0;
      sQLWarning0.spliterator();
      int[] intArray0 = new int[1];
      intArray0[0] = 217;
      sQLTransientConnectionException1.getSuppressed();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", 31, intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("J^HRV", sQLExceptionArray0[2]);
      batchUpdateException1.setNextException(sQLRecoverableException0);
      batchUpdateException1.setNextException(sQLRecoverableException0);
      sQLExceptionArray0[5] = (SQLException) batchUpdateException1;
      IteratorUtils.arrayIterator(sQLExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IteratorUtils.emptyListIterator();
      TruePredicate.truePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "ny4", (-1));
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "suffix may not be null");
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("Y>4\"|G,Y^xYxABf%#;h", "", (-1));
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(vector0);
      IteratorUtils.skippingIterator((Iterator<DataTruncation>) reverseListIterator0, (long) 2809);
      IteratorUtils.isEmpty(reverseListIterator0);
      Vector<DataTruncation> vector1 = new Vector<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(vector0);
      ReverseListIterator<DataTruncation> reverseListIterator1 = new ReverseListIterator<DataTruncation>(vector0);
      IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) reverseListIterator1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("},Cn");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("gEsG56");
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("");
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("},Cn", "", sQLTransientConnectionException1);
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("[");
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("", (String) null, sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException5;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException1;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.skippingIterator((Iterator<DataTruncation>) resettableIterator0, 923L);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.spliterator();
      SQLWarning sQLWarning0 = new SQLWarning("J^HRV", sQLTransientConnectionException0);
      IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLNonTransientConnectionException>>) null, (Predicate<? super ArrayDeque<SQLNonTransientConnectionException>>) predicate0);
      EmptyListIterator.resettableEmptyListIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Object[] objectArray0 = new Object[0];
      IteratorUtils.arrayIterator(objectArray0, 0, 0);
      IteratorUtils.emptyMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("`:1#}M", sQLTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("`:1#}M", "", 2587, sQLWarning0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", "", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("prefix may not be null", "AaK>'z", sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("J^HRV", "#sNMkSo}Xqi1-mUI>|", 0, sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException6;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) objectArrayListIterator0);
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Iterator<DataTruncation> iterator0 = null;
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "f!2jkb[QvMCi 8Z", (-1575));
      SQLDataException sQLDataException0 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 8);
      Integer integer0 = new Integer(61);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      iteratorArray0[0] = (Iterator<Integer>) listIterator0;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      int int0 = 26;
      Integer integer1 = new Integer(26);
      integerArray0[2] = integer1;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 2);
      iteratorArray0[1] = (Iterator<Integer>) objectArrayIterator0;
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[2] = (Iterator<Integer>) resettableListIterator0;
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) iteratorArray0[2], (Iterator<? extends Integer>) resettableListIterator0);
      iteratorArray0[3] = (Iterator<Integer>) zippingIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) int0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) resettableListIterator0, (Transformer<? super SQLDataException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<SQLTimeoutException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      OrderedMapIterator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTimeoutException, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator1);
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) mapIterator0;
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      Iterator<SQLTimeoutException> iterator0 = treeSet0.descendingIterator();
      iteratorArray0[2] = iterator0;
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Enumeration must not be null", "Enumeration must not be null", 710, batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("dTvpx", "Enumeration must not be null", 710, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("dTvpx", "org.apache.commons.collections4.IteratorUtils", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("iterator");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      iteratorArray0[3] = (Iterator<SQLTimeoutException>) objectArrayIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertTrue(boolean0);
      
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("/YC!xu,4", "", (-91), sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals((-91), sQLSyntaxErrorException1.getErrorCode());
      assertEquals("", sQLSyntaxErrorException1.getSQLState());
      assertEquals("/YC!xu,4", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: /YC!xu,4", sQLSyntaxErrorException1.toString());
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", "}4hPAzzZ;~Zv..snCp");
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException2);
      assertEquals("}4hPAzzZ;~Zv..snCp", sQLSyntaxErrorException2.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException2.toString());
      assertEquals("", sQLSyntaxErrorException2.getMessage());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("%51B|hww=wU2Q}q", sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertNotNull(sQLSyntaxErrorException3);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("%51B|hww=wU2Q}q", sQLSyntaxErrorException3.getMessage());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: %51B|hww=wU2Q}q", sQLSyntaxErrorException3.toString());
      
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException();
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException4);
      assertEquals(0, sQLSyntaxErrorException4.getErrorCode());
      assertNull(sQLSyntaxErrorException4.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException4.toString());
      assertNull(sQLSyntaxErrorException4.getSQLState());
      
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("%51B|hww=wU2Q}q");
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException4));
      assertNotNull(sQLSyntaxErrorException5);
      assertNull(sQLSyntaxErrorException5.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: %51B|hww=wU2Q}q", sQLSyntaxErrorException5.toString());
      assertEquals(0, sQLSyntaxErrorException5.getErrorCode());
      assertEquals("%51B|hww=wU2Q}q", sQLSyntaxErrorException5.getMessage());
      
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("", sQLSyntaxErrorException5);
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException4));
      assertNotNull(sQLSyntaxErrorException6);
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException6.toString());
      assertEquals(0, sQLSyntaxErrorException6.getErrorCode());
      assertEquals("", sQLSyntaxErrorException6.getMessage());
      assertNull(sQLSyntaxErrorException6.getSQLState());
      assertNull(sQLSyntaxErrorException5.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: %51B|hww=wU2Q}q", sQLSyntaxErrorException5.toString());
      assertEquals(0, sQLSyntaxErrorException5.getErrorCode());
      assertEquals("%51B|hww=wU2Q}q", sQLSyntaxErrorException5.getMessage());
      
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("}4hPAzzZ;~Zv..snCp", "B~;kN9C&<PfAhYj,C<");
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException6));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException2));
      assertNotNull(sQLSyntaxErrorException7);
      assertEquals(0, sQLSyntaxErrorException7.getErrorCode());
      assertEquals("B~;kN9C&<PfAhYj,C<", sQLSyntaxErrorException7.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: }4hPAzzZ;~Zv..snCp", sQLSyntaxErrorException7.toString());
      assertEquals("}4hPAzzZ;~Zv..snCp", sQLSyntaxErrorException7.getMessage());
      
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      assertEquals(8, sQLSyntaxErrorExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, class0);
      assertEquals(8, sQLSyntaxErrorExceptionArray0.length);
      assertEquals(8, sQLSyntaxErrorExceptionArray1.length);
      assertFalse(sQLSyntaxErrorExceptionArray1.equals((Object)sQLSyntaxErrorExceptionArray0));
      assertNotSame(sQLSyntaxErrorExceptionArray0, sQLSyntaxErrorExceptionArray1);
      assertNotSame(sQLSyntaxErrorExceptionArray1, sQLSyntaxErrorExceptionArray0);
      assertNotNull(sQLSyntaxErrorExceptionArray1);
      
      MapIterator<PriorityQueue<SQLSyntaxErrorException>, Class<SQLNonTransientException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) orderedIterator0, (long) (-91), (-2241L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(instanceofPredicate0);
      assertNotNull(predicateTransformer0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Boolean boolean0 = predicateTransformer0.transform(properties0);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(properties0);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(properties0);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = predicateTransformer0.transform(properties0);
      assertTrue(boolean3);
      assertNotNull(boolean3);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = predicateTransformer0.transform(properties0);
      assertTrue(boolean4);
      assertNotNull(boolean4);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = predicateTransformer0.transform(properties0);
      assertTrue(boolean5);
      assertNotNull(boolean5);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      booleanArray0[5] = boolean5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(booleanArray0, 279, 586);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertTrue(boolean0);
      
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "}4hPAzzZ;~Zv..snCp");
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals("", sQLSyntaxErrorException1.getMessage());
      assertEquals("}4hPAzzZ;~Zv..snCp", sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException1.toString());
      
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("%51B|hww=wU2Q}q", sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertNotNull(sQLSyntaxErrorException2);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("%51B|hww=wU2Q}q", sQLSyntaxErrorException2.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: %51B|hww=wU2Q}q", sQLSyntaxErrorException2.toString());
      
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException();
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertNotNull(sQLSyntaxErrorException3);
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException3.toString());
      assertNull(sQLSyntaxErrorException3.getMessage());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("%51B|hww=wU2Q}q");
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException1));
      assertNotNull(sQLSyntaxErrorException4);
      assertNull(sQLSyntaxErrorException4.getSQLState());
      assertEquals("%51B|hww=wU2Q}q", sQLSyntaxErrorException4.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: %51B|hww=wU2Q}q", sQLSyntaxErrorException4.toString());
      assertEquals(0, sQLSyntaxErrorException4.getErrorCode());
      
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("", sQLSyntaxErrorException4);
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException2));
      assertNotNull(sQLSyntaxErrorException5);
      assertNull(sQLSyntaxErrorException4.getSQLState());
      assertEquals("%51B|hww=wU2Q}q", sQLSyntaxErrorException4.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: %51B|hww=wU2Q}q", sQLSyntaxErrorException4.toString());
      assertEquals(0, sQLSyntaxErrorException4.getErrorCode());
      assertNull(sQLSyntaxErrorException5.getSQLState());
      assertEquals("", sQLSyntaxErrorException5.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException5.toString());
      assertEquals(0, sQLSyntaxErrorException5.getErrorCode());
      
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("}4hPAzzZ;~Zv..snCp", "B~;kN9C&<PfAhYj,C<");
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException2));
      assertNotNull(sQLSyntaxErrorException6);
      assertEquals(0, sQLSyntaxErrorException6.getErrorCode());
      assertEquals("B~;kN9C&<PfAhYj,C<", sQLSyntaxErrorException6.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: }4hPAzzZ;~Zv..snCp", sQLSyntaxErrorException6.toString());
      assertEquals("}4hPAzzZ;~Zv..snCp", sQLSyntaxErrorException6.getMessage());
      
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException6;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      assertEquals(8, sQLSyntaxErrorExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, class0);
      assertEquals(8, sQLSyntaxErrorExceptionArray0.length);
      assertEquals(8, sQLSyntaxErrorExceptionArray1.length);
      assertFalse(sQLSyntaxErrorExceptionArray1.equals((Object)sQLSyntaxErrorExceptionArray0));
      assertNotSame(sQLSyntaxErrorExceptionArray0, sQLSyntaxErrorExceptionArray1);
      assertNotSame(sQLSyntaxErrorExceptionArray1, sQLSyntaxErrorExceptionArray0);
      assertNotNull(sQLSyntaxErrorExceptionArray1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null, 1, 100);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (Throwable) null);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation((-3498), true, true, (-3498), (-3498), sQLFeatureNotSupportedException0);
      assertNotNull(dataTruncation0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-3498), true, true, 0, (-3498), dataTruncation0);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertNotNull(dataTruncation1);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("01004", dataTruncation1.getSQLState());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      
      dataTruncationArray0[1] = dataTruncation1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 0, 14);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("PC]~v{5j&j^Nm", "u*uZh,_0.ii4gPr", (-1), sQLTransientConnectionException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("u*uZh,_0.ii4gPr", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("PC]~v{5j&j^Nm", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: PC]~v{5j&j^Nm", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals((-1), sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      sQLTransientConnectionException0.addSuppressed(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("u*uZh,_0.ii4gPr", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("PC]~v{5j&j^Nm", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: PC]~v{5j&j^Nm", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals((-1), sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      sQLTransientConnectionException0.printStackTrace();
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      assertNotNull(listIterator0);
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      ResettableListIterator<ArrayDeque<SQLNonTransientConnectionException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLNonTransientConnectionException>>) resettableListIterator0, (Predicate<? super ArrayDeque<SQLNonTransientConnectionException>>) predicate0);
      assertTrue(boolean0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      ResettableListIterator<DataTruncation> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator1);
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableListIterator1);
      assertNotNull(iterator0);
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashtable0.put("", clientInfoStatus0);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(sQLClientInfoException0);
      assertNotNull(iterator1);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      sQLExceptionArray0[0] = (SQLException) sQLClientInfoException0;
      sQLExceptionArray0[1] = (SQLException) sQLClientInfoException0;
      sQLExceptionArray0[2] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[3] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[4] = (SQLException) sQLInvalidAuthorizationSpecException0;
      sQLExceptionArray0[5] = (SQLException) sQLInvalidAuthorizationSpecException0;
      sQLExceptionArray0[6] = (SQLException) sQLTransientConnectionException0;
      sQLExceptionArray0[7] = (SQLException) sQLClientInfoException0;
      sQLExceptionArray0[8] = (SQLException) sQLTransientConnectionException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 2735, 2735);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "ny4", (-1));
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertEquals("ny4", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals((-1), sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException1.toString());
      
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("");
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLIntegrityConstraintViolationException2);
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException2.toString());
      assertEquals("", sQLIntegrityConstraintViolationException2.getMessage());
      
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("");
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLIntegrityConstraintViolationException3);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException3.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException3.getMessage());
      
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "suffix may not be null");
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException1));
      assertNotNull(sQLIntegrityConstraintViolationException4);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException4.toString());
      assertEquals("", sQLIntegrityConstraintViolationException4.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException4.getErrorCode());
      assertEquals("suffix may not be null", sQLIntegrityConstraintViolationException4.getSQLState());
      
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("Y>4\"|G,Y^xYxABf%#;h", "", (-1));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException3));
      assertNotNull(sQLIntegrityConstraintViolationException5);
      assertEquals("Y>4\"|G,Y^xYxABf%#;h", sQLIntegrityConstraintViolationException5.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Y>4\"|G,Y^xYxABf%#;h", sQLIntegrityConstraintViolationException5.toString());
      assertEquals((-1), sQLIntegrityConstraintViolationException5.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException5.getSQLState());
      
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "ny4", 2809, sQLIntegrityConstraintViolationException3);
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException3.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException3.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(2809, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("ny4", sQLNonTransientConnectionException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("ny4", "jNF)%DjJ,DbR", (-1), sQLNonTransientConnectionException0);
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLIntegrityConstraintViolationException6);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException3.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException3.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(2809, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("ny4", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("ny4", sQLIntegrityConstraintViolationException6.getMessage());
      assertEquals((-1), sQLIntegrityConstraintViolationException6.getErrorCode());
      assertEquals("jNF)%DjJ,DbR", sQLIntegrityConstraintViolationException6.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ny4", sQLIntegrityConstraintViolationException6.toString());
      
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException3);
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLIntegrityConstraintViolationException7);
      assertEquals(0, sQLIntegrityConstraintViolationException7.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException7.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException7.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException7.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException3.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException3.getMessage());
      
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException8 = new SQLIntegrityConstraintViolationException("Y>4\"|G,Y^xYxABf%#;h", (String) null, 4);
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException7));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException8.equals((Object)sQLIntegrityConstraintViolationException6));
      assertNotNull(sQLIntegrityConstraintViolationException8);
      assertNull(sQLIntegrityConstraintViolationException8.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Y>4\"|G,Y^xYxABf%#;h", sQLIntegrityConstraintViolationException8.toString());
      assertEquals(4, sQLIntegrityConstraintViolationException8.getErrorCode());
      assertEquals("Y>4\"|G,Y^xYxABf%#;h", sQLIntegrityConstraintViolationException8.getMessage());
      
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException8;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      assertEquals(9, sQLIntegrityConstraintViolationExceptionArray0.length);
      assertNotNull(objectArrayListIterator0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(9, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayListIterator0);
      assertEquals(9, sQLIntegrityConstraintViolationExceptionArray0.length);
      assertNotNull(listIterator0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(9, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("org.apache.commons.collections4.functors.NotPredicate", "", (-2182));
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("", sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("org.apache.commons.collections4.functors.NotPredicate", "<Fa d", sQLDataException1);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("", "org.apache.commons.collections4.functors.NotPredicate");
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("", "org.apache.commons.collections4.functors.NotPredicate", 0);
      sQLDataExceptionArray0[5] = sQLDataException5;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 32, 10);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "mi^Q";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("mi^Q");
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }
}
