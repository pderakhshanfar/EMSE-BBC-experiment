/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 11:05:36 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.offerFirst(integer0);
      Integer integer1 = new Integer(1);
      linkedList0.push(integer1);
      Integer integer2 = new Integer(0);
      linkedList0.push(integer2);
      linkedList0.pollLast();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList0);
      OrderedMapIterator<Locale.LanguageRange, TreeSet<SQLNonTransientConnectionException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.LanguageRange, TreeSet<SQLNonTransientConnectionException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.LanguageRange, TreeSet<SQLNonTransientConnectionException>>(orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.LanguageRange>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends Locale.LanguageRange>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "5*\"8?L&9Q~=u";
      IteratorUtils.getIterator("5*\"8?L&9Q~=u");
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 8);
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      Iterator<SQLTransactionRollbackException> iterator0 = hashSet0.iterator();
      iteratorArray0[0] = iterator0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) hashSet0);
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) resettableIterator1;
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0, class0);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.contains((Iterator<Properties>) resettableIterator0, (Object) properties1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.getIterator("5*\"8^L&9Q~=u");
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(vector0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      vector0.add(sQLIntegrityConstraintViolationException0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) loopingListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "@K-Blm@|@oLoa:y", "@K-Blm@|@oLoa:y", "@K-Blm@|@oLoa:y");
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Class<Object> class0 = Object.class;
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("The object and transformer map must not be null", "A{3}h^0+eiF[Nqm,3", 10);
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) arrayDeque0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.getIterator("4");
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("4");
      DataTruncation dataTruncation0 = new DataTruncation((-169), true, true, (-1106), (-1106), sQLTransientConnectionException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(3855, true, true, 0, (-169), sQLTransientConnectionException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(300, true, true, (-776), 903, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-1106), true, true, (-46), 78);
      dataTruncationArray0[3] = dataTruncation3;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Parameter types must match the arguments", "", dataTruncation3);
      DataTruncation dataTruncation4 = new DataTruncation(1925, true, true, 78, 1, sQLTimeoutException0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-46), true, true, (-5263), (-2914));
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(0, true, true, 92, 11, sQLTimeoutException0);
      dataTruncationArray0[6] = dataTruncation6;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>((Predicate<? super SQLException>) null, transformer0, transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) resettableIterator0, (Transformer<? super DataTruncation, String>) ifTransformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 2;
      Integer integer0 = new Integer(2);
      IteratorUtils.getIterator(integer0);
      int int1 = 1;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("}[<|", "@%NJc7vqG'yi");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("@%NJc7vqG'yi", "@%NJc7vqG'yi", 1, hashMap0, sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("@%NJc7vqG'yi", "@%NJc7vqG'yi", 2, sQLClientInfoException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) singletonListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) listIterator0, 2);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "}[<|";
      stringArray0[1] = "}[<|";
      stringArray0[2] = "}[<|";
      stringArray0[3] = "@%NJc7vqG'yi";
      stringArray0[4] = "}[<|";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      IteratorUtils.unmodifiableListIterator((ListIterator<String>) loopingListIterator0);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.Category, Properties>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>((SQLNonTransientException) null, true);
      Factory<SQLInvalidAuthorizationSpecException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLNonTransientException, SQLInvalidAuthorizationSpecException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLInvalidAuthorizationSpecException>) factory0);
      Predicate<SQLNonTransientException> predicate0 = TruePredicate.truePredicate();
      Predicate<SQLNonTransientException> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0, (Predicate<? super SQLNonTransientException>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) singletonIterator0, (Predicate<? super SQLNonTransientException>) predicate1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      sQLWarning0.getLocalizedMessage();
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      IteratorUtils.get((Iterator<Transformer<EnumSet, String>>) singletonListIterator0, 0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("^9(dw%bjjmzm.S");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      SQLWarning sQLWarning1 = new SQLWarning("a7P", "^9(dw%bjjmzm.S", 277, sQLWarning0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLWarning1, (Equator<Object>) defaultEquator0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 9);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("8$Z_-ryW", classArray0, closureArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(invokerTransformer0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(8, transformerClosure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, forClosure0);
      closureArray0[0] = (Closure<Object>) ifClosure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      closureArray0[1] = (Closure<Object>) chainedClosure0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      InstantiateFactory<SQLClientInfoException> instantiateFactory0 = new InstantiateFactory<SQLClientInfoException>(class1);
      Transformer<Object, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) instantiateFactory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      closureArray0[2] = closure0;
      TransformerClosure<Object> transformerClosure1 = new TransformerClosure<Object>(transformer0);
      closureArray0[3] = (Closure<Object>) transformerClosure1;
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) closureArray0[1], true);
      closureArray0[4] = closure1;
      ChainedClosure<Object> chainedClosure1 = new ChainedClosure<Object>(closureArray0);
      closureArray0[5] = (Closure<Object>) chainedClosure1;
      Closure<Object> closure2 = ForClosure.forClosure(1562, (Closure<? super Object>) forClosure0);
      closureArray0[6] = closure2;
      Closure<Object> closure3 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) chainedClosure1, true);
      closureArray0[7] = closure3;
      Closure<Object> closure4 = ExceptionClosure.exceptionClosure();
      closureArray0[8] = closure4;
      Closure<Object> closure5 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      Closure<Object> closure6 = IfClosure.ifClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) closure5);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) objectArrayIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) closure6);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("' out of bounds for size '");
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.singletonIterator((SQLWarning) null);
      IteratorUtils.get((Iterator<Transformer<EnumSet, String>>) resettableIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.getIterator("");
      int[] intArray0 = new int[8];
      intArray0[0] = 1341;
      intArray0[1] = (-3585);
      intArray0[2] = (-6514);
      intArray0[3] = 10;
      intArray0[4] = 115;
      intArray0[5] = 108;
      intArray0[6] = 606;
      intArray0[7] = 1437;
      SQLException sQLException0 = new SQLException("", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      IteratorUtils.singletonListIterator(batchUpdateException0);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      vector0.add(iIOMetadataNode0);
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(vector0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<IIOMetadataNode>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "z+EQNPa3Y[3", (-949));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      DataTruncation dataTruncation0 = new DataTruncation(61, false, false, (-1), 61, batchUpdateException0);
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.singletonIterator((SQLWarning) dataTruncation0);
      IteratorUtils.get((Iterator<Transformer<EnumSet, String>>) resettableIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, class0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(17);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2174));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1897));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2174));
      integerArray0[4] = integer4;
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Predicate<SQLException>>) null, (Transformer<? super Predicate<SQLException>, String>) transformer0, "prefix may not be null", "MF)#RFGl_Qx.(", "prefix may not be null");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 9);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      predicateArray0[0] = predicate0;
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<SQLException> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) transformer0);
      predicateArray0[1] = predicate1;
      Predicate<SQLException> predicate2 = OrPredicate.orPredicate((Predicate<? super SQLException>) predicate1, (Predicate<? super SQLException>) predicate0);
      predicateArray0[2] = predicate2;
      Predicate<SQLException> predicate3 = UniquePredicate.uniquePredicate();
      predicateArray0[3] = predicate3;
      Predicate<SQLException> predicate4 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      predicateArray0[4] = predicate4;
      Predicate<SQLException> predicate5 = TruePredicate.truePredicate();
      predicateArray0[5] = predicate5;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLException sQLException0 = new SQLException("", sQLSyntaxErrorException0);
      Predicate<SQLException> predicate6 = EqualPredicate.equalPredicate(sQLException0);
      predicateArray0[6] = predicate6;
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLSyntaxErrorException0);
      predicateArray0[7] = (Predicate<SQLException>) equalPredicate0;
      Hashtable<Object, BatchUpdateException> hashtable0 = new Hashtable<Object, BatchUpdateException>();
      Transformer<SQLException, BatchUpdateException> transformer1 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends BatchUpdateException>) hashtable0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer1, predicateArray0[7]);
      predicateArray0[8] = (Predicate<SQLException>) transformedPredicate0;
      ObjectArrayListIterator<Predicate<SQLException>> objectArrayListIterator0 = new ObjectArrayListIterator<Predicate<SQLException>>(predicateArray0);
      Transformer<Object, String> transformer2 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Predicate<SQLException>>) objectArrayListIterator0, (Transformer<? super Predicate<SQLException>, String>) transformer2, "", "", "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionTransformer invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OrderedIterator<Predicate<SQLException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Predicate<SQLException>>) orderedIterator0, (Transformer<? super Predicate<SQLException>, String>) transformer0, ")", "Index: ", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("w;xq20", "w;xq20", 1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("$a", sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("$a", sQLTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", "", (-1301));
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 1, (-1301));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 2);
      Predicate<SQLException> predicate0 = new UniquePredicate<SQLException>();
      predicateArray0[0] = predicate0;
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      predicateArray0[1] = predicate1;
      ObjectArrayIterator<Predicate<SQLException>> objectArrayIterator0 = new ObjectArrayIterator<Predicate<SQLException>>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Predicate<SQLException>>) objectArrayIterator0, (Transformer<? super Predicate<SQLException>, String>) null, "org.apache.commons.collections4.FunctorException", "", "~QH9+d,z8OT");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("+SCyK`_15FTcNkA", sQLTransactionRollbackException0);
      sQLSyntaxErrorException0.setNextException(sQLTransactionRollbackException0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 7);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[6] = class6;
      InvokerTransformer<SQLException, SQLSyntaxErrorException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLSyntaxErrorException>("", classArray0, classArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) invokerTransformer0);
      Class<SQLSyntaxErrorException> class7 = SQLSyntaxErrorException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) iterator0, class7);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method '' on 'class java.sql.SQLSyntaxErrorException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<Boolean> class0 = Boolean.class;
      SingletonIterator<Class<Boolean>> singletonIterator0 = new SingletonIterator<Class<Boolean>>(class0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      Class<String> class2 = String.class;
      classArray0[1] = class2;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Iterator must not be null", classArray0, classArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Class<Boolean>>) singletonIterator0, (Transformer<? super Class<Boolean>, String>) invokerTransformer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'Iterator must not be null' on 'class java.lang.Class' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      MapIterator<Predicate<SQLException>, Iterator<Iterator<SQLDataException>>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Predicate<SQLException>>) mapIterator0, (Transformer<? super Predicate<SQLException>, String>) transformer0, "Iterator getKey() can only be called after next() and before remove()", "", "");
      Integer integer0 = new Integer(8);
      int int0 = 967;
      DataTruncation dataTruncation0 = new DataTruncation(967, true, true, 8, 967);
      IteratorUtils.getIterator(dataTruncation0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<Iterator<SQLDataException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator((BatchUpdateException) null);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) zippingIterator0, 408L);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) boundedIterator0, 128);
      IteratorUtils.loopingListIterator(list0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Integer integer0 = new Integer(2176);
      Integer integer1 = new Integer(100);
      Integer integer2 = new Integer(68);
      Integer integer3 = new Integer(2);
      Integer integer4 = new Integer((-1897));
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer2;
      integerArray0[1] = integer4;
      integerArray0[2] = integer1;
      integerArray0[3] = integer4;
      integerArray0[4] = integer2;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Integer>) resettableIterator0, (Transformer<? super Integer, String>) transformer0, "a3`7.yK|P8Rs|^.", "NodeList must not be null", "NodeList must not be null");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.getIterator("W");
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(stack0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-1);
      DataTruncation dataTruncation0 = new DataTruncation(2702, false, true, (byte)10, (byte)10);
      dataTruncation0.getNextWarning();
      DataTruncation dataTruncation1 = new DataTruncation((byte)10, false, false, (byte)10, 2702, (Throwable) null);
      stack0.add(dataTruncation1);
      byteArray0[3] = (byte)10;
      byteArray0[3] = (byte)8;
      byteArray0[5] = (byte) (-36);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Transformer<EnumSet, String>>) loopingListIterator0, 576);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Vector$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator0, (Transformer<? super BatchUpdateException, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("ur", "ur", true);
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IteratorUtils.getIterator((Object) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-686), 90);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("' Y");
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      IteratorUtils.get((Iterator<Transformer<EnumSet, String>>) singletonListIterator0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) iterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLDataException>[] iteratorArray1 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLClientInfoException0);
      DefaultEquator<SQLClientInfoException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(sQLClientInfoException0, (Equator<SQLClientInfoException>) defaultEquator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, class0);
      int int0 = 128;
      IteratorUtils.toList((Iterator<? extends SQLException>) mapIterator0, 128);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      IteratorUtils.singletonIterator(sQLTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "org.apache.commons.collections4.iterators.IteratorChain", 1978, (int[]) null, sQLTransientException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      IteratorUtils.singletonIterator(sQLTransientException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      FalsePredicate.falsePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, 32, 32);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) resettableIterator0);
      EmptyOrderedIterator.emptyOrderedIterator();
      FalsePredicate.falsePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Hashtable<String, SQLDataException> hashtable0 = new Hashtable<String, SQLDataException>();
      MapTransformer.mapTransformer((Map<? super String, ? extends SQLDataException>) hashtable0);
      ResettableIterator<Stack<SQLClientInfoException>> resettableIterator0 = IteratorUtils.singletonIterator((Stack<SQLClientInfoException>) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<Stack<SQLClientInfoException>>) resettableIterator0, (Predicate<? super Stack<SQLClientInfoException>>) predicate0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) priorityQueue0);
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|l@Nm,?=(_[X<=");
      MapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, class0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<ServiceLoader<ArrayDeque>>) mapIterator0, (Transformer<? super ServiceLoader<ArrayDeque>, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.emptyOrderedMapIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) resettableIterator0);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) orderedIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("e");
      ResettableIterator<StringTokenizer> resettableIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = predicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      predicateArray0[1] = (Predicate<Object>) orPredicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate2, (Closure<? super Object>) closure0, false);
      IteratorUtils.apply((Iterator<StringTokenizer>) resettableIterator0, (Closure<? super StringTokenizer>) closure1);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) priorityQueue0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("mxKp", "!qXJ", false);
      IteratorUtils.singletonIterator(stringTokenizer0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate1, predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = predicate0;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate2, (Closure<? super Object>) closure0, false);
      IteratorUtils.apply(iterator0, (Closure<? super StringTokenizer>) closure1);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) priorityQueue0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      IteratorUtils.singletonIterator(stringTokenizer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      predicateArray0[1] = (Predicate<Object>) orPredicate0;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<?>) stringTokenizer0, (Collection<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, class0);
      IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, false);
      WhileClosure.whileClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) whileClosure0, true);
      IteratorUtils.apply((Iterator<StringTokenizer>) null, (Closure<? super StringTokenizer>) closure0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) priorityQueue0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Iterator<SQLDataException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<StringTokenizer>) orderedMapIterator0, (Predicate<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedMapIterator<Locale.Category, ServiceLoader<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, ServiceLoader<Properties>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, ServiceLoader<Properties>>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) abstractOrderedMapIteratorDecorator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("sfu^*'3w=tPma^Q1P$", "TK`PMNy#H?Pb Ar", 0);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<SQLException> predicate1 = NotPredicate.notPredicate((Predicate<? super SQLException>) predicate0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) singletonListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Array class must not be null");
      Iterator<String> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Hashtable<String, SQLDataException> hashtable0 = new Hashtable<String, SQLDataException>();
      Transformer<String, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super String, ? extends SQLDataException>) hashtable0);
      Iterator<String> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) null, (Transformer<? super String, ? extends SQLDataException>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Hashtable<String, SQLDataException> hashtable0 = new Hashtable<String, SQLDataException>();
      Transformer<String, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super String, ? extends SQLDataException>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends String>) orderedMapIterator0, (Transformer<? super String, ? extends SQLDataException>) transformer0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "prefix may not be null");
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) singletonListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("4T-T", "4T-T");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) null, (-674L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      Integer integer0 = new Integer(100);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("p", (Class<?>[]) null, (Object[]) null);
      IfTransformer<Integer, Integer> ifTransformer0 = new IfTransformer<Integer, Integer>(uniquePredicate0, invokerTransformer0, invokerTransformer0);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) ifTransformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.size(iterator0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'p' on 'class java.lang.Integer' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Hashtable<String, SQLDataException> hashtable0 = new Hashtable<String, SQLDataException>();
      Transformer<String, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super String, ? extends SQLDataException>) hashtable0);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) listIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      IteratorUtils.transformedIterator((Iterator<? extends String>) iterator0, (Transformer<? super String, ? extends SQLDataException>) transformer0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, 2607);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("}2ZF*N");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.matchesAll((Iterator<Stack<SQLClientInfoException>>) null, (Predicate<? super Stack<SQLClientInfoException>>) notPredicate0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) vector0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      IteratorUtils.emptyMapIterator();
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) properties0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Node node0 = iIOMetadataNode0.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      Iterator<Transformer<SQLTransientException, String>> iterator0 = null;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate2 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<Transformer<SQLTransientException, String>>) null, (Predicate<? super Transformer<SQLTransientException, String>>) predicate2);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[1];
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      stringTokenizerArray0[0] = stringTokenizer0;
      int int0 = 100;
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(2030, false, false, 2030, 2030);
      dataTruncation0.getNextWarning();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      ResettableIterator<Stack<SQLClientInfoException>> resettableIterator0 = IteratorUtils.singletonIterator((Stack<SQLClientInfoException>) null);
      IteratorUtils.matchesAll((Iterator<Stack<SQLClientInfoException>>) resettableIterator0, (Predicate<? super Stack<SQLClientInfoException>>) identityPredicate0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) treeSet0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator1);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(object0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) null, 0L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      OrderedMapIterator<Stack<SQLClientInfoException>, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Stack<SQLClientInfoException>, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Stack<SQLClientInfoException>, SQLNonTransientException>(orderedMapIterator0);
      IteratorUtils.matchesAll((Iterator<Stack<SQLClientInfoException>>) abstractOrderedMapIteratorDecorator0, (Predicate<? super Stack<SQLClientInfoException>>) predicate0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) singletonListIterator0, (Iterator<?>) singletonListIterator0, (Iterator<?>) singletonListIterator0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(singletonListIterator0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<TreeSet<EnumSet>>) zippingIterator0, (Predicate<? super TreeSet<EnumSet>>) comparatorPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      OrderedMapIterator<Stack<SQLClientInfoException>, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Stack<SQLClientInfoException>, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Stack<SQLClientInfoException>, SQLNonTransientException>(orderedMapIterator0);
      IteratorUtils.matchesAll((Iterator<Stack<SQLClientInfoException>>) abstractOrderedMapIteratorDecorator0, (Predicate<? super Stack<SQLClientInfoException>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Properties, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedMapIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) hashSet0);
      Iterator<Properties> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) iterator1, (Transformer<? super Properties, ? extends IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IteratorUtils.emptyIterator();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientConnectionException>) hashtable0);
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SkippingIterator<Predicate<Object>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Predicate<Object>>) resettableListIterator0, 0L);
      ZippingIterator<Predicate<Object>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>) skippingIterator0, (Iterator<? extends Predicate<Object>>) skippingIterator0, (Iterator<? extends Predicate<Object>>) skippingIterator0);
      Class<String> class0 = String.class;
      Factory<String> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.toString((Iterator<Predicate<Object>>) resettableListIterator0, (Transformer<? super Predicate<Object>, String>) transformer0, "InstantiateTransformer: Constructor must be public", "%f`pQ>9A#", "~]g?~'P(");
      ZippingIterator<Object> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<?>) zippingIterator0, (Iterator<?>) zippingIterator0, (Iterator<?>) skippingIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.toArray((Iterator<?>) zippingIterator1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableListIterator<Boolean> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<Boolean>) resettableListIterator0);
      IteratorUtils.emptyListIterator();
      Hashtable<Iterator<Closure<Object>>, Object> hashtable0 = new Hashtable<Iterator<Closure<Object>>, Object>(10);
      EntrySetMapIterator<Iterator<Closure<Object>>, Object> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<Closure<Object>>, Object>(hashtable0);
      Iterator<Closure<Object>> iterator0 = null;
      BiFunction<Object, Object, Properties> biFunction0 = (BiFunction<Object, Object, Properties>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        hashtable0.merge((Iterator<Closure<Object>>) null, (Object) null, biFunction0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Hashtable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLWarning sQLWarning0 = new SQLWarning("@cKJ");
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.singletonIterator(stringTokenizer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      predicateArray0[1] = (Predicate<Object>) orPredicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate2, (Closure<? super Object>) closure0, false);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<StringTokenizer>) resettableIterator0, (Closure<? super StringTokenizer>) closure1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      linkedList0.containsAll(hashSet0);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) zippingIterator0);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("3 &\"Nq(U/XsD");
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>();
      SingletonIterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>> singletonIterator0 = new SingletonIterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>(hashtable0, true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate.comparatorPredicate((Object) "3 &\"Nq(U/XsD", comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>) singletonIterator0, (Predicate<? super Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>) predicate0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      MapTransformer.mapTransformer((Map<? super SQLException, ? extends Boolean>) hashMap0);
      PredicateTransformer<SQLIntegrityConstraintViolationException> predicateTransformer0 = new PredicateTransformer<SQLIntegrityConstraintViolationException>(predicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("3 &\"Nq(U/XsD", ",M~I^I.SC>k", sQLRecoverableException0);
      predicateTransformer0.transform(sQLIntegrityConstraintViolationException0);
      ZippingIterator<Object> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<?>) orderedIterator0, (Iterator<?>) reverseListIterator0, (Iterator<?>) zippingIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashSet0);
      IteratorUtils.matchesAny((Iterator<Object>) zippingIterator1, (Predicate<? super Object>) predicate0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      OrderedMapIterator<StringTokenizer, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, String>(orderedMapIterator0);
      MapIterator<StringTokenizer, String> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, String>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<StringTokenizer>) mapIterator0, (Closure<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) orderedMapIterator0);
      IteratorUtils.toArray(iterator0);
      Hashtable<String, SQLDataException> hashtable0 = new Hashtable<String, SQLDataException>();
      Transformer<String, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super String, ? extends SQLDataException>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends String>) orderedMapIterator0, (Transformer<? super String, ? extends SQLDataException>) transformer0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      IteratorUtils.toArray(iterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray(iterator0);
      OrderedMapIterator<StringTokenizer, String> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, String>(orderedMapIterator1);
      IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, String>) orderedMapIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<StringTokenizer>) orderedMapIterator1, (Closure<? super StringTokenizer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      Hashtable<String, SQLDataException> hashtable0 = new Hashtable<String, SQLDataException>();
      Hashtable<Object, SQLDataException> hashtable1 = new Hashtable<Object, SQLDataException>();
      Transformer<String, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super String, ? extends SQLDataException>) hashtable1);
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("gJ`bvDKL?{?7%r");
      Iterator<SQLDataException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends String>) listIterator0, (Transformer<? super String, ? extends SQLDataException>) transformer0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      IteratorUtils.toArray(iterator0);
      MapIterator<SQLIntegrityConstraintViolationException, ArrayList<Properties>> mapIterator1 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, ArrayList<Properties>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, ArrayList<Properties>>(mapIterator1);
      IteratorUtils.toArray((Iterator<?>) abstractMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      linkedList0.containsAll(hashSet0);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) zippingIterator0);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("3 &\"Nq(U/XsD");
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>();
      SingletonIterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>> singletonIterator0 = new SingletonIterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>(hashtable0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLFeatureNotSupportedException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.getStackTrace();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate.comparatorPredicate((Object) "3 &\"Nq(U/XsD", comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) equalPredicate0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>) singletonIterator0, (Predicate<? super Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>) predicate0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<SQLException, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends Boolean>) hashMap0);
      PredicateTransformer<SQLIntegrityConstraintViolationException> predicateTransformer0 = new PredicateTransformer<SQLIntegrityConstraintViolationException>(predicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("3 &\"Nq(U/XsD", ",M~I^I.SC>Vk", sQLRecoverableException0);
      Boolean boolean0 = predicateTransformer0.transform(sQLIntegrityConstraintViolationException0);
      hashMap0.put(singletonIterator0, boolean0);
      TransformerPredicate<SQLNonTransientException> transformerPredicate0 = new TransformerPredicate<SQLNonTransientException>(transformer0);
      IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) orderedIterator0, (Object) transformerPredicate0);
      LinkedList<SQLTransactionRollbackException> linkedList1 = new LinkedList<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList1);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (-4081));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      linkedList0.containsAll(hashSet0);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      MapIterator<SQLDataException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<?>) reverseListIterator0, (Iterator<?>) mapIterator0, (Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, class0);
      IteratorUtils.emptyIterator();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<?>) null, (Collection<? super Object>) priorityQueue0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("|?o{\"", "|?o{\"", 0);
      DataTruncation dataTruncation0 = new DataTruncation(12, true, true, 12, 0, sQLNonTransientConnectionException0);
      vector0.add(dataTruncation0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      List<DataTruncation> list0 = new LinkedList<DataTruncation>();
      IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) orderedMapIterator0);
      IteratorUtils.toArray(iterator0);
      Hashtable<String, SQLDataException> hashtable0 = new Hashtable<String, SQLDataException>();
      Transformer<String, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super String, ? extends SQLDataException>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends String>) orderedMapIterator0, (Transformer<? super String, ? extends SQLDataException>) transformer0);
      MapIterator<SQLWarning, ServiceLoader<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) mapIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("kd]?wCg/eDIc=DE/", "kd]?wCg/eDIc=DE/");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      Stack<SQLClientInfoException>[] stackArray0 = (Stack<SQLClientInfoException>[]) Array.newInstance(Stack.class, 0);
      ResettableListIterator<Stack<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(stackArray0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(instanceofPredicate0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) predicateTransformer0);
      IteratorUtils.matchesAll((Iterator<Stack<SQLClientInfoException>>) resettableListIterator0, (Predicate<? super Stack<SQLClientInfoException>>) predicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Dk?|].~^v4cu!vXFC", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator", true);
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      IteratorUtils.isEmpty(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<String>) orderedMapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends Boolean>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      OrderedMapIterator<Stack<SQLClientInfoException>, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Stack<SQLClientInfoException>, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Stack<SQLClientInfoException>, SQLNonTransientException>(orderedMapIterator0);
      IteratorUtils.matchesAll((Iterator<Stack<SQLClientInfoException>>) abstractOrderedMapIteratorDecorator0, (Predicate<? super Stack<SQLClientInfoException>>) predicate0);
      String string0 = "Dk?|].~^v4cu!vXFC";
      EmptyListIterator.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Dk?|].~^v4cu!vXFC", "Dk?|].~^v4cu!vXFC", (Throwable) null);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) orderedMapIterator0);
      IteratorUtils.toArray(iterator0);
      Hashtable<String, SQLDataException> hashtable0 = new Hashtable<String, SQLDataException>();
      Transformer<String, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super String, ? extends SQLDataException>) hashtable0);
      IteratorUtils.transformedIterator((Iterator<? extends String>) orderedMapIterator0, (Transformer<? super String, ? extends SQLDataException>) transformer0);
      MapIterator<SQLWarning, ServiceLoader<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) mapIterator0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 3);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      String string0 = "kd]?wCg/eDI\\c=DE/";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("kd]?wCg/eDIc=DE/", "kd]?wCg/eDIc=DE/");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      int int0 = 1632;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("kd]?wCg/eDIc=DE/", "kd]?wCg/eDIc=DE/", 1632);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 1632, 1632);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      ListIterator<Boolean> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends Boolean>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      OrderedMapIterator<Predicate<Object>, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      IteratorUtils.matchesAny((Iterator<Object>) orderedIterator0, (Predicate<? super Object>) transformerPredicate0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, class0);
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>[] hashtableArray0 = (Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>[]) Array.newInstance(Hashtable.class, 5);
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>();
      hashtableArray0[0] = hashtable0;
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> hashtable1 = new Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>(hashtable0);
      hashtableArray0[1] = hashtable1;
      int int0 = 1761;
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> hashtable2 = new Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>(1761, 1947.0474F);
      hashtableArray0[2] = hashtable2;
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> hashtable3 = new Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>();
      hashtableArray0[3] = hashtable3;
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> hashtable4 = new Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>();
      hashtableArray0[4] = hashtable4;
      ObjectArrayIterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>> objectArrayIterator0 = new ObjectArrayIterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>(hashtableArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> hashtable5 = IteratorUtils.find((Iterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>) objectArrayIterator0, (Predicate<? super Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>) nullIsFalsePredicate0);
      ArrayIterator<LinkedHashSet<Object>> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<LinkedHashSet<Object>>(hashtable5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>();
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> hashtable1 = new Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>();
      SingletonIterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>> singletonIterator0 = new SingletonIterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>(hashtable1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashtable0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) equalPredicate0);
      IteratorUtils.find((Iterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>) singletonIterator0, (Predicate<? super Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>) predicate0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, 3428, (-599));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) arrayList0);
      IteratorUtils.emptyOrderedIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, (-2428), (-4081));
      dataTruncation0.printStackTrace();
      IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) null, (Object) dataTruncation0);
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>(dataTruncation0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MapIterator<Stack<SQLClientInfoException>, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLWarning sQLWarning0 = new SQLWarning("ListIterator must not be null", "", sQLInvalidAuthorizationSpecException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLWarning0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) predicateArray0[0], (Predicate<? super Object>) predicateArray0[0]);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) null);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<Stack<SQLClientInfoException>>) mapIterator0, (Predicate<? super Stack<SQLClientInfoException>>) predicate2);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[9];
      StringTokenizer stringTokenizer0 = new StringTokenizer("Dk?|].~^v4cu!vXFC", "Dk?|].~^v4cu!vXFC", true);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "ListIterator must not be null", false);
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("UlIxn{Zow");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("ERpk|g& l0", "ERpk|g& l0");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("UlIxn{Zow", "0DP16mzdT?", false);
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("?9v", "ERpk|g& l0", false);
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer("ERpk|g& l0", "UlIxn{Zow");
      stringTokenizerArray0[6] = stringTokenizer6;
      StringTokenizer stringTokenizer7 = new StringTokenizer("UlIxn{Zow", "<O{T");
      stringTokenizerArray0[7] = stringTokenizer7;
      StringTokenizer stringTokenizer8 = new StringTokenizer("?9v", "Array class must not be null");
      stringTokenizerArray0[8] = stringTokenizer8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, 1261);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<?>) mapIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLException sQLException0 = new SQLException("", "");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 1882, sQLSyntaxErrorException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableListIterator0);
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) arrayDeque0);
      IteratorUtils.unmodifiableIterator(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientConnectionException>) hashtable0);
      ResettableListIterator<Predicate<Object>> resettableListIterator1 = IteratorUtils.emptyListIterator();
      IteratorUtils.skippingIterator((Iterator<Predicate<Object>>) resettableListIterator1, 0L);
      MapIterator<DataTruncation, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) mapIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, class0);
      IteratorUtils.emptyIterator();
      String string0 = null;
      Class<SQLDataException>[] classArray0 = null;
      Iterator<Predicate<Object>> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>) null, (Iterator<? extends Predicate<Object>>) null, (Iterator<? extends Predicate<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      Object object0 = new Object();
      IteratorUtils.getIterator("");
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[7];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 1);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLDataException sQLDataException0 = new SQLDataException("", "UASJcuq*xk-o#E|4J", 1);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLDataException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLIntegrityConstraintViolationException0);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLDataException sQLDataException1 = new SQLDataException("d4", sQLSyntaxErrorException0);
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLDataException1;
      IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) zippingIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      SQLWarning sQLWarning0 = new SQLWarning("e {^.CdC50", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("*<b", sQLWarning0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      IteratorUtils.singletonIterator((SQLTransientException) sQLTimeoutException0);
      int int0 = 91;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Transformer<EnumSet, String>>) null, 71);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) zippingIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      Object object0 = new Object();
      IteratorUtils.getIterator(reverseListIterator0);
      ArrayIterator<SQLDataException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLDataException>(reverseListIterator0, 183);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) zippingIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      SQLWarning sQLWarning0 = new SQLWarning("e {^.CdC50", "");
      Iterator<SQLException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLException>) iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) iterator1, 91);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[0] = sQLDataException1;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      IteratorUtils.isEmpty(resettableIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = EmptyIterator.emptyIterator();
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(list0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      Hashtable<SQLNonTransientConnectionException, Stack<Locale.Category>> hashtable0 = new Hashtable<SQLNonTransientConnectionException, Stack<Locale.Category>>();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = hashtable0.keys();
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      IteratorUtils.toArray(iterator1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("xe|I&\u0007<l{H");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("MapIterator[");
      DataTruncation dataTruncation0 = new DataTruncation(1146, false, true, (-1), 90, sQLFeatureNotSupportedException0);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 90, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) zippingIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      SQLWarning sQLWarning0 = new SQLWarning("e {^.CdC50", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("*<b", sQLWarning0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLInvalidAuthorizationSpecException0);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientException0);
      int int0 = 91;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Transformer<EnumSet, String>>) resettableIterator0, 91);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 90
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) priorityQueue0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) orderedIterator0, (Object) sQLTransactionRollbackException0);
      LinkedList<SQLTransactionRollbackException> linkedList1 = new LinkedList<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList1);
      linkedList1.add(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, 100);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      IteratorUtils.isEmpty(resettableListIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("ListIterator must not be null");
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find((Iterator<LinkedHashSet<SQLInvalidAuthorizationSpecException>>) null, (Predicate<? super LinkedHashSet<SQLInvalidAuthorizationSpecException>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<ArrayList<LinkedHashSet>, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedMapIterator0, (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("^", "^");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("^", "^", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("^", "^", (-2449));
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0, class0);
      IteratorUtils.emptyIterator();
      MapIterator<DataTruncation, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) mapIterator0, (Iterator<? extends DataTruncation>) mapIterator0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      Object object0 = new Object();
      IteratorUtils.getIterator(hashtable0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null, 100, sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, 58);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) zippingIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      SQLException sQLException0 = new SQLException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "NodeList must not be null", sQLException0);
      SQLWarning sQLWarning0 = new SQLWarning("", "NodeList must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("db", sQLException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.singletonIterator(sQLTransientException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<Transformer<EnumSet, String>>) iterator0, (-1));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index cannot be negative: -1
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) arrayList0);
      Object object0 = new Object();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator(iIOMetadataNode0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "", 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      HashMap<Object, SQLNonTransientConnectionException> hashMap0 = new HashMap<Object, SQLNonTransientConnectionException>();
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientConnectionException>) hashMap0);
      ArrayList<Predicate<Object>> arrayList1 = new ArrayList<Predicate<Object>>();
      HashSet<Predicate<SQLException>> hashSet0 = new HashSet<Predicate<SQLException>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) hashSet0);
      TransformedPredicate.transformedPredicate((Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>((Predicate<? super SQLNonTransientException>) null);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyIterator();
      MapIterator<DataTruncation, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) mapIterator0, (Iterator<? extends DataTruncation>) mapIterator0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>();
      SingletonIterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>> singletonIterator0 = new SingletonIterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>(hashtable0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) iterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>) singletonIterator0, (Predicate<? super Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>) predicate1);
      IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) orderedIterator0, (Object) null);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (-4081));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>[] hashtableArray0 = (Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>[]) Array.newInstance(Hashtable.class, 2);
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>();
      hashtableArray0[0] = hashtable0;
      Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> hashtable1 = new Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>();
      hashtableArray0[1] = hashtable1;
      ResettableIterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>> resettableIterator0 = IteratorUtils.arrayIterator(hashtableArray0);
      IteratorUtils.find((Iterator<Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>) resettableIterator0, (Predicate<? super Hashtable<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>>) predicate0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<SQLException, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends Boolean>) hashMap0);
      PredicateTransformer<SQLIntegrityConstraintViolationException> predicateTransformer0 = new PredicateTransformer<SQLIntegrityConstraintViolationException>(predicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("transformer may not be null", "", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("iterator", "\"_f|NkqD+\"~)|R'%-.", sQLTransactionRollbackException0);
      Boolean boolean0 = predicateTransformer0.transform(sQLIntegrityConstraintViolationException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("transformer may not be null", "transformer may not be null", (-22), (Throwable) null);
      hashMap0.put(sQLTransientConnectionException0, boolean0);
      TransformerPredicate<SQLNonTransientException> transformerPredicate0 = new TransformerPredicate<SQLNonTransientException>(transformer0);
      ArrayIterator<SQLSyntaxErrorException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLSyntaxErrorException>((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      IteratorUtils.isEmpty(resettableListIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("ListIterator must not be null");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 31, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      vector0.add((DataTruncation) null);
      IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientConnectionException>) hashtable0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<SQLNonTransientException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) arrayList0);
      Predicate<SQLNonTransientException> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0, (Predicate<? super SQLNonTransientException>) predicate0);
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate1);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, (-752), (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 100);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLRecoverableException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("org.apache.commons.collections4.iterators.CollatingIterator", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException2;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException1;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<Object, SQLIntegrityConstraintViolationException>((String) null, classArray0, sQLTransactionRollbackExceptionArray0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(invokerTransformer0, (Predicate<? super SQLException>) null);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Predicate<? super SQLTransactionRollbackException>) transformedPredicate0);
      sQLTransactionRollbackException0.getStackTrace();
      BoundedIterator<SQLTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) resettableListIterator0, 0L);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) boundedIterator0, (Predicate<? super SQLTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OrderedMapIterator<ArrayList<LinkedHashSet>, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedMapIterator0, (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.find((Iterator<ServiceLoader<LinkedHashSet>>) orderedMapIterator0, (Predicate<? super ServiceLoader<LinkedHashSet>>) predicate1);
      IteratorUtils.isEmpty(orderedMapIterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "", hashtable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLClientInfoException0);
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      IteratorUtils.objectGraphIterator((SQLException) sQLTimeoutException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[6];
      SQLWarning sQLWarning0 = new SQLWarning("7MoZ*JP4H)L", "KKn'qrB", (-1));
      sQLWarningArray0[0] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("KKn'qrB", "8", sQLWarning0);
      sQLWarningArray0[1] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning();
      sQLWarningArray0[2] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning();
      sQLWarningArray0[3] = sQLWarning3;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) arrayList0);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) orderedIterator0, (Object) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException1;
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.emptyIterator();
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedHashSet0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Node must not be null", "", 8);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLException sQLException0 = new SQLException("", sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, 0, 11);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1185);
      SQLException sQLException0 = new SQLException("b[?", "prefix may not be null", 100);
      SQLTransientException sQLTransientException0 = new SQLTransientException("b[?", sQLException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("2P7BmG", "2P7BmG", sQLTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTimeoutException0);
      IteratorUtils.getIterator((Object) null);
      ResettableListIterator<Locale.Category> resettableListIterator0 = null;
//      try {
        resettableListIterator0 = new ArrayListIterator<Locale.Category>((-1185), (-1185));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, class0);
      ResettableIterator<ArrayList<Integer>> resettableIterator0 = IteratorUtils.emptyIterator();
      MapIterator<DataTruncation, StringTokenizer> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) mapIterator1, (Iterator<? extends DataTruncation>) mapIterator1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.emptyIterator();
      IteratorUtils.toListIterator((Iterator<?>) resettableIterator0);
      SQLException sQLException0 = new SQLException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLException0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Estimated size must be greater than 0", sQLWarning0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLInvalidAuthorizationSpecException1);
      IteratorUtils.singletonIterator(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(transformer0);
      
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(transformerPredicate0);
      
      MapIterator<SQLDataException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) null, 1397L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(loopingIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) loopingIterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode(":\"4)]JPim@C");
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode2);
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode(":\"4)]JPim@C");
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode3);
      
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0, 1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(reverseListIterator0);
      
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) resettableIterator0, 0L);
      assertNotNull(skippingIterator0);
      
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) skippingIterator0);
      assertNotNull(enumeration0);
      
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(iterator0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(":\"4)]JPim@C", "-Rkz3d!(B", 166, sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(166, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: :\"4)]JPim@C", sQLTransactionRollbackException0.toString());
      assertEquals("-Rkz3d!(B", sQLTransactionRollbackException0.getSQLState());
      assertEquals(":\"4)]JPim@C", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLTransactionRollbackException0.getStackTrace();
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(166, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: :\"4)]JPim@C", sQLTransactionRollbackException0.toString());
      assertEquals("-Rkz3d!(B", sQLTransactionRollbackException0.getSQLState());
      assertEquals(":\"4)]JPim@C", sQLTransactionRollbackException0.getMessage());
      assertNotNull(stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray0.length);
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(sQLTransactionRollbackException0));
      assertNotNull(linkedList0);
      
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertFalse(linkedList0.contains(sQLTransactionRollbackException0));
      assertNotNull(loopingListIterator0);
      
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) loopingListIterator0, (Iterator<? extends SQLTransactionRollbackException>) loopingListIterator0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertFalse(linkedList0.contains(sQLTransactionRollbackException0));
      assertNotNull(zippingIterator0);
      
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, (Iterator<? extends SQLTransactionRollbackException>) loopingListIterator0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertFalse(linkedList0.contains(sQLTransactionRollbackException0));
      assertNotNull(iterator1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) iterator1, (-5785L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", (String) null, (-279), sQLRecoverableException0);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals((-279), sQLRecoverableException1.getErrorCode());
      assertNotNull(sQLRecoverableException1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLRecoverableException1);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals((-279), sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("bzgl.?", "bzgl.?", 1893, sQLIntegrityConstraintViolationException0);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals((-279), sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("bzgl.?", sQLTransactionRollbackException0.getMessage());
      assertEquals("bzgl.?", sQLTransactionRollbackException0.getSQLState());
      assertEquals(1893, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: bzgl.?", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      Throwable[] throwableArray0 = sQLRecoverableException0.getSuppressed();
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(throwableArray0);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      assertEquals(0, throwableArray0.length);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals((-279), sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("bzgl.?", sQLTransactionRollbackException0.getMessage());
      assertEquals("bzgl.?", sQLTransactionRollbackException0.getSQLState());
      assertEquals(1893, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: bzgl.?", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: bzgl.?", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransactionRollbackException: bzgl.?", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNotNull(sQLTransactionRollbackException1);
      
      StackTraceElement[] stackTraceElementArray0 = sQLTransactionRollbackException1.getStackTrace();
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals((-279), sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("bzgl.?", sQLTransactionRollbackException0.getMessage());
      assertEquals("bzgl.?", sQLTransactionRollbackException0.getSQLState());
      assertEquals(1893, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: bzgl.?", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: bzgl.?", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransactionRollbackException: bzgl.?", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNotNull(stackTraceElementArray0);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      assertNotSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertNotSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertEquals(13, stackTraceElementArray0.length);
      
      Throwable[] throwableArray1 = sQLRecoverableException0.getSuppressed();
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(throwableArray1);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(throwableArray1, throwableArray0);
      assertEquals(0, throwableArray1.length);
      
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals((-279), sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("bzgl.?", sQLTransactionRollbackException0.getMessage());
      assertEquals("bzgl.?", sQLTransactionRollbackException0.getSQLState());
      assertEquals(1893, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: bzgl.?", sQLTransactionRollbackException0.toString());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      assertNotSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      
      BoundedIterator<SQLTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) listIterator0, (long) 1893);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals((-279), sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("bzgl.?", sQLTransactionRollbackException0.getMessage());
      assertEquals("bzgl.?", sQLTransactionRollbackException0.getSQLState());
      assertEquals(1893, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: bzgl.?", sQLTransactionRollbackException0.toString());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(boundedIterator0);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      assertNotSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      
      ArrayIterator<SQLTransientException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLTransientException>(sQLTransactionRollbackException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(resettableIterator0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(iterator0);
      
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) iterator0, class0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      int int0 = IteratorUtils.size(orderedIterator0);
      assertEquals(0, int0);
      
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.SingletonMap$SingletonValues", "org.apache.commons.collections4.map.SingletonMap$SingletonValues", 12);
      assertEquals(12, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.map.SingletonMap$SingletonValues", sQLDataException0.toString());
      assertEquals("org.apache.commons.collections4.map.SingletonMap$SingletonValues", sQLDataException0.getSQLState());
      assertEquals("org.apache.commons.collections4.map.SingletonMap$SingletonValues", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      sQLExceptionArray0[0] = (SQLException) sQLDataException0;
      SQLException sQLException0 = new SQLException((String) null, sQLExceptionArray0[0]);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      assertEquals(8, sQLExceptionArray0.length);
      
      sQLExceptionArray0[1] = sQLException0;
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLException", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLException", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      assertEquals(8, sQLExceptionArray0.length);
      
      sQLExceptionArray0[2] = (SQLException) sQLWarning0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLExceptionArray0[3] = (SQLException) sQLTransactionRollbackException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.map.SingletonMap$SingletonValues", sQLWarning0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLException", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLException", sQLWarning0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("org.apache.commons.collections4.map.SingletonMap$SingletonValues", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: org.apache.commons.collections4.map.SingletonMap$SingletonValues", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      assertEquals(8, sQLExceptionArray0.length);
      
      sQLExceptionArray0[4] = (SQLException) sQLNonTransientException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "Iterator remove() cannot be called at this time", 0, sQLException0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("Iterator remove() cannot be called at this time", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      assertEquals(8, sQLExceptionArray0.length);
      
      sQLExceptionArray0[5] = (SQLException) sQLRecoverableException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLExceptionArray0[0]);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(8, sQLExceptionArray0.length);
      
      sQLExceptionArray0[6] = (SQLException) sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals(8, sQLExceptionArray0.length);
      
      sQLExceptionArray0[7] = (SQLException) sQLSyntaxErrorException1;
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      assertEquals(8, sQLExceptionArray0.length);
      
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) transformer0, "delimiter may not be null", (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // prefix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      OrderedMapIterator<SQLNonTransientConnectionException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientConnectionException>) hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(transformer0);
      
      ResettableListIterator<Predicate<Object>> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      
      SkippingIterator<Predicate<Object>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Predicate<Object>>) resettableListIterator1, 0L);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(skippingIterator0);
      
      ZippingIterator<Predicate<Object>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>) skippingIterator0, (Iterator<? extends Predicate<Object>>) resettableListIterator1, (Iterator<? extends Predicate<Object>>) resettableListIterator1);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(zippingIterator0);
      
      Class<String> class0 = String.class;
      Factory<String> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      assertNotNull(factory0);
      
      Transformer<Object, String> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      assertNotNull(transformer1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Predicate<Object>>) zippingIterator0, (Transformer<? super Predicate<Object>, String>) transformer1, (String) null, (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      OrderedMapIterator<SQLNonTransientConnectionException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientConnectionException>) hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(transformer0);
      
      ResettableListIterator<Predicate<Object>> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      
      SkippingIterator<Predicate<Object>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Predicate<Object>>) resettableListIterator1, 0L);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(skippingIterator0);
      
      ZippingIterator<Predicate<Object>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>) skippingIterator0, (Iterator<? extends Predicate<Object>>) resettableListIterator1, (Iterator<? extends Predicate<Object>>) resettableListIterator1);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(zippingIterator0);
      
      Class<String> class0 = String.class;
      Factory<String> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      assertNotNull(factory0);
      
      Transformer<Object, String> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      assertNotNull(transformer1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Predicate<Object>>) zippingIterator0, (Transformer<? super Predicate<Object>, String>) transformer1, (String) null, (String) null, "The parameter types must match the arguments");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Node must not be null", "", (-2207));
      assertEquals("Node must not be null", sQLTimeoutException0.getMessage());
      assertEquals((-2207), sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Node must not be null", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLException sQLException0 = new SQLException("", sQLTimeoutException0);
      assertEquals("Node must not be null", sQLTimeoutException0.getMessage());
      assertEquals((-2207), sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Node must not be null", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      Spliterator<Throwable> spliterator0 = sQLTimeoutException0.spliterator();
      assertEquals("Node must not be null", sQLTimeoutException0.getMessage());
      assertEquals((-2207), sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Node must not be null", sQLTimeoutException0.toString());
      assertNotNull(spliterator0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2207);
      intArray0[1] = (-2053);
      intArray0[2] = (-2053);
      intArray0[3] = (-2207);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      assertEquals("Node must not be null", sQLTimeoutException0.getMessage());
      assertEquals((-2207), sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Node must not be null", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLException: ", batchUpdateException0.toString());
      assertEquals("java.sql.SQLException: ", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-2207), (-2053), (-2053), (-2207)}, intArray0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "^\"lQ>Z(D@@#;");
      assertEquals("^\"lQ>Z(D@@#;", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      assertEquals("^\"lQ>Z(D@@#;", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(iterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2053));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedMapIterator<Transformer<Object, String>, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      BoundedIterator<Transformer<Object, String>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Transformer<Object, String>>) orderedMapIterator0, 0L, 1L);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(boundedIterator0);
      
      int int0 = 2257;
      Integer integer0 = new Integer(2257);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2257, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) integer0, 2257, 2257);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientConnectionException>) hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(transformer0);
      
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Predicate<SQLNonTransientException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(predicate0);
      
      Predicate<SQLNonTransientException> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(predicate1);
      
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(nullIsExceptionPredicate0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) nullIsExceptionPredicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      int int0 = IteratorUtils.size(orderedIterator0);
      assertEquals(0, int0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("UW-TsXVdl");
      assertNotNull(iIOMetadataNode0);
      
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      assertNotNull(nodeList0);
      assertSame(iIOMetadataNode0, nodeList0);
      assertSame(nodeList0, iIOMetadataNode0);
      
      NodeList nodeList1 = iIOMetadataNode0.getElementsByTagName("UW-TsXVdl");
      assertNotNull(nodeList1);
      assertSame(iIOMetadataNode0, nodeList0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList1);
      assertNotNull(nodeListIterator0);
      assertSame(iIOMetadataNode0, nodeList0);
      
      OrderedMapIterator<Predicate<Object>, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "{v\u0001OtW00mB", 0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("{v\u0001OtW00mB", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("{v\u0001OtW00mB", sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("{v\u0001OtW00mB", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("{v\u0001OtW00mB", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: {v\u0001OtW00mB", sQLInvalidAuthorizationSpecException1.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException1);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("{v\u0001OtW00mB", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("{v\u0001OtW00mB", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: {v\u0001OtW00mB", sQLInvalidAuthorizationSpecException1.toString());
      assertNotNull(resettableIterator0);
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("{v\u0001OtW00mB", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("{v\u0001OtW00mB", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: {v\u0001OtW00mB", sQLInvalidAuthorizationSpecException1.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains(sQLInvalidAuthorizationSpecException0));
      assertTrue(list0.contains(sQLInvalidAuthorizationSpecException1));
      assertNotNull(list0);
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      
      boolean boolean0 = priorityQueue0.removeAll(list0);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("{v\u0001OtW00mB", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("{v\u0001OtW00mB", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: {v\u0001OtW00mB", sQLInvalidAuthorizationSpecException1.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains(sQLInvalidAuthorizationSpecException0));
      assertTrue(list0.contains(sQLInvalidAuthorizationSpecException1));
      assertFalse(boolean0);
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(resettableIterator1);
      
      MapIterator<SQLSyntaxErrorException, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLSyntaxErrorException, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLSyntaxErrorException, ? extends SQLWarning>) mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(mapIterator1);
      
      MapIterator<SQLSyntaxErrorException, SQLWarning> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      assertFalse(mapIterator2.equals((Object)mapIterator0));
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(mapIterator2);
      assertSame(mapIterator2, mapIterator1);
      assertSame(mapIterator1, mapIterator2);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      int int0 = IteratorUtils.size(orderedIterator0);
      assertEquals(0, int0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("UW-TsXVdl");
      assertNotNull(iIOMetadataNode0);
      
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      assertNotNull(nodeList0);
      assertSame(iIOMetadataNode0, nodeList0);
      assertSame(nodeList0, iIOMetadataNode0);
      
      NodeList nodeList1 = iIOMetadataNode0.getElementsByTagName("UW-TsXVdl");
      assertNotNull(nodeList1);
      assertSame(iIOMetadataNode0, nodeList0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList1);
      assertNotNull(nodeListIterator0);
      assertSame(iIOMetadataNode0, nodeList0);
      
      OrderedMapIterator<Predicate<Object>, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<Predicate<Object>, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Predicate<Object>, DataTruncation>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      MapIterator<Predicate<Object>, DataTruncation> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Predicate<Object>, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      SkippingIterator<Predicate<Object>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Predicate<Object>>) mapIterator0, (long) 0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(skippingIterator0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Set must not be null");
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Set must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("Set must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("");
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException1.toString());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException1.getMessage());
      assertNotNull(sQLFeatureNotSupportedException1);
      
      Transformer<SQLException, SQLNonTransientException> transformer0 = InvokerTransformer.invokerTransformer("");
      assertNotNull(transformer0);
      
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>((Predicate<? super SQLNonTransientException>) null);
      assertNotNull(nullIsExceptionPredicate0);
      
      OrderedIterator<SQLSyntaxErrorException> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator1);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) orderedIterator1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(loopingIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) loopingIterator0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode(":\"4)]JPim@C");
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode2);
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode3);
      
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0, 1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) resettableIterator0, 0L);
      assertNotNull(skippingIterator0);
      
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) skippingIterator0);
      assertNotNull(enumeration0);
      
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(iterator0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      int int0 = 0;
      Properties[] propertiesArray0 = null;
      int int1 = 100;
      ObjectArrayIterator<Properties> objectArrayIterator0 = null;
//      try {
        objectArrayIterator0 = new ObjectArrayIterator<Properties>((Properties[]) null, (-1203), 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(zippingIterator0);
      
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) zippingIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(enumeration0);
      
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(iterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) reverseListIterator0, 100, (-1154));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertNotNull(sQLNonTransientConnectionException1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "[");
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertEquals("", sQLNonTransientConnectionException2.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException2.toString());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("[", sQLNonTransientConnectionException2.getSQLState());
      assertNotNull(sQLNonTransientConnectionException2);
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      assertEquals(0, sQLNonTransientConnectionExceptionArray0.length);
      
      String string0 = "^\"1NvdtBNJf{";
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("^\"1NvdtBNJf{", "rX;abdq1R", 100);
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertEquals("^\"1NvdtBNJf{", sQLNonTransientConnectionException3.getMessage());
      assertEquals(100, sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("rX;abdq1R", sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ^\"1NvdtBNJf{", sQLNonTransientConnectionException3.toString());
      assertNotNull(sQLNonTransientConnectionException3);
      
      Spliterator<Throwable> spliterator0 = sQLNonTransientConnectionException3.spliterator();
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertEquals("^\"1NvdtBNJf{", sQLNonTransientConnectionException3.getMessage());
      assertEquals(100, sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("rX;abdq1R", sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ^\"1NvdtBNJf{", sQLNonTransientConnectionException3.toString());
      assertNotNull(spliterator0);
      assertNotSame(sQLNonTransientConnectionException3, sQLNonTransientConnectionException0);
      assertNotSame(sQLNonTransientConnectionException3, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException3, sQLNonTransientConnectionException2);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("^\"1NvdtBNJf{", sQLNonTransientConnectionException3);
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertEquals("^\"1NvdtBNJf{", sQLNonTransientConnectionException3.getMessage());
      assertEquals(100, sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("rX;abdq1R", sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ^\"1NvdtBNJf{", sQLNonTransientConnectionException3.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ^\"1NvdtBNJf{", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("^\"1NvdtBNJf{", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      int int0 = 100;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 100, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "b[?";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("RSo6uo4Wms2_8S");
      assertNotNull(iIOMetadataNode0);
      
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("RSo6uo4Wms2_8S");
      assertNotNull(nodeList0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      int int0 = (-1696);
      int int1 = 14;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) properties0, (-1696), 14);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLDataException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      sQLInvalidAuthorizationSpecException1.setNextException(sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      
      Spliterator<Throwable> spliterator0 = sQLInvalidAuthorizationSpecException1.spliterator();
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNotNull(spliterator0);
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      
      sQLInvalidAuthorizationSpecException1.setNextException(sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException1);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.getMessage());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) properties0, (-1696));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, class0);
      assertNotNull(sQLSyntaxErrorExceptionArray0);
      assertEquals(0, sQLSyntaxErrorExceptionArray0.length);
      
      ResettableIterator<ArrayList<Integer>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      MapIterator<DataTruncation, StringTokenizer> mapIterator1 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) mapIterator1, (Iterator<? extends DataTruncation>) mapIterator1);
      assertNotNull(iterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = EmptyIterator.emptyIterator();
      assertNotNull(iterator1);
      
      Iterable<SQLInvalidAuthorizationSpecException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator1);
      assertNotNull(iterable0);
      
      Object[] objectArray0 = IteratorUtils.toArray(iterator1);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException(sQLNonTransientException0);
      assertFalse(sQLNonTransientException1.equals((Object)sQLNonTransientException0));
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException1.getMessage());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLNonTransientException: ", sQLNonTransientException1.toString());
      assertNull(sQLNonTransientException1.getSQLState());
      assertNotNull(sQLNonTransientException1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientException1);
      assertFalse(sQLNonTransientException0.equals((Object)sQLNonTransientException1));
      assertFalse(sQLNonTransientException1.equals((Object)sQLNonTransientException0));
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException1.getMessage());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLNonTransientException: ", sQLNonTransientException1.toString());
      assertNull(sQLNonTransientException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLNonTransientException: java.sql.SQLNonTransientException: ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLNonTransientException: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("");
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException1.toString());
      assertEquals("", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException1);
      
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("");
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertNull(sQLFeatureNotSupportedException2.getSQLState());
      assertEquals("", sQLFeatureNotSupportedException2.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException2.toString());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException2);
      
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException((String) null, "Map.Entry.setValue is not supported", (-289), sQLFeatureNotSupportedException0);
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLNonTransientException0.equals((Object)sQLNonTransientException1));
      assertFalse(sQLNonTransientException1.equals((Object)sQLNonTransientException0));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException2));
      assertNull(sQLFeatureNotSupportedException3.getMessage());
      assertEquals("Map.Entry.setValue is not supported", sQLFeatureNotSupportedException3.getSQLState());
      assertEquals((-289), sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException3.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException1.getMessage());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLNonTransientException: ", sQLNonTransientException1.toString());
      assertNull(sQLNonTransientException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLNonTransientException: java.sql.SQLNonTransientException: ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLNonTransientException: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException3);
      
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("@jQ0-P^*lpPOw-(~e#F", (String) null);
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException2));
      assertEquals("java.sql.SQLFeatureNotSupportedException: @jQ0-P^*lpPOw-(~e#F", sQLFeatureNotSupportedException4.toString());
      assertEquals(0, sQLFeatureNotSupportedException4.getErrorCode());
      assertEquals("@jQ0-P^*lpPOw-(~e#F", sQLFeatureNotSupportedException4.getMessage());
      assertNull(sQLFeatureNotSupportedException4.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException4);
      
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("", "", (-289), sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("", sQLFeatureNotSupportedException5.getMessage());
      assertEquals("", sQLFeatureNotSupportedException5.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException5.toString());
      assertEquals((-289), sQLFeatureNotSupportedException5.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException1.toString());
      assertEquals("", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException5);
      
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("Map.Entry.setValue is not supported", "Map.Entry.setValue is not supported", (-289), sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("Map.Entry.setValue is not supported", sQLFeatureNotSupportedException6.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Map.Entry.setValue is not supported", sQLFeatureNotSupportedException6.toString());
      assertEquals("Map.Entry.setValue is not supported", sQLFeatureNotSupportedException6.getMessage());
      assertEquals((-289), sQLFeatureNotSupportedException6.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException1.toString());
      assertEquals("", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException6);
      
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, (-289));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Stream<Integer> stream0 = arrayDeque0.parallelStream();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(stream0);
      
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(resettableIterator0);
      
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.iterators.LoopingIterator";
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.iterators.LoopingIterator", "org.apache.commons.collections4.iterators.LoopingIterator", true);
      assertEquals(57, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      String string1 = stringTokenizer0.nextToken("org.apache.commons.collections4.iterators.LoopingIterator");
      assertFalse(string1.equals((Object)string0));
      assertEquals(56, stringTokenizer0.countTokens());
      assertEquals("o", string1);
      assertNotNull(string1);
      
      boolean boolean0 = stringTokenizer0.hasMoreTokens();
      assertEquals(56, stringTokenizer0.countTokens());
      assertTrue(boolean0);
      
      boolean boolean1 = stringTokenizer0.hasMoreElements();
      assertTrue(boolean1 == boolean0);
      assertEquals(56, stringTokenizer0.countTokens());
      assertTrue(boolean1);
      
      String string2 = stringTokenizer0.nextToken("org.apache.commons.collections4.iterators.LoopingIterator");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(55, stringTokenizer0.countTokens());
      assertEquals("r", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResettableIterator<Vector<SQLWarning>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      ResettableIterator<SQLClientInfoException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(resettableIterator1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Node must not be null", "", 8);
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Node must not be null", sQLTimeoutException0.toString());
      assertEquals("Node must not be null", sQLTimeoutException0.getMessage());
      assertEquals(8, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLException sQLException0 = new SQLException("`k?\"!F", sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: `k?\"!F", sQLException0.toString());
      assertEquals("`k?\"!F", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      Spliterator<Throwable> spliterator0 = sQLException0.spliterator();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: `k?\"!F", sQLException0.toString());
      assertEquals("`k?\"!F", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertNotNull(spliterator0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 8;
      intArray0[1] = 8;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: `k?\"!F", sQLException0.toString());
      assertEquals("`k?\"!F", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLException: `k?\"!F", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLException: `k?\"!F", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {8, 8}, intArray0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      assertNotNull(iterator0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator1, 8);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2022);
      int int0 = (-2053);
      intArray0[1] = (-2053);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "Node must not be null", (-2022));
      assertEquals("Node must not be null", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals((-2022), sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLException sQLException0 = new SQLException("", sQLTimeoutException0);
      assertEquals("Node must not be null", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals((-2022), sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      Spliterator<Throwable> spliterator0 = sQLException0.spliterator();
      assertEquals("Node must not be null", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals((-2022), sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(spliterator0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      assertEquals("Node must not be null", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals((-2022), sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLException: ", batchUpdateException0.toString());
      assertEquals("java.sql.SQLException: ", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-2022), (-2053)}, intArray0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(batchUpdateException0);
      assertEquals("Node must not be null", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals((-2022), sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLException: ", batchUpdateException0.toString());
      assertEquals("java.sql.SQLException: ", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(iterator0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-2022), (-2053)}, intArray0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "", (-2053));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2022);
      intArray0[1] = (-2053);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "Node must not be null", (-2022));
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("Node must not be null", sQLTimeoutException0.getSQLState());
      assertEquals((-2022), sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLException sQLException0 = new SQLException("", sQLTimeoutException0);
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("Node must not be null", sQLTimeoutException0.getSQLState());
      assertEquals((-2022), sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      Spliterator<Throwable> spliterator0 = sQLException0.spliterator();
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("Node must not be null", sQLTimeoutException0.getSQLState());
      assertEquals((-2022), sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNotNull(spliterator0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("Node must not be null", sQLTimeoutException0.getSQLState());
      assertEquals((-2022), sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLException: ", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-2022), (-2053)}, intArray0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(batchUpdateException0);
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("Node must not be null", sQLTimeoutException0.getSQLState());
      assertEquals((-2022), sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLException: ", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(iterator0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-2022), (-2053)}, intArray0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) "", (-2053));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "start", 10, sQLIntegrityConstraintViolationException0);
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException1.toString());
      assertEquals("start", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals(10, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("");
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException2.toString());
      assertEquals("", sQLIntegrityConstraintViolationException2.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException2);
      
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", "");
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertEquals("", sQLIntegrityConstraintViolationException3.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException3.toString());
      assertEquals("", sQLIntegrityConstraintViolationException3.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException3);
      
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("e8Dv,", "", sQLIntegrityConstraintViolationException0);
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException3));
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException4.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException4.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: e8Dv,", sQLIntegrityConstraintViolationException4.toString());
      assertEquals("e8Dv,", sQLIntegrityConstraintViolationException4.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException4);
      
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException4);
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException4.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException5.equals((Object)sQLIntegrityConstraintViolationException0));
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException4.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException4.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: e8Dv,", sQLIntegrityConstraintViolationException4.toString());
      assertEquals("e8Dv,", sQLIntegrityConstraintViolationException4.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: e8Dv,", sQLIntegrityConstraintViolationException5.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException5.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException5.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLIntegrityConstraintViolationException: e8Dv,", sQLIntegrityConstraintViolationException5.toString());
      assertNotNull(sQLIntegrityConstraintViolationException5);
      
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("e8Dv,", "pWeO#ebnTDl~/{@", sQLIntegrityConstraintViolationException3);
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException3.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException0));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException6.equals((Object)sQLIntegrityConstraintViolationException1));
      assertEquals("", sQLIntegrityConstraintViolationException3.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException3.toString());
      assertEquals("", sQLIntegrityConstraintViolationException3.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: e8Dv,", sQLIntegrityConstraintViolationException6.toString());
      assertEquals("e8Dv,", sQLIntegrityConstraintViolationException6.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException6.getErrorCode());
      assertEquals("pWeO#ebnTDl~/{@", sQLIntegrityConstraintViolationException6.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException6);
      
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException();
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException3));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException5));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException2));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException6));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException4));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException1));
      assertFalse(sQLIntegrityConstraintViolationException7.equals((Object)sQLIntegrityConstraintViolationException0));
      assertEquals(0, sQLIntegrityConstraintViolationException7.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException7.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException7.toString());
      assertNull(sQLIntegrityConstraintViolationException7.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException7);
      
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 10);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResettableIterator<Vector<SQLWarning>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      ResettableIterator<SQLClientInfoException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(resettableIterator1);
      
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 2);
      SQLDataException[] sQLDataExceptionArray0 = null;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>((SQLDataException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      assertNotNull(enumeration0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(zippingIterator0);
      
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) zippingIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(enumeration0);
      
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(iterator0);
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertNotNull(sQLNonTransientConnectionException1);
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "[");
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("[", sQLNonTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException2.toString());
      assertEquals("", sQLNonTransientConnectionException2.getMessage());
      assertNotNull(sQLNonTransientConnectionException2);
      
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      int int0 = (-1413);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, (-1413));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      Hashtable<Object, SQLRecoverableException> hashtable0 = new Hashtable<Object, SQLRecoverableException>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "", sQLRecoverableException0);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException1.getSQLState());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertNotNull(sQLRecoverableException1);
      
      SQLRecoverableException sQLRecoverableException2 = hashtable0.put(sQLRecoverableException0, sQLRecoverableException1);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertEquals("", sQLRecoverableException1.getSQLState());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertNull(sQLRecoverableException2);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      assertNotSame(sQLRecoverableException1, sQLRecoverableException0);
      
      int int0 = 61;
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 61, 2002);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      boolean boolean0 = dataTruncation0.getParameter();
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertTrue(boolean0);
      
      SQLRecoverableException sQLRecoverableException3 = hashtable0.put(dataTruncation0, sQLRecoverableException0);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertFalse(hashtable0.isEmpty());
      assertEquals(2, hashtable0.size());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNull(sQLRecoverableException3);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      
      Transformer<SQLException, SQLRecoverableException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends SQLRecoverableException>) hashtable0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(2, hashtable0.size());
      assertNotNull(transformer0);
      
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertFalse(hashtable0.isEmpty());
      assertEquals(2, hashtable0.size());
      assertNotNull(iterator0);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      
      Hashtable<SQLFeatureNotSupportedException, SQLTransientException> hashtable1 = new Hashtable<SQLFeatureNotSupportedException, SQLTransientException>(0);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertNotNull(hashtable1);
      
      Enumeration<SQLTransientException> enumeration0 = hashtable1.elements();
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertNotNull(enumeration0);
      
      Iterator<SQLTransientException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertNotNull(iterator1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLRecoverableException0);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
//      try { 
        hashtable1.put(sQLFeatureNotSupportedException0, (SQLTransientException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Hashtable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object object0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.getMessage());
      assertNotNull(sQLTransactionRollbackException1);
      
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ResettableIterator<LinkedHashSet<Locale.Category>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 3);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertNotNull(loopingListIterator0);
      
      iteratorArray0[0] = (Iterator<Integer>) loopingListIterator0;
      ResettableIterator<Integer> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator1);
      
      iteratorArray0[1] = (Iterator<Integer>) resettableIterator1;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1224);
      intArray0[1] = (-1594);
      intArray0[2] = 1034;
      intArray0[3] = (-213);
      intArray0[4] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("prefix may not be null", "WD%", intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("WD%", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: prefix may not be null", batchUpdateException0.toString());
      assertEquals("prefix may not be null", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1224), (-1594), 1034, (-213), 0}, intArray0);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", intArray0, batchUpdateException0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("WD%", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: prefix may not be null", batchUpdateException0.toString());
      assertEquals("prefix may not be null", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("", batchUpdateException1.getMessage());
      assertNotNull(batchUpdateException1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1224), (-1594), 1034, (-213), 0}, intArray0);
      
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) batchUpdateException1);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("WD%", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: prefix may not be null", batchUpdateException0.toString());
      assertEquals("prefix may not be null", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("", batchUpdateException1.getMessage());
      assertNotNull(resettableIterator0);
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1224), (-1594), 1034, (-213), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Hashtable<String, SQLDataException> hashtable0 = new Hashtable<String, SQLDataException>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Transformer<String, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super String, ? extends SQLDataException>) hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(transformer0);
      
      Iterator<SQLDataException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends String>) orderedMapIterator0, (Transformer<? super String, ? extends SQLDataException>) transformer0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(iterator1);
      
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Object[] objectArray1 = IteratorUtils.toArray(iterator0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      
      Object[] objectArray2 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(objectArray2);
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertEquals(0, objectArray2.length);
      
      ResettableListIterator<Boolean> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      
      List<Boolean> list0 = IteratorUtils.toList((Iterator<? extends Boolean>) resettableListIterator1);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      LoopingListIterator<Boolean> loopingListIterator0 = new LoopingListIterator<Boolean>(list0);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertFalse(loopingListIterator0.hasNext());
      assertNotNull(loopingListIterator0);
      
      int int0 = 125;
      List<Boolean> list1 = IteratorUtils.toList((Iterator<? extends Boolean>) loopingListIterator0, 125);
      assertTrue(list1.equals((Object)list0));
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertFalse(loopingListIterator0.hasNext());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLTransientException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(3660);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-415));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1377);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-415));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-3060));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[0]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(100);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(4521);
      integerArray0[8] = integer8;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(integerArray0, (-1763), (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      DataTruncation dataTruncation0 = new DataTruncation(7789, false, true, 7789, 0, sQLFeatureNotSupportedException0);
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning0 = new SQLWarning("", sQLWarningArray0[0]);
      sQLWarningArray0[1] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("Predicate must not be null", (String) null, 125);
      sQLWarningArray0[2] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning("", "w12HZ,Lz3D:_RHQ");
      sQLWarningArray0[3] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning((String) null, "Predicate must not be null", 7789);
      sQLWarningArray0[4] = sQLWarning3;
      SQLWarning sQLWarning4 = new SQLWarning((String) null);
      sQLWarningArray0[5] = sQLWarning4;
      SQLWarning sQLWarning5 = new SQLWarning("");
      sQLWarningArray0[6] = sQLWarning5;
      dataTruncation0.getNextWarning();
      sQLWarningArray0[7] = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLWarningArray0, 427, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(arrayDeque0);
      IteratorUtils.toArray((Iterator<?>) loopingIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode(":\"4)]JPim@C");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode(":\"4)]JPim@C");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0, (-38), 1677);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 491;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 491);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Predicate<? super SQLTransactionRollbackException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Iterator<EnumSet<Locale.Category>>[] iteratorArray0 = (Iterator<EnumSet<Locale.Category>>[]) Array.newInstance(Iterator.class, 4);
      OrderedMapIterator<EnumSet<Locale.Category>, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<EnumSet<Locale.Category>>) orderedMapIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<EnumSet<Locale.Category>, HashSet<SQLFeatureNotSupportedException>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.size(resettableIterator0);
      OrderedMapIterator<Predicate<Object>, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 5);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      classArray0[3] = class3;
      Class<SQLNonTransientConnectionException> class4 = SQLNonTransientConnectionException.class;
      classArray0[4] = class4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(classArray0, 3, (-422));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("UW-TsXVdl");
      iIOMetadataNode0.getChildNodes();
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("UW-TsXVdl");
      IteratorUtils.nodeListIterator(nodeList0);
      OrderedMapIterator<Predicate<Object>, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Predicate<Object>, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Predicate<Object>, DataTruncation>(orderedMapIterator0);
      MapIterator<Predicate<Object>, DataTruncation> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Predicate<Object>, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.skippingIterator((Iterator<Predicate<Object>>) mapIterator0, (long) 0);
      // Undeclared exception!
//      try { 
        InvokerTransformer.invokerTransformer((String) null, (Class<?>[]) null, (Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The method to invoke must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 14);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Node must not be null", "Node must not be null", "Tdlgiw", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("NodeList must not be null", "Node must not be null", "NodeList must not be null", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("delimiter may not be null", "Tdlgiw", "Node must not be null", 1024);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("~Z_,vU", "", "$mc", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("$mc", "delimiter may not be null", "delimiter may not be null", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      dataTruncation0.setStackTrace(stackTraceElementArray0);
      dataTruncation0.getNextWarning();
      sQLClientInfoException0.setNextException((SQLException) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0, 2287, 2287);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
//      try { 
        stack0.removeElementAt((-2365));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Array index out of range: -2365
//         //
//         verifyException("java.util.Vector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonListIterator(locale_Category0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) reverseListIterator0, (Iterator<? extends BatchUpdateException>) reverseListIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonListIterator(locale_Category0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", "", 459, sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate1 = new UniquePredicate<Object>();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      SQLException sQLException0 = new SQLException("", "", 2890);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransactionRollbackException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray0 = new int[5];
      intArray0[0] = 2890;
      intArray0[1] = 2890;
      intArray0[2] = 2890;
      intArray0[3] = 2890;
      intArray0[4] = 2890;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("vf", "", intArray0, sQLTransactionRollbackException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("vf", intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException2);
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("O;yn;%CW", intArray0, sQLSyntaxErrorException0);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("", "|K[V:_ yH-tCs53", 44, intArray0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException();
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException("Iterator must not be null", intArray0);
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) treeSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransientException>) resettableIterator0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(resettableListIterator0, comparator0, comparatorPredicate_Criterion0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(comparatorPredicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>(comparator1);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      predicateArray0[1] = predicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(resettableIterator1);
      predicateArray0[2] = (Predicate<Object>) identityPredicate0;
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      predicateArray0[3] = predicate1;
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicateArray0[0], (Predicate<? super Object>) predicate0);
      predicateArray0[4] = predicate2;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 8);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("suffix may not be null");
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      transformerArray0[0] = transformer1;
      Transformer<Object, String> transformer2 = ConstantTransformer.constantTransformer("}:H");
      transformerArray0[1] = transformer2;
      Factory<String> factory0 = ConstantFactory.constantFactory("suffix may not be null");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      transformerArray0[2] = (Transformer<Object, String>) factoryTransformer0;
      Transformer<Object, String> transformer3 = ConstantTransformer.nullTransformer();
      transformerArray0[3] = transformer3;
      FactoryTransformer<Object, String> factoryTransformer1 = new FactoryTransformer<Object, String>(factory0);
      transformerArray0[4] = (Transformer<Object, String>) factoryTransformer1;
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate1, factoryTransformer0, factoryTransformer1);
      transformerArray0[5] = (Transformer<Object, String>) ifTransformer0;
      IfTransformer<Object, String> ifTransformer1 = new IfTransformer<Object, String>(predicate1, transformerArray0[4], transformer1);
      transformerArray0[6] = (Transformer<Object, String>) ifTransformer1;
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 4);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("}:H", classArray0, classArray0);
      transformerArray0[7] = (Transformer<Object, String>) invokerTransformer0;
      // Undeclared exception!
//      try { 
        SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends String>[]) transformerArray0, (Transformer<? super Object, ? extends String>) ifTransformer1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate and transformer arrays must be the same size
//         //
//         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) vector0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientConnectionException>) hashtable0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<SQLNonTransientException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) arrayList0);
      Predicate<SQLNonTransientException> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0, (Predicate<? super SQLNonTransientException>) predicate0);
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate1);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (Predicate<? super SQLNonTransientConnectionException>) nullIsExceptionPredicate0);
      assertNotNull(iterator0);
  }
}
