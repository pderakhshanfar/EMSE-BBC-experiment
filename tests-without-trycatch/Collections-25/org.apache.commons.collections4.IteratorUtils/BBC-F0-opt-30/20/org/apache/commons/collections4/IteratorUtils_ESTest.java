/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:58:57 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      arrayList0.add((DataTruncation) null);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      StringValueTransformer.stringValueTransformer();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.getIterator(locale_Category0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ExceptionTransformer invoked", "ExceptionTransformer invoked");
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 9);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      classArray0[1] = class0;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[2] = class1;
      IteratorUtils.get((Iterator<DataTruncation>) resettableListIterator0, 1891);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 0);
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator1 = IteratorUtils.arrayListIterator(linkedListArray0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<LinkedList<SQLClientInfoException>>) resettableListIterator1, 1891);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 1891
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(36, true, true, 10, 10);
      arrayList0.add(dataTruncation0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 4);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLClientInfoException> linkedList2 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[0] = linkedList2;
      LinkedList<SQLClientInfoException> linkedList3 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[3] = linkedList3;
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator1 = IteratorUtils.arrayListIterator(linkedListArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends LinkedList<SQLClientInfoException>>) resettableListIterator1, (Predicate<? super LinkedList<SQLClientInfoException>>) uniquePredicate0);
      StringValueTransformer.stringValueTransformer();
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      IteratorUtils.getIterator(locale_Category1);
      IteratorUtils.get((Iterator<DataTruncation>) resettableListIterator0, 1);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Iterator<DataTruncation>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 3);
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      IteratorUtils.get((Iterator<LinkedList<SQLClientInfoException>>) resettableListIterator0, 1);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", ".jR7f3Vq8?~yX");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(".jR7f3Vq8?~yX", "18_rKw^l^M:", 1);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("Yfx<ca'AP");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("18_rKw^l^M:", "18_rKw^l^M:", sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("", "}", 1, sQLNonTransientConnectionException3);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("#N(ax", "", (-4091), sQLNonTransientConnectionException4);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1, (-4091));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) linkedList0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "2hhiXyHzQE");
      linkedList0.addFirst(sQLInvalidAuthorizationSpecException0);
      Transformer<ClientInfoStatus, ClientInfoStatus> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedList$ListItr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Class<DataTruncation> class0 = DataTruncation.class;
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      MapIterator<DataTruncation, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[3] = (Iterator<DataTruncation>) mapIterator0;
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      iteratorArray0[2] = (Iterator<DataTruncation>) objectArrayIterator0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      DataTruncation dataTruncation0 = new DataTruncation(45, false, false, 45, 45);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      iteratorArray0[3] = (Iterator<DataTruncation>) resettableIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      arrayList0.add((DataTruncation) null);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 0);
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator1 = IteratorUtils.arrayListIterator(linkedListArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredIterator((Iterator<? extends LinkedList<SQLClientInfoException>>) resettableListIterator1, (Predicate<? super LinkedList<SQLClientInfoException>>) uniquePredicate0);
      StringValueTransformer.stringValueTransformer();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.getIterator(locale_Category0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 9);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      classArray0[0] = class0;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[1] = class1;
      arrayList0.spliterator();
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[2] = class2;
      int int0 = 1891;
      IteratorUtils.get((Iterator<DataTruncation>) resettableListIterator0, int0);
      Class<DataTruncation> class3 = DataTruncation.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableListIterator0, class3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      arrayList0.add((DataTruncation) null);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      StringValueTransformer.stringValueTransformer();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      arrayList0.add((DataTruncation) null);
      IteratorUtils.getIterator(locale_Category0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ExceptionTransformer invoked", "ExceptionTransformer invoked");
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 9);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      classArray0[1] = class0;
      classArray0[2] = class0;
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<DataTruncation>) resettableListIterator0, 1891);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 15);
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      IteratorUtils.get((Iterator<LinkedList<SQLClientInfoException>>) resettableListIterator0, 1);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends LinkedList<SQLClientInfoException>>) null, (Predicate<? super LinkedList<SQLClientInfoException>>) uniquePredicate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<IIOMetadataNode, SQLClientInfoException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends SQLClientInfoException>) mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) mapIterator1, 0L);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("CIlLection must not b2 null");
      DefaultEquator<IIOMetadataNode> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<IIOMetadataNode> predicate0 = EqualPredicate.equalPredicate(iIOMetadataNode0, (Equator<IIOMetadataNode>) defaultEquator0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.getIterator("CIlLection must not b2 null");
      IteratorUtils.boundedIterator((Iterator<?>) mapIterator1, 0L);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "V$8";
      stringArray0[1] = "set() is not supported";
      stringArray0[2] = "";
      stringArray0[3] = "lOX{4>baU6_xj";
      stringArray0[4] = "org.apache.commons.collections4.functors.FactoryTransformer";
      stringArray0[5] = "]-.U _n9JhTFy{m";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<String>) resettableListIterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) orderedMapIterator1, (Transformer<? super DataTruncation, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super String>) uniquePredicate0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[3];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      IteratorUtils.arrayListIterator(clientInfoStatusArray0, 0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Hashtable<IIOMetadataNode, SQLClientInfoException> hashtable0 = new Hashtable<IIOMetadataNode, SQLClientInfoException>();
      EntrySetMapIterator<IIOMetadataNode, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLClientInfoException>(hashtable0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode0;
      iIOMetadataNodeArray0[5] = iIOMetadataNode0;
      iIOMetadataNodeArray0[6] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[7] = iIOMetadataNode1;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      FalsePredicate.falsePredicate();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      SingletonListIterator<TreeSet<SQLWarning>> singletonListIterator0 = new SingletonListIterator<TreeSet<SQLWarning>>(treeSet0);
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      StringValueTransformer.stringValueTransformer();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "9yv?J");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("prefix may not be null", "The parameter types must match the arguments", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("org.apache.commons.collections4.iterators.ObjectArrayIterator", (String) null, 2);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException((String) null);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("jlyp9C9/4Jd#", "!Pd3", 2, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("&R>jjihiIkW)", "");
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("PX(o'Z.Y/:MB{", (String) null, 10, sQLTimeoutException2);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 2, (-133));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // End index must not be less than start index
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Iterator<DataTruncation> iterator0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "),?QIK\"L";
      // Undeclared exception!
//      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(linkedList0);
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[0] = linkedList1;
      LinkedList<SQLClientInfoException> linkedList2 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[1] = linkedList2;
      LinkedList<SQLClientInfoException> linkedList3 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[2] = linkedList3;
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredIterator((Iterator<? extends LinkedList<SQLClientInfoException>>) resettableListIterator0, (Predicate<? super LinkedList<SQLClientInfoException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableListIterator0, (Class<DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Array class must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 4);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.replace("0}=GgG#E+6)fM9Waz", clientInfoStatus0, clientInfoStatus1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Z|-w<}M.2N'k");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Z|-w<}M.2N'k", hashMap0, sQLTimeoutException0);
      linkedList0.add(sQLClientInfoException0);
      ArrayList<SQLClientInfoException> arrayList1 = new ArrayList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>(linkedList0);
      LinkedList<SQLClientInfoException> linkedList2 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList3 = new LinkedList<SQLClientInfoException>();
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      IteratorUtils.get((Iterator<LinkedList<SQLClientInfoException>>) resettableListIterator0, 0);
      EmptyListIterator.emptyListIterator();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>((IIOMetadataNode) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(nullIsFalsePredicate0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) singletonIterator0, (Predicate<? super IIOMetadataNode>) nullIsTruePredicate0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 4);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      ArrayList<SQLClientInfoException> arrayList1 = new ArrayList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>(linkedList0);
      LinkedList<SQLClientInfoException> linkedList2 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList3 = new LinkedList<SQLClientInfoException>();
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      IteratorUtils.get((Iterator<LinkedList<SQLClientInfoException>>) resettableListIterator0, 0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.isEmpty(listIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) orderedMapIterator1);
      IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) orderedMapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<BatchUpdateException, DataTruncation> hashMap0 = new HashMap<BatchUpdateException, DataTruncation>();
      SingletonIterator<HashMap<BatchUpdateException, DataTruncation>> singletonIterator0 = new SingletonIterator<HashMap<BatchUpdateException, DataTruncation>>(hashMap0, true);
      ConstantTransformer.nullTransformer();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLClientInfoException> linkedList2 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[2] = linkedList2;
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      IteratorUtils.get((Iterator<LinkedList<SQLClientInfoException>>) resettableListIterator0, 0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("/R(lBqi+2bhKbxTU<|6");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("/R(lBqi+2bhKbxTU<|6");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      ResettableListIterator<Object> resettableListIterator1 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<Object>) resettableListIterator1);
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super Iterator<DataTruncation>>) null, (Iterator<? extends Iterator<DataTruncation>>) null, (Iterator<? extends Iterator<DataTruncation>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ArrayList<DataTruncation> arrayList1 = new ArrayList<DataTruncation>();
      arrayList0.stream();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ") less than zero.";
      stringArray0[1] = "";
      stringArray0[2] = "s}N+W23T";
      stringArray0[3] = "";
      stringArray0[4] = "Offset parameter must not be negative.";
      stringArray0[5] = "org.apache.commons.collections4.set.AbstractSerializableSetDecorator";
      stringArray0[6] = "`0mIiQE";
      stringArray0[7] = "|!xt\"^uLra";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 3);
      Predicate<String> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny((Iterator<String>) objectArrayListIterator0, (Predicate<? super String>) predicate0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Hashtable<IIOMetadataNode, SQLClientInfoException> hashtable0 = new Hashtable<IIOMetadataNode, SQLClientInfoException>();
      EntrySetMapIterator<IIOMetadataNode, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLClientInfoException>(hashtable0);
      MapIterator<IIOMetadataNode, SQLClientInfoException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends SQLClientInfoException>) entrySetMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, 0L);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) mapIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.getIterator(hashtable0);
      IteratorUtils.boundedIterator((Iterator<?>) entrySetMapIterator0, 0L);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      arrayList0.clear();
      arrayList0.ensureCapacity(9);
      ArrayList<DataTruncation> arrayList1 = new ArrayList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ArrayList<DataTruncation> arrayList1 = new ArrayList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList1);
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 0);
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredIterator((Iterator<? extends LinkedList<SQLClientInfoException>>) resettableListIterator0, (Predicate<? super LinkedList<SQLClientInfoException>>) uniquePredicate0);
      StringValueTransformer.stringValueTransformer();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.getIterator(locale_Category0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ExceptionTransformer invoked", "ExceptionTransformer invoked");
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 9);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      classArray0[0] = class0;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[1] = class1;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[2] = class2;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      classArray0[3] = class3;
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      classArray0[4] = class4;
      Class<SQLTimeoutException> class5 = SQLTimeoutException.class;
      classArray0[5] = class5;
      Class<SQLTimeoutException> class6 = SQLTimeoutException.class;
      classArray0[6] = class6;
      Class<SQLTimeoutException> class7 = SQLTimeoutException.class;
      classArray0[7] = class7;
      Class<SQLTimeoutException> class8 = SQLTimeoutException.class;
      classArray0[8] = class8;
      Transformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("ExceptionTransformer invoked", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 3225);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'ExceptionTransformer invoked' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 3);
      DataTruncation dataTruncation0 = new DataTruncation(1659, false, false, 0, 1646);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableIterator0;
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(linkedList0);
      iteratorArray0[1] = (Iterator<DataTruncation>) loopingIterator0;
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(orderedIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[1] = predicate0;
      OnePredicate<Object> onePredicate1 = new OnePredicate<Object>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) listIteratorWrapper0, (Predicate<? super SQLTimeoutException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]C<(P[=UmB_4p");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[Jb6}H;n4%vCz");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      ArrayList<SQLNonTransientException> arrayList1 = new ArrayList<SQLNonTransientException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null, (Collection<? super SQLSyntaxErrorException>) arrayList1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ExceptionPredicate.exceptionPredicate();
      Hashtable<IIOMetadataNode, SQLClientInfoException> hashtable0 = new Hashtable<IIOMetadataNode, SQLClientInfoException>();
      HashMap<IIOMetadataNode, SQLClientInfoException> hashMap0 = new HashMap<IIOMetadataNode, SQLClientInfoException>();
      EntrySetMapIterator<IIOMetadataNode, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLClientInfoException>(hashMap0);
      MapIterator<IIOMetadataNode, SQLClientInfoException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends SQLClientInfoException>) entrySetMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, 0L);
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) entrySetMapIterator0, (Predicate<? super IIOMetadataNode>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLTimeoutException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) listIteratorWrapper0, (Predicate<? super SQLTimeoutException>) onePredicate0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.size(listIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("$ak[YjYBWNy8Xw", "$ak[YjYBWNy8Xw");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("$ak[YjYBWNy8Xw", (String) null, 0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0, 0, 0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = 3151;
      intArray0[2] = (-83);
      intArray0[3] = 2079;
      intArray0[4] = 470;
      intArray0[5] = 498;
      intArray0[6] = 1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("The predicate to call must not be null", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLInvalidAuthorizationSpecException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray1 = new int[0];
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", intArray1);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      long[] longArray0 = new long[5];
      longArray0[0] = (-956L);
      longArray0[1] = 0L;
      longArray0[2] = (long) 498;
      longArray0[3] = (long) 2079;
      longArray0[4] = (-89L);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "EiOb'C%3RFT", 1052, longArray0, batchUpdateException1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      int[] intArray2 = new int[0];
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("", "", intArray2, batchUpdateException2);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("TD[4%!aC[?Yb.Bph1~", intArray2, batchUpdateException4);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 1);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 9);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(batchUpdateException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) identityPredicate0, (Equator<Object>) defaultEquator0);
      PredicateTransformer<SQLDataException> predicateTransformer0 = new PredicateTransformer<SQLDataException>(predicate0);
      SQLDataException sQLDataException0 = new SQLDataException("LESS_OR_EQUAL", batchUpdateException0);
      Boolean boolean0 = predicateTransformer0.transform(sQLDataException0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>(boolean0);
      IfTransformer<SQLException, Boolean> ifTransformer0 = new IfTransformer<SQLException, Boolean>(predicate0, constantTransformer0, constantTransformer0);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(ifTransformer0);
      predicateArray0[0] = (Predicate<SQLException>) transformerPredicate0;
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(predicate0, transformerPredicate0);
      predicateArray0[1] = (Predicate<SQLException>) orPredicate0;
      Predicate<SQLException> predicate1 = TruePredicate.truePredicate();
      predicateArray0[2] = predicate1;
      Predicate<SQLException> predicate2 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[3] = predicate2;
      // Undeclared exception!
//      try { 
        NonePredicate.nonePredicate((Predicate<? super SQLException>[]) predicateArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The predicate array must not contain a null predicate, index 4 was null
//         //
//         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ExceptionPredicate.exceptionPredicate();
      StringValueTransformer.stringValueTransformer();
      Transformer<SQLClientInfoException, StringTokenizer> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, ? extends StringTokenizer>) transformer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.isEmpty(listIterator0);
      HashMap<BatchUpdateException, DataTruncation> hashMap0 = new HashMap<BatchUpdateException, DataTruncation>();
      SingletonIterator<HashMap<BatchUpdateException, DataTruncation>> singletonIterator0 = new SingletonIterator<HashMap<BatchUpdateException, DataTruncation>>(hashMap0, true);
      Transformer<Object, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLClientInfoException> linkedList2 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[2] = linkedList2;
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      IteratorUtils.get((Iterator<LinkedList<SQLClientInfoException>>) resettableListIterator0, 0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("b");
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(3152);
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(arrayDeque0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Integer>) loopingIterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The current criterion '");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 1224, 1224);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 2);
      Iterator<ClientInfoStatus> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UWA");
      iteratorArray0[1] = (Iterator<ClientInfoStatus>) resettableListIterator0;
      IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) comparator0, (Iterator<? extends ClientInfoStatus>[]) iteratorArray0);
      ArrayList<ArrayList<IIOMetadataNode>> arrayList0 = new ArrayList<ArrayList<IIOMetadataNode>>();
      ResettableListIterator<ArrayList<IIOMetadataNode>> resettableListIterator1 = IteratorUtils.loopingListIterator((List<ArrayList<IIOMetadataNode>>) arrayList0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("O#MFf>TJ,IG=#l3*(4", classArray0, classArray0);
      IteratorUtils.toString((Iterator<ArrayList<IIOMetadataNode>>) resettableListIterator1, (Transformer<? super ArrayList<IIOMetadataNode>, String>) invokerTransformer0);
      MapIterator<Integer, Transformer<String, IIOMetadataNode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<Integer>) mapIterator0);
      IteratorUtils.size(iteratorArray0[1]);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/(dG@", "W(S2< @'y'`+p", (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/(dG@", "Enumeration must not be null", 17, sQLNonTransientConnectionException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList2 = new LinkedList<SQLClientInfoException>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 10);
      linkedListArray0[1] = linkedList2;
      linkedListArray0[2] = linkedList0;
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny(iterator0, (Predicate<? super String>) predicate0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(123);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The map size must be 0 or 1", "org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", 3334, sQLClientInfoException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLClientInfoException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("Tw(U9kS", "org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator", 61, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException(sQLClientInfoException0);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("_9?(-K)", "Tw(U9kS", sQLTimeoutException3);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("@o{", (String) null, 1396, sQLTimeoutException4);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("_9?(-K)", "@o{");
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("hYd5V0y=ZQguLaS", "@o{", sQLTimeoutException4);
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 0);
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredIterator((Iterator<? extends LinkedList<SQLClientInfoException>>) resettableListIterator0, (Predicate<? super LinkedList<SQLClientInfoException>>) uniquePredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.hasAttributeNS("", "");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      StringValueTransformer.stringValueTransformer();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      IteratorUtils.getIterator(iIOMetadataNode1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]C<(P[=Um_4", "]C<(P[=Um_4", sQLTransientConnectionException1);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientConnectionException) null);
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 1346);
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(list0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLTimeoutException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) listIteratorWrapper0, (Predicate<? super SQLTimeoutException>) onePredicate0);
      FalsePredicate.falsePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.matchesAny((Iterator<String>) null, (Predicate<? super String>) onePredicate0);
      int[] intArray0 = new int[8];
      intArray0[0] = 3155;
      intArray0[1] = (-5563);
      intArray0[2] = 1;
      intArray0[3] = 783;
      intArray0[4] = 1951;
      intArray0[5] = (-2397);
      intArray0[6] = 1117;
      intArray0[7] = 3215;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("u3KN,0", "", intArray0, (Throwable) null);
      IteratorUtils.singletonIterator(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      HashSet<SQLIntegrityConstraintViolationException>[] hashSetArray0 = (HashSet<SQLIntegrityConstraintViolationException>[]) Array.newInstance(HashSet.class, 9);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      hashSetArray0[0] = (HashSet<SQLIntegrityConstraintViolationException>) linkedHashSet0;
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      hashSetArray0[1] = hashSet0;
      HashSet<SQLIntegrityConstraintViolationException> hashSet1 = new HashSet<SQLIntegrityConstraintViolationException>();
      hashSetArray0[2] = hashSet1;
      HashSet<SQLIntegrityConstraintViolationException> hashSet2 = new HashSet<SQLIntegrityConstraintViolationException>();
      hashSetArray0[3] = hashSet2;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet1 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      hashSetArray0[4] = (HashSet<SQLIntegrityConstraintViolationException>) linkedHashSet1;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet2 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      hashSetArray0[5] = (HashSet<SQLIntegrityConstraintViolationException>) linkedHashSet2;
      int int0 = (-1231);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet3 = null;
//      try {
        linkedHashSet3 = new LinkedHashSet<SQLIntegrityConstraintViolationException>((-1231), (-1231));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal initial capacity: -1231
//         //
//         verifyException("java.util.HashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, Locale.Category> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.hasAttributeNS("", "");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      OrderedMapIterator<SQLRecoverableException, LinkedHashSet<SQLTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLRecoverableException, LinkedHashSet<SQLTransientException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, LinkedHashSet<SQLTransientException>>) orderedMapIterator0);
      Transformer<SQLRecoverableException, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) mapIterator1, (Transformer<? super SQLRecoverableException, ? extends SQLTransientConnectionException>) transformer0);
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) iterator1);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("$e2", "T5x", intArray0);
      Transformer<Object, SQLTransactionRollbackException> transformer1 = InvokerTransformer.invokerTransformer("$e2");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer1, predicate0);
      Transformer<Object, BatchUpdateException> transformer2 = ConstantTransformer.nullTransformer();
      Transformer<Object, BatchUpdateException> transformer3 = IfTransformer.ifTransformer((Predicate<? super Object>) transformedPredicate0, (Transformer<? super Object, ? extends BatchUpdateException>) transformer2, (Transformer<? super Object, ? extends BatchUpdateException>) transformer2);
      IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer3);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableListIterator0, class0);
      EmptyIterator.emptyIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      IteratorUtils.getIterator(stringTokenizer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableListIterator0, class0);
      EmptyIterator.emptyIterator();
      StringValueTransformer.stringValueTransformer();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 1);
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      Iterator<LinkedList<SQLClientInfoException>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends LinkedList<SQLClientInfoException>>) resettableListIterator0, (Predicate<? super LinkedList<SQLClientInfoException>>) uniquePredicate0);
      StringValueTransformer.stringValueTransformer();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.getIterator(iterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Stack<PriorityQueue>>) listIterator0, (Transformer<? super Stack<PriorityQueue>, String>) transformer0, "!.4&f7", "<[7S}8GdPJIgq3S", "!.4&f7");
      IteratorUtils.emptyOrderedIterator();
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.FORMAT;
      locale_CategoryArray0[7] = locale_Category7;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.Category>) resettableIterator0, (Transformer<? super Locale.Category, ? extends SQLInvalidAuthorizationSpecException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Transformer must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Transformer must not be null");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Transformer must not be null", sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]C<(P[=UmB_4p", "]C<(P[=UmB_4p", sQLTransientConnectionException1);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) list0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("]C<(P[=UmB_4p");
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0);
      ArrayListIterator<Boolean> arrayListIterator0 = null;
//      try {
        arrayListIterator0 = new ArrayListIterator<Boolean>(sQLSyntaxErrorException0, 3, 3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fN", "", hashMap0);
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, (-2951), 10, sQLClientInfoException0);
      arrayList0.add(dataTruncation0);
      Class<DataTruncation> class0 = DataTruncation.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableListIterator0, class0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapIterator<StringTokenizer, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException("", "", (Throwable) null);
      ConstantTransformer<Object, SQLNonTransientException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientException>(sQLDataException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Stack<Iterator<DataTruncation>> stack0 = new Stack<Iterator<DataTruncation>>();
      ConstantTransformer.constantTransformer(stack0);
      sQLDataException0.forEach(consumer0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLDataException0, (Transformer<? super SQLException, ? extends SQLException>) constantTransformer0);
      IteratorUtils.toString(iterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, 1783);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.isEmpty(listIterator0);
      HashMap<BatchUpdateException, DataTruncation> hashMap0 = new HashMap<BatchUpdateException, DataTruncation>();
      SingletonIterator<HashMap<BatchUpdateException, DataTruncation>> singletonIterator0 = new SingletonIterator<HashMap<BatchUpdateException, DataTruncation>>(hashMap0, true);
      OrderedMapIterator<SQLClientInfoException, SQLTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLTransientException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLTransientException>) orderedMapIterator1);
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator2, (Iterator<? extends SQLClientInfoException>) orderedMapIterator1);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Stack<PriorityQueue>>) singletonIterator0, (Transformer<? super Stack<PriorityQueue>, String>) transformer0, "A", "Closure must not be null", "d");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      FalsePredicate.falsePredicate();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny(iterator0, (Predicate<? super String>) predicate0);
      IteratorUtils.toList((Iterator<? extends String>) iterator0, 1346);
      IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // List must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ArrayList<DataTruncation> arrayList1 = new ArrayList<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(773, true, true, 35, (-3342));
      arrayList1.add(dataTruncation0);
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList1);
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 0);
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredIterator((Iterator<? extends LinkedList<SQLClientInfoException>>) resettableListIterator0, (Predicate<? super LinkedList<SQLClientInfoException>>) uniquePredicate0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.arrayListIterator(linkedListArray0);
      int int0 = 100;
      ObjectArrayListIterator<LinkedList<SQLClientInfoException>> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<LinkedList<SQLClientInfoException>>(linkedListArray0, 100, 123);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableListIterator0, class0);
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny(iterator0, (Predicate<? super String>) predicate0);
      IteratorUtils.toList((Iterator<? extends String>) iterator0, 775);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      OrderedMapIterator<SQLTimeoutException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ListIterator<SQLTimeoutException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) listIteratorWrapper0, (Predicate<? super SQLTimeoutException>) onePredicate0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) listIterator1);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      EmptyIterator.emptyIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("IF%8l5M.F@op(uB", "ExceptionFactory invoked");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null, 30);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "";
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(arrayDeque0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) loopingIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) hashSet0);
      DefaultEquator.defaultEquator();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 20);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 10;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", (Throwable) null);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cursor closed");
      Hashtable<ClientInfoStatus, HashSet<Properties>> hashtable0 = new Hashtable<ClientInfoStatus, HashSet<Properties>>();
      EntrySetMapIterator<ClientInfoStatus, HashSet<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<ClientInfoStatus, HashSet<Properties>>(hashtable0);
      entrySetMapIterator0.reset();
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) entrySetMapIterator0, (Iterator<? extends ClientInfoStatus>) entrySetMapIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.toListIterator((Iterator<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) orderedMapIterator0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 4);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList1;
      linkedListArray0[2] = linkedList1;
      Object object0 = new Object();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("/SZz &(f", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<HashMap>>) orderedMapIterator0, (Predicate<? super ArrayDeque<HashMap>>) predicate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("*UU:", "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "setValue() can only be called after next() and before remove()", 775, sQLRecoverableException0);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[8];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLRecoverableException0);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 775);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Stack<PriorityQueue>>) null, (Transformer<? super Stack<PriorityQueue>, String>) transformer0, "!.4&f7", "g", "L`\"<kMA^Rf.dw^:Br`");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) orderedMapIterator0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 4);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList1;
      linkedListArray0[2] = linkedList1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((HashMap<BatchUpdateException, DataTruncation>[]) null, 2074, 2074);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      OrderedMapIterator<SQLTimeoutException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(orderedMapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(597, true, true, 597, (-2538));
      ListIterator<DataTruncation> listIterator1 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) listIterator1, (Iterator<? extends DataTruncation>) listIterator1);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) listIterator1, (Iterator<? extends DataTruncation>) listIterator1, (Iterator<? extends DataTruncation>) iterator0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) zippingIterator0, class0);
      Iterator<String> iterator1 = EmptyIterator.emptyIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny(iterator1, (Predicate<? super String>) predicate0);
      IteratorUtils.size(listIteratorWrapper0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDeque0.poll();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_Category0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      predicateArray0[2] = predicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[3] = predicate1;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[4] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicateArray0[0]);
      predicateArray0[5] = predicate2;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ListIterator<SQLTimeoutException> listIterator0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicateArray0[0]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDeque0.poll();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>();
      arrayDeque0.addAll(priorityQueue0);
      ListIterator<ArrayDeque<SQLTransientConnectionException>> listIterator0 = IteratorUtils.singletonListIterator(arrayDeque0);
      IteratorUtils.isEmpty(listIterator0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "]C<(P[=UmB_4p");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]C<(P[=UmB_4p", "]C<(P[=UmB_4p", sQLTransientConnectionException1);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) list0);
      OrderedMapIterator<Object, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<HashMap>>) orderedMapIterator0, (Predicate<? super ArrayDeque<HashMap>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, TreeSet<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, TreeSet<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, TreeSet<Object>>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, TreeSet<Object>>) abstractOrderedMapIteratorDecorator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("B", sQLNonTransientConnectionException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      sQLNonTransientConnectionException0.getSuppressed();
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) stack0);
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) resettableListIterator0, (-127L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Max parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, TreeSet<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, TreeSet<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, TreeSet<Object>>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, TreeSet<Object>>) abstractOrderedMapIteratorDecorator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("B", sQLNonTransientConnectionException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      InvokerTransformer.invokerTransformer("B");
      sQLNonTransientConnectionException0.getSuppressed();
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) singletonIterator0, (Closure<? super SQLTransientConnectionException>) closure0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("transformer may not be null");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("transformer may not be null", "transformer may not be null", (-3736), sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("");
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLFeatureNotSupportedException4);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "oa{jJ%y6k[n7#(S]}Y", 869);
      IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Object) sQLTransientConnectionException1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLException>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Enumeration must not be null");
      int int0 = 5;
//      try { 
        iIOMetadataNode0.getTextContent();
//        fail("Expecting exception: DOMException");
      
//      } catch(DOMException e) {
//         //
//         // Method not supported
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("a=<|t", "a=<|t");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException1);
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) orderedMapIterator0);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) listIterator0);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = (Iterator<String>) orderedMapIterator0;
      Iterator<String> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) iterator1, (Iterator<? extends String>) listIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("ac*#`");
      SQLDataException sQLDataException1 = new SQLDataException("");
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = null;
//      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>((SQLDataException[]) null, 0, 39);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, TreeSet<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, TreeSet<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, TreeSet<Object>>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, TreeSet<Object>>) abstractOrderedMapIteratorDecorator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) iterator0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      NullPredicate.nullPredicate();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      DataTruncation dataTruncation0 = new DataTruncation(1500, false, false, 1500, 2561);
      dataTruncationArray0[0] = dataTruncation0;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableIterator0, class0);
      int[] intArray0 = new int[9];
      intArray0[0] = 16;
      intArray0[1] = 2561;
      intArray0[2] = 1500;
      intArray0[3] = 1500;
      intArray0[4] = 2561;
      intArray0[5] = 1500;
      intArray0[6] = 2561;
      intArray0[7] = 1500;
      intArray0[8] = 1500;
      dataTruncation0.getDataSize();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("rHcuKht8h", "rHcuKht8h", intArray0, dataTruncation0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.forEach(consumer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) listIterator0, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // NodeList must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableListIterator0, class0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.listIterator();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null, 778);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      OrderedMapIterator<SQLTimeoutException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ListIterator<SQLTimeoutException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) listIteratorWrapper0, (Predicate<? super SQLTimeoutException>) onePredicate0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) listIterator1);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) linkedHashSet0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Integer integer0 = new Integer((-1));
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) integer0, (Equator<Object>) defaultEquator0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "|!xt\"^uLra";
      stringArray0[1] = "|!xt\"^uLra";
      stringArray0[2] = "`0mIiQE";
      stringArray0[3] = "|!xt\"^uLra";
      stringArray0[4] = "|!xt\"^uLra";
      stringArray0[5] = "|!xt\"^uLra";
      stringArray0[6] = "|!xt\"^uLra";
      stringArray0[7] = "|!xt\"^uLra";
      stringArray0[8] = "`0mIiQE";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 3);
      Predicate<String> predicate0 = new IdentityPredicate<String>("|!xt\"^uLra");
      IteratorUtils.matchesAny((Iterator<String>) objectArrayListIterator0, (Predicate<? super String>) predicate0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Hashtable<SQLRecoverableException, StringTokenizer> hashtable0 = new Hashtable<SQLRecoverableException, StringTokenizer>();
      EntrySetMapIterator<SQLRecoverableException, StringTokenizer> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, StringTokenizer>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, StringTokenizer>) entrySetMapIterator0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_,$7_aws#XY";
      stringArray0[1] = "ra%T(,{GYPsh|ZGGU";
      stringArray0[2] = "";
      stringArray0[3] = "vffYE~Y*[";
      stringArray0[4] = "list (";
      stringArray0[5] = "Already at start of list.";
      stringArray0[6] = "Entry does not exist: ";
      stringArray0[7] = "fO\"Qh3;YXx}";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) objectArrayListIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      IteratorUtils.asIterable((Iterator<?>) iterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      Enumeration<SQLTransientConnectionException> enumeration0 = stack0.elements();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iterator0, comparator0, comparatorPredicate_Criterion0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(comparatorPredicate0, comparatorPredicate0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(comparatorPredicate0, closure0, false);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) comparatorPredicate0, (Closure<? super Object>) whileClosure0, (Closure<? super Object>) whileClosure0);
      Closure<Object> closure2 = IfClosure.ifClosure((Predicate<? super Object>) andPredicate0, (Closure<? super Object>) closure1);
      IteratorUtils.apply(iterator0, (Closure<? super SQLTransientConnectionException>) closure2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("sPajSR&++0nwP&OJ");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("sPajSR&++0nwP&OJ", "sPajSR&++0nwP&OJ", (-3251), sQLFeatureNotSupportedException2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("transformer may not be null");
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException3;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(";'=0Q@cM Xw~", sQLFeatureNotSupportedException3);
      IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Object) sQLFeatureNotSupportedException3);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("Rl)C.ies@");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Rl)C.ies@", sQLTimeoutException0);
      sQLNonTransientConnectionException0.getSuppressed();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) orderedIterator0, (Closure<? super SQLTransientConnectionException>) closure0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("g?8?");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("List must not be null", "g?8?", (-3251), sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("transformer may not be null");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("Rl)C.ies@", "g?8?", 0, sQLFeatureNotSupportedException2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("tFRl", sQLFeatureNotSupportedException6);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLFeatureNotSupportedException5);
      HashMap<Predicate<SQLException>, Properties>[] hashMapArray0 = (HashMap<Predicate<SQLException>, Properties>[]) Array.newInstance(HashMap.class, 5);
      HashMap<Predicate<SQLException>, Properties> hashMap0 = new HashMap<Predicate<SQLException>, Properties>();
      hashMapArray0[0] = hashMap0;
      HashMap<Predicate<SQLException>, Properties> hashMap1 = new HashMap<Predicate<SQLException>, Properties>();
      hashMapArray0[1] = hashMap1;
      HashMap<Predicate<SQLException>, Properties> hashMap2 = new HashMap<Predicate<SQLException>, Properties>();
      hashMapArray0[2] = hashMap2;
      HashMap<Predicate<SQLException>, Properties> hashMap3 = new HashMap<Predicate<SQLException>, Properties>();
      hashMapArray0[3] = hashMap3;
      HashMap<Predicate<SQLException>, Properties> hashMap4 = new HashMap<Predicate<SQLException>, Properties>();
      hashMapArray0[4] = hashMap4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(hashMapArray0, (-1535), (-1535));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]C<(P[=UmB_4p");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) arrayList0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<SQLNonTransientException> closure1 = IfClosure.ifClosure((Predicate<? super SQLNonTransientException>) predicate0, (Closure<? super SQLNonTransientException>) closure0);
      IteratorUtils.apply((Iterator<SQLDataException>) null, (Closure<? super SQLDataException>) closure1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(arrayDeque0);
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) loopingIterator0);
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("1f1\"Io`LQM");
      Throwable throwable0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, (Throwable) null);
      sQLNonTransientConnectionException0.getSuppressed();
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Enumeration must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(vector0);
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) reverseListIterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "predicate must not be null.";
      stringArray0[1] = "`Na&w|?~MdyM";
      stringArray0[2] = "8^pX]8%&+d;U";
      stringArray0[3] = "";
      stringArray0[4] = "Transformer must not be null";
      arrayList0.toArray(stringArray0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableListIterator0, class0);
      FalsePredicate.falsePredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.loopingIterator((Collection<? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Collection must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayDeque0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, 3868L);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<Stack<PriorityQueue>>) resettableIterator0, (Transformer<? super Stack<PriorityQueue>, String>) transformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) iterator0, (Iterator<? extends SQLTransientConnectionException>) iterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("suffix may not be null", "", (-2596), sQLNonTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException("suffix may not be null", "", 12, sQLTransientException0);
      ConstantTransformer<Object, SQLDataException> constantTransformer0 = new ConstantTransformer<Object, SQLDataException>(sQLDataException0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(constantTransformer0, predicate0);
      TransformedPredicate<Object> transformedPredicate1 = new TransformedPredicate<Object>(constantTransformer0, transformedPredicate0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      UniquePredicate.uniquePredicate();
      NotPredicate.notPredicate((Predicate<? super Object>) transformedPredicate1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = new Properties();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<TreeSet<SQLWarning>>) null, (Predicate<? super TreeSet<SQLWarning>>) allPredicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(9, false, false, 1, 9);
      arrayList0.add(dataTruncation0);
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 10);
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredIterator((Iterator<? extends LinkedList<SQLClientInfoException>>) resettableListIterator0, (Predicate<? super LinkedList<SQLClientInfoException>>) uniquePredicate0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ArrayList<IIOMetadataNode> arrayList1 = new ArrayList<IIOMetadataNode>(330);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) arrayList1);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      IteratorUtils.find((Iterator<LinkedHashSet<SQLException>>) null, (Predicate<? super LinkedHashSet<SQLException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      SingletonListIterator<TreeSet<SQLWarning>> singletonListIterator0 = new SingletonListIterator<TreeSet<SQLWarning>>(treeSet0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) treeSet0, comparator0);
      predicateArray0[0] = predicate0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      SQLException sQLException0 = new SQLException(sQLRecoverableException0);
      sQLException0.addSuppressed(sQLDataException0);
      DataTruncation dataTruncation0 = new DataTruncation(3495, false, false, 103, 0, sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Stack<PriorityQueue>>) singletonListIterator0, (Transformer<? super Stack<PriorityQueue>, String>) null, "", ">E)kMe", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) orderedMapIterator0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) orderedMapIterator0);
      SQLException sQLException0 = new SQLException((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<3~=[/k,^Cj&4u", "org.apache.commons.collections4.list.AbstractLinkedList", (Throwable) null);
      sQLException0.addSuppressed(sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation(3281, false, false, 0, 3281);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Stack<PriorityQueue>>) iterator0, (Transformer<? super Stack<PriorityQueue>, String>) null, "org.apache.commons.collections4.iterators.IteratorChain", "<3~=[/k,^Cj&4u", "Lt T@Pq0");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // transformer may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      SingletonListIterator<TreeSet<SQLWarning>> singletonListIterator0 = new SingletonListIterator<TreeSet<SQLWarning>>(treeSet0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicateArray0[0]);
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      SQLDataException sQLDataException1 = new SQLDataException("", "", 0, sQLDataException0);
      sQLDataException0.fillInStackTrace();
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicateArray0[1]);
      predicateArray0[3] = predicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate2);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<TreeSet<SQLWarning>>) singletonListIterator0, (Predicate<? super TreeSet<SQLWarning>>) predicate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.functors.NullIsFalsePredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null.
//         //
//         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(vector0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) reverseListIterator0, (Iterator<? extends DataTruncation>) reverseListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<Integer>) objectArrayIterator0, (Predicate<? super Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MapIterator<SQLDataException, Closure<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) mapIterator0, 0L, 0L);
      int int0 = (-456);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) boundedIterator0, (-456));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      StringValueTransformer.stringValueTransformer();
      String string0 = "org.apache.commons.collections4.functors.ExceptionFactory";
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0, 778);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) iterator0);
      OrderedMapIterator<Integer, PriorityQueue<SQLNonTransientConnectionException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-38);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find((Iterator<Integer>) orderedMapIterator0, (Predicate<? super Integer>) predicate0);
      int int0 = 2077;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) null, 2077);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) orderedMapIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0, 0, 0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) objectArrayListIterator0);
      IteratorUtils.isEmpty(listIterator0);
      HashMap<BatchUpdateException, DataTruncation> hashMap0 = new HashMap<BatchUpdateException, DataTruncation>();
      SingletonIterator<HashMap<BatchUpdateException, DataTruncation>> singletonIterator0 = new SingletonIterator<HashMap<BatchUpdateException, DataTruncation>>(hashMap0, true);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.matchesAny((Iterator<String>) orderedMapIterator0, (Predicate<? super String>) predicate0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      arrayDeque0.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      MapIterator<SQLNonTransientConnectionException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, 3843L);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) arrayDeque0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends String>) orderedMapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("I%>*hCwV", "I%>*hCwV");
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      arrayDeque0.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayDeque0);
      MapIterator<SQLNonTransientConnectionException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.size(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, (long) 0);
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) properties0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, TreeSet<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, TreeSet<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, TreeSet<Object>>(orderedMapIterator0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((SQLRecoverableException[]) null, 1, 2076);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList2 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList3 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 7);
      linkedListArray0[0] = linkedList1;
      linkedListArray0[1] = linkedList2;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("org.apache.commons.collections4.iterators.EmptyMapIterator", hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("org.apache.commons.collections4.iterators.EmptyMapIterator", hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      String string0 = "xa/-~>F`Zub6Da";
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("org.apache.commons.collections4.iterators.EmptyMapIterator", "xa/-~>F`Zub6Da", (-1173), hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("org.apache.commons.collections4.iterators.EmptyMapIterator", hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("xa/-~>F`Zub6Da", "", hashMap0, sQLClientInfoException4);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      String string1 = "'r<";
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("'r<", "", hashMap0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 10, 10);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) orderedMapIterator0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) orderedMapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 0);
      SQLException sQLException0 = new SQLException("", "");
      SQLDataException sQLDataException0 = new SQLDataException(sQLException0);
      ConstantTransformer<Object, SQLDataException> constantTransformer0 = new ConstantTransformer<Object, SQLDataException>(sQLDataException0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(constantTransformer0, predicate1);
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) transformedPredicate0);
      UniquePredicate.uniquePredicate();
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = new Properties();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(transformedPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      predicateArray0[1] = predicate1;
      predicateArray0[2] = predicate2;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Iterator<TreeSet<SQLWarning>> iterator1 = EmptyIterator.emptyIterator();
      IteratorUtils.find(iterator1, (Predicate<? super TreeSet<SQLWarning>>) predicateArray0[0]);
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      SingletonListIterator<TreeSet<SQLWarning>> singletonListIterator0 = new SingletonListIterator<TreeSet<SQLWarning>>(treeSet0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3495).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) treeSet0, comparator0);
      predicateArray0[0] = predicate0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      SQLDataException sQLDataException1 = new SQLDataException("", "", 0, sQLDataException0);
      ConstantTransformer<Object, SQLDataException> constantTransformer0 = new ConstantTransformer<Object, SQLDataException>(sQLDataException1);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(constantTransformer0, predicate0);
      predicateArray0[2] = (Predicate<Object>) transformedPredicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicateArray0[1]);
      predicateArray0[3] = predicate1;
      AndPredicate.andPredicate((Predicate<? super Object>) nullIsFalsePredicate0, (Predicate<? super Object>) predicate0);
      UniquePredicate.uniquePredicate();
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = new Properties();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(properties0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<TreeSet<SQLWarning>>) singletonListIterator0, (Predicate<? super TreeSet<SQLWarning>>) predicateArray0[1]);
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      SingletonListIterator<TreeSet<SQLWarning>> singletonListIterator0 = new SingletonListIterator<TreeSet<SQLWarning>>(treeSet0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3495).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) treeSet0, comparator0);
      predicateArray0[0] = predicate0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      SQLDataException sQLDataException1 = new SQLDataException("", "", 0, sQLDataException0);
      ConstantTransformer<Object, SQLDataException> constantTransformer0 = new ConstantTransformer<Object, SQLDataException>(sQLDataException1);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(constantTransformer0, predicate0);
      predicateArray0[2] = (Predicate<Object>) transformedPredicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicateArray0[1]);
      predicateArray0[3] = predicate1;
      AndPredicate.andPredicate((Predicate<? super Object>) nullIsFalsePredicate0, (Predicate<? super Object>) predicate0);
      UniquePredicate.uniquePredicate();
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = new Properties();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(properties0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<TreeSet<SQLWarning>>) singletonListIterator0, (Predicate<? super TreeSet<SQLWarning>>) predicateArray0[1]);
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) stack0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      OrderedMapIterator<SQLTimeoutException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(orderedMapIterator0);
      Class<DataTruncation> class0 = DataTruncation.class;
      // Undeclared exception!
//      try { 
        IteratorUtils.toArray((Iterator<? extends DataTruncation>) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.skippingIterator((Iterator<String>) listIterator0, (-3844L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) orderedMapIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0, 0, 0);
      // Undeclared exception!
//      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      arrayDeque0.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayDeque0);
      long long0 = 3868L;
      MapIterator<SQLNonTransientConnectionException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      StringValueTransformer.stringValueTransformer();
      ListIterator<DataTruncation> listIterator1 = EmptyListIterator.emptyListIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) listIterator1);
      IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) iterator0, (Iterator<? extends SQLWarning>) listIterator1);
      IteratorUtils.toString((Iterator<SQLException>) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", "org.apache.commons.collections4.iterators.AbstractEmptyIterator");
      ArrayIterator<IIOMetadataNode> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<IIOMetadataNode>(sQLInvalidAuthorizationSpecException0, 100);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Stack<PriorityQueue>>) resettableListIterator0, (Transformer<? super Stack<PriorityQueue>, String>) transformer1, "!.4&f7", "!.4&f7", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // suffix may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ListIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("eXXTeSOV1CCw{%$");
      OrderedMapIterator<SQLRecoverableException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLClientInfoException>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) null, (-2981));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList2 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList3 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 7);
      linkedListArray0[0] = linkedList1;
      linkedListArray0[1] = linkedList2;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(vector0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) reverseListIterator0, (Iterator<? extends DataTruncation>) reverseListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        iIOMetadataNode0.getElementsByTagName((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, 128);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.item(44);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 12, (-1540));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      SingletonListIterator<TreeSet<SQLWarning>> singletonListIterator0 = new SingletonListIterator<TreeSet<SQLWarning>>(treeSet0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) treeSet0, comparator0);
      predicateArray0[0] = predicate0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 0);
      ConstantTransformer.nullTransformer();
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("iRe[[`W@-+YrTj", (Class<?>[]) null, (Object[]) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("6Fg", ",E#okKQx3>a+|+");
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>(stringTokenizer0);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray1[0] = predicate0;
      predicateArray1[1] = (Predicate<Object>) nullIsFalsePredicate0;
      predicateArray1[2] = (Predicate<Object>) nullIsFalsePredicate0;
      predicateArray1[3] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray1[5] = predicate0;
      Transformer<Object, StringTokenizer>[] transformerArray0 = (Transformer<Object, StringTokenizer>[]) Array.newInstance(Transformer.class, 5);
      transformerArray0[0] = transformer0;
      transformerArray0[1] = transformer0;
      transformerArray0[2] = transformer0;
      transformerArray0[3] = (Transformer<Object, StringTokenizer>) constantTransformer0;
      transformerArray0[4] = transformer0;
      SwitchTransformer<StringTokenizer, StringTokenizer> switchTransformer0 = new SwitchTransformer<StringTokenizer, StringTokenizer>(predicateArray1, transformerArray0, transformer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 1);
      linkedListArray0[0] = linkedList0;
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends LinkedList<SQLClientInfoException>>) resettableListIterator0, (Predicate<? super LinkedList<SQLClientInfoException>>) predicate0);
      OrderedMapIterator<LinkedList<SQLClientInfoException>, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<LinkedList<SQLClientInfoException>, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<LinkedList<SQLClientInfoException>, SQLNonTransientConnectionException>(orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<LinkedList<SQLClientInfoException>, ? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, TreeSet<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, TreeSet<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, TreeSet<Object>>(orderedMapIterator0);
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("B");
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("transformer may not be null");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.item(2506);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) resettableListIterator0);
      Vector<Predicate<Object>> vector1 = new Vector<Predicate<Object>>();
      Predicate<SQLException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLException>>) vector1);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) nullIsFalsePredicate0, (-2529));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) iterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) zippingIterator0, class0);
      IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, Boolean> transformer0 = null;
      // Undeclared exception!
//      try { 
        TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The transformer to call must not be null
//         //
//         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList2 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList3 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 7);
      linkedListArray0[0] = linkedList1;
      linkedListArray0[1] = linkedList2;
      linkedListArray0[2] = linkedList1;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      linkedListArray0[3] = linkedList0;
      linkedListArray0[4] = linkedList0;
      linkedListArray0[5] = linkedList0;
      linkedListArray0[6] = linkedList1;
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Iterator<LinkedList<SQLClientInfoException>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends LinkedList<SQLClientInfoException>>) resettableListIterator0, (Predicate<? super LinkedList<SQLClientInfoException>>) predicate0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get(iterator0, 123);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 123
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 7);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLClientInfoException> linkedList2 = new LinkedList<SQLClientInfoException>();
      LinkedList<DataTruncation> linkedList3 = new LinkedList<DataTruncation>();
      linkedList3.descendingIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) linkedList1, 44, 10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("eXXTeSOV1CCw{%$");
      iIOMetadataNode0.item(0);
      iIOMetadataNode0.getElementsByTagNameNS("eXXTeSOV1CCw{%$", "eXXTeSOV1CCw{%$");
      iIOMetadataNode0.hasAttributeNS("eXXTeSOV1CCw{%$", "eXXTeSOV1CCw{%$");
      iIOMetadataNode0.getPrefix();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.pushbackIterator((Iterator<?>) nodeListIterator0);
      EmptyListIterator.emptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringTokenizer stringTokenizer0 = new StringTokenizer("G:%X1w;~Y,jS%#Y6`", "1ClE>");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = null;
      predicateArray0[1] = null;
      predicateArray0[2] = null;
      predicateArray0[3] = null;
      predicateArray0[4] = null;
      predicateArray0[5] = null;
      predicateArray0[6] = predicateArray0[1];
      predicateArray0[7] = null;
      predicateArray0[8] = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Vector<SQLInvalidAuthorizationSpecException>, StringTokenizer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MapIterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, TreeSet<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, TreeSet<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, TreeSet<Object>>(orderedMapIterator0);
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("B");
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("transformer may not be null");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("B", "transformer may not be null", (-3251), sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("B");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("transformer may not be null", sQLFeatureNotSupportedException2);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Object) sQLTransactionRollbackException0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      SingletonListIterator<TreeSet<SQLWarning>> singletonListIterator0 = new SingletonListIterator<TreeSet<SQLWarning>>(treeSet0);
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
//      try { 
        IteratorUtils.toString((Iterator<Stack<PriorityQueue>>) iterator0, (Transformer<? super Stack<PriorityQueue>, String>) transformer0, (String) null, "&R>jjihiIkW)", "m^dV>RB");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // delimiter may not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) null, 5864);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[4];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("]", "", 91);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]", "]", (-1422), hashMap1, sQLNonTransientConnectionException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      sQLExceptionArray0[0] = (SQLException) sQLClientInfoException1;
      SQLWarning sQLWarning0 = new SQLWarning("0wj6#.zeU$'eOG", "f`c", 1389);
      sQLExceptionArray0[1] = (SQLException) sQLWarning0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("0wj6#.zeU$'eOG", sQLExceptionArray0[0]);
      sQLExceptionArray0[2] = (SQLException) sQLIntegrityConstraintViolationException0;
      int[] intArray0 = new int[5];
      intArray0[0] = 91;
      intArray0[1] = 91;
      intArray0[2] = 1389;
      intArray0[3] = 91;
      intArray0[4] = 91;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0);
      sQLExceptionArray0[3] = (SQLException) batchUpdateException0;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, 1389, 91);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1, 531L);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) boundedIterator0, (Closure<? super SQLFeatureNotSupportedException>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Closure must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "w");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("List must not be null", "w", 0, sQLTransientConnectionException0);
      sQLFeatureNotSupportedException0.addSuppressed(sQLTransientConnectionException0);
      SQLException sQLException0 = new SQLException(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must not be null", "?", 0, sQLException0);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.Flat3Map$KeySet", "\"Hr3vopEicH`!{~", sQLTransactionRollbackException0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      sQLDataException0.printStackTrace();
      sQLTransactionRollbackException0.printStackTrace();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      Iterable<SQLNonTransientException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) resettableListIterator0, (Iterator<? extends SQLWarning>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[5];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("S[3K%+=,'", "", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("add() method is not supported");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("", "Cannot put new key/value pair - Map is fixed size singleton", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, (-1747));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be less than zero
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<BatchUpdateException, DataTruncation> hashMap0 = new HashMap<BatchUpdateException, DataTruncation>();
      ListIterator<HashMap<BatchUpdateException, DataTruncation>> listIterator0 = IteratorUtils.singletonListIterator(hashMap0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<HashMap<BatchUpdateException, DataTruncation>>) listIterator0, (Predicate<? super HashMap<BatchUpdateException, DataTruncation>>) predicate0);
      ArrayIterator<SQLDataException> arrayIterator0 = null;
//      try {
        arrayIterator0 = new ArrayIterator<SQLDataException>((Object) null, (-255));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      SingletonListIterator<TreeSet<SQLWarning>> singletonListIterator0 = new SingletonListIterator<TreeSet<SQLWarning>>(treeSet0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) treeSet0, comparator0);
      predicateArray0[0] = predicate0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      SQLDataException sQLDataException1 = new SQLDataException("", "", 0, sQLDataException0);
      ConstantTransformer<Object, SQLDataException> constantTransformer0 = new ConstantTransformer<Object, SQLDataException>(sQLDataException1);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(constantTransformer0, predicate0);
      predicateArray0[2] = (Predicate<Object>) transformedPredicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicateArray0[1]);
      predicateArray0[3] = predicate1;
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      predicateArray0[4] = predicate2;
      Predicate<Object> predicate3 = UniquePredicate.uniquePredicate();
      predicateArray0[5] = predicate3;
      Predicate<Object> predicate4 = NotPredicate.notPredicate((Predicate<? super Object>) predicateArray0[2]);
      predicateArray0[6] = predicate4;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[7] = (Predicate<Object>) uniquePredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(uniquePredicate0);
      predicateArray0[8] = (Predicate<Object>) equalPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<TreeSet<SQLWarning>>) singletonListIterator0, (Predicate<? super TreeSet<SQLWarning>>) nonePredicate0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) orderedMapIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0, 0, 0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) objectArrayListIterator0);
      IteratorUtils.isEmpty(listIterator0);
      HashMap<BatchUpdateException, DataTruncation> hashMap0 = new HashMap<BatchUpdateException, DataTruncation>();
      SingletonIterator<HashMap<BatchUpdateException, DataTruncation>> singletonIterator0 = new SingletonIterator<HashMap<BatchUpdateException, DataTruncation>>(hashMap0, true);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
//      try { 
        IteratorUtils.find((Iterator<HashMap<BatchUpdateException, DataTruncation>>) singletonIterator0, (Predicate<? super HashMap<BatchUpdateException, DataTruncation>>) predicate0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionPredicate invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayDeque0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, 3868L);
      HashMap<BatchUpdateException, DataTruncation> hashMap0 = new HashMap<BatchUpdateException, DataTruncation>();
      ListIterator<HashMap<BatchUpdateException, DataTruncation>> listIterator0 = IteratorUtils.singletonListIterator(hashMap0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<HashMap<BatchUpdateException, DataTruncation>>) listIterator0, (Predicate<? super HashMap<BatchUpdateException, DataTruncation>>) predicate0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Stack<ArrayList<BatchUpdateException>> stack0 = new Stack<ArrayList<BatchUpdateException>>();
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      stack0.add(arrayList0);
      IteratorUtils.loopingIterator((Collection<? extends ArrayList<BatchUpdateException>>) stack0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0, 142L);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, 1248, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "eXXTeSOV1CCw{%$";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("eXXTeSOV1CCw{%$");
      iIOMetadataNode0.item(0);
      iIOMetadataNode0.getElementsByTagNameNS("eXXTeSOV1CCw{%$", "eXXTeSOV1CCw{%$");
      iIOMetadataNode0.hasAttributeNS("eXXTeSOV1CCw{%$", "eXXTeSOV1CCw{%$");
      iIOMetadataNode0.getPrefix();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.pushbackIterator((Iterator<?>) nodeListIterator0);
      ListIterator<ArrayList<SQLIntegrityConstraintViolationException>> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
//      try { 
        IteratorUtils.matchesAny((Iterator<ArrayList<SQLIntegrityConstraintViolationException>>) listIterator0, (Predicate<? super ArrayList<SQLIntegrityConstraintViolationException>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Predicate must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      IteratorUtils.arrayListIterator(locale_CategoryArray0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(list0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) predicateArray0[0]);
      predicateArray0[1] = predicate0;
      Transformer<Object, SQLInvalidAuthorizationSpecException>[] transformerArray0 = (Transformer<Object, SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Transformer.class, 2);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 2);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      // Undeclared exception!
//      try { 
        InvokerTransformer.invokerTransformer("'<[Ygr<}E73", (Class<?>[]) classArray0, (Object[]) locale_CategoryArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The parameter types must match the arguments
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 7);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLClientInfoException> linkedList2 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[2] = linkedList2;
      LinkedList<SQLClientInfoException> linkedList3 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[3] = linkedList3;
      LinkedList<SQLClientInfoException> linkedList4 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[4] = linkedList4;
      LinkedList<SQLClientInfoException> linkedList5 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[5] = linkedList5;
      LinkedList<SQLClientInfoException> linkedList6 = new LinkedList<SQLClientInfoException>();
      linkedListArray0[6] = linkedList6;
      ResettableListIterator<LinkedList<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<LinkedList<SQLClientInfoException>>) resettableListIterator0, 787);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Entry does not exist: 780
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      iIOMetadataNode0.getAttributeNode("$qctAaWS<qk(Ed,,y");
      // Undeclared exception!
//      try { 
        IteratorUtils.nodeListIterator((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Node must not be null
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("&8-DSh7M'_ zCS,oO", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("/X%HLe", "Array class must not be null", 0, sQLTransactionRollbackException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException1);
      iIOMetadataNode0.setUserObject(sQLDataException0);
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 0, 0, sQLTransactionRollbackException1);
      IteratorUtils.getIterator(dataTruncation0);
      IteratorUtils.emptyIterator();
      SQLWarning sQLWarning0 = new SQLWarning(sQLDataException0);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0, 0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("c&7e`}7Cw|:-B{<UC", "%Vx", (-1878));
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("c&7e`}7Cw|:-B{<UC", "ZW5[", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("=zovznFRYvZ'+^", "c&7e`}7Cw|:-B{<UC", 264, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "ZW5[");
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("%Vx", "ListIterator must not be null");
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      Iterator<Predicate<ArrayList>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Predicate<ArrayList>>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(arrayDeque0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) loopingIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) hashSet0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<Stack<PriorityQueue>>) iterator0, (Transformer<? super Stack<PriorityQueue>, String>) transformer0, "", "", "!.4&f7");
      assertEquals("!.4&f7", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("~Om%?\"N#4|'");
      sQLTransientConnectionException0.spliterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, sQLTransientConnectionException0);
      IteratorUtils.getIterator(sQLNonTransientException0);
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) iterator0, (-1L), (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
//      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (-1L), 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset parameter must not be negative.
//         //
//         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) iterator0, (Iterator<? extends SQLTransientConnectionException>) iterator0);
      int int0 = 12;
      boolean boolean0 = false;
      SQLException sQLException0 = new SQLException((Throwable) null);
      // Undeclared exception!
//      try { 
        sQLException0.addSuppressed((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot suppress a null exception.
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableListIterator0, class0);
      EmptyIterator.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, true);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ResettableIterator<Hashtable<SQLRecoverableException, String>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.skippingIterator((Iterator<Hashtable<SQLRecoverableException, String>>) resettableIterator0, 0L);
      OrderedMapIterator<SQLRecoverableException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLRecoverableException, SQLClientInfoException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLClientInfoException>) orderedMapIterator0);
      // Undeclared exception!
//      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) orderedMapIterator1, (-2981));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Estimated size must be greater than 0
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Iterator must not be null
//         //
//         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      arrayDeque0.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayDeque0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, 3868L);
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayIterator((Object) arrayDeque0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) orderedMapIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      SQLDataException sQLDataException0 = new SQLDataException("");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("");
      sQLDataExceptionArray0[1] = sQLDataException1;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0, 0, 0);
      Iterable<SQLException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLException>) objectArrayListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLSyntaxErrorException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLFeatureNotSupportedException>(orderedMapIterator0);
      // Undeclared exception!
//      try { 
        abstractOrderedMapIteratorDecorator0.getKey();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Iterator contains no elements
//         //
//         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLDataException sQLDataException0 = new SQLDataException("v!mZ)cHbfP7,D", "v!mZ)cHbfP7,D");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      String string0 = null;
      int int0 = 3112;
      SQLDataException sQLDataException2 = new SQLDataException((String) null, "VHxd", 3112, sQLDataException1);
      sQLDataException1.getLocalizedMessage();
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(sQLDataException2);
      sQLDataExceptionArray0[3] = sQLDataException3;
      String string1 = "U2%Q&7I:";
      SQLDataException sQLDataException4 = new SQLDataException("U2%Q&7I:", "U2%Q&7I:");
      sQLDataExceptionArray0[4] = sQLDataException4;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 3112, 3112);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // End index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
//      try { 
        IteratorUtils.get((Iterator<DataTruncation>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.IteratorUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "n7no>u+9.?W|51G9";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("n7no>u+9.?W|51G9");
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Argument is not an array
//         //
//         verifyException("java.lang.reflect.Array", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, TreeSet<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, TreeSet<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, TreeSet<Object>>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, TreeSet<Object>>) abstractOrderedMapIteratorDecorator0);
      String string0 = "B";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("B", sQLNonTransientConnectionException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("B");
      sQLNonTransientConnectionException0.getSuppressed();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
//      try { 
        IteratorUtils.apply((Iterator<SQLTransientConnectionException>) singletonIterator0, (Closure<? super SQLTransientConnectionException>) closure0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // InvokerTransformer: The method 'B' on 'class java.sql.SQLTransientConnectionException' does not exist
//         //
//         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, EnumSet<ComparatorPredicate.Criterion>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      Hashtable<ArrayDeque<SQLDataException>, SQLException> hashtable0 = new Hashtable<ArrayDeque<SQLDataException>, SQLException>();
      Collection<SQLException> collection0 = hashtable0.values();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) collection0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      String string0 = "Predicate must not be null";
      int int0 = 1336;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Predicate must not be null", (String) null, 1336);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      // Undeclared exception!
//      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1336);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Start index must not be greater than the array length
//         //
//         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
//      }
  }
}
