/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 19:34:24 GMT 2021
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.text.AttributedCharacterIterator;
import java.text.Format;
import java.time.Instant;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JSpinner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      Double double0 = Double.valueOf(0.0);
      xYSeries0.add(0.0, (Number) double0, true);
      xYSeries0.add((-1597.9235), 0.0);
      xYSeries0.add(0.0, 175.9228389580543);
      xYSeries0.add((-1597.9235), (Number) double0, true);
      xYSeries0.addOrUpdate((-629.0884576), (-629.0884576));
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true);
      XYSeries xYSeries1 = xYSeries0.createCopy(46, 46);
      xYSeries1.setMaximumItemCount(46);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(46, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(mockGregorianCalendar0);
      xYSeries0.add((double) 0, (Number) 23, false);
      // Undeclared exception!
//      try { 
        xYSeries0.createCopy(0, 2677);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-2399.072590987629), (-2399.072590987629));
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((double) 1, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, true);
      Double double0 = Double.valueOf(0.0);
      xYSeries0.add((-1202.5066), (Number) double0, true);
      xYSeries0.add(0.0, (Number) double0);
      assertFalse(xYSeries0.getAutoSort());
      
      xYSeries0.addOrUpdate((Number) double0, (Number) double0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(0, day0);
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.addOrUpdate((Number) 0, (Number) hour0.FIRST_HOUR_IN_DAY);
      xYSeries0.add((-14.652918454718504), (-1.7976931348623157E308));
      xYSeries0.update(0, 0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.addOrUpdate((Number) 53, (Number) 1);
      xYSeries0.add((double) 53, (Number) 1, true);
      // Undeclared exception!
//      try { 
        xYSeries0.delete(1, 53);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      Double double0 = Double.valueOf(0.0);
      xYSeries0.add(0.0, (Number) double0, true);
      xYSeries0.add((-1597.9235), 0.0);
      Float float0 = new Float(1.0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) double0, (Number) float0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2804, mockRandom0);
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.add((double) 2804, (Number) bigInteger0, true);
      xYSeries0.add(0.0, (Number) bigInteger0, false);
      xYSeries0.add((double) 60, (double) 2804);
      xYSeries0.updateByIndex(2, bigInteger0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("_", false, false);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.remove((Number) integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.addOrUpdate((Number) 53, (Number) 1);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 53);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("_", false);
      Float float0 = new Float((-2593.9004F));
      xYSeries0.add((Number) float0, (Number) float0);
      xYSeries0.remove((Number) float0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(0, day0);
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.addOrUpdate((Number) 0, (Number) hour0.LAST_HOUR_IN_DAY);
      xYSeries0.addOrUpdate((Number) 23, (Number) hour0.LAST_HOUR_IN_DAY);
      XYDataItem xYDataItem0 = xYSeries0.remove(1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.addOrUpdate((Number) 53, (Number) 1);
      xYSeries0.add((-3776.88), (Number) 1, false);
      xYSeries0.addOrUpdate((-2230.14281726879), (-2646.77224346101));
      XYDataItem xYDataItem0 = xYSeries0.remove(2);
      assertEquals((-2230.14281726879), xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-2646.77224346101), xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, true);
      Double double0 = Double.valueOf(0.0);
      xYSeries0.add((-1202.5066), (Number) double0, true);
      xYSeries0.add(0.0, (Number) double0);
      int int0 = xYSeries0.indexOf(double0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, int0);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((Number) 53, (Number) 53);
      BigInteger bigInteger0 = BigInteger.ZERO;
      xYSeries0.addOrUpdate((Number) 1, (Number) bigInteger0);
      xYSeries0.getY(1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((Number) 53, (Number) 53);
      BigInteger bigInteger0 = BigInteger.ONE;
      xYSeries0.addOrUpdate((Number) 1, (Number) bigInteger0);
      xYSeries0.getY(1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((double) 1, (Number) 1, false);
      assertFalse(xYSeries0.getAutoSort());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      xYSeries0.add((Number) bigInteger0, (Number) 1);
      xYSeries0.getX(1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2598L));
      XYSeries xYSeries0 = new XYSeries(mockDate0);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, true);
      Double double0 = Double.valueOf(0.0);
      xYSeries0.add((-1202.5066), (Number) double0, true);
      xYSeries0.getItemCount();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.addOrUpdate((Number) 0, (Number) hour0.FIRST_HOUR_IN_DAY);
      xYSeries0.remove(0);
      xYSeries0.add(0.0, (-1.7976931348623157E308));
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals((-1.7976931348623157E308), xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.addOrUpdate((Number) 0, (Number) hour0.LAST_HOUR_IN_DAY);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(23.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Year year0 = new Year(2);
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.addOrUpdate((Number) (-9999), (Number) 9999);
      xYSeries0.add((-1758.440488498572), (Number) (-9999), true);
      xYSeries0.addOrUpdate((double) 9999, 0.0);
      assertEquals(3, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(2);
      assertEquals(9999.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(mockGregorianCalendar0);
      xYSeries0.add((-4233.8042), (Number) 23, false);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(0, day0);
      XYSeries xYSeries0 = new XYSeries(hour0);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(0, day0);
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.getAllowDuplicateXValues();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(2, 2590);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(mockGregorianCalendar0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(0, 0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(0, day0);
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.addOrUpdate((Number) 0, (Number) hour0.LAST_HOUR_IN_DAY);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2804, 418, 2804, 418, 334);
      Hour hour0 = new Hour(mockDate0);
      XYSeries xYSeries0 = new XYSeries(hour0.LAST_HOUR_IN_DAY, true, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-2052), 418);
      assertTrue(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      xYSeries0.addOrUpdate((Number) 1, (Number) 53);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      Byte byte0 = new Byte((byte) (-56));
      xYSeries0.add((double) 1, (Number) byte0, false);
      xYSeries0.addOrUpdate((double) 1, (double) (byte) (-56));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, true, false);
      xYSeries0.add((-1891.77104), (Number) 53, true);
      xYSeries0.addOrUpdate((-1891.77104), 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Week week0 = new Week((-1389), 505);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.updateByIndex(53, week0.LAST_WEEK_IN_YEAR);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2804, 418, 2804, 418, 334);
      Hour hour0 = new Hour(mockDate0);
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
//      try { 
        xYSeries0.updateByIndex((-2052), 23);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.update(53, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("_", true);
      // Undeclared exception!
//      try { 
        xYSeries0.update((Number) null, (Number) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'x' argument.
//         //
//         verifyException("org.jfree.data.xy.XYDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.toArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      LinkedList<AttributedCharacterIterator.Attribute> linkedList0 = new LinkedList<AttributedCharacterIterator.Attribute>();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      linkedList0.add(attributedCharacterIterator_Attribute0);
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
//      try { 
        xYSeries0.toArray();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.text.AttributedCharacterIterator$Attribute cannot be cast to org.jfree.data.xy.XYDataItem
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("org.jfree.data.Range", false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
//      try { 
        xYSeries0.setMaximumItemCount((-1658));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.setMaximumItemCount((-3542));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Integer integer0 = new Integer(7);
      XYSeries xYSeries0 = new XYSeries(integer0, false);
      // Undeclared exception!
//      try { 
        xYSeries0.setMaximumItemCount((-2107));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 53);
      Stack<XYDataItem> stack0 = new Stack<XYDataItem>();
      xYSeries1.data = (List) stack0;
      // Undeclared exception!
//      try { 
        xYSeries1.setMaximumItemCount((-99));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Array index out of range: 0
//         //
//         verifyException("java.util.Vector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      DefaultListModel<JSpinner.DateEditor> defaultListModel0 = new DefaultListModel<JSpinner.DateEditor>();
      JList<JSpinner.DateEditor> jList0 = new JList<JSpinner.DateEditor>(defaultListModel0);
      List<JSpinner.DateEditor> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
//      try { 
        xYSeries0.remove((Number) week0.FIRST_WEEK_IN_YEAR);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.remove((Number) (-9999));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = xYSeries0.createCopy(53, 53);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      xYSeries1.data = (List) linkedList0;
      // Undeclared exception!
//      try { 
        xYSeries1.remove((Number) 53);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: -1, Size: 0
//         //
//         verifyException("java.util.LinkedList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("");
      // Undeclared exception!
//      try { 
        xYSeries0.remove((Number) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'x' argument.
//         //
//         verifyException("org.jfree.data.xy.XYDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = xYSeries0.createCopy(53, 53);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) xYSeries1);
      xYSeries1.data = (List) linkedList0;
      // Undeclared exception!
//      try { 
        xYSeries1.remove((Number) 53);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("_");
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
//      try { 
        xYSeries0.remove(1777);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.remove(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      XYSeries xYSeries0 = new XYSeries(instant0, true);
      // Undeclared exception!
//      try { 
        xYSeries0.remove((-1644));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true);
      xYSeries0.data = null;
      Float float0 = new Float(0.0F);
      // Undeclared exception!
//      try { 
        xYSeries0.indexOf(float0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(mockGregorianCalendar0);
      // Undeclared exception!
//      try { 
        xYSeries0.indexOf((Number) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'x' argument.
//         //
//         verifyException("org.jfree.data.xy.XYDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      ArrayList<Format.Field> arrayList0 = new ArrayList<Format.Field>();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      arrayList0.add(format_Field0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
//      try { 
        xYSeries0.indexOf(53);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.hashCode();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      LinkedList<XYSeries> linkedList0 = new LinkedList<XYSeries>();
      xYSeries0.data = (List) linkedList0;
      linkedList0.add(xYSeries0);
      // Undeclared exception!
//      try { 
        xYSeries0.hashCode();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.XYSeries cannot be cast to org.jfree.data.xy.XYDataItem
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      // Undeclared exception!
//      try { 
        xYSeries0.getY((-4));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.getX(243);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1108.242001174088, Double.NaN, true, true);
      XYSeries xYSeries0 = new XYSeries(simpleHistogramBin0);
      // Undeclared exception!
//      try { 
        xYSeries0.getX((-1662));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("_");
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.getItems();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.getItemCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.getDataItem(53);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = new Integer(7);
      XYSeries xYSeries0 = new XYSeries(integer0, false);
      // Undeclared exception!
//      try { 
        xYSeries0.getDataItem((-761));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYSeries xYSeries1 = xYSeries0.createCopy(1516, 1516);
      xYSeries1.data = null;
      // Undeclared exception!
//      try { 
        xYSeries1.delete(1516, 1516);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      // Undeclared exception!
//      try { 
        xYSeries0.delete((-2789), 1991);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.createCopy(1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2804, 418, 2804, 418, 334);
      XYSeries xYSeries0 = new XYSeries(mockDate0);
      xYSeries0.add((double) (short)2622, 0.0, true);
      // Undeclared exception!
//      try { 
        xYSeries0.createCopy((-634), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Week week0 = new Week(1592, 505);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.clone();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'collection' argument.
//         //
//         verifyException("org.jfree.chart.util.ObjectUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1108.242001174088, Double.NaN, true, true);
      XYSeries xYSeries0 = new XYSeries(simpleHistogramBin0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
//      try { 
        xYSeries0.clone();
//        fail("Expecting exception: CloneNotSupportedException");
      
//      } catch(CloneNotSupportedException e) {
//         //
//         // Failed to clone.
//         //
//         verifyException("org.jfree.chart.util.ObjectUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.clear();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      ArrayList<Format.Field> arrayList0 = new ArrayList<Format.Field>();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      arrayList0.add(format_Field0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
//      try { 
        xYSeries0.addOrUpdate((Number) 53, (Number) 1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 53, (double) 1);
      java.util.Vector<DropMode> vector0 = new java.util.Vector<DropMode>(1249);
      xYSeries0.data = (List) vector0;
      xYSeries0.add(xYDataItem0, false);
      // Undeclared exception!
//      try { 
        xYSeries0.addOrUpdate((Number) 53, (Number) 53);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("_");
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
//      try { 
        xYSeries0.addOrUpdate((-1.7976931348623157E308), 0.0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.addOrUpdate((double) 53, (double) 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = new XYSeries(week0);
      Stack<XYSeries> stack0 = new Stack<XYSeries>();
      stack0.addElement(xYSeries0);
      xYSeries1.data = (List) stack0;
      // Undeclared exception!
//      try { 
        xYSeries1.addOrUpdate((-2.147483648E9), 0.0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      java.util.Vector<ChronoLocalDate> vector0 = new java.util.Vector<ChronoLocalDate>();
      xYSeries0.data = (List) vector0;
      xYSeries0.add(384.411804028, (Number) 53, false);
      // Undeclared exception!
//      try { 
        xYSeries0.addOrUpdate(384.411804028, 2356.7083811);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      xYSeries0.add(0.0, 0.0);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(0.0, (-1860.4481));
      // Undeclared exception!
//      try { 
        xYSeries0.add(xYDataItem0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // X-value already exists.
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      Float float0 = new Float((-2195.647459981592));
      xYSeries0.add((Number) float0, (Number) float0, false);
      // Undeclared exception!
//      try { 
        xYSeries0.add((Number) float0, (Number) float0, false);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // X-value already exists.
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Year year0 = new Year((-1018));
      XYSeries xYSeries0 = new XYSeries(year0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
//      try { 
        xYSeries0.add((Number) (-9999), (Number) 9999, false);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.add((Number) 53, (Number) 1, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      // Undeclared exception!
//      try { 
        xYSeries0.add((Number) null, (Number) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'x' argument.
//         //
//         verifyException("org.jfree.data.xy.XYDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((Number) 1, (Number) 1);
      // Undeclared exception!
//      try { 
        xYSeries0.add((Number) 1, (Number) 53);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // X-value already exists.
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      DefaultListModel<JSpinner.DateEditor> defaultListModel0 = new DefaultListModel<JSpinner.DateEditor>();
      JList<JSpinner.DateEditor> jList0 = new JList<JSpinner.DateEditor>(defaultListModel0);
      List<JSpinner.DateEditor> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
//      try { 
        xYSeries0.add((Number) 53, (Number) 53);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(7, 2);
      xYSeries1.data = null;
      // Undeclared exception!
//      try { 
        xYSeries1.add((Number) 1, (Number) 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer(7);
      XYSeries xYSeries0 = new XYSeries(integer0, false);
      // Undeclared exception!
//      try { 
        xYSeries0.add((Number) null, (Number) integer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'x' argument.
//         //
//         verifyException("org.jfree.data.xy.XYDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      xYSeries0.data = (List) arrayList0;
      arrayList0.add("");
      // Undeclared exception!
//      try { 
        xYSeries0.add((Number) 1, (Number) 53);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      xYSeries0.addOrUpdate(0.0, (-1860.4481));
      // Undeclared exception!
//      try { 
        xYSeries0.add(0.0, (Number) integer0, true);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // X-value already exists.
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.add((double) 1, (Number) 1, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((double) 1, (Number) 1, false);
      // Undeclared exception!
//      try { 
        xYSeries0.add((double) 1, (Number) 53);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // X-value already exists.
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("_");
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
//      try { 
        xYSeries0.add(0.0, (Number) bigInteger0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.add((double) 53, (Number) 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      xYSeries0.data = null;
      // Undeclared exception!
//      try { 
        xYSeries0.add(1.5080799056792171, (-103.6168), false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true, false);
      Double double0 = Double.valueOf((-1202.5066));
      xYSeries0.add((-2593.108), (Number) double0, true);
      // Undeclared exception!
//      try { 
        xYSeries0.add(Double.NaN, (-2367.26));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // X-value already exists.
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("_");
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
//      try { 
        xYSeries0.add(364.1, 0.0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XYSeries xYSeries0 = null;
//      try {
        xYSeries0 = new XYSeries((Comparable) null, false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XYSeries xYSeries0 = null;
//      try {
        xYSeries0 = new XYSeries((Comparable) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XYSeries xYSeries0 = null;
//      try {
        xYSeries0 = new XYSeries((Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, true);
      Double double0 = Double.valueOf(0.0);
      xYSeries0.add(0.0, (Number) double0);
      int int0 = xYSeries0.indexOf(double0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0, int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, true);
      Double double0 = Double.valueOf(0.0);
      xYSeries0.add((-1202.5066), (Number) double0, true);
      int int0 = xYSeries0.indexOf(double0);
      assertEquals((-1), int0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DropMode dropMode0 = DropMode.ON_OR_INSERT;
      XYSeries xYSeries0 = new XYSeries(dropMode0, false);
      xYSeries0.setMaximumItemCount(1);
      Float float0 = new Float((-234.0F));
      xYSeries0.add((Number) 53, (Number) float0);
      xYSeries0.addOrUpdate((Number) float0, (Number) 53);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 53, (double) 1);
      xYSeries0.add(xYDataItem0, false);
      // Undeclared exception!
//      try { 
        xYSeries0.addOrUpdate((Number) 53, (Number) 53);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: -1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DropMode dropMode0 = DropMode.ON_OR_INSERT;
      XYSeries xYSeries0 = new XYSeries(dropMode0, false);
      xYSeries0.setMaximumItemCount(1);
      Float float0 = new Float((-234.0F));
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1, (Number) 53);
      xYSeries0.add((Number) 53, (Number) float0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      Float float0 = new Float((-2195.647459981592));
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      xYSeries0.add((Number) float0, (Number) float0, false);
      // Undeclared exception!
//      try { 
        xYSeries0.add(xYDataItem0, false);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // X-value already exists.
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true, true);
      Float float0 = new Float(3350.32);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      Float float0 = new Float((-2195.647459981592));
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.addOrUpdate((Number) float0, (Number) float0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1108.242001174088, Double.NaN, false, true);
      XYSeries xYSeries0 = new XYSeries(simpleHistogramBin0, false, false);
      // Undeclared exception!
//      try { 
        xYSeries0.add((XYDataItem) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'item' argument.
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      // Undeclared exception!
//      try { 
        xYSeries0.getX(243);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 243, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      // Undeclared exception!
//      try { 
        xYSeries0.getY(1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      // Undeclared exception!
//      try { 
        xYSeries0.getDataItem(53);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 53, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      // Undeclared exception!
//      try { 
        xYSeries0.remove(2);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.addOrUpdate((Number) 53, (Number) 1);
      xYSeries0.add((-3776.88), (Number) 1, false);
      xYSeries0.addOrUpdate((-2230.14281726879), (-2646.77224346101));
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.addOrUpdate((Number) 53, (Number) 1);
      xYSeries0.add((-3776.88), (Number) 1, false);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.addOrUpdate((Number) 1, (Number) 53);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((double) 1, (Number) 1, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 1, (double) 1);
      XYSeries xYSeries1 = new XYSeries(xYDataItem0, true);
      xYSeries1.hashCode();
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 9999);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.addOrUpdate((double) (-9999), 0.0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 9999);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertTrue(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-2), year0);
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = new XYSeries(week0, false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertFalse(boolean0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true);
      XYSeries xYSeries1 = xYSeries0.createCopy(2, 9999);
      xYSeries1.setMaximumItemCount(46);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(46, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2804, 418, 2804, 418, 334);
      Hour hour0 = new Hour(mockDate0);
      XYSeries xYSeries0 = new XYSeries(hour0);
      XYSeries xYSeries1 = new XYSeries(hour0.LAST_HOUR_IN_DAY, true, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      XYSeries xYSeries0 = new XYSeries("", true);
      boolean boolean0 = xYSeries0.equals(defaultStatisticalCategoryDataset0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      XYSeries xYSeries1 = new XYSeries("", false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(xYSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      xYSeries0.add(0.0, (Number) null, false);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add(384.411804028, (Number) 53, false);
      // Undeclared exception!
//      try { 
        xYSeries0.addOrUpdate(384.411804028, 2356.7083811);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: -1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      // Undeclared exception!
//      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) integer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'x' argument.
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Second second0 = new Second(date0);
      XYSeries xYSeries0 = new XYSeries(second0, true);
      // Undeclared exception!
//      try { 
        xYSeries0.update(59, 59);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // No observation for x = 59
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(0, day0);
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.addOrUpdate((Number) 0, (Number) hour0.LAST_HOUR_IN_DAY);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.update(0, 0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1108.242001174088, Double.NaN, true, true);
      XYSeries xYSeries0 = new XYSeries(simpleHistogramBin0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1417, mockRandom0);
      xYSeries0.add(1108.242001174088, (Number) bigInteger0, true);
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((double) 1, (Number) 1, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 1, (double) 1);
      assertEquals(1, xYSeries0.getItemCount());
      
      XYSeries xYSeries1 = new XYSeries(xYDataItem0, true);
      xYSeries1.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(mockGregorianCalendar0);
      xYSeries0.add((double) 0, (Number) 23, true);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.delete(0, 0);
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((double) 1, (Number) 1, false);
      // Undeclared exception!
//      try { 
        xYSeries0.add((double) 1, (double) 1, true);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // X-value already exists.
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true);
      Float float0 = new Float(0.0F);
      BigInteger bigInteger0 = BigInteger.valueOf((-3981L));
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      xYSeries0.add((Number) bigInteger0, (Number) float0);
      xYSeries0.add((-1835.65951), (Number) null);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true, false);
      Float float0 = new Float((-2195.647459981592));
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      xYSeries0.add((Number) float0, (Number) float0, true);
      // Undeclared exception!
//      try { 
        xYSeries0.add(xYDataItem0, false);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // X-value already exists.
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((double) 1, (Number) 1, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 1, (double) 1);
      assertEquals(1, xYSeries0.getItemCount());
      
      XYSeries xYSeries1 = new XYSeries(xYDataItem0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      xYSeries1.add(xYDataItem0);
      xYSeries1.add((Number) bigInteger0, (Number) 1);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.addOrUpdate((Number) 1, (Number) 53);
      xYSeries0.add((double) 53, (Number) 1, false);
      xYSeries0.setMaximumItemCount(1);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      TimeZone timeZone0 = TimeZone.getTimeZone("&4ChuOAou.@j&6ezD");
      Hour hour0 = new Hour(date0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      // Undeclared exception!
//      try { 
        xYSeries0.remove((Number) 53);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 1, (double) 1);
      // Undeclared exception!
//      try { 
        xYSeries0.add(xYDataItem0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'item' argument.
//         //
//         verifyException("org.jfree.data.xy.XYSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Week week0 = new Week((-1389), 505);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      // Undeclared exception!
//      try { 
        xYSeries0.updateByIndex(53, week0.LAST_WEEK_IN_YEAR);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 53, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
//      try { 
        xYSeries0.add((double) 53, (Number) 53, true);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((double) 1, (Number) 1, false);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Year year0 = new Year((-1018));
      XYSeries xYSeries0 = new XYSeries(year0);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
  }
}
