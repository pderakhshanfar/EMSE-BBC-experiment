/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 05:23:56 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      long long0 = dateTimeZone0.adjustOffset(9223372036854775807L, true);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-504));
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-504), true);
      assertEquals("-504:00", dateTimeZone0.getID());
      assertEquals(1814399496L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775800L), true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Subtracting time zone offset caused overflow
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-733));
      DateTimeZone.setDefault(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1, (Chronology) null);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Anchorage");
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775749L);
      assertEquals((-28800000), int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(Integer.MIN_VALUE);
      assertEquals("--596:-31:-23.-648", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1741);
      dateTimeZone0.hashCode();
      assertEquals("+00:00:01.741", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1153);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=+00:00:01.153,offset=1153,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals("+00:00:01.153", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-334));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=-00:00:00.334,offset=-334,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals("-00:00:00.334", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeZone0.previousTransition(0L);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      dateTimeZone0.previousTransition(841L);
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      dateTimeZone0.previousTransition((-1L));
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      dateTimeZone0.nextTransition(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      dateTimeZone0.nextTransition(1);
      assertEquals("+01:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.nextTransition((-1272L));
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      boolean boolean0 = fixedDateTimeZone0.isFixed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      int int0 = fixedDateTimeZone0.getStandardOffset((-1392L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1741);
      int int0 = dateTimeZone0.getStandardOffset(1);
      assertEquals("+00:00:01.741", dateTimeZone0.toString());
      assertEquals(1741, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.setID("America/Denver");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      int int0 = dateTimeZone0.getStandardOffset(3600000L);
      assertEquals((-25200000), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateTime dateTime0 = new DateTime();
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      dateTimeZone0.UTC.getOffset((long) 0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(578);
      int int0 = dateTimeZone0.getOffset(2934L);
      assertEquals(578, int0);
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      int int0 = dateTimeZone0.getOffset((-79L));
      assertEquals((-1), int0);
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(59, 59);
      dateTimeZone0.getNameKey(59);
      assertEquals("+59:59", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      String string0 = dateTimeZone0.getNameKey(716L);
      assertEquals("EST", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      long long0 = dateTimeZone0.UTC.getMillisKeepLocal(dateTimeZone0, 0L);
      assertEquals(0L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(578);
      String string0 = dateTimeZone0.getID();
      assertEquals("+00:00:00.578", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.equals(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      boolean boolean0 = fixedDateTimeZone0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = fixedDateTimeZone0.convertUTCToLocal(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.convertUTCToLocal(2562L);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(2562L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1741);
      long long0 = dateTimeZone0.convertUTCToLocal((-2108L));
      assertEquals((-367L), long0);
      assertEquals("+00:00:01.741", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = fixedDateTimeZone0.convertLocalToUTC(0L, true, (-2114L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Anchorage");
      long long0 = dateTimeZone0.convertLocalToUTC((-2010L), false, 668L);
      assertEquals(35997990L, long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      long long0 = dateTimeZone0.convertLocalToUTC((-826L), false, (-826L));
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals((-826L), long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      long long0 = cachedDateTimeZone0.convertLocalToUTC((-3402L), true);
      assertEquals((-3402L), long0);
      assertEquals("Etc/UTC", cachedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      long long0 = dateTimeZone0.adjustOffset(0L, true);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      DateMidnight dateMidnight0 = new DateMidnight();
      DateTime dateTime0 = dateMidnight0.toDateTimeISO();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis(9223372036854775807L);
      // Undeclared exception!
//      try { 
        dateTimeZone0.isLocalDateTimeGap(localDateTime1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 292278994 for year must be in the range [-292275054,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("JST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      // Undeclared exception!
//      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(59);
      // Undeclared exception!
//      try { 
        dateTimeZone1.getMillisKeepLocal(dateTimeZone0, 9223372036854775807L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Adding time zone offset caused overflow
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
//      try { 
        DateTimeZone.forOffsetHours((-748));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset is too large
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Anchorage");
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775728L, true, 909L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal instant due to time zone offset transition (daylight savings time 'gap'): 292278994-08-17T07:12:55.728 (America/Anchorage)
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-504));
      long long0 = dateTimeZone0.convertLocalToUTC(928L, false);
      assertEquals(1432L, long0);
      assertEquals("-00:00:00.504", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Ho_Chi_Minh");
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036834097853L), true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Subtracting time zone offset caused overflow
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("JST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal((-890L));
      assertEquals(32400000, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("CDT");
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(59, 59);
      String string0 = dateTimeZone0.getName(9223372036854775807L, locale0);
      assertEquals("+59:59", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      String string0 = dateTimeZone0.UTC.getName((-689L), (Locale) null);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("+00:00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-4));
      String string0 = dateTimeZone0.getShortName((long) (-4), (Locale) null);
      assertEquals("-04:00", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("-00:00:00.001");
      assertEquals("-00:00:00.001", dateTimeZone1.toString());
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DateTimeZone.forID("org.joda.time.LocalTime");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The datetime zone id 'org.joda.time.LocalTime' is not recognised
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      long long0 = dateTimeZone0.adjustOffset((-2717647200028L), true);
      assertEquals((-2717646278028L), long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      long long0 = dateTimeZone0.adjustOffset((-2717647200000L), true);
      assertEquals((-2717647200000L), long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      long long0 = dateTimeZone0.adjustOffset((-2717647199988L), false);
      assertEquals((-2717648121988L), long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      long long0 = dateTimeZone0.adjustOffset((-2717648122000L), false);
      assertEquals((-2717648122000L), long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      long long0 = dateTimeZone0.adjustOffset((-9223372036854775797L), true);
      assertEquals((-9223372036854775797L), long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      long long0 = dateTimeZone0.adjustOffset(9223372036854775807L, true);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      long long0 = dateTimeZone0.adjustOffset((-2717646278000L), true);
      assertEquals((-2717646278000L), long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-66863044));
      long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-66863044));
      assertEquals((-133726088L), long0);
      assertEquals("-18:34:23.044", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-504));
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-504), false);
      assertEquals(0L, long0);
      assertEquals("-00:00:00.504", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Anchorage");
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036825975867L), true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal instant due to time zone offset transition (daylight savings time 'gap'): -292275055-05-17T00:47:04.133 (America/Anchorage)
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775803L), false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Subtracting time zone offset caused overflow
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Anchorage");
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775707L, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Subtracting time zone offset caused overflow
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775804L, true, 9223372036854775804L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Subtracting time zone offset caused overflow
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertUTCToLocal(9223372036854775807L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Adding time zone offset caused overflow
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(119L);
      assertEquals("Etc/UTC", cachedDateTimeZone0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("America/Indiana/Indianapolis");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal(1);
      assertEquals((-18000000), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("EET");
      int int0 = dateTimeZone0.getOffsetFromLocal((-9223372036854775803L));
      assertEquals(7200000, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      int int0 = dateTimeZone0.getOffsetFromLocal((-2717648122000L));
      assertEquals((-21600000), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      int int0 = dateTimeZone0.getOffsetFromLocal((-9223372036854775800L));
      assertEquals(43200000, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
      assertEquals(28800000, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      boolean boolean0 = dateTimeZone0.isStandardOffset(578L);
      assertTrue(boolean0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      boolean boolean0 = dateTimeZone0.isStandardOffset(31556952000L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(148);
      int int0 = dateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals(532800000, int0);
      assertEquals("+148:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), 10);
      Instant instant0 = Instant.now();
      int int0 = dateTimeZone0.getOffset((ReadableInstant) instant0);
      assertEquals((-4200000), int0);
      assertEquals("-01:10", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      Locale locale0 = Locale.forLanguageTag("-U]`t2K(");
      String string0 = dateTimeZone0.getShortName(3600000L, locale0);
      assertEquals("+01:01", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.GERMAN;
      String string0 = dateTimeZone0.getShortName((-1085L), locale0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      assertEquals("+00:00:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(67, "-'vc}dMd2eyN");
      // Undeclared exception!
//      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The datetime zone id '-'vc}dMd2eyN' is not recognised
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), 10);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("-01:10", dateTimeZone0.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      TimeZone timeZone0 = TimeZone.getTimeZone("MET");
      // Undeclared exception!
//      try { 
        DateTimeZone.forTimeZone(timeZone0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The datetime zone id 'MET' is not recognised
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      long long0 = dateTimeZone0.UTC.getMillisKeepLocal(dateTimeZone0, 2239L);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(2239L, long0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
//      try { 
        DateTimeZone.forOffsetHoursMinutes(853, 60000);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Minutes out of range: 60000
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
//      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-831));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Minutes out of range: -831
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 26);
      assertEquals("+00:26", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+01:01");
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The datetime zone must not be null
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      TimeZone timeZone1 = dateTimeZone0.toTimeZone();
      assertEquals("Asia/Ho_Chi_Minh", timeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(578, set0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      String string0 = dateTimeZone0.toString();
      assertEquals("Etc/UTC", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-733));
      String string0 = dateTimeZone0.getName((long) 23);
      assertEquals("-00:00:00.733", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT+00");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getShortName(2562L);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }
}
