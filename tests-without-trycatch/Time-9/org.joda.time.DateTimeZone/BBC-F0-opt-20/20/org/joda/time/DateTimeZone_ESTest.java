/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 01:50:13 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.GJChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Dhaka");
      long long0 = dateTimeZone0.adjustOffset((-2524543299984L), false);
      assertEquals((-2524543799984L), long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      assertEquals(1392336000000L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Africa/Addis_Ababa");
      int int0 = dateTimeZone0.getOffsetFromLocal((-9223372036854775780L));
      assertEquals(9288000, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(Integer.MIN_VALUE);
      assertEquals("--596:-31:-23.-648", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(59, 59);
      assertEquals("+59:59", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 13);
      assertEquals("+00:13", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:00.020");
      assertEquals("+00:00:00.020", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("MET");
      dateTimeZone0.hashCode();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(578);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=+578:00,offset=2080800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals("+578:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      dateTimeZone0.previousTransition(0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-11));
      dateTimeZone0.previousTransition(46L);
      assertEquals("-11:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-33));
      dateTimeZone0.previousTransition((-2646L));
      assertEquals("-33:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      dateTimeZone0.nextTransition(0L);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(28);
      dateTimeZone0.nextTransition(31449600000L);
      assertEquals("+00:00:00.028", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      dateTimeZone0.nextTransition((-2336L));
      assertEquals("+00:00:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      dateTimeZone0.isFixed();
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3540, "America/Chicago");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.getStandardOffset((-222L));
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
      int int0 = dateTimeZone0.getStandardOffset((-3805L));
      assertEquals(72000000, int0);
      assertEquals("+20:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-659));
      int int0 = dateTimeZone0.getStandardOffset(21);
      assertEquals((-659), int0);
      assertEquals("-00:00:00.659", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(23);
      DateTime dateTime0 = new DateTime((Chronology) null);
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals("+23:00", dateTimeZone0.toString());
      assertEquals(82800000, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(28);
      dateTimeZone0.UTC.getOffset(0L);
      assertEquals("+00:00:00.028", dateTimeZone0.toString());
      assertEquals("+00:00:00.028", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(885);
      int int0 = dateTimeZone0.getOffset(25199976L);
      assertEquals("+00:00:00.885", dateTimeZone0.toString());
      assertEquals(885, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Apia");
      int int0 = dateTimeZone0.getOffset(1132L);
      assertEquals((-39600000), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      dateTimeZone0.getNameKey(10799975L);
      assertEquals("+00:00:01", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Dhaka");
      String string0 = dateTimeZone0.getNameKey((-2347L));
      assertEquals("DACT", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(365);
      dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0L);
      assertEquals("+00:00:00.365", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, (-1L));
      assertEquals((-1L), long0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      String string0 = dateTimeZone0.getID();
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      dateTimeZone0.equals(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      boolean boolean0 = fixedDateTimeZone0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = fixedDateTimeZone0.convertUTCToLocal(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      long long0 = dateTimeZone0.convertUTCToLocal((-82800000L));
      assertEquals((-82800000L), long0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      long long0 = dateTimeZone0.UTC.convertLocalToUTC((long) 0, false, 23L);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.convertLocalToUTC(3282L, false, 3282L);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(3282L, long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(46);
      long long0 = dateTimeZone0.convertLocalToUTC(2575L, true);
      assertEquals("+46:00", dateTimeZone0.getID());
      assertEquals((-165597425L), long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      long long0 = dateTimeZone0.adjustOffset(0L, true);
      assertEquals(0L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Puerto_Rico");
      LocalDateTime localDateTime0 = new LocalDateTime(9223372036854775807L);
      // Undeclared exception!
//      try { 
        dateTimeZone0.isLocalDateTimeGap(localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 292278994 for year must be in the range [-292275054,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Kolkata");
      // Undeclared exception!
//      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Australia/Sydney");
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775766L), true, (-9223372036854775766L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal instant due to time zone offset transition (daylight savings time 'gap'): -292275055-05-16T16:47:04.234 (Australia/Sydney)
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Puerto_Rico");
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775805L, true, 9223372036854775805L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Subtracting time zone offset caused overflow
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Apia");
      long long0 = dateTimeZone0.convertLocalToUTC(10800000L, true);
      assertEquals(50400000L, long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertUTCToLocal(9223372036854775807L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Adding time zone offset caused overflow
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Pacific/Auckland");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal(40);
      assertEquals(43200000, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Africa/Addis_Ababa");
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036847337793L);
      assertEquals(9320000, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      String string0 = dateTimeZone0.UTC.getName(4438L, (Locale) null);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-4209));
      String string0 = dateTimeZone0.UTC.getShortName((long) (-4209), (Locale) null);
      assertEquals("+00:00", string0);
      assertEquals("-00:00:04.209", dateTimeZone0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
//      try { 
        DateTimeZone.forOffsetHoursMinutes((-2242), 20);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset is too large
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(40, 40);
      long long0 = dateTimeZone0.convertUTCToLocal((-82800000L));
      assertEquals(63600000L, long0);
      assertEquals("+40:40", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DateTimeZone.forID("f ^B6MD");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The datetime zone id 'f ^B6MD' is not recognised
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Dhaka");
      long long0 = dateTimeZone0.adjustOffset((-2524543300011L), true);
      assertEquals((-2524542800011L), long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Dhaka");
      long long0 = dateTimeZone0.adjustOffset((-2524543300000L), true);
      assertEquals((-2524543300000L), long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Dhaka");
      long long0 = dateTimeZone0.adjustOffset((-2524543300007L), false);
      assertEquals((-2524543300007L), long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Puerto_Rico");
      long long0 = dateTimeZone0.adjustOffset(9223372036854775805L, false);
      assertEquals(9223372036854775805L, long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Puerto_Rico");
      long long0 = dateTimeZone0.adjustOffset((-9223372036854775777L), true);
      assertEquals((-9223372036854775777L), long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Africa/Harare");
      long long0 = dateTimeZone0.adjustOffset(9223372036854775807L, true);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateTime dateTime0 = dateMidnight0.toDateTimeISO();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals("-18:00", dateTimeZone0.toString());
      assertEquals(1392400800000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1910770658));
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-1910770658), true);
      assertEquals(0L, long0);
      assertEquals("-530:46:10.658", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("MET");
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775753L), true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal instant due to time zone offset transition (daylight savings time 'gap'): -292275055-05-16T16:47:04.247 (MET)
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Africa/Addis_Ababa");
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775778L), false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Subtracting time zone offset caused overflow
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Puerto_Rico");
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775805L, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Subtracting time zone offset caused overflow
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Dhaka");
      // Undeclared exception!
//      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036833175800L), true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal instant due to time zone offset transition (daylight savings time 'gap'): -292275055-05-16T22:47:04.200 (Asia/Dhaka)
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1548), "NST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-1548), false, 1392362481320L);
      assertEquals((-43201548L), long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1724416744));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      // Undeclared exception!
//      try { 
        dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (-9223372036847575800L));
//       //  fail("Expecting exception: ArithmeticException");
       // Unstable assertion
//      } catch(ArithmeticException e) {
//         //
//         // Adding time zone offset caused overflow
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Dhaka");
      LocalDateTime localDateTime0 = new LocalDateTime(1262278739999L, dateTimeZone0);
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(fixedDateTimeZone0);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-748), "CNT");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal(1);
      assertEquals((-12600000), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("MET");
      int int0 = dateTimeZone0.getOffsetFromLocal((-9223372036854775714L));
      assertEquals(3600000, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      int int0 = dateTimeZone0.getOffsetFromLocal((-9223372036854775795L));
      assertEquals(43200000, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Puerto_Rico");
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775805L);
      assertEquals((-15865000), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(21);
      boolean boolean0 = dateTimeZone0.isStandardOffset((-956L));
      assertTrue(boolean0);
      assertEquals("+00:00:00.021", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-790), "NST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      boolean boolean0 = dateTimeZone0.isStandardOffset(152L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-33));
      DateTime dateTime0 = new DateTime((Chronology) null);
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals((-118800000), int0);
      assertEquals("-33:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(21);
      Locale locale0 = Locale.ROOT;
      String string0 = dateTimeZone0.getName((-1871L), locale0);
      assertEquals("+00:00:00.021", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      String string0 = dateTimeZone0.getShortName(450L, locale0);
      assertEquals("+00:00", string0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(28);
      Locale locale0 = Locale.ROOT;
      String string0 = dateTimeZone0.getShortName(450L, locale0);
      assertEquals("+00:00:00.028", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 244L);
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals(1244L, long0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      DateTimeZone.setNameProvider(defaultNameProvider0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(28);
      assertEquals("+00:00:00.028", dateTimeZone0.toString());
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+18:00", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2164));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      // Undeclared exception!
//      try { 
        DateTimeZone.forTimeZone(timeZone0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The datetime zone id '-00:00:02.164' is not recognised
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("-18:00", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("-18:00", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
//      try { 
        DateTimeZone.forOffsetHoursMinutes(28, 1073741824);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Minutes out of range: 1073741824
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
//      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-53786696));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Minutes out of range: -53786696
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("-01:00");
      assertNotNull(dateTimeZone0);
      assertEquals("-01:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The datetime zone must not be null
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      //  // Unstable assertion: assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTimeZone.setDefault(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forID((String) null);
      assertEquals("UTC", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(57);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.toTimeZone();
      assertEquals("+00:00:00.057", cachedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(57);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      String string0 = cachedDateTimeZone0.toString();
      assertEquals("+00:00:00.057", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      String string0 = fixedDateTimeZone0.getName(1057L);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
//      try { 
        DateTimeZone.forOffsetHours(719527);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Offset is too large
//         //
//         verifyException("org.joda.time.DateTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertEquals("Etc/UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1724416744));
      String string0 = dateTimeZone0.getShortName(9223372036847575816L);
      assertEquals("-479:00:16.744", string0);
  }
}
