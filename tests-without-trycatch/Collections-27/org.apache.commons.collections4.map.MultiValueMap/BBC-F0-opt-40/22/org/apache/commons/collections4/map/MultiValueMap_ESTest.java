/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:07:36 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<String>>>) hashMap0);
      Set<Map.Entry<LinkedList<String>, Object>> set0 = (Set<Map.Entry<LinkedList<String>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, LinkedList<LinkedList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<LinkedList>>>) multiValueMap0);
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap1);
      Integer integer0 = new Integer(0);
      multiValueMap2.put(integer0, (Object) null);
      assertEquals(1, multiValueMap2.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ConstantFactory<ArrayList<ExceptionFactory<Object>>> constantFactory0 = new ConstantFactory<ArrayList<ExceptionFactory<Object>>>((ArrayList<ExceptionFactory<Object>>) null);
      MultiValueMap<Integer, ExceptionFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super ArrayList<ExceptionFactory<Object>>>) hashMap0, (Factory<ArrayList<ExceptionFactory<Object>>>) constantFactory0);
      Collection<ExceptionFactory<Object>> collection0 = multiValueMap0.createCollection(2151);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<Object>>) hashMap0, factory0);
      Collection<Object> collection0 = multiValueMap0.createCollection(0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Integer, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<String, Object>>();
      Integer integer0 = new Integer((-2244));
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(integer0, integer0, biFunction0);
      MultiValueMap<Integer, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<String, Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.Integer
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, multiValueMap0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) arrayList1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(multiValueMap0, arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<String>>>) multiValueMap0);
      Integer integer0 = new Integer((-2));
      hashMap0.put("K#K4E(-2!y", integer0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Collection<HashMap<Object, Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<HashMap<Object, Object>>>>) hashMap0);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      Integer integer0 = new Integer(2263);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<? extends Integer, ?>) multiValueMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      linkedList0.add((Object) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Collection<String>) arrayList0, (Collection<Object>) linkedList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<LinkedList<Object>, Object> hashMap1 = new HashMap<LinkedList<Object>, Object>();
      Collection<Object> collection0 = hashMap1.values();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory(collection0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap1.put(linkedList0, linkedList0);
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0, factory0);
      LinkedList<HashMap<Object, Object>> linkedList1 = new LinkedList<HashMap<Object, Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) linkedList1, collection0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<LinkedList<Object>, Object> hashMap1 = new HashMap<LinkedList<Object>, Object>();
      Collection<Object> collection0 = hashMap1.values();
      hashMap0.put(arrayList0, hashMap1);
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory(collection0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap1.put(linkedList0, linkedList0);
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0, factory0);
      LinkedList<HashMap<Object, Object>> linkedList1 = new LinkedList<HashMap<Object, Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) linkedList1, collection0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ExceptionFactory<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ExceptionFactory<Object>>();
      Factory<Collection<LinkedList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<LinkedList<Integer>>>) multiValueMap0, factory0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap1.put(linkedList0, linkedList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedList<MultiValueMap<Integer, String>> linkedList0 = new LinkedList<MultiValueMap<Integer, String>>();
      ConstantFactory<LinkedList<MultiValueMap<Integer, String>>> constantFactory0 = new ConstantFactory<LinkedList<MultiValueMap<Integer, String>>>(linkedList0);
      MultiValueMap<ArrayList<Object>, MultiValueMap<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<MultiValueMap<Integer, String>>>) multiValueMap0, (Factory<LinkedList<MultiValueMap<Integer, String>>>) constantFactory0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.put(arrayList0, arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<Object, ExceptionFactory<String>> multiValueMap1 = new MultiValueMap<Object, ExceptionFactory<String>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer integer0 = new Integer(2730);
      hashMap0.put(arrayList0, integer0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) arrayList1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.put(multiValueMap0, multiValueMap0);
      arrayList0.add((Object) multiValueMap1);
      boolean boolean0 = multiValueMap1.putAll((Object) multiValueMap0, (Collection<Object>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Collection<String> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      boolean boolean0 = multiValueMap0.putAll((Object) arrayList0, (Collection<LinkedList<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      int int0 = multiValueMap0.size((Object) "@oV[mt]WE)PfL/St");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Collection<Object>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, HashMap<Object, Object>>();
      MultiValueMap<HashMap<Object, Object>, MultiValueMap<Integer, Object>> multiValueMap1 = new MultiValueMap<HashMap<Object, Object>, MultiValueMap<Integer, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(hashMap0, linkedList0, biFunction0);
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>(linkedList0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      arrayList0.add("k*7q6:#YuS3");
      hashMap0.put(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) "k*7q6:#YuS3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) "~%<JH2nXi1!f^", (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) "k*7q6:#YuS3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, ";2NzMc9j#To_C[z");
      multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<Collection<Object>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Object>>();
      Object object0 = multiValueMap1.put(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap1);
      multiValueMap2.replace(object0, (Object) iterator0);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.putIfAbsent(arrayList0, hashMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.putAll((Object) multiValueMap0, (Collection<Object>) arrayList0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, (Object) null);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      arrayList0.add((Object) linkedList0);
      arrayList0.add((Object) constantFactory0);
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.putAll((Object) constantFactory0, (Collection<Object>) arrayList0);
      boolean boolean0 = multiValueMap0.removeMapping(constantFactory0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      arrayList0.add((Object) constantFactory0);
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.putAll((Object) constantFactory0, (Collection<Object>) arrayList0);
      boolean boolean0 = multiValueMap0.removeMapping(constantFactory0, linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      boolean boolean0 = multiValueMap0.removeMapping(constantFactory0, constantFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) linkedList0);
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.putAll((Object) linkedList0, (Collection<Object>) arrayList0);
      assertEquals(1, arrayList0.size());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList1, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<String>>>) multiValueMap0, (Factory<Collection<ArrayList<String>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      MultiValueMap<LinkedList<String>, ArrayList<String>> multiValueMap1 = new MultiValueMap<LinkedList<String>, ArrayList<String>>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((ArrayList<Object>) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<Integer>>) multiValueMap1);
      multiValueMap2.clear();
      assertTrue(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      Iterator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Integer, String>>> iterator0 = (Iterator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Integer, String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) null, (Factory<Collection<String>>) constantFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }
}
