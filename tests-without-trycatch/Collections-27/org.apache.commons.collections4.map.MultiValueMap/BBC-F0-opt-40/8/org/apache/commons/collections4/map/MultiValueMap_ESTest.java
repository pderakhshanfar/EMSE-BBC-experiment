/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:37:28 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Integer>>();
      Set<Map.Entry<Collection<Object>, Object>> set0 = (Set<Map.Entry<Collection<Object>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      multiValueMap0.put((Collection<String>) null, (Object) null);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList1);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) constantFactory0);
      multiValueMap1.getCollection(linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<String, String>>> factory0 = ConstantFactory.constantFactory((LinkedList<AbstractMap.SimpleImmutableEntry<String, String>>) null);
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<AbstractMap.SimpleImmutableEntry<String, String>>>) hashMap0, factory0);
      Collection<AbstractMap.SimpleImmutableEntry<String, String>> collection0 = multiValueMap0.createCollection(10);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, Collection<ArrayList<Object>>> multiValueMap0 = new MultiValueMap<Integer, Collection<ArrayList<Object>>>();
      Collection<Collection<ArrayList<Object>>> collection0 = multiValueMap0.createCollection((-1));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<ArrayList<Object>>>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Collection<ArrayList<Object>>>, AbstractMap.SimpleEntry<Object, Integer>>();
      multiValueMap0.map = (Map<LinkedList<Collection<ArrayList<Object>>>, Object>) multiValueMap0;
      MultiValueMap<LinkedList<Collection<ArrayList<Object>>>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<ArrayList<Object>>>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>(hashMap0);
      Integer integer0 = new Integer(1);
      hashMap1.put(integer0, integer0);
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) hashMap1);
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.Integer
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, HashMap<Object, Object>>();
      ArrayList<Collection<ArrayList<Object>>> arrayList0 = new ArrayList<Collection<ArrayList<Object>>>();
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<ArrayList<Object>>>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.putIfAbsent(arrayList0, multiValueMap0);
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Integer> multiValueMap2 = new MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap2.size((Object) multiValueMap1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<ArrayList<Collection<ArrayList<Object>>>, Object> hashMap0 = new HashMap<ArrayList<Collection<ArrayList<Object>>>, Object>();
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<ArrayList<Object>>>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<ArrayList<Object>>>, ? super Collection<HashMap<Object, Object>>>) multiValueMap0);
      ArrayList<Collection<ArrayList<Object>>> arrayList0 = new ArrayList<Collection<ArrayList<Object>>>();
      multiValueMap0.putIfAbsent(arrayList0, multiValueMap1);
      MultiValueMap<String, Object> multiValueMap2 = new MultiValueMap<String, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap2.removeMapping(multiValueMap0, (Object) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<ArrayList<String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, HashMap<Object, Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, String> multiValueMap1 = new MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, String>();
      multiValueMap1.map = null;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(arrayList0, collection0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Collection<ArrayList<Object>>>, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>((Map<Object, ? super LinkedList<String>>) hashMap0, factory0);
      multiValueMap0.putIfAbsent(hashMap0, linkedList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) hashMap0, (Collection<String>) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Object>>();
      multiValueMap0.map = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Object) multiValueMap0, (Collection<String>) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0);
      Integer integer0 = new Integer((-2146884960));
      hashMap0.put(integer0, integer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(integer0, (Collection<String>) linkedList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) multiValueMap0, factory0);
      MultiValueMap<LinkedList<Integer>, String> multiValueMap2 = new MultiValueMap<LinkedList<Integer>, String>();
      // Undeclared exception!
//      try { 
        multiValueMap1.put("(", multiValueMap2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      Integer integer0 = new Integer(880);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(integer0, integer0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<Object>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, HashMap<Object, Object>>();
      ArrayList<Collection<ArrayList<Object>>> arrayList0 = new ArrayList<Collection<ArrayList<Object>>>();
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<ArrayList<Object>>>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.putIfAbsent(arrayList0, multiValueMap0);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ConstantFactory<ArrayList<String>> constantFactory0 = new ConstantFactory<ArrayList<String>>(arrayList1);
      MultiValueMap<Object, String> multiValueMap3 = new MultiValueMap<Object, String>((Map<Object, ? super ArrayList<String>>) multiValueMap2, (Factory<ArrayList<String>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap3.iterator((Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<ArrayList<Collection<ArrayList<Object>>>, Object> hashMap0 = new HashMap<ArrayList<Collection<ArrayList<Object>>>, Object>();
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<ArrayList<Object>>>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<ArrayList<Object>>>, ? super Collection<HashMap<Object, Object>>>) multiValueMap0);
      ArrayList<Collection<ArrayList<Object>>> arrayList0 = new ArrayList<Collection<ArrayList<Object>>>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, hashMap0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue(object0, (Object) arrayList1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(11);
      multiValueMap0.put(integer0, (Object) null);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      BiFunction<Integer, Object, Object> biFunction0 = (BiFunction<Integer, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , any());
      multiValueMap1.replaceAll(biFunction0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ConstantFactory<Object>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, multiValueMap0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("Cannot instantiate class: ");
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) constantFactory0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Collection<ArrayList<Object>>, Object> multiValueMap0 = new MultiValueMap<Collection<ArrayList<Object>>, Object>();
      MultiValueMap<Collection<ArrayList<Object>>, Object> multiValueMap1 = null;
//      try {
        multiValueMap1 = new MultiValueMap<Collection<ArrayList<Object>>, Object>((Map<Collection<ArrayList<Object>>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Collection<String>, Integer> multiValueMap0 = new MultiValueMap<Collection<String>, Integer>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      Collection<Integer> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-532));
      Object object0 = multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      multiValueMap1.iterator(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, HashMap<Object, Object>> multiValueMap1 = new MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, HashMap<Object, Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, Collection<ArrayList<Object>>> multiValueMap2 = new MultiValueMap<Object, Collection<ArrayList<Object>>>();
      MultiValueMap<Object, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap2);
      MultiValueMap<Object, String> multiValueMap4 = new MultiValueMap<Object, String>((Map<Object, ? super LinkedList<String>>) multiValueMap3, factory0);
      multiValueMap4.put(multiValueMap0, multiValueMap2);
      boolean boolean0 = multiValueMap4.putAll((Object) multiValueMap1, (Collection<String>) linkedList0);
      assertEquals(1, multiValueMap4.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      boolean boolean0 = multiValueMap0.putAll((Object) linkedList0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap1.containsValue(object0, (Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<ArrayList<Collection<ArrayList<Object>>>, Object> hashMap0 = new HashMap<ArrayList<Collection<ArrayList<Object>>>, Object>();
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<ArrayList<Object>>>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<ArrayList<Object>>>, ? super Collection<HashMap<Object, Object>>>) multiValueMap0);
      Integer integer0 = new Integer(767);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0, (Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, HashMap<Object, Object>>();
      ArrayList<Collection<ArrayList<Object>>> arrayList0 = new ArrayList<Collection<ArrayList<Object>>>();
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<ArrayList<Object>>>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.putIfAbsent(arrayList0, multiValueMap0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList1, (Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Collection<ArrayList<Object>>> multiValueMap0 = new MultiValueMap<Collection<Integer>, Collection<ArrayList<Object>>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, HashMap<Object, Object>>();
      ArrayList<Collection<ArrayList<Object>>> arrayList0 = new ArrayList<Collection<ArrayList<Object>>>();
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<ArrayList<Object>>>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.putIfAbsent(arrayList0, multiValueMap0);
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Integer> multiValueMap2 = new MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Integer>();
      multiValueMap2.putAll((Map<? extends ArrayList<Collection<ArrayList<Object>>>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-1));
      multiValueMap0.put(integer0, (Object) null);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-1));
      multiValueMap0.put(integer0, (Object) null);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-1));
      multiValueMap0.put(integer0, (Object) null);
      multiValueMap0.put(integer0, (Object) null);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(integer0, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, "_JrRC");
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping(integer0, integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping("Z]|", "Z]|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-1));
      multiValueMap0.put(integer0, (Object) null);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap1.removeMapping(integer0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<ArrayList<Object>>>>) hashMap0, (Factory<Collection<Collection<ArrayList<Object>>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-1));
      multiValueMap0.put(integer0, (Object) null);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, Object>();
      ArrayList<Collection<ArrayList<Object>>> arrayList0 = new ArrayList<Collection<ArrayList<Object>>>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll(arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, ArrayList<String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(arrayList0, unaryOperator0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      int int0 = multiValueMap0.size((Object) arrayList1);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.clear();
      assertEquals(0, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Object>();
      Iterator<Map.Entry<LinkedList<Integer>, Object>> iterator0 = (Iterator<Map.Entry<LinkedList<Integer>, Object>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Integer>();
      ConstantFactory<LinkedList<ArrayList<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Integer>>>((LinkedList<ArrayList<Integer>>) null);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super LinkedList<ArrayList<Integer>>>) multiValueMap0, (Factory<LinkedList<ArrayList<Integer>>>) constantFactory0);
      Integer integer0 = new Integer(1905);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleImmutableEntry1);
      // Undeclared exception!
//      try { 
        multiValueMap1.put(abstractMap_SimpleEntry0, multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }
}
