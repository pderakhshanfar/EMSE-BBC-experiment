/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:38:32 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<String, ConstantFactory<String>>();
      multiValueMap0.put("org.apache.commons.collections4.iterators.EmptyListIterator", "org.apache.commons.collections4.iterators.EmptyListIterator");
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Collection<LinkedList<Object>> collection0 = multiValueMap1.getCollection("org.apache.commons.collections4.iterators.EmptyListIterator");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Collection<Object> collection0 = multiValueMap0.createCollection((-1792));
      assertFalse(collection0.contains((-1792)));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<String>>>) multiValueMap0);
      multiValueMap1.putIfAbsent("", factory0);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      multiValueMap1.replaceAll(biFunction0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-1965));
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, HashMap<LinkedList<String>, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<LinkedList<String>, Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.Integer
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Integer>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, ConstantFactory<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, String>, ? super Collection<ConstantFactory<Collection<String>>>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleImmutableEntry<String, String>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) ")U6E@&");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      multiValueMap0.map = null;
      MultiValueMap<Collection<String>, ArrayList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ArrayList<Collection<String>>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.size((Object) multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      Object object0 = multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      hashMap0.put(linkedList1, multiValueMap0);
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.size(object0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      MultiValueMap<HashMap<String, String>, String> multiValueMap1 = new MultiValueMap<HashMap<String, String>, String>();
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(linkedList0, linkedList1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, HashMap<String, Object>>();
      MultiValueMap<HashMap<Object, String>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<Collection<String>>>) multiValueMap0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(multiValueMap0, "{.%bR0=?VLBjK");
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      BiFunction<Object, Object, Collection<String>> biFunction0 = (BiFunction<Object, Object, Collection<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(hashMap0, hashMap1, biFunction0);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Object, String>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super LinkedList<Integer>>) multiValueMap1, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll((Map<? extends HashMap<Object, String>, ?>) multiValueMap1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      HashMap<ConstantFactory<Object>, Object> hashMap0 = new HashMap<ConstantFactory<Object>, Object>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(multiValueMap0);
      hashMap0.put(constantFactory0, multiValueMap0);
      MultiValueMap<ConstantFactory<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<LinkedList<Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<? extends ConstantFactory<Object>, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Object, Collection<String>> multiValueMap0 = new MultiValueMap<Object, Collection<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      MultiValueMap<Integer, Collection<String>> multiValueMap1 = new MultiValueMap<Integer, Collection<String>>();
      multiValueMap0.put(collection0, multiValueMap1);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll("", collection0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add(arrayList1);
      arrayList1.add((Object) arrayList0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) arrayList1, (Collection<ArrayList<Object>>) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-1491));
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.put(integer0, arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Collection<String>> hashMap0 = new HashMap<Object, Collection<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put("The prototype must be cloneable via a public clone method", arrayList0);
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      MultiValueMap<LinkedList<Object>, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<LinkedList<Object>, LinkedList<Integer>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<ArrayList<Object>, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<ArrayList<Object>, Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.createCollection(2328);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      Integer integer0 = new Integer((-2097));
      multiValueMap0.putIfAbsent(integer0, hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0, (Object) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, String>>();
      multiValueMap1.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, multiValueMap0);
      MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<LinkedList<Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add(arrayList1);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(linkedList0, function0);
      boolean boolean0 = multiValueMap0.putAll((Object) arrayList1, (Collection<ArrayList<Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      Integer integer0 = new Integer((-12));
      Object object0 = multiValueMap0.putIfAbsent(integer0, integer0);
      ConstantFactory<LinkedList<Collection<String>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<String>>>((LinkedList<Collection<String>>) null);
      MultiValueMap<Object, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Collection<String>>>) multiValueMap0, (Factory<LinkedList<Collection<String>>>) constantFactory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList arrayList1 = (ArrayList)multiValueMap1.put(object0, arrayList0);
      assertEquals(0, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<String, ConstantFactory<String>>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Collection<LinkedList<Object>> collection0 = multiValueMap1.getCollection("org.apache.commons.collections4.iterators.EmptyListIterator");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Iterator<Map.Entry<Integer, Object>> iterator0 = (Iterator<Map.Entry<Integer, Object>>)multiValueMap0.iterator();
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      hashMap0.put((LinkedList<Integer>) null, iterator0);
      ArrayList<HashMap<Integer, Object>> arrayList0 = new ArrayList<HashMap<Integer, Object>>();
      Factory<Collection<HashMap<Integer, Object>>> factory0 = ConstantFactory.constantFactory((Collection<HashMap<Integer, Object>>) arrayList0);
      MultiValueMap<LinkedList<Integer>, HashMap<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<HashMap<Integer, Object>>>) hashMap0, factory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<Object> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<LinkedList<ExceptionFactory<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      hashMap0.put(factory0, factory0);
      MultiValueMap<Object, ExceptionFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ExceptionFactory<Object>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) factory0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add(arrayList1);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      boolean boolean0 = multiValueMap0.putAll((Object) arrayList0, (Collection<ArrayList<Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      boolean boolean0 = multiValueMap0.putAll("WNRBzcW)VsQ", (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<LinkedList<ExceptionFactory<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ExceptionFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ExceptionFactory<Object>>>) hashMap0, factory0);
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Collection<Integer>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ConstantFactory<Object>>();
      Object object0 = new Object();
      multiValueMap0.putIfAbsent((Collection<Integer>) null, object0);
      MultiValueMap<Collection<Integer>, ExceptionFactory<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<ExceptionFactory<Collection<String>>>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-2));
      multiValueMap0.put(integer0, arrayList0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) arrayList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, String> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, String>();
      Integer integer0 = new Integer((-2129));
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(525);
      multiValueMap0.put(integer0, (Object) null);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("The prototype must be cloneable via a public clone method");
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) constantFactory0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      multiValueMap0.values();
      MultiValueMap<String, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, HashMap<String, Object>>();
      MultiValueMap<HashMap<Object, String>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<Collection<String>>>) multiValueMap0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      BiFunction<Object, Object, Collection<String>> biFunction0 = (BiFunction<Object, Object, Collection<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(hashMap0, hashMap1, biFunction0);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Object, String>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super LinkedList<Integer>>) multiValueMap1, factory0);
      multiValueMap2.putAll((Map<? extends HashMap<Object, String>, ?>) multiValueMap1);
      assertEquals(1, multiValueMap1.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Integer integer0 = new Integer(243);
      multiValueMap0.putIfAbsent(collection0, integer0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Collection<Integer>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ConstantFactory<Object>>();
      Object object0 = new Object();
      multiValueMap0.putIfAbsent((Collection<Integer>) null, object0);
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Collection<String>, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Collection<String>, Object>>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(object0);
      Integer integer0 = new Integer(4);
      ConstantFactory<Integer> constantFactory1 = new ConstantFactory<Integer>(integer0);
      boolean boolean0 = multiValueMap0.removeMapping(constantFactory0, constantFactory1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<String>>>) multiValueMap0);
      multiValueMap1.putIfAbsent("", factory0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<ConstantFactory<Object>, Object> hashMap0 = new HashMap<ConstantFactory<Object>, Object>();
      MultiValueMap<ConstantFactory<Object>, HashMap<ArrayList<String>, Collection>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<HashMap<ArrayList<String>, Collection>>>) hashMap0);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>((Object) null);
      hashMap0.put(constantFactory0, constantFactory0);
      MultiValueMap<ConstantFactory<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Collection<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Collection<String>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Object>>) multiValueMap0);
      MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>> multiValueMap2 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>>();
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap1.putAll(linkedList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, Integer>();
      multiValueMap0.putIfAbsent(hashMap0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping(hashMap0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<Object, Integer>>>) hashMap0, factory0);
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<ExceptionFactory<String>, Collection<String>> hashMap0 = new HashMap<ExceptionFactory<String>, Collection<String>>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ExceptionFactory<String>, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }
}
