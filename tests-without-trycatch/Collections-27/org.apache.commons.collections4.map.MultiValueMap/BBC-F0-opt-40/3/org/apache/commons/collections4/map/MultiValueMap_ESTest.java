/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:35:54 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      linkedList0.add(arrayList0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.putIfAbsent(linkedList0, arrayList0);
      boolean boolean0 = multiValueMap0.putAll((Object) linkedList0, (Collection<ArrayList<Object>>) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.put("tN9@Z)", "tN9@Z)");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put("tN9@Z)", arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.put("WN9ZB", "WN9ZB");
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      Collection<ArrayList<Object>> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.map = (Map<Object, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) linkedList0);
      linkedList0.add(arrayList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      multiValueMap0.putAll((Object) linkedList1, (Collection<ArrayList<Object>>) linkedList0);
      MultiValueMap<ArrayList<String>, Collection<Collection<Object>>> multiValueMap1 = new MultiValueMap<ArrayList<String>, Collection<Collection<Object>>>();
      MultiValueMap<ArrayList<String>, MultiValueMap<Integer, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<MultiValueMap<Integer, Object>>>) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap2.size((Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put("", "");
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) "");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      Object object0 = multiValueMap0.put(multiValueMap0, multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(object0, linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.map = null;
      Integer integer0 = new Integer(2147483645);
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping("Cannot instantiate class: ", integer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      HashMap<LinkedList<Object>, Integer> hashMap0 = new HashMap<LinkedList<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(1331);
      hashMap0.put(linkedList0, integer0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      HashMap<LinkedList<Object>, Integer> hashMap0 = new HashMap<LinkedList<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(1208);
      multiValueMap0.map = null;
      hashMap0.put(linkedList0, integer0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) hashMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) constantFactory0);
      hashMap0.put("org.apache.commons.collections4.map.MultiValueMap$Values", multiValueMap1);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) linkedList1);
      MultiValueMap<String, Object> multiValueMap2 = new MultiValueMap<String, Object>((Map<String, ? super Collection<Object>>) hashMap0, factory0);
      MultiValueMap<String, Collection<Integer>> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Integer>>>) multiValueMap2);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<?, ?>) multiValueMap3);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(linkedList0);
      linkedList0.add(arrayList0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<Collection<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll("org.apache.commons.collections4.iterators.AbstractEmptyIterator", (Collection<ArrayList<Object>>) linkedList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) linkedList0);
      linkedList0.add(arrayList0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) linkedList0, (Collection<ArrayList<Object>>) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      Integer integer0 = new Integer(10);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap0);
      Factory<ArrayList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, LinkedList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super ArrayList<LinkedList<String>>>) multiValueMap1, factory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap2.put(integer0, arrayList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      Factory<ArrayList<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<ArrayList<Object>>>) hashMap0, factory0);
      Object object0 = multiValueMap0.put("tN9@Z)", hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(object0, "tN9@Z)");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, String>, ? super LinkedList<Integer>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Object>, ? super Collection<ArrayList<Integer>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap0, multiValueMap0);
      Object object0 = abstractMap_SimpleEntry0.setValue(multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      multiValueMap0.putAll(abstractMap_SimpleEntry0, (Collection<Integer>) arrayList0);
      MultiValueMap<ConstantFactory<Integer>, LinkedList<String>> multiValueMap1 = new MultiValueMap<ConstantFactory<Integer>, LinkedList<String>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator(object0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      hashMap0.put(linkedList0, "O4X6E?1U$;pl");
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      MultiValueMap<LinkedList<Object>, HashMap<Object, Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<Object, Integer>>>) multiValueMap1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>(0);
      // Undeclared exception!
//      try { 
        multiValueMap2.iterator((Object) arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.put(linkedList0, (Object) null);
      MultiValueMap<Collection<Object>, Object> multiValueMap1 = new MultiValueMap<Collection<Object>, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap1.getCollection(multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.entrySet();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<Object>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.createCollection((-112));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      ConstantFactory<ArrayList<LinkedList<Object>>> constantFactory0 = new ConstantFactory<ArrayList<LinkedList<Object>>>(arrayList0);
      Factory<ArrayList<ConstantFactory<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ConstantFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<ConstantFactory<String>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      MultiValueMap<Object, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<LinkedList<Object>>>) multiValueMap0, (Factory<ArrayList<LinkedList<Object>>>) constantFactory0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap2.containsValue((Object) "tN9@Z)", (Object) arrayList1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.map = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) linkedList0, (Object) "PrototypeClonFactry: T clone method must exisad be putlic");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<HashMap<String, String>, Object> multiValueMap0 = new MultiValueMap<HashMap<String, String>, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap0);
      hashMap0.put(multiValueMap1, multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.put("tN9@Z)", "tN9@Z)");
      Collection<ArrayList<Object>> collection0 = multiValueMap0.getCollection("tN9@Z)");
      boolean boolean0 = multiValueMap0.putAll((Object) "tN9@Z)", collection0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      MultiValueMap<Collection<Object>, Object> multiValueMap1 = new MultiValueMap<Collection<Object>, Object>();
      Collection<Object> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(0);
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      Iterator<Integer> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      Factory<LinkedList<Collection<Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<Collection<Object>>) null);
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Collection<Object>>>) hashMap0, factory0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Collection<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<HashMap<String, Integer>, Object> multiValueMap0 = new MultiValueMap<HashMap<String, Integer>, Object>();
      MultiValueMap<HashMap<String, Integer>, HashMap<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Integer>, ? super Collection<HashMap<String, String>>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int0 = multiValueMap1.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.put("Cannot instantiate class:", "Cannot instantiate class:");
      int int0 = multiValueMap0.size((Object) "Cannot instantiate class:");
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.put("Vtc9@Z)", "Vtc9@Z)");
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      ConstantFactory<ArrayList<LinkedList<Object>>> constantFactory0 = new ConstantFactory<ArrayList<LinkedList<Object>>>(arrayList0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<LinkedList<Object>>>) multiValueMap0, (Factory<ArrayList<LinkedList<Object>>>) constantFactory0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap1.containsValue((Object) "Vtc9@Z)", (Object) arrayList1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      boolean boolean0 = multiValueMap1.containsValue((Object) collection0, (Object) multiValueMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = multiValueMap0.put(linkedList0, arrayList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.containsValue(object0, (Object) linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<Object>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(837);
      HashMap<LinkedList<Object>, Integer> hashMap0 = new HashMap<LinkedList<Object>, Integer>();
      hashMap0.put((LinkedList<Object>) null, integer0);
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) constantFactory0);
      multiValueMap1.putAll((Map<? extends LinkedList<Object>, ?>) hashMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.put("Vtc9@Z)", "Vtc9@Z)");
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      ConstantFactory<ArrayList<LinkedList<Object>>> constantFactory0 = new ConstantFactory<ArrayList<LinkedList<Object>>>(arrayList0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<LinkedList<Object>>>) multiValueMap0, (Factory<ArrayList<LinkedList<Object>>>) constantFactory0);
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      Integer integer0 = new Integer(1171);
      multiValueMap0.put(integer0, integer0);
      Integer integer1 = new Integer(0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.put("tN9@Z)", "tN9@Z)");
      multiValueMap0.put("tN9@Z)", "tN9@Z)");
      boolean boolean0 = multiValueMap0.removeMapping("tN9@Z)", "tN9@Z)");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.put("tN9@Z)", "tN9@Z)");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.removeMapping("tN9@Z)", arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.put(linkedList0, "aanot istantiae class ");
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, "aanot istantiae class ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.put("Vtc9@Z)", "Vtc9@Z)");
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      ConstantFactory<ArrayList<LinkedList<Object>>> constantFactory0 = new ConstantFactory<ArrayList<LinkedList<Object>>>(arrayList0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<LinkedList<Object>>>) multiValueMap0, (Factory<ArrayList<LinkedList<Object>>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(10);
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      MultiValueMap<Collection<Object>, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ArrayList<Integer>>>) multiValueMap1);
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll(integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.put("WN9ZB", "WN9ZB");
      boolean boolean0 = multiValueMap0.containsValue((Object) "WN9ZB");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<ArrayList<Object>>>) multiValueMap0, (Factory<LinkedList<ArrayList<Object>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }
}
