/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:37:42 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      multiValueMap0.put("", linkedList1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      multiValueMap0.compute("", biFunction0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap1.computeIfAbsent("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", unaryOperator0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) multiValueMap0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap1.computeIfAbsent("org.apache.commons.collections4.map.MultiValueMap$Values", unaryOperator0);
      MultiValueMap<String, ConstantFactory<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ConstantFactory<String>>>) multiValueMap1);
      multiValueMap2.getCollection("org.apache.commons.collections4.map.MultiValueMap$Values");
      assertEquals(1, multiValueMap1.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Collection<Object>>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Collection<Object>>>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) multiValueMap0);
      ConstantFactory<LinkedList<HashMap<Object, Object>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<Object, Object>>>((LinkedList<HashMap<Object, Object>>) null);
      MultiValueMap<LinkedList<String>, HashMap<Object, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<HashMap<Object, Object>>>) multiValueMap1, (Factory<LinkedList<HashMap<Object, Object>>>) constantFactory0);
      Collection<HashMap<Object, Object>> collection0 = multiValueMap2.createCollection((-1));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<ConstantFactory<Collection<Object>>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<ConstantFactory<Collection<Object>>, ConstantFactory<Object>>();
      Collection<ConstantFactory<Object>> collection0 = multiValueMap0.createCollection((-1494));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap1);
      multiValueMap1.putIfAbsent(arrayList0, multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-1));
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      hashMap0.put(integer0, multiValueMap1);
      MultiValueMap<Integer, HashMap<Object, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Object, Object>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList0);
      MultiValueMap<Integer, Object> multiValueMap3 = new MultiValueMap<Integer, Object>((Map<Integer, ? super Collection<Object>>) multiValueMap2, (Factory<Collection<Object>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap3.totalSize();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, Collection<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, Collection<Object>>();
      Integer integer0 = new Integer(650);
      Iterator<Collection<Object>> iterator0 = multiValueMap0.iterator((Object) integer0);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(3375);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(linkedList0, iterator0);
      arrayList0.add((Object) hashMap0);
      linkedList0.add((Collection<Object>) arrayList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<LinkedList<Object>, Collection<Object>> hashMap0 = new HashMap<LinkedList<Object>, Collection<Object>>();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) hashMap0);
      HashMap<Integer, Collection<Object>> hashMap1 = new HashMap<Integer, Collection<Object>>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap1, factory0);
      multiValueMap1.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) multiValueMap1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Collection<Object>, Collection<Object>>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Collection<Object>, Collection<Object>>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(multiValueMap0, "[B+r0@!^#Cu3;9");
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      multiValueMap0.put(abstractMap_SimpleEntry0, arrayList0);
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = new MultiValueMap<Integer, Collection<Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(abstractMap_SimpleEntry0, multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Collection<Object>> hashMap0 = new HashMap<Integer, Collection<Object>>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>((Map<Integer, ? super Collection<Object>>) hashMap0, factory0);
      Integer integer0 = new Integer((-2108438488));
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) null);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(integer0, (Collection<Object>) arrayList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add((Object) arrayList0);
      hashMap0.put(arrayList1, "");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Collection<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<Object>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Collection<String>) arrayList1, (Collection<Object>) arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<Integer, LinkedList<Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Collection<Object>>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      Integer integer0 = new Integer((-2113396604));
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap1.put(integer0, constantFactory0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<AbstractMap.SimpleEntry>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<Object, Object>>();
      multiValueMap0.map = (Map<String, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) "j,-4");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ConstantFactory<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ConstantFactory<Object>, ArrayList<Object>>();
      multiValueMap0.map = null;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) hashMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Collection, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Collection, String>>>) hashMap0);
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<String>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) "");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Collection<Object>>>();
      LinkedList<HashMap<Object, String>> linkedList0 = new LinkedList<HashMap<Object, String>>();
      ConstantFactory<LinkedList<HashMap<Object, String>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<Object, String>>>(linkedList0);
      MultiValueMap<Collection<Object>, HashMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<HashMap<Object, String>>>) multiValueMap0, (Factory<LinkedList<HashMap<Object, String>>>) constantFactory0);
      multiValueMap0.map = (Map<Collection<Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<ConstantFactory<Collection<Object>>, MultiValueMap<String, Integer>> multiValueMap0 = new MultiValueMap<ConstantFactory<Collection<Object>>, MultiValueMap<String, Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<ConstantFactory<String>, ExceptionFactory<String>> multiValueMap0 = new MultiValueMap<ConstantFactory<String>, ExceptionFactory<String>>();
      multiValueMap0.map = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) null, (Object) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) multiValueMap0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      multiValueMap1.map = (Map<String, Object>) hashMap0;
      hashMap0.put("org.apache.commons.collections4.map.MultiValueMap$Values", "");
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) "org.apache.commons.collections4.map.MultiValueMap$Values", (Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      hashMap0.put((ArrayList<Integer>) null, (Object) null);
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<Object, Object>>();
      ArrayList<HashMap<Object, Object>> arrayList0 = new ArrayList<HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      arrayList0.add(hashMap0);
      boolean boolean0 = multiValueMap0.putAll("", (Collection<HashMap<Object, Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, HashMap<Object, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super Collection<HashMap<Object, Object>>>) multiValueMap1);
      Collection<HashMap<Object, Object>> collection0 = multiValueMap2.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent("org.apache.commons.colections4.mp.MultiValueMap$ValuesIterator", unaryOperator0);
      MultiValueMap<String, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Object, Object>>>) multiValueMap0);
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      linkedList0.addLast(hashMap0);
      boolean boolean0 = multiValueMap1.putAll("org.apache.commons.colections4.mp.MultiValueMap$ValuesIterator", (Collection<HashMap<Object, Object>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<Object, Object>>();
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      boolean boolean0 = multiValueMap0.putAll("Q", (Collection<HashMap<Object, Object>>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.putAll((String) null, (Collection<ArrayList<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<HashMap<Object, String>, Integer> multiValueMap1 = new MultiValueMap<HashMap<Object, String>, Integer>((Map<HashMap<Object, String>, ? super LinkedList<Integer>>) multiValueMap0, factory0);
      Object object0 = new Object();
      int int0 = multiValueMap1.size(object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer((-873));
      Object object0 = multiValueMap0.putIfAbsent(integer0, integer0);
      int int0 = multiValueMap0.size(object0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent("'bS4gE\"kc<^+", unaryOperator0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "'bS4gE\"kc<^+", (Object) " z}(^q\"(O'=A2#-");
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "ChE2Nnzi[i7f", (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent("org.apache.commons.colections4.mp.MultiValueMap$ValuesIterator", unaryOperator0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "org.apache.commons.colections4.mp.MultiValueMap$ValuesIterator", (Object) "org.apache.commons.colections4.mp.MultiValueMap$ValuesIterator");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>>();
      Integer integer0 = new Integer((-3051));
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put(integer0, "Cannot instantiate class: ");
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent("<,Cr<{6VQ.%O", arrayList0);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.put((Object) null, (Object) null);
      multiValueMap0.replace((Object) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(10);
      multiValueMap0.putIfAbsent(integer0, integer0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer((-873));
      multiValueMap0.putIfAbsent(integer0, integer0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      MultiValueMap<Collection<Object>, ArrayList<Integer>> multiValueMap1 = new MultiValueMap<Collection<Object>, ArrayList<Integer>>();
      Collection<Object> collection0 = multiValueMap1.values();
      multiValueMap0.putIfAbsent(linkedList1, collection0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<LinkedList<String>>>) multiValueMap0, (Factory<LinkedList<LinkedList<String>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent("org.apache.commons.colections4.mp.MultiValueMap$ValuesIterator", unaryOperator0);
      MultiValueMap<String, HashMap<Collection<Object>, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Collection<Object>, Integer>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(collection0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, String>>();
      Set<Map.Entry<ArrayList<String>, Object>> set0 = (Set<Map.Entry<ArrayList<String>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) hashMap0);
      HashMap<Collection<Object>, Object> hashMap1 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, String>>>) hashMap1);
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<Integer>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }
}
