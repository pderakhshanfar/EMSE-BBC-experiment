/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:52:18 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      Factory<Collection<Collection<String>>> factory0 = ConstantFactory.constantFactory((Collection<Collection<String>>) linkedList0);
      MultiValueMap<Object, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<String>>>) multiValueMap0, factory0);
      multiValueMap1.putIfAbsent((Object) null, "");
      assertFalse(multiValueMap1.isEmpty());
      
      boolean boolean0 = multiValueMap1.removeMapping((Object) null, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Object>>();
      HashMap<LinkedList<String>, String> hashMap0 = new HashMap<LinkedList<String>, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, "eqa+ebdh:V");
      multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Object>, ArrayList<Integer>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      multiValueMap0.putIfAbsent(hashMap0, hashMap0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<Object, Object>>();
      ConstantFactory<LinkedList<MultiValueMap<String, String>>> constantFactory0 = new ConstantFactory<LinkedList<MultiValueMap<String, String>>>((LinkedList<MultiValueMap<String, String>>) null);
      MultiValueMap<String, MultiValueMap<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<MultiValueMap<String, String>>>) multiValueMap0, (Factory<LinkedList<MultiValueMap<String, String>>>) constantFactory0);
      Collection<MultiValueMap<String, String>> collection0 = multiValueMap1.createCollection(2);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      Collection<LinkedList<String>> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      multiValueMap0.putAll((Object) null, (Collection<String>) linkedList0);
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(linkedList0);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0, (Factory<Collection<String>>) constantFactory0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap1.replaceAll(biFunction0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>();
      Integer integer0 = new Integer((-1186));
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "CB@w,7otkL%-Iy{O&w");
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleEntry0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, String>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.util.AbstractMap$SimpleEntry
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("?", "?");
      MultiValueMap<String, AbstractMap.SimpleEntry<ArrayList<Object>, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<ArrayList<Object>, String>>>) hashMap0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<String, HashMap<Integer, String>>();
      multiValueMap0.map = null;
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        multiValueMap0.size(object0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(multiValueMap0, arrayList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(hashMap0, "hI6V^eH");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("d");
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) linkedList0, (Collection<String>) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.map = null;
      linkedList0.add("sur}i0");
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) linkedList0, (Collection<String>) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>();
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory(collection0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, ? super Collection<Object>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.put((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, "48u;i&^=.yE+{eA]0:");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>((LinkedList<LinkedList<String>>) null);
      MultiValueMap<Integer, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<String>>>) multiValueMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      Integer integer0 = new Integer((-895));
      // Undeclared exception!
//      try { 
        multiValueMap1.put(integer0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(";1o:z6i-K K4g~B", ";1o:z6i-K K4g~B");
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      hashMap0.put(abstractMap_SimpleEntry0, multiValueMap0);
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.put(abstractMap_SimpleEntry0, multiValueMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      ConstantFactory<Collection<LinkedList<Object>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Object>>>(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<Object>>>) null, (Factory<Collection<LinkedList<Object>>>) constantFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, String>, ? super Collection<String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.map = (Map<Object, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.entrySet();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Object>, ArrayList<Integer>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Object object0 = multiValueMap0.putIfAbsent(hashMap0, hashMap0);
      Integer integer0 = new Integer(0);
      hashMap0.putIfAbsent(integer0, multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue(object0, (Object) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", hashMap0);
      MultiValueMap<String, AbstractMap.SimpleEntry<ArrayList<Object>, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<ArrayList<Object>, String>>>) hashMap0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      MultiValueMap<String, Collection<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap2.containsValue((Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) multiValueMap0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(linkedList0, unaryOperator0);
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList1);
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.putAll(linkedList0, (Collection<Object>) linkedList1);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      Object object0 = new Object();
      Collection<LinkedList<String>> collection0 = multiValueMap0.getCollection(object0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Iterator<String> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.putAll("", (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      multiValueMap0.putAll((Object) null, (Collection<String>) linkedList0);
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<HashMap<Integer, Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Object>, ArrayList<Integer>>();
      Object object0 = multiValueMap0.putIfAbsent(hashMap0, hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue(object0, (Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) "Z(,2|t1?{_Zx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Object>, ArrayList<Integer>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      multiValueMap0.putIfAbsent(hashMap0, hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap1, (Object) hashMap1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = new MultiValueMap<String, ArrayList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      HashMap<HashMap<String, Integer>, Object> hashMap0 = new HashMap<HashMap<String, Integer>, Object>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap0.put(hashMap1, multiValueMap0);
      MultiValueMap<HashMap<String, Integer>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Integer>, ? super Collection<AbstractMap.SimpleEntry<Integer, String>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<? extends HashMap<String, Integer>, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(linkedList0, function0);
      multiValueMap0.putAll((Map<? extends Collection<String>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends Collection<String>, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("?", arrayList0);
      MultiValueMap<String, AbstractMap.SimpleEntry<ArrayList<Object>, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<ArrayList<Object>, String>>>) hashMap0);
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      Object object0 = multiValueMap1.put("?", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, AbstractMap.SimpleEntry<ArrayList<Object>, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<ArrayList<Object>, String>>>) hashMap0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.putIfAbsent("H6m!(_#+", hashMap0);
      MultiValueMap<String, Collection<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue((Object) multiValueMap1);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("?", arrayList0);
      MultiValueMap<String, AbstractMap.SimpleEntry<ArrayList<Object>, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<ArrayList<Object>, String>>>) hashMap0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      MultiValueMap<String, Collection<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue((Object) multiValueMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("-s+H", (Object) null);
      MultiValueMap<String, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) hashMap1);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Object, Collection<String>> multiValueMap0 = new MultiValueMap<Object, Collection<String>>();
      multiValueMap0.putIfAbsent("470MXX7z", linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping("470MXX7z", "470MXX7z");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      MultiValueMap<Object, Collection<String>> multiValueMap1 = new MultiValueMap<Object, Collection<String>>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Object>>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap0, (Factory<Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Hatixa!c(4#'Ns*IA");
      multiValueMap0.putAll((Object) linkedList0, (Collection<String>) linkedList0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0);
      multiValueMap1.iterator((Object) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String>();
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super ArrayList<Object>>) multiValueMap0, factory0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("CB@w,7otkL%-Iy{O&w", multiValueMap0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry1);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap2 = new MultiValueMap<Object, ArrayList<Object>>();
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap1.putAll(abstractMap_SimpleEntry0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Object>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.createCollection(2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }
}
