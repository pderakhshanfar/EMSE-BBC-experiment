/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:03:14 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Object object0 = multiValueMap0.put(arrayList0, arrayList0);
      LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap0, factory0);
      Object object1 = multiValueMap1.put(arrayList0, arrayList1);
      assertFalse(multiValueMap0.isEmpty());
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap1 = new MultiValueMap<Collection<Object>, String>();
      multiValueMap1.putIfAbsent(arrayList0, multiValueMap0);
      MultiValueMap<Collection<Object>, HashMap<Integer, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<HashMap<Integer, Object>>>) multiValueMap1);
      multiValueMap2.putAll((Map<? extends Collection<Object>, ?>) multiValueMap1);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      ConstantFactory<ArrayList<LinkedList<Object>>> constantFactory0 = new ConstantFactory<ArrayList<LinkedList<Object>>>(arrayList0);
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super ArrayList<LinkedList<Object>>>) hashMap0, (Factory<ArrayList<LinkedList<Object>>>) constantFactory0);
      multiValueMap0.put((ArrayList<Object>) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      Factory<Collection<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory((Collection<ArrayList<Object>>) linkedList0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0, factory0);
      Collection<ArrayList<Object>> collection0 = multiValueMap1.getCollection(factory0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, Integer>>();
      Collection<AbstractMap.SimpleEntry<String, Integer>> collection0 = multiValueMap0.createCollection((-3198));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.map = (Map<String, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(linkedList0, "");
      linkedList0.add(abstractMap_SimpleEntry0);
      MultiValueMap<Integer, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Integer, Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1829));
      hashMap0.put(arrayList0, arrayList0);
      arrayList0.add(integer0);
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<Integer>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<ArrayList<String>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Integer>, ?>) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = new MultiValueMap<String, ArrayList<String>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(arrayList0);
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = new MultiValueMap<Collection<Integer>, Integer>();
      MultiValueMap<Collection<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<Collection<Integer>, HashMap<ArrayList, ArrayList>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<HashMap<ArrayList, ArrayList>>>) multiValueMap1);
      Factory<ArrayList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super ArrayList<ArrayList<String>>>) multiValueMap2, factory0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap3.putAll((Collection<Integer>) arrayList1, (Collection<ArrayList<String>>) linkedList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<Integer>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(multiValueMap0, "");
      multiValueMap0.putIfAbsent(abstractMap_SimpleEntry0, (Object) null);
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add(linkedList1);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(abstractMap_SimpleEntry0, (Collection<LinkedList<Integer>>) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      linkedList0.add((AbstractMap.SimpleEntry<Object, String>) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("org.apace.commons.collections4.map.AbsrractIterableMap", "a.GAk0z");
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll("org.apace.commons.collections4.map.AbsrractIterableMap", (Collection<AbstractMap.SimpleEntry<Object, String>>) linkedList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(linkedList0, "VKzX");
      linkedList0.add(abstractMap_SimpleEntry0);
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Integer>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.put(linkedList0, linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<String, HashMap<Object, String>>();
      HashMap<AbstractMap.SimpleEntry<Integer, LinkedList<String>>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, LinkedList<String>>, Object>();
      Integer integer0 = new Integer(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AbstractMap.SimpleEntry<Integer, LinkedList<String>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, LinkedList<String>>(integer0, linkedList0);
      hashMap0.put(abstractMap_SimpleEntry0, multiValueMap0);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, LinkedList<String>>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, LinkedList<String>>, ? super Collection<ArrayList<Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.put(abstractMap_SimpleEntry0, multiValueMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<LinkedList<Integer>>>) multiValueMap0, (Factory<LinkedList<LinkedList<Integer>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Integer>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap0.map = (Map<Object, Object>) hashMap0;
      multiValueMap0.put(multiValueMap0, multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Integer, ExceptionFactory<Object>> multiValueMap0 = new MultiValueMap<Integer, ExceptionFactory<Object>>();
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, ArrayList<String>>();
      LinkedList<MultiValueMap<String, String>> linkedList0 = new LinkedList<MultiValueMap<String, String>>();
      Factory<LinkedList<MultiValueMap<String, String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<HashMap<Object, Object>, MultiValueMap<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super LinkedList<MultiValueMap<String, String>>>) multiValueMap0, factory0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap1.putIfAbsent(hashMap0, linkedList0);
      MultiValueMap<MultiValueMap<Integer, String>, String> multiValueMap2 = new MultiValueMap<MultiValueMap<Integer, String>, String>();
      // Undeclared exception!
//      try { 
        multiValueMap2.getCollection(linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>((Map<Integer, ? super Collection<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.createCollection(512);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Object>();
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(multiValueMap0, (Integer) null);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      Object object0 = multiValueMap0.putIfAbsent(abstractMap_SimpleEntry1, abstractMap_SimpleImmutableEntry0);
      MultiValueMap<Collection<Object>, String> multiValueMap1 = new MultiValueMap<Collection<Object>, String>();
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<LinkedList<String>>>) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap2.containsValue(object0, (Object) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      multiValueMap0.map = null;
      MultiValueMap<String, ExceptionFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ExceptionFactory<Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) "", (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("org.apace.commons.collections4.map.AbsrractIterableMap", "org.apace.commons.collections4.map.AbsrractIterableMap");
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) hashMap0);
      MultiValueMap<String, ExceptionFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ExceptionFactory<Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) "org.apace.commons.collections4.map.AbsrractIterableMap", (Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<Object>>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, (Object) null);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(multiValueMap0, integer0);
      Factory<LinkedList<ArrayList<LinkedList<Object>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) factory0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Object>();
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(multiValueMap0, (Integer) null);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      multiValueMap0.putIfAbsent(abstractMap_SimpleEntry1, abstractMap_SimpleImmutableEntry0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Object>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Integer>>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap1.merge(multiValueMap0, multiValueMap0, biFunction0);
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap1);
      multiValueMap2.getCollection(object0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      Iterator<LinkedList<String>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Collection<LinkedList<Object>>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<LinkedList<Object>>>();
      HashMap<HashMap<Object, Integer>, Collection<LinkedList<Object>>> hashMap0 = new HashMap<HashMap<Object, Integer>, Collection<LinkedList<Object>>>();
      MultiValueMap<HashMap<Object, Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<LinkedList<Object>>>) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap0.put(hashMap1, (Collection<LinkedList<Object>>) null);
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      multiValueMap0.put(arrayList0, arrayList0);
      Integer integer0 = new Integer((-1476));
      arrayList1.add(integer0);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Integer>) arrayList1);
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<String>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.putAll((Collection<Integer>) linkedList0, (Collection<ArrayList<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      MultiValueMap<Integer, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Integer, Object>>();
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Integer>>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      Factory<ArrayList<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<ArrayList<Integer>>>) multiValueMap0, factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = multiValueMap1.size((Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      linkedList0.add((AbstractMap.SimpleEntry<Object, String>) null);
      multiValueMap0.putAll("org.apace.commons.collections4.map.AbstractIterableMap", (Collection<AbstractMap.SimpleEntry<Object, String>>) linkedList0);
      MultiValueMap<String, ExceptionFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ExceptionFactory<Object>>>) multiValueMap0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) "org.apace.commons.collections4.map.AbstractIterableMap", (Object) linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      HashMap<AbstractMap.SimpleEntry<String, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Integer>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Integer>, ? super Collection<ArrayList<Object>>>) hashMap0);
      Integer integer0 = new Integer((-1));
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      linkedList0.add((AbstractMap.SimpleEntry<Object, String>) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) hashMap0);
      multiValueMap0.putAll("org.apace.commons.collections4.map.AbstractIterableMap", (Collection<AbstractMap.SimpleEntry<Object, String>>) linkedList0);
      MultiValueMap<String, ExceptionFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ExceptionFactory<Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "org.apace.commons.collections4.map.AbstractIterableMap", (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<ExceptionFactory<Object>, Object> hashMap0 = new HashMap<ExceptionFactory<Object>, Object>();
      MultiValueMap<ExceptionFactory<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<ExceptionFactory<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      ExceptionFactory<Object> exceptionFactory0 = (ExceptionFactory<Object>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(exceptionFactory0).toString();
      hashMap0.put(exceptionFactory0, "IteratorChain cannot be changed after the first use of a method from the Iterator interface");
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends ExceptionFactory<Object>, ?>) multiValueMap1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<ArrayList<String>> linkedList1 = new LinkedList<ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList1.add(arrayList0);
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<String>>();
      multiValueMap0.putAll((Collection<Integer>) linkedList0, (Collection<ArrayList<String>>) linkedList1);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList1);
      assertEquals(1, linkedList1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<String>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<ArrayList<String>> linkedList1 = new LinkedList<ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList1.add(arrayList0);
      multiValueMap0.putAll((Collection<Integer>) linkedList0, (Collection<ArrayList<String>>) linkedList1);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, hashMap0, biFunction0);
      Object object0 = multiValueMap0.put(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Collection<String>, Collection<String>> multiValueMap1 = new MultiValueMap<Collection<String>, Collection<String>>();
      MultiValueMap<Collection<String>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<String>>) multiValueMap1);
      multiValueMap2.put(arrayList0, multiValueMap0);
      Integer integer0 = new Integer((-1341));
      boolean boolean0 = multiValueMap2.removeMapping(linkedList0, integer0);
      assertEquals(1, multiValueMap2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      MultiValueMap<Collection<String>, String> multiValueMap1 = new MultiValueMap<Collection<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.put(arrayList0, multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      
      boolean boolean0 = multiValueMap1.removeMapping(linkedList0, multiValueMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<ArrayList<Object>, String> hashMap0 = new HashMap<ArrayList<Object>, String>();
      HashMap<ArrayList<Object>, Object> hashMap1 = new HashMap<ArrayList<Object>, Object>(hashMap0);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<ArrayList<Integer>, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<ArrayList<Integer>, Integer>>>) hashMap1);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = null;
//      try {
        multiValueMap1 = new MultiValueMap<ArrayList<Object>, Object>((Map<ArrayList<Object>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Integer>>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Object, MultiValueMap<String, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<MultiValueMap<String, String>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap2.values();
      boolean boolean0 = multiValueMap1.putAll(linkedList0, collection0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<String, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<String, HashMap<Object, String>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      Iterator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> iterator0 = (Iterator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
