/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:34:15 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      Set<Map.Entry<Collection<Object>, Object>> set0 = (Set<Map.Entry<Collection<Object>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Object> multiValueMap0 = new MultiValueMap<Collection<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.put(linkedList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<Object>, HashMap<Integer, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<HashMap<Integer, Integer>>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Collection<HashMap<Integer, Integer>> collection0 = multiValueMap0.getCollection(linkedList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ExceptionFactory<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ExceptionFactory<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      Collection<Object> collection0 = multiValueMap1.createCollection(3);
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory(collection0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap2;
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("&|$nFDjwjPcp~JU");
      HashMap<Object, Collection<String>> hashMap0 = new HashMap<Object, Collection<String>>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      multiValueMap0.putAll((Object) hashMap0, (Collection<String>) linkedList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(hashMap0, linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(linkedList0, "$7u$4kGFMu");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Object, Collection<String>> hashMap1 = new HashMap<Object, Collection<String>>();
      hashMap0.put((String) null, hashMap1);
      MultiValueMap<String, HashMap<Integer, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Integer, String>>>) hashMap0);
      MultiValueMap<Object, HashMap<Collection<String>, Integer>> multiValueMap1 = new MultiValueMap<Object, HashMap<Collection<String>, Integer>>();
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, Object>>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) multiValueMap0, factory0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Object) arrayList0, (Collection<String>) linkedList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Object>>) null, (Factory<LinkedList<Object>>) constantFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super LinkedList<ArrayList<Object>>>) hashMap0, (Factory<LinkedList<ArrayList<Object>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      Collection<Object> collection0 = multiValueMap1.createCollection(3);
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory(collection0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap2;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>>>) multiValueMap0);
      multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap2 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      // Undeclared exception!
//      try { 
        multiValueMap2.getCollection(multiValueMap1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ConstantFactory<Integer>, String> multiValueMap0 = new MultiValueMap<ConstantFactory<Integer>, String>();
      Integer integer0 = new Integer(273);
      Iterator<String> iterator0 = multiValueMap0.iterator((Object) integer0);
      MultiValueMap<Collection<String>, ArrayList<String>> multiValueMap1 = new MultiValueMap<Collection<String>, ArrayList<String>>();
      multiValueMap1.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap1.getCollection(iterator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.entrySet();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      LinkedList<HashMap<String, Object>> linkedList0 = new LinkedList<HashMap<String, Object>>();
      ConstantFactory<LinkedList<HashMap<String, Object>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<String, Object>>>(linkedList0);
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<HashMap<String, Object>>>) multiValueMap0, (Factory<LinkedList<HashMap<String, Object>>>) constantFactory0);
      multiValueMap1.putIfAbsent(multiValueMap0, linkedList0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) multiValueMap1, (Object) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, Object>>();
      multiValueMap0.map = null;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) integer0, (Object) integer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<LinkedList<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, LinkedList<Object>>();
      multiValueMap0.map = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      Factory<Collection<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "tN");
      hashMap0.put(abstractMap_SimpleImmutableEntry0, "tN");
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, String>, ? super Collection<ArrayList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Integer integer0 = new Integer((-1));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      multiValueMap0.putAll((Object) integer0, (Collection<String>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll((Object) integer0, (Collection<String>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>>>) multiValueMap0);
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap2 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      Collection<AbstractMap.SimpleImmutableEntry<Object, String>> collection0 = multiValueMap2.getCollection(multiValueMap1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) hashMap0);
      boolean boolean0 = multiValueMap0.putAll((String) null, (Collection<Collection<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>>();
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Integer integer0 = new Integer((-1));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      multiValueMap0.putAll((Object) integer0, (Collection<String>) linkedList0);
      LinkedList<HashMap<String, Object>> linkedList1 = new LinkedList<HashMap<String, Object>>();
      ConstantFactory<LinkedList<HashMap<String, Object>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<String, Object>>>(linkedList1);
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<HashMap<String, Object>>>) multiValueMap0, (Factory<LinkedList<HashMap<String, Object>>>) constantFactory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0, (Object) constantFactory0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("ClBssto insgantiae mus notbe null");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      multiValueMap0.putAll((Object) linkedList1, (Collection<String>) linkedList0);
      LinkedList<HashMap<String, Object>> linkedList2 = new LinkedList<HashMap<String, Object>>();
      ConstantFactory<LinkedList<HashMap<String, Object>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<String, Object>>>(linkedList2);
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<HashMap<String, Object>>>) multiValueMap0, (Factory<LinkedList<HashMap<String, Object>>>) constantFactory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) linkedList2, (Object) "ClBssto insgantiae mus notbe null");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ConstantFactory<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ConstantFactory<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
      hashMap0.put(abstractMap_SimpleImmutableEntry0, "");
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      MultiValueMap<LinkedList<String>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, arrayList0, biFunction0);
      multiValueMap1.put(linkedList0, multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = new Object();
      MultiValueMap<HashMap<String, String>, String> multiValueMap0 = new MultiValueMap<HashMap<String, String>, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      multiValueMap0.put(hashMap0, object0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("p");
      linkedList0.add("p");
      multiValueMap0.putAll((Object) linkedList0, (Collection<String>) linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, "p");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("p");
      multiValueMap0.putAll((Object) linkedList0, (Collection<String>) linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, "p");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, HashMap<Collection<String>, Integer>> multiValueMap0 = new MultiValueMap<Object, HashMap<Collection<String>, Integer>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      multiValueMap0.putAll((Object) linkedList0, (Collection<String>) linkedList0);
      LinkedList<HashMap<String, Object>> linkedList1 = new LinkedList<HashMap<String, Object>>();
      ConstantFactory<LinkedList<HashMap<String, Object>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<String, Object>>>(linkedList1);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, constantFactory0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      MultiValueMap<LinkedList<String>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, arrayList0, biFunction0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Integer integer0 = new Integer(0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, Integer> multiValueMap2 = new MultiValueMap<Object, Integer>();
      multiValueMap1.putIfAbsent(multiValueMap2, integer0);
      multiValueMap1.iterator((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Object>, Object> multiValueMap0 = new MultiValueMap<HashMap<Integer, Object>, Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<ExceptionFactory<String>, Object> hashMap1 = new HashMap<ExceptionFactory<String>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      MultiValueMap<ExceptionFactory<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<String>, ? super LinkedList<Integer>>) hashMap1, (Factory<LinkedList<Integer>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll(hashMap0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, Object>>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      Iterator<Map.Entry<Integer, LinkedList<Integer>>> iterator0 = (Iterator<Map.Entry<Integer, LinkedList<Integer>>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Collection<String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<String>>();
      MultiValueMap<LinkedList<Object>, HashMap<Collection, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<Collection, String>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap1;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.put(linkedList0, linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<ConstantFactory<Integer>, Object> hashMap0 = new HashMap<ConstantFactory<Integer>, Object>();
      ConstantFactory<LinkedList<Collection<String>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<String>>>((LinkedList<Collection<String>>) null);
      MultiValueMap<ConstantFactory<Integer>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Integer>, ? super LinkedList<Collection<String>>>) hashMap0, (Factory<LinkedList<Collection<String>>>) constantFactory0);
      Collection<Collection<String>> collection0 = multiValueMap0.createCollection((-2));
      assertNull(collection0);
  }
}
