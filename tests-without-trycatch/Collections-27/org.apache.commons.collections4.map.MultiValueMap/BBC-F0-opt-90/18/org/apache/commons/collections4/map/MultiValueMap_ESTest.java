/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:05:52 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = multiValueMap0.put(arrayList0, linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping(object0, arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Integer>>();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) multiValueMap0);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap1.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(hashMap0, hashMap0);
      LinkedList<AbstractMap.SimpleImmutableEntry<ArrayList<String>, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<ArrayList<String>, Object>>();
      ConstantFactory<LinkedList<AbstractMap.SimpleImmutableEntry<ArrayList<String>, Object>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleImmutableEntry<ArrayList<String>, Object>>>(linkedList0);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<ArrayList<String>, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleImmutableEntry<ArrayList<String>, Object>>>) hashMap0, (Factory<LinkedList<AbstractMap.SimpleImmutableEntry<ArrayList<String>, Object>>>) constantFactory0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      multiValueMap0.put((Integer) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      LinkedList<Collection<Integer>> linkedList1 = new LinkedList<Collection<Integer>>();
      multiValueMap0.getCollection(linkedList1);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<String>>) hashMap0);
      MultiValueMap<LinkedList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Integer>>) multiValueMap0);
      ConstantFactory<Collection<Collection<Collection<Integer>>>> constantFactory0 = new ConstantFactory<Collection<Collection<Collection<Integer>>>>((Collection<Collection<Collection<Integer>>>) null);
      MultiValueMap<LinkedList<String>, Collection<Collection<Integer>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<Collection<Integer>>>>) multiValueMap1, (Factory<Collection<Collection<Collection<Integer>>>>) constantFactory0);
      Collection<Collection<Collection<Integer>>> collection0 = multiValueMap2.createCollection((-853));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Object>>>) hashMap0);
      Collection<Collection<Object>> collection0 = multiValueMap0.createCollection((-2053));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Collection<Integer>>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Collection<Integer>>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer((-719));
      hashMap0.put(multiValueMap0, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(hashMap0, hashMap0, biFunction0);
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>((Map<Object, ? super ArrayList<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("9T}");
      multiValueMap0.putAll((Collection<String>) linkedList0, (Collection<String>) linkedList0);
      MultiValueMap<Collection<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(2);
      hashMap0.put(integer0, multiValueMap0);
      MultiValueMap<Integer, HashMap<HashMap, Collection<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<HashMap, Collection<Integer>>>>) hashMap0);
      MultiValueMap<Integer, Collection<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Integer>>>) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap2.totalSize();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, Collection<Object>>();
      MultiValueMap<Collection<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<Integer>, Object>) multiValueMap1;
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      arrayList0.add((Object) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(arrayList0, arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<Collection<Object>>>) hashMap0, factory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      hashMap0.put(linkedList1, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(linkedList0, (Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, ArrayList<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      Factory<Collection<ExceptionFactory<Collection<Integer>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, ExceptionFactory<Collection<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ExceptionFactory<Collection<Integer>>>>) hashMap0, factory0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, collection0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<? extends LinkedList<String>, ?>) hashMap0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Object>>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      ArrayList<Collection<Integer>> arrayList1 = new ArrayList<Collection<Integer>>();
      Factory<ArrayList<Collection<Integer>>> factory0 = ConstantFactory.constantFactory(arrayList1);
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<Collection<Integer>>>) hashMap1, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = new MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<Integer, Integer>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends Collection<Integer>, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Collection<String>, MultiValueMap<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<MultiValueMap<Integer, Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<String>, Object>) multiValueMap1;
      linkedList0.offerFirst("WZ");
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Collection<String>) linkedList0, (Collection<String>) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<Integer>>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<Collection<Integer>>, HashMap<Integer, String>>();
      MultiValueMap<LinkedList<Collection<Integer>>, MultiValueMap<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<Integer>>, ? super Collection<MultiValueMap<String, Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<Collection<Integer>>, Object>) multiValueMap1;
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.put(linkedList0, linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<HashMap<Integer, Collection<Integer>>, Collection<Integer>> hashMap0 = new HashMap<HashMap<Integer, Collection<Integer>>, Collection<Integer>>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) null);
      MultiValueMap<HashMap<Integer, Collection<Integer>>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Collection<Integer>>, ? super Collection<Integer>>) hashMap0, factory0);
      HashMap<Integer, Collection<Integer>> hashMap1 = new HashMap<Integer, Collection<Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.put(hashMap1, arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super LinkedList<Integer>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, String>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap1 = new MultiValueMap<HashMap<Object, Object>, Integer>((Map<HashMap<Object, Object>, ? super Collection<Integer>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<HashMap<Object, Object>, Object>) multiValueMap1;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Integer>>();
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.createCollection((-1289));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Collection<String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Collection<String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) linkedList0, (Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.map = null;
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) arrayList0, (Object) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Collection<Integer>>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Collection<Integer>>>();
      HashMap<ArrayList<Collection<Integer>>, Object> hashMap0 = new HashMap<ArrayList<Collection<Integer>>, Object>();
      Factory<LinkedList<LinkedList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Collection<Integer>>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Integer>>, ? super LinkedList<LinkedList<Integer>>>) hashMap0, factory0);
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      hashMap0.put(arrayList0, multiValueMap0.map);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) linkedList0, (Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, (Object) null);
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(257);
      hashMap0.put(arrayList0, integer0);
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Object>>>) hashMap0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = new MultiValueMap<Object, LinkedList<String>>();
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) multiValueMap2);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = new MultiValueMap<String, ArrayList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<Integer>>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      Collection<Collection<Integer>> collection0 = multiValueMap0.getCollection(linkedList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Integer, Collection<Integer>> multiValueMap0 = new MultiValueMap<Integer, Collection<Integer>>();
      Iterator<Collection<Integer>> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(3349);
      linkedList0.add(integer0);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Integer>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Class<String> class0 = String.class;
      int int0 = multiValueMap0.size((Object) class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.putIfAbsent("Cannot instantiate class: ", (Object) null);
      int int0 = multiValueMap0.size((Object) "Cannot instantiate class: ");
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap1.containsValue(object0, (Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      Integer integer0 = new Integer((-80));
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      ArrayList<Collection<Integer>> arrayList1 = new ArrayList<Collection<Integer>>();
      multiValueMap1.putIfAbsent(arrayList0, multiValueMap0);
      Integer integer0 = new Integer((-80));
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList1, (Object) integer0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Collection<Integer>>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Collection<Integer>>>();
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>((Map<Object, ? super ArrayList<Object>>) multiValueMap0, factory0);
      multiValueMap1.totalSize();
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Integer>, Collection<Integer>>();
      HashMap<Collection<Integer>, Integer> hashMap0 = new HashMap<Collection<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, (Integer) null);
      multiValueMap0.putAll((Map<? extends Collection<Integer>, ?>) hashMap0);
      MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<String, Integer>> multiValueMap1 = new MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<String, Integer>>();
      multiValueMap1.putAll((Map<? extends Collection<Integer>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = new MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<Integer, Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1454));
      multiValueMap0.put(arrayList0, integer0);
      MultiValueMap<Collection<Integer>, String> multiValueMap1 = new MultiValueMap<Collection<Integer>, String>();
      Factory<LinkedList<Collection<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Integer>, Collection<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<Collection<Integer>>>) multiValueMap1, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll((Map<? extends Collection<Integer>, ?>) multiValueMap0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Object>>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, ArrayList<Collection<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super Collection<ArrayList<Collection<Integer>>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      MultiValueMap<Collection<String>, String> multiValueMap2 = new MultiValueMap<Collection<String>, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast("");
      multiValueMap2.putAll((Collection<String>) linkedList0, (Collection<String>) linkedList0);
      boolean boolean0 = multiValueMap2.containsValue((Object) collection0);
      assertEquals(1, multiValueMap2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      multiValueMap0.put(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer((-120));
      multiValueMap0.put(arrayList0, integer0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      boolean boolean0 = multiValueMap0.removeMapping("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Collection<Integer>>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Collection<Integer>>>();
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>((Map<Object, ? super ArrayList<Object>>) multiValueMap1, factory0);
      MultiValueMap<String, LinkedList<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap3.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap2.putAll((Object) "", collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<HashMap<Collection<Integer>, String>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Collection<Integer>, String>, ArrayList<Integer>>();
      Iterator<Map.Entry<HashMap<Collection<Integer>, String>, ArrayList<Integer>>> iterator0 = (Iterator<Map.Entry<HashMap<Collection<Integer>, String>, ArrayList<Integer>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
