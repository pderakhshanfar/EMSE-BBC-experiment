/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:37:06 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("", "");
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      multiValueMap0.put((Collection<String>) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>();
      ConstantFactory<ArrayList<Collection<String>>> constantFactory0 = new ConstantFactory<ArrayList<Collection<String>>>((ArrayList<Collection<String>>) null);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, String>, ? super ArrayList<Collection<String>>>) hashMap0, (Factory<ArrayList<Collection<String>>>) constantFactory0);
      Collection<Collection<String>> collection0 = multiValueMap0.createCollection(0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Collection<String> collection0 = multiValueMap0.createCollection(887);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<String, LinkedList<LinkedList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<LinkedList>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, (Object) null);
      MultiValueMap<ArrayList<String>, ConstantFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ConstantFactory<Object>>>) hashMap0);
      Factory<LinkedList<ExceptionFactory<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, ExceptionFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<ExceptionFactory<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("#ptB5BUA-1o#!x5?>", "#ptB5BUA-1o#!x5?>");
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<String, Object>>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      Integer integer0 = new Integer((-1702));
      // Undeclared exception!
//      try { 
        multiValueMap1.size((Object) integer0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>((LinkedList<String>) null);
      Integer integer0 = new Integer((-82));
      hashMap0.put(integer0, "");
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("#ptB5BUA-1o#!x5?>", multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(multiValueMap0, multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("", "");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(10);
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("ptB5BUrA-!1o#!xj5?>", "ptB5BUrA-!1o#!xj5?>");
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap1);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap2);
      multiValueMap1.map = (Map<Object, Object>) multiValueMap3;
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Collection<ArrayList<Integer>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<ArrayList<Integer>>>>) hashMap0);
      Integer integer0 = new Integer((-82));
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(integer0, integer0);
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>((LinkedList<String>) null);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap1, (Factory<LinkedList<String>>) constantFactory0);
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap2);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<ArrayList<Integer>> arrayList1 = new ArrayList<ArrayList<Integer>>();
      arrayList1.add(arrayList0);
      HashMap<ExceptionFactory<Integer>, Object> hashMap0 = new HashMap<ExceptionFactory<Integer>, Object>();
      Factory<LinkedList<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ExceptionFactory<Integer>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Integer>, ? super LinkedList<ArrayList<Integer>>>) hashMap0, factory0);
      ExceptionFactory<Integer> exceptionFactory0 = (ExceptionFactory<Integer>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(exceptionFactory0, (Collection<ArrayList<Integer>>) arrayList1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<ConstantFactory<Object>> arrayList0 = new ArrayList<ConstantFactory<Object>>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>("EG]r&3");
      arrayList0.add(constantFactory0);
      MultiValueMap<Collection<String>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, ConstantFactory<Object>>();
      Factory<LinkedList<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<Collection<String>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<Collection<String>, Object>) multiValueMap1;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Collection<String>) arrayList1, (Collection<ConstantFactory<Object>>) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<HashMap<String, Object>> linkedList0 = new LinkedList<HashMap<String, Object>>();
      linkedList0.push(hashMap0);
      ConstantFactory<ArrayList<HashMap<String, Object>>> constantFactory0 = new ConstantFactory<ArrayList<HashMap<String, Object>>>((ArrayList<HashMap<String, Object>>) null);
      MultiValueMap<String, HashMap<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<HashMap<String, Object>>>) hashMap0, (Factory<ArrayList<HashMap<String, Object>>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll("Swn1qxwy7x", (Collection<HashMap<String, Object>>) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(hashMap1, hashMap1);
      MultiValueMap<HashMap<Object, Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<String>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(hashMap1, (Collection<String>) arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      Factory<LinkedList<Collection<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<String, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<String>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.put("f$<X7fD(rq}l8N", "f$<X7fD(rq}l8N");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.put("f$</X7fD(rq}l8N", "f$</X7fD(rq}l8N");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap0.put(linkedList0, hashMap1);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(linkedList0, linkedList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<String, Object>>>) null, (Factory<Collection<HashMap<String, Object>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<String, Object>>>) multiValueMap0, (Factory<Collection<HashMap<String, Object>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, String>, ? super Collection<String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<HashMap<String, Integer>, String> multiValueMap0 = new MultiValueMap<HashMap<String, Integer>, String>();
      Integer integer0 = new Integer((-1354));
      MultiValueMap<HashMap<String, Integer>, AbstractMap.SimpleEntry<ConstantFactory<Integer>, ConstantFactory<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Integer>, ? super Collection<AbstractMap.SimpleEntry<ConstantFactory<Integer>, ConstantFactory<Integer>>>>) multiValueMap0);
      multiValueMap0.map = (Map<HashMap<String, Integer>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) integer0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<String>, Integer> multiValueMap0 = new MultiValueMap<Collection<String>, Integer>();
      MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<LinkedList<String>, ArrayList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<AbstractMap.SimpleEntry<LinkedList<String>, ArrayList>>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<String>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.createCollection(0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) "Opf6GPLLu", (Object) "Opf6GPLLu");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, String>>();
      multiValueMap0.map = null;
      LinkedList<AbstractMap.SimpleEntry<Object, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, Object>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) "org.apache.commons.collections4.functors.InstantiateFactory");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-82));
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>((LinkedList<String>) null);
      hashMap0.put(integer0, "");
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) "ptB5BUrA-!1o#!xj5?>");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.clear();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<String>>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = new MultiValueMap<ArrayList<String>, Object>((Map<ArrayList<String>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      Set<Map.Entry<ArrayList<String>, Object>> set0 = (Set<Map.Entry<ArrayList<String>, Object>>)multiValueMap1.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<String, MultiValueMap<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<MultiValueMap<String, String>>>) multiValueMap0);
      Collection<MultiValueMap<String, String>> collection0 = multiValueMap1.getCollection("org.apache.commons.collections4.iteratorsAbstractEmptyMapIterator");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<Object> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<ConstantFactory<Object>> arrayList0 = new ArrayList<ConstantFactory<Object>>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(arrayList0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.add(constantFactory0);
      MultiValueMap<Collection<String>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, ConstantFactory<Object>>();
      multiValueMap0.putAll((Collection<String>) linkedList0, (Collection<ConstantFactory<Object>>) arrayList0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll((Collection<String>) arrayList1, (Collection<ConstantFactory<Object>>) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      int int0 = multiValueMap0.size((Object) "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("ptB5BUA-1o#!x5?>", "ptB5BUA-1o#!x5?>");
      int int0 = multiValueMap0.size((Object) "ptB5BUA-1o#!x5?>");
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("ptB5BUA-1o#!x5?>", "ptB5BUA-1o#!x5?>");
      Collection<Object> collection0 = multiValueMap0.values();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap1);
      multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>(collection0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "ptB5BUA-1o#!x5?>", (Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("/\"D@/N{ynUWW=`$)", "/\"D@/N{ynUWW=`$)");
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) "/\"D@/N{ynUWW=`$)", (Object) linkedList0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = hashMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("", "");
      boolean boolean0 = multiValueMap0.containsValue((Object) "");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("InstantiateFactory: The constructor must exist and be public ", "InstantiateFactory: The constructor must exist and be public ");
      multiValueMap0.put("InstantiateFactory: The constructor must exist and be public ", "InstantiateFactory: The constructor must exist and be public ");
      boolean boolean0 = multiValueMap0.removeMapping("InstantiateFactory: The constructor must exist and be public ", "InstantiateFactory: The constructor must exist and be public ");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("/\"D@/N{ynUWW=`$)", "/\"D@/N{ynUWW=`$)");
      boolean boolean0 = multiValueMap0.removeMapping("/\"D@/N{ynUWW=`$)", "@ :,;)+<OUxg?7b?S7");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<String, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<String, Object>>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<Object>>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = multiValueMap0.put("PrototypeCloneFactoSy: lone method threw%an exception", linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping("PrototypeCloneFactoSy: lone method threw%an exception", object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<String, Collection<Object>> multiValueMap1 = new MultiValueMap<String, Collection<Object>>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(",TH&v<7A9j", multiValueMap0, biFunction0);
      MultiValueMap<String, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) multiValueMap1, (Factory<LinkedList<String>>) constantFactory0);
      int int0 = multiValueMap2.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      hashMap1.put(hashMap0, "5zt-GxEcbIq)N9Bi&E");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap1, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap1 = new MultiValueMap<Collection<Object>, String>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll("", collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("org.apache.commons.collections4.iteratorsAbstractEmptyMapIterator", "org.apache.commons.collections4.iteratorsAbstractEmptyMapIterator");
      MultiValueMap<String, MultiValueMap<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<MultiValueMap<String, String>>>) multiValueMap0);
      multiValueMap1.getCollection("org.apache.commons.collections4.iteratorsAbstractEmptyMapIterator");
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) "Opf6GPLLu", (Object) "Opf6GPLLu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<String>>) multiValueMap0);
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, String>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, String>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }
}
