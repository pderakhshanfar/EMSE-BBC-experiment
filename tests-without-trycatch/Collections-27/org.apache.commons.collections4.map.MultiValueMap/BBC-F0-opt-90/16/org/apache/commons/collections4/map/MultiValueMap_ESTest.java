/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:03:20 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap1.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("H{&NC,Y !V", "H{&NC,Y !V", biFunction0);
      multiValueMap0.getCollection("H{&NC,Y !V");
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      ConstantFactory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>>((LinkedList<AbstractMap.SimpleEntry<Object, Object>>) null);
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0, (Factory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) constantFactory0);
      Collection<AbstractMap.SimpleEntry<Object, Object>> collection0 = multiValueMap1.createCollection(734);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      Collection<AbstractMap.SimpleEntry<Object, Object>> collection0 = multiValueMap0.createCollection(2);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<Integer, ConstantFactory<String>>();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>("P}a@@SFF");
      hashMap0.put("org.apache.commons.collections4.iterators.IteratorChain", constantFactory0);
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.replaceAll(biFunction0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-264));
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>>();
      multiValueMap0.putIfAbsent(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.Integer
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      hashMap0.put(multiValueMap0, "H{&NC,Y !V");
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>((Collection<Object>) null);
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap1, (Factory<Collection<Object>>) constantFactory0);
      MultiValueMap<Integer, Object> multiValueMap3 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap2.size((Object) multiValueMap3);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      Object object0 = multiValueMap0.putIfAbsent("]HopQoaGc/v", multiValueMap0);
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(object0, object0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap1.computeIfAbsent(arrayList0, function0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator").when(biFunction0).apply(any() , any());
      multiValueMap0.replaceAll(biFunction0);
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(arrayList0, (Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.putIfAbsent("!3$/n,UY(sT", "!3$/n,UY(sT");
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap1);
      multiValueMap1.map = (Map<String, Object>) multiValueMap2;
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, ConstantFactory<Integer>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, ConstantFactory<Integer>>>>) hashMap0);
      hashMap0.put("org.apache.commons.collections4.FunctorException", "|!6n?P85");
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.map = null;
      arrayList0.add((Object) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.putIfAbsent("}p+C{v2hz+KVq$BL;", "}p+C{v2hz+KVq$BL;");
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>();
      Collection<Object> collection0 = multiValueMap1.values();
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll((Object) multiValueMap1, collection0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<ConstantFactory<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<ConstantFactory<String>>>>) hashMap0);
      MultiValueMap<String, EmptyIterator<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<EmptyIterator<Integer>>>) multiValueMap0);
      hashMap0.put("m@O=(iTHWi^(R", multiValueMap0);
      LinkedList<EmptyIterator<Integer>> linkedList0 = new LinkedList<EmptyIterator<Integer>>();
      EmptyIterator<Integer> emptyIterator0 = (EmptyIterator<Integer>) mock(EmptyIterator.class, new ViolatedAssumptionAnswer());
      linkedList0.add(emptyIterator0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll("m@O=(iTHWi^(R", (Collection<EmptyIterator<Integer>>) linkedList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap1.put(arrayList0, multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      Factory<ArrayList<String>> factory0 = ConstantFactory.constantFactory((ArrayList<String>) null);
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super ArrayList<String>>) hashMap0, factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.put(linkedList0, arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super LinkedList<String>>) null, (Factory<LinkedList<String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<Object>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<EmptyIterator<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = new MultiValueMap<EmptyIterator<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<MultiValueMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap1.getCollection(multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Integer, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<String, Object>>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, String> multiValueMap1 = new MultiValueMap<Integer, String>((Map<Integer, ? super LinkedList<String>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.createCollection((-1003));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.map = null;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) "YaqS#4<'s");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      LinkedList<Collection<String>> linkedList1 = new LinkedList<Collection<String>>();
      Factory<LinkedList<Collection<String>>> factory1 = ConstantFactory.constantFactory(linkedList1);
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Collection<String>>>) hashMap0, factory1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap1);
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap1);
      hashMap0.put(arrayList0, multiValueMap2);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) linkedList0, (Object) factory0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) "(r2 `7$<XRN!2V(P\"H");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = null;
//      try {
        multiValueMap0 = new MultiValueMap<Collection<Object>, Object>((Map<Collection<Object>, ? super LinkedList<Object>>) null, (Factory<LinkedList<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Collection<Object> collection1 = multiValueMap1.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(0);
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap0.put(arrayList0, arrayList0);
      multiValueMap1.replace(arrayList0, (Object) integer0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<Collection<Integer>>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap1 = null;
//      try {
        multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object>((Map<AbstractMap.SimpleEntry<String, String>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      Collection<Object> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Iterator<Object> iterator0 = multiValueMap0.iterator((Object) "5,=_IGq_2c&/L<<V");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.putAll("5ns~p2", (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      Integer integer0 = new Integer(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object0 = multiValueMap0.computeIfAbsent(integer0, unaryOperator0);
      int int0 = multiValueMap0.size(object0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Integer integer0 = new Integer(2);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(integer0, integer0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(multiValueMap0, multiValueMap0, biFunction0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) "`.MRU");
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, Collection<String>> multiValueMap0 = new MultiValueMap<Object, Collection<String>>();
      multiValueMap0.values();
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>(linkedList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) multiValueMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) hashMap0);
      Integer integer0 = new Integer((-222));
      multiValueMap0.putIfAbsent(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      multiValueMap1.putAll((Map<? extends Integer, ?>) hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.putIfAbsent("org.apache.commons.collections4.iterators.EmptyIterator", "org.apache.commons.collections4.iterators.EmptyIterator");
      boolean boolean0 = multiValueMap0.containsValue((Object) "org.apache.commons.collections4.iterators.EmptyIterator");
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.putIfAbsent("org.apache.commons.collections4.iterators.EmptyIterator", "org.apache.commons.collections4.iterators.EmptyIterator");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", factory0);
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap1);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.putIfAbsent("H{e&NC,Y !V", "H{e&NC,Y !V");
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping("H{e&NC,Y !V", "H{e&NC,Y !V");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.putIfAbsent("H{e&NC,Y !V", "H{e&NC,Y !V");
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap1.removeMapping("H{e&NC,Y !V", "H{e&NC,Y !V");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Collection<Object>, ConstantFactory<Collection<String>>> multiValueMap0 = new MultiValueMap<Collection<Object>, ConstantFactory<Collection<String>>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("YaqS#4<'s");
      boolean boolean0 = multiValueMap0.removeMapping(hashMap0, constantFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Object, Collection<String>> multiValueMap0 = new MultiValueMap<Object, Collection<String>>();
      Integer integer0 = new Integer(0);
      multiValueMap0.put(integer0, (Object) null);
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>(linkedList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) multiValueMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      boolean boolean0 = multiValueMap1.removeMapping(integer0, linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, String>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      Integer integer0 = new Integer(5146);
      multiValueMap1.put(integer0, multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Factory<LinkedList<EmptyIterator<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, EmptyIterator<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<EmptyIterator<Object>>>) multiValueMap0, factory0);
      MultiValueMap<Object, ArrayList<String>> multiValueMap2 = new MultiValueMap<Object, ArrayList<String>>();
      ArrayList<ArrayList<String>> arrayList0 = new ArrayList<ArrayList<String>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add(arrayList1);
      multiValueMap2.putAll((Object) multiValueMap1, (Collection<ArrayList<String>>) arrayList0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<String, Object>>>) multiValueMap2);
      multiValueMap3.iterator((Object) multiValueMap1);
      assertEquals(1, multiValueMap2.size());
      assertFalse(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0);
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap1.putAll("z6$=wrz{mhm&", collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<String>>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<String>>, Collection<String>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Iterator<Map.Entry<Object, Integer>> iterator0 = (Iterator<Map.Entry<Object, Integer>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<Object>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      linkedList0.add((Object) arrayList0);
      arrayList0.add(linkedList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(linkedList0, (Collection<LinkedList<Object>>) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
