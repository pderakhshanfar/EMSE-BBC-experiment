/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:55:29 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = new MultiValueMap<String, ArrayList<String>>();
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      multiValueMap1.putIfAbsent("iHeg*,Z}~lU`{", hashMap0);
      assertEquals(1, multiValueMap1.size());
      
      boolean boolean0 = multiValueMap1.removeMapping("iHeg*,Z}~lU`{", multiValueMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("M@O?NwK<qO[%7Kt#+d1", "");
      hashMap0.put(abstractMap_SimpleEntry0, "M@O?NwK<qO[%7Kt#+d1");
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, String>();
      multiValueMap0.putAll((Map<? extends AbstractMap.SimpleEntry<Object, String>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object0 = multiValueMap0.computeIfAbsent(linkedList0, unaryOperator0);
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<String>>>) hashMap0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, object0);
      Collection<Object> collection0 = multiValueMap2.getCollection(linkedList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<HashMap<Collection<String>, Object>, Object> hashMap0 = new HashMap<HashMap<Collection<String>, Object>, Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory((LinkedList<Object>) null);
      MultiValueMap<HashMap<Collection<String>, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Collection<String>, Object>, ? super LinkedList<Object>>) hashMap0, factory0);
      Collection<Object> collection0 = multiValueMap0.createCollection(0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      Collection<ArrayList<Integer>> collection0 = multiValueMap0.createCollection(3);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>(arrayList0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList1, biFunction0);
      MultiValueMap<ArrayList<Integer>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Collection<String>>>) multiValueMap0);
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      multiValueMap1.replaceAll(biFunction1);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      hashMap0.put(linkedList1, linkedList0);
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<Integer>>) hashMap0, factory0);
      MultiValueMap<LinkedList<String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<String>>) multiValueMap0);
      multiValueMap1.replace(linkedList1, (Object) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.size((Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      Integer integer0 = new Integer((-5137));
      multiValueMap0.map = null;
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) constantFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      multiValueMap0.map = null;
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, AbstractMap.SimpleEntry<Object, String>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter");
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", (Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("V;A_", hashMap0);
      hashMap0.put(hashMap1, (Object) null);
      MultiValueMap<HashMap<String, Object>, ConstantFactory<Collection<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<ConstantFactory<Collection<String>>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends HashMap<String, Object>, ?>) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      Factory<Collection<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add((Collection<String>) arrayList0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<String>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((String) null, (Collection<Collection<String>>) linkedList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      MultiValueMap<String, LinkedList<ArrayList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<ArrayList>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add((Collection<String>) arrayList1);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll("", (Collection<Collection<String>>) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      multiValueMap0.map = null;
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.add((Collection<String>) linkedList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll("A", (Collection<Collection<String>>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.put(multiValueMap1, multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(multiValueMap1, multiValueMap1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<String>>) null, (Factory<LinkedList<String>>) constantFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<ConstantFactory<String>>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<String, String>>>) multiValueMap0);
      multiValueMap0.put("", multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      multiValueMap0.map = (Map<String, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Collection<Object>, Collection<Integer>> multiValueMap1 = new MultiValueMap<Collection<Object>, Collection<Integer>>();
      multiValueMap1.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap1.getCollection(multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Collection<String>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Collection<String>>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, String>((Map<AbstractMap.SimpleEntry<Object, String>, ? super LinkedList<String>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.createCollection((-2));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap1 = new MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Integer, Object>>();
      MultiValueMap<HashMap<String, Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<String>>) multiValueMap1);
      multiValueMap1.map = (Map<HashMap<String, Object>, Object>) multiValueMap2;
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      Object object0 = multiValueMap0.put(multiValueMap0, multiValueMap0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("o,K?Tb%2A-b=", object0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0);
//       //  fail("Expecting exception: StackOverflowError");
       // Unstable assertion
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      Iterator<Object> iterator0 = multiValueMap0.iterator((Object) hashMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(multiValueMap0, iterator0, biFunction0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) iterator0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.iterators.EmptyIterator cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add((Collection<String>) arrayList1);
      multiValueMap0.putAll("", (Collection<Collection<String>>) arrayList0);
      boolean boolean0 = multiValueMap0.putAll("", (Collection<Collection<String>>) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>(0);
      MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap0 = null;
//      try {
        multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<Object>>((Map<Collection<Integer>, ? super Collection<LinkedList<Object>>>) hashMap0, (Factory<Collection<LinkedList<Object>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Collection<Object>, Collection<Integer>> multiValueMap1 = new MultiValueMap<Collection<Object>, Collection<Integer>>();
      Collection<Collection<Integer>> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>>();
      multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      multiValueMap1.iterator((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      boolean boolean0 = multiValueMap0.putAll("n?IHWfkOB|9&Q#", (Collection<Collection<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ArrayList<Integer>>();
      int int0 = multiValueMap0.size((Object) "ce-8&m6$Hj6@\"!");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      multiValueMap0.put((String) null, (Object) null);
      int int0 = multiValueMap0.size((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Collection<String>> arrayList1 = new ArrayList<Collection<String>>();
      arrayList1.add((Collection<String>) arrayList0);
      multiValueMap0.putAll("", (Collection<Collection<String>>) arrayList1);
      boolean boolean0 = multiValueMap0.containsValue((Object) "", (Object) "");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0, (Object) "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add((Collection<String>) arrayList1);
      multiValueMap0.putAll("", (Collection<Collection<String>>) arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "", (Object) arrayList1);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Collection<Object> collection1 = multiValueMap1.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Integer, Object>>();
      MultiValueMap<ConstantFactory<Collection<String>>, Object> multiValueMap1 = new MultiValueMap<ConstantFactory<Collection<String>>, Object>();
      MultiValueMap<ConstantFactory<Collection<String>>, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ConstantFactory<Collection<String>>, ? super Collection<LinkedList<Integer>>>) multiValueMap1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(arrayList0);
      multiValueMap2.putIfAbsent(constantFactory0, multiValueMap0);
      Factory<LinkedList<AbstractMap.SimpleEntry<Collection<String>, String>>> factory0 = ConstantFactory.constantFactory((LinkedList<AbstractMap.SimpleEntry<Collection<String>, String>>) null);
      MultiValueMap<ConstantFactory<Collection<String>>, AbstractMap.SimpleEntry<Collection<String>, String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<ConstantFactory<Collection<String>>, ? super LinkedList<AbstractMap.SimpleEntry<Collection<String>, String>>>) multiValueMap2, factory0);
      multiValueMap3.putAll((Map<? extends ConstantFactory<Collection<String>>, ?>) multiValueMap2);
      assertEquals(1, multiValueMap2.size());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Integer, LinkedList<Object>>();
      multiValueMap1.putAll((Map<? extends Integer, ?>) multiValueMap0);
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      multiValueMap0.put(multiValueMap1, multiValueMap1);
      Object object0 = multiValueMap0.put(multiValueMap1, multiValueMap1);
      boolean boolean0 = multiValueMap0.removeMapping(multiValueMap1, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0);
      multiValueMap1.putIfAbsent("<", multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping("<", (Object) null);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0);
      multiValueMap1.putIfAbsent("<", multiValueMap0);
      MultiValueMap<String, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      int int0 = multiValueMap2.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Integer>>) multiValueMap0, factory0);
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((Collection<String>) arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.put(constantFactory0, multiValueMap1);
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, AbstractMap.SimpleEntry<Object, String>>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<String>>();
      Iterator<Map.Entry<LinkedList<Integer>, LinkedList<String>>> iterator0 = (Iterator<Map.Entry<LinkedList<Integer>, LinkedList<String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.clear();
      assertEquals(0, multiValueMap1.size());
  }
}
