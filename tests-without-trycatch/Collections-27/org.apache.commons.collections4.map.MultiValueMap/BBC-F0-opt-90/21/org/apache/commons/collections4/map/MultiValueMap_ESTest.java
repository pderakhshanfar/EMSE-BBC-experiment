/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:06:55 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<EmptyIterator<String>, Object> multiValueMap0 = new MultiValueMap<EmptyIterator<String>, Object>();
      Set<Map.Entry<EmptyIterator<String>, Object>> set0 = (Set<Map.Entry<EmptyIterator<String>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put((Integer) null, integer0);
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, Collection<Integer>> multiValueMap0 = new MultiValueMap<Integer, Collection<Integer>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.put("Z%KrJA(\"J9", (Object) null);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      Collection<ArrayList<Integer>> collection0 = multiValueMap1.createCollection(1);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Integer, Collection<Integer>> multiValueMap0 = new MultiValueMap<Integer, Collection<Integer>>();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Collection<Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<Object>>();
      Integer integer0 = new Integer(1166);
      MultiValueMap<Collection<Integer>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap1.put(arrayList0, integer0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap1.replaceAll(biFunction0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      multiValueMap1.put("org.apache.commons.collections4.map.MultiValueMap$1$1", "org.apache.commons.collections4.map.MultiValueMap$1$1");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.map.MultiValueMap$1$1").when(biFunction0).apply(any() , any());
      multiValueMap1.computeIfPresent("org.apache.commons.collections4.map.MultiValueMap$1$1", biFunction0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("org.apache.commons.collections4.map.MultiValueMap$1", "");
      MultiValueMap<String, Collection<LinkedList>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<LinkedList>>>) hashMap0);
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) integer0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(")*S3yo5zGu\":sB$w0", ")*S3yo5zGu\":sB$w0");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("org.apache.commons.collections4.map.MultiValueMap$1$1$1", "org.apache.commons.collections4.map.MultiValueMap$1$1$1");
      MultiValueMap<String, Collection<LinkedList>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<LinkedList>>>) hashMap0);
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<String, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) multiValueMap1, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.removeMapping("org.apache.commons.collections4.map.MultiValueMap$1$1$1", (Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, HashMap<String, Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, HashMap<String, Object>>>>) multiValueMap0);
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap1, factory0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>>) multiValueMap2);
      multiValueMap0.map = (Map<String, Object>) multiValueMap3;
      MultiValueMap<String, Collection<Integer>> multiValueMap4 = new MultiValueMap<String, Collection<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap4.putIfAbsent((String) null, arrayList0);
      MultiValueMap<String, LinkedList<Object>> multiValueMap5 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap4);
      // Undeclared exception!
//      try { 
        multiValueMap3.putAll((Map<? extends String, ?>) multiValueMap5);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, String>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, String>>();
      ArrayList<HashMap<String, String>> arrayList0 = new ArrayList<HashMap<String, String>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MultiValueMap<Object, LinkedList<ArrayList<Collection<Integer>>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<ArrayList<Collection<Integer>>>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      arrayList0.add(hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) arrayList0, (Collection<HashMap<String, String>>) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<String, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap1);
      multiValueMap0.map = (Map<String, Object>) multiValueMap2;
      MultiValueMap<ArrayList<String>, Object> multiValueMap3 = new MultiValueMap<ArrayList<String>, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap3.iterator((Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("org.apache.commons.collections4.map.MultiValueMap$1", "");
      MultiValueMap<String, Collection<LinkedList>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<LinkedList>>>) hashMap0);
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap2.iterator((Object) "org.apache.commons.collections4.map.MultiValueMap$1");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<String, String>>();
      MultiValueMap<LinkedList<String>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>(3420);
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) arrayList0);
      MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap1, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.getCollection(arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, ConstantFactory<Integer>> multiValueMap0 = new MultiValueMap<String, ConstantFactory<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.entrySet();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) arrayList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<HashMap<Object, Collection<Integer>>, Collection<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Object, Collection<Integer>>, Collection<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", (Object) null);
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ArrayList<Object>>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Integer>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      ArrayList<Collection<Integer>> arrayList1 = new ArrayList<Collection<Integer>>();
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      arrayList1.add((Collection<Integer>) arrayList2);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Collection<Integer>>) arrayList1);
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<String>>();
      Integer integer0 = new Integer((-643));
      Collection<ArrayList<String>> collection0 = multiValueMap0.getCollection(integer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<EmptyIterator<Collection<Integer>>, Object> hashMap0 = new HashMap<EmptyIterator<Collection<Integer>>, Object>();
      MultiValueMap<EmptyIterator<Collection<Integer>>, HashMap<Object, Collection<Integer>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<EmptyIterator<Collection<Integer>>, ? super Collection<HashMap<Object, Collection<Integer>>>>) hashMap0);
      Iterator<HashMap<Object, Collection<Integer>>> iterator0 = multiValueMap0.iterator((Object) "<;Qw`|2w|V&");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.putAll((Object) "", (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Collection<Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<Object>>();
      Integer integer0 = new Integer(1166);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Integer integer0 = new Integer(724);
      multiValueMap0.put("", integer0);
      int int0 = multiValueMap0.size((Object) "");
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      HashMap<Object, Collection<Integer>> hashMap0 = new HashMap<Object, Collection<Integer>>();
      MultiValueMap<HashMap<Object, Collection<Integer>>, Collection<Integer>> multiValueMap1 = new MultiValueMap<HashMap<Object, Collection<Integer>>, Collection<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap1.put(hashMap0, arrayList0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) arrayList1);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      MultiValueMap<HashMap<Object, Collection<Integer>>, Collection<Integer>> multiValueMap1 = new MultiValueMap<HashMap<Object, Collection<Integer>>, Collection<Integer>>();
      HashMap<Object, Collection<Integer>> hashMap0 = new HashMap<Object, Collection<Integer>>();
      multiValueMap1.put(hashMap0, multiValueMap0);
      MultiValueMap<String, String> multiValueMap2 = new MultiValueMap<String, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap2, (Object) arrayList0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<EmptyIterator<String>, MultiValueMap<String, Integer>> multiValueMap0 = new MultiValueMap<EmptyIterator<String>, MultiValueMap<String, Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("Su\"Aopv|TgG1!FP@3u", "Su\"Aopv|TgG1!FP@3u");
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Integer>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, HashMap<String, Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, HashMap<String, Object>>>>) multiValueMap0);
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap1, factory0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>>) multiValueMap2);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent((String) null, arrayList0);
      MultiValueMap<String, LinkedList<Object>> multiValueMap4 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap3.putAll((Map<? extends String, ?>) multiValueMap4);
      assertEquals(1, multiValueMap3.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, String>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      ArrayList<HashMap<String, String>> arrayList0 = new ArrayList<HashMap<String, String>>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put("Su\"ApvTgG1!FP\"@3u", linkedList0);
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "Su\"ApvTgG1!FP\"@3u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Object, EmptyIterator<Integer>> multiValueMap0 = new MultiValueMap<Object, EmptyIterator<Integer>>();
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      multiValueMap0.putIfAbsent(factory0, factory0);
      boolean boolean0 = multiValueMap0.removeMapping(factory0, "3X6(_~_';tZt-{EIQ");
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      boolean boolean0 = multiValueMap0.removeMapping("Class to instantiate must not be null", "Class to instantiate must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      multiValueMap1.put("org.apache.commons.collections4.map.MultiValueMap$1$1", "org.apache.commons.collections4.map.MultiValueMap$1$1");
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll(linkedList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<HashMap<Object, Collection<Integer>>, Collection<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Object, Collection<Integer>>, Collection<Integer>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, HashMap<String, Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, HashMap<String, Object>>>>) multiValueMap0);
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap1, factory0);
      multiValueMap2.clear();
      assertEquals(0, multiValueMap2.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<String, String>>();
      Iterator<Map.Entry<LinkedList<String>, AbstractMap.SimpleEntry<String, String>>> iterator0 = (Iterator<Map.Entry<LinkedList<String>, AbstractMap.SimpleEntry<String, String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Object>>) multiValueMap1, (Factory<LinkedList<Object>>) constantFactory0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap2.put(linkedList0, linkedList1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
