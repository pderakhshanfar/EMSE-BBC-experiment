/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:18:18 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) constantFactory0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      multiValueMap1.putAll((Map<? extends Integer, ?>) multiValueMap2);
      assertEquals(0, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      multiValueMap0.putIfAbsent(linkedList0, arrayList0);
      assertEquals(1, multiValueMap0.size());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, linkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<String, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      ConstantFactory<Collection<AbstractMap.SimpleImmutableEntry<String, Integer>>> constantFactory0 = new ConstantFactory<Collection<AbstractMap.SimpleImmutableEntry<String, Integer>>>(arrayList0);
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Integer>>>) multiValueMap0, (Factory<Collection<AbstractMap.SimpleImmutableEntry<String, Integer>>>) constantFactory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      multiValueMap0.put(integer0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      Integer integer0 = new Integer((-416));
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(integer0, integer0, biFunction0);
      ArrayList<ArrayList<Integer>> arrayList0 = new ArrayList<ArrayList<Integer>>();
      ConstantFactory<Collection<ArrayList<Integer>>> constantFactory0 = new ConstantFactory<Collection<ArrayList<Integer>>>(arrayList0);
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Integer>>>) multiValueMap0, (Factory<Collection<ArrayList<Integer>>>) constantFactory0);
      multiValueMap1.getCollection(integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<LinkedList<String>, Collection<String>> hashMap0 = new HashMap<LinkedList<String>, Collection<String>>();
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<String>>) hashMap0);
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<ConstantFactory<Object>, ConstantFactory<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<ConstantFactory<Object>, ConstantFactory<String>>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, ConstantFactory<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      multiValueMap0.putIfAbsent(hashMap0, hashMap0);
      MultiValueMap<ArrayList<Integer>, Collection<String>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, Collection<String>>();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) multiValueMap1);
      Collection<String> collection0 = multiValueMap2.createCollection((-1997));
      hashMap0.put((String) null, collection0);
      MultiValueMap<HashMap<String, Object>, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap3.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("I<M=&rqwvwWK#5/q", "Unsupported object type: ");
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      Factory<ArrayList<Collection<String>>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<Integer, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super ArrayList<Collection<String>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      MultiValueMap<Integer, String> multiValueMap2 = new MultiValueMap<Integer, String>();
      // Undeclared exception!
//      try { 
        multiValueMap2.size((Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      MultiValueMap<Integer, String> multiValueMap1 = new MultiValueMap<Integer, String>();
      multiValueMap1.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap1.size((Object) multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) hashMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(multiValueMap0, "");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<Object, ConstantFactory<String>>();
      LinkedList<ConstantFactory<String>> linkedList0 = new LinkedList<ConstantFactory<String>>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("tV-:KOedaI3}q~Q&");
      linkedList0.add(constantFactory0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      multiValueMap0.putAll((Object) linkedList1, (Collection<ConstantFactory<String>>) linkedList0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.HashMap$HashIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<LinkedList<String>, Collection<String>> hashMap0 = new HashMap<LinkedList<String>, Collection<String>>();
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<String>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<ConstantFactory<Object>, ConstantFactory<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<ConstantFactory<Object>, ConstantFactory<String>>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<ArrayList<Collection<String>>, Object> hashMap0 = new HashMap<ArrayList<Collection<String>>, Object>();
      ConstantFactory<ArrayList<Collection<String>>> constantFactory0 = new ConstantFactory<ArrayList<Collection<String>>>((ArrayList<Collection<String>>) null);
      hashMap0.put((ArrayList<Collection<String>>) null, constantFactory0);
      MultiValueMap<ArrayList<Collection<String>>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<String>>, ? super ArrayList<Collection<String>>>) hashMap0, (Factory<ArrayList<Collection<String>>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Collection<String>>, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) hashMap0, factory0);
      Integer integer0 = new Integer(0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(0);
      arrayList0.add(0, integer0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(integer0, (Collection<Integer>) arrayList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<LinkedList<Integer>> arrayList0 = new ArrayList<LinkedList<Integer>>();
      arrayList0.add(linkedList0);
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      Factory<LinkedList<LinkedList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Integer>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<LinkedList<Integer>>>) hashMap0, factory0);
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) constantFactory0);
      MultiValueMap<LinkedList<Integer>, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Integer>>>) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll(linkedList0, (Collection<LinkedList<Integer>>) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      HashMap<LinkedList<Collection<String>>, Object> hashMap0 = new HashMap<LinkedList<Collection<String>>, Object>();
      LinkedList<Collection<String>> linkedList1 = new LinkedList<Collection<String>>();
      Integer integer0 = new Integer(2762);
      hashMap0.put(linkedList1, integer0);
      MultiValueMap<LinkedList<Collection<String>>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<String>>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(linkedList1, (Collection<Integer>) linkedList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<ConstantFactory<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ConstantFactory<String>, Collection<String>>();
      Set<ConstantFactory<String>> set0 = multiValueMap0.keySet();
      ConstantFactory<Collection<ConstantFactory<String>>> constantFactory0 = new ConstantFactory<Collection<ConstantFactory<String>>>(set0);
      MultiValueMap<Object, ConstantFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ConstantFactory<String>>>) hashMap0, (Factory<Collection<ConstantFactory<String>>>) constantFactory0);
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap2.put(multiValueMap0, (Object) null);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<ConstantFactory<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ConstantFactory<String>, Collection<String>>();
      Set<ConstantFactory<String>> set0 = multiValueMap0.keySet();
      hashMap0.put(multiValueMap0, multiValueMap0);
      ConstantFactory<Collection<ConstantFactory<String>>> constantFactory0 = new ConstantFactory<Collection<ConstantFactory<String>>>(set0);
      MultiValueMap<Object, ConstantFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ConstantFactory<String>>>) hashMap0, (Factory<Collection<ConstantFactory<String>>>) constantFactory0);
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap2.put(multiValueMap0, (Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) null, (Factory<LinkedList<String>>) constantFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<AbstractMap.SimpleEntry<LinkedList<Integer>, MultiValueMap<Collection<String>, String>>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, MultiValueMap<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<MultiValueMap<Integer, Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) hashMap0;
      MultiValueMap<Collection<Object>, Collection<Integer>> multiValueMap1 = new MultiValueMap<Collection<Object>, Collection<Integer>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.getCollection(hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(linkedList0, hashMap1);
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      multiValueMap0.map = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<ConstantFactory<Collection<String>>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ConstantFactory<Collection<String>>, LinkedList<Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(linkedList0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) linkedList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.clear();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Collection<ConstantFactory<Integer>>, Object> multiValueMap0 = null;
//      try {
        multiValueMap0 = new MultiValueMap<Collection<ConstantFactory<Integer>>, Object>((Map<Collection<ConstantFactory<Integer>>, ? super LinkedList<Object>>) null, (Factory<LinkedList<Object>>) constantFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      LinkedList<ArrayList<Integer>> linkedList0 = new LinkedList<ArrayList<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      linkedList0.add(arrayList0);
      Integer integer0 = new Integer(35);
      multiValueMap0.putAll(integer0, (Collection<ArrayList<Integer>>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<ArrayList<Integer>>) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Collection<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Integer>>();
      Collection<Collection<Integer>> collection0 = multiValueMap0.getCollection(hashMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, LinkedList<Collection<String>>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, LinkedList<Collection<String>>>();
      MultiValueMap<HashMap<Integer, Integer>, MultiValueMap<Object, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Integer>, ? super Collection<MultiValueMap<Object, Integer>>>) multiValueMap0);
      Iterator<MultiValueMap<Object, Integer>> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<String, Object>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<AbstractMap.SimpleEntry<String, Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(arrayList0, unaryOperator0);
      ArrayList<Collection<String>> arrayList1 = new ArrayList<Collection<String>>();
      int int0 = multiValueMap0.size((Object) arrayList1);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Collection<Integer>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<Integer>>();
      Integer integer0 = new Integer((-1466));
      MultiValueMap<HashMap<String, Object>, ConstantFactory<Object>> multiValueMap1 = new MultiValueMap<HashMap<String, Object>, ConstantFactory<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>((Collection<Integer>) null);
      MultiValueMap<String, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0, (Factory<Collection<Integer>>) constantFactory0);
      multiValueMap1.putIfAbsent(hashMap0, multiValueMap2);
      MultiValueMap<HashMap<String, Object>, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Object>>) multiValueMap1);
      boolean boolean0 = multiValueMap3.containsValue((Object) multiValueMap0, (Object) integer0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, ConstantFactory<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = multiValueMap0.putIfAbsent(hashMap0, hashMap0);
      hashMap0.put("I<M=&rqwvwWK#5/q", "Unsupported object type: ");
      MultiValueMap<HashMap<String, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Object>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue(object0, object0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, ConstantFactory<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      multiValueMap0.putIfAbsent(hashMap0, hashMap0);
      MultiValueMap<HashMap<String, Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Object>>) multiValueMap0);
      boolean boolean0 = multiValueMap2.containsValue((Object) multiValueMap1, (Object) multiValueMap1);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      MultiValueMap<Collection<Object>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Collection<Integer>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Collection<Object> collection1 = multiValueMap1.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<LinkedList<String>, Collection<String>> hashMap0 = new HashMap<LinkedList<String>, Collection<String>>();
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<String>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, linkedList0);
      multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<HashMap<Object, String>, Collection<String>> hashMap0 = new HashMap<HashMap<Object, String>, Collection<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(linkedList0);
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) constantFactory0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(hashMap1, arrayList0);
      Object object0 = multiValueMap0.put(hashMap1, constantFactory0);
      assertEquals(0, linkedList0.size());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      Integer integer0 = new Integer(0);
      LinkedList<ArrayList<Integer>> linkedList0 = new LinkedList<ArrayList<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      linkedList0.add(arrayList0);
      multiValueMap0.putAll(integer0, (Collection<ArrayList<Integer>>) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList1);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) constantFactory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      Integer integer0 = new Integer(440);
      LinkedList<ArrayList<Integer>> linkedList0 = new LinkedList<ArrayList<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      linkedList0.add(arrayList0);
      multiValueMap0.putAll(integer0, (Collection<ArrayList<Integer>>) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>((LinkedList<String>) null);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) constantFactory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<MultiValueMap<Integer, String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<MultiValueMap<Integer, String>, LinkedList<Integer>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Collection<String>, String> multiValueMap1 = new MultiValueMap<Collection<String>, String>();
      multiValueMap1.putIfAbsent(linkedList0, multiValueMap0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      boolean boolean0 = multiValueMap1.removeMapping(linkedList0, constantFactory0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<String, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      ConstantFactory<Collection<AbstractMap.SimpleImmutableEntry<String, Integer>>> constantFactory0 = new ConstantFactory<Collection<AbstractMap.SimpleImmutableEntry<String, Integer>>>(arrayList0);
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Integer>>>) multiValueMap0, (Factory<Collection<AbstractMap.SimpleImmutableEntry<String, Integer>>>) constantFactory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap1.putIfAbsent(linkedList0, (Object) null);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      boolean boolean0 = multiValueMap1.putAll("org.apache.commons.collections4.map.MultiValueMap", collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(hashMap0, unaryOperator0);
      MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>();
      multiValueMap0.iterator((Object) multiValueMap1);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      MultiValueMap<Integer, String> multiValueMap1 = new MultiValueMap<Integer, String>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<String, LinkedList<Collection<String>>> multiValueMap0 = new MultiValueMap<String, LinkedList<Collection<String>>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      Iterator<Map.Entry<ArrayList<String>, String>> iterator0 = (Iterator<Map.Entry<ArrayList<String>, String>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<Integer>>();
      MultiValueMap<Collection<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<String>, Object>) multiValueMap1;
      MultiValueMap<Collection<String>, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap2.iterator((Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
