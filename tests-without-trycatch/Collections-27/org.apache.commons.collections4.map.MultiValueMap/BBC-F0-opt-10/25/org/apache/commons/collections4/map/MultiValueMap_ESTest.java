/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:16:07 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, Collection<String>> multiValueMap1 = new MultiValueMap<Integer, Collection<String>>();
      multiValueMap0.putAll((Map<? extends Integer, ?>) multiValueMap1);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ConstantFactory<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      assertFalse(multiValueMap0.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, LinkedList<Collection<Integer>>> multiValueMap0 = new MultiValueMap<String, LinkedList<Collection<Integer>>>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(512, 1.0F);
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<String>>>) hashMap0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<MultiValueMap<Object, Object>, ExceptionFactory<Object>> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, Object>, ExceptionFactory<Object>>();
      MultiValueMap<ExceptionFactory<String>, Object> multiValueMap1 = new MultiValueMap<ExceptionFactory<String>, Object>();
      MultiValueMap<MultiValueMap<Object, String>, ConstantFactory<Integer>> multiValueMap2 = new MultiValueMap<MultiValueMap<Object, String>, ConstantFactory<Integer>>();
      MultiValueMap<Object, String> multiValueMap3 = new MultiValueMap<Object, String>();
      multiValueMap2.put(multiValueMap3, multiValueMap0);
      multiValueMap2.getCollection(multiValueMap1);
      assertFalse(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Integer>>();
      Collection<LinkedList<Integer>> collection0 = multiValueMap0.createCollection(1);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ConstantFactory<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ConstantFactory<Integer>>>) hashMap0);
      Factory<ArrayList<LinkedList<Collection<Integer>>>> factory0 = ExceptionFactory.exceptionFactory();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, "org.apache.commons.collections4.map.MultiValueMap$1");
      MultiValueMap<Object, LinkedList<Collection<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<LinkedList<Collection<Integer>>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Integer>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) hashMap0);
      Integer integer0 = new Integer(0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(integer0, arrayList0);
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ConstantFactory<LinkedList<ArrayList<String>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<String>>>(linkedList0);
      MultiValueMap<Integer, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<ArrayList<String>>>) multiValueMap1, (Factory<LinkedList<ArrayList<String>>>) constantFactory0);
      multiValueMap2.putAll((Map<? extends Integer, ?>) hashMap0);
      MultiValueMap<ArrayList<Integer>, LinkedList<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap3.size((Object) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<AbstractMap.SimpleEntry<Integer, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Integer, Object>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      hashMap0.put(arrayList1, multiValueMap0);
      ConstantFactory<Collection<AbstractMap.SimpleEntry<Integer, Object>>> constantFactory0 = new ConstantFactory<Collection<AbstractMap.SimpleEntry<Integer, Object>>>(arrayList0);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<Integer, Object>>>) hashMap0, (Factory<Collection<AbstractMap.SimpleEntry<Integer, Object>>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.size((Object) linkedList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<Object>>();
      MultiValueMap<ArrayList<String>, Collection<AbstractMap.SimpleEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<AbstractMap.SimpleEntry>>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = multiValueMap0.put(arrayList0, multiValueMap1);
      LinkedList<AbstractMap.SimpleEntry<Integer, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Integer, Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap2.removeMapping(object0, linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<HashMap<Object, Collection<Integer>>, Object> hashMap0 = new HashMap<HashMap<Object, Collection<Integer>>, Object>();
      MultiValueMap<HashMap<Object, Collection<Integer>>, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Collection<Integer>>, ? super Collection<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>>) hashMap0);
      LinkedList<Collection<Collection<Integer>>> linkedList0 = new LinkedList<Collection<Collection<Integer>>>();
      ConstantFactory<LinkedList<Collection<Collection<Integer>>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Collection<Integer>>>>(linkedList0);
      MultiValueMap<HashMap<Object, Collection<Integer>>, Collection<Collection<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Collection<Integer>>, ? super LinkedList<Collection<Collection<Integer>>>>) multiValueMap0, (Factory<LinkedList<Collection<Collection<Integer>>>>) constantFactory0);
      HashMap<Object, Collection<Integer>> hashMap1 = new HashMap<Object, Collection<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      hashMap1.put(linkedList0, linkedList1);
      multiValueMap1.put(hashMap1, hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<? extends HashMap<Object, Collection<Integer>>, ?>) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add((Collection<String>) linkedList1);
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<Integer>>>) multiValueMap0);
      Factory<LinkedList<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Collection<String>>>) multiValueMap1, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll(arrayList0, (Collection<Collection<String>>) linkedList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      MultiValueMap<ArrayList<String>, ConstantFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ConstantFactory<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap1;
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add((Collection<String>) arrayList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(arrayList0, (Collection<Collection<String>>) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<Object>>) hashMap0, factory0);
      Integer integer0 = new Integer(239);
      hashMap0.put("", integer0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) integer0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll("", (Collection<Object>) arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<Object, String>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, LinkedList<HashMap>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, String>, ? super Collection<LinkedList<HashMap>>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.put((AbstractMap.SimpleImmutableEntry<Integer, String>) null, (Object) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, ConstantFactory<String>>();
      ConstantFactory<LinkedList<ArrayList<String>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<String>>>((LinkedList<ArrayList<String>>) null);
      MultiValueMap<HashMap<Object, Object>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super LinkedList<ArrayList<String>>>) multiValueMap0, (Factory<LinkedList<ArrayList<String>>>) constantFactory0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap1.put(hashMap0, "F1BHobSGK8,");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(integer0);
      hashMap0.putIfAbsent(linkedList0, constantFactory0);
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<String>>) hashMap0, factory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Collection<Integer>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.put(arrayList0, arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ConstantFactory<LinkedList<ArrayList<String>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<String>>>(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<ArrayList<String>>>) null, (Factory<LinkedList<ArrayList<String>>>) constantFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, LinkedList<Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, ? super LinkedList<Collection<String>>>) multiValueMap1, (Factory<LinkedList<Collection<String>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Collection<Integer>>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Collection<Integer>>>();
      MultiValueMap<LinkedList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Object, ExceptionFactory<Integer>> multiValueMap0 = new MultiValueMap<Object, ExceptionFactory<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) "InstantiateFactory: Constructor must be public");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Collection<String>, MultiValueMap<String, String>> multiValueMap0 = new MultiValueMap<Collection<String>, MultiValueMap<String, String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Collection<Integer>>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Collection<Integer>>>();
      MultiValueMap<LinkedList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap1.getCollection(multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Integer>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.getCollection(multiValueMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Collection<Integer>, ExceptionFactory<Integer>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ExceptionFactory<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.entrySet();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<ConstantFactory<Integer>, Collection<Integer>> multiValueMap0 = new MultiValueMap<ConstantFactory<Integer>, Collection<Integer>>();
      MultiValueMap<ArrayList<Collection<Integer>>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Collection<Integer>>, Object>();
      MultiValueMap<ArrayList<Collection<Integer>>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Integer>>, ? super Collection<String>>) multiValueMap1);
      multiValueMap1.map = (Map<ArrayList<Collection<Integer>>, Object>) multiValueMap2;
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      ArrayList<Object> arrayList1 = new ArrayList<Object>(3684);
      hashMap0.put(arrayList1, factory0);
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-2102744403));
      hashMap0.put(integer0, (Object) null);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<String, Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<Object>>();
      MultiValueMap<ArrayList<String>, Collection<AbstractMap.SimpleEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<AbstractMap.SimpleEntry>>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator");
      multiValueMap0.put(arrayList0, multiValueMap1);
      LinkedList<AbstractMap.SimpleEntry<Integer, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Integer, Object>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Integer, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<AbstractMap.SimpleEntry<Integer, Object>>>) multiValueMap1, factory0);
      MultiValueMap<ArrayList<String>, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) multiValueMap2);
      multiValueMap3.putAll(arrayList0, (Collection<String>) arrayList0);
      // Undeclared exception!
//      try { 
        multiValueMap3.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      Integer integer0 = new Integer((-1));
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<String>>) hashMap0, factory0);
      Iterator<String> iterator0 = multiValueMap0.iterator((Object) integer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      Integer integer0 = new Integer((-1037));
      boolean boolean0 = multiValueMap1.putAll(integer0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, HashMap<Object, Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, HashMap<Object, Object>>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<Collection<Integer>> linkedList1 = new LinkedList<Collection<Integer>>();
      hashMap0.put(linkedList0, linkedList1);
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>(arrayList1);
      linkedList1.add((Collection<Integer>) linkedList2);
      Factory<Collection<Collection<Integer>>> factory0 = ConstantFactory.constantFactory((Collection<Collection<Integer>>) arrayList0);
      MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<Integer>>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) linkedList2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      Factory<Collection<Collection<Integer>>> factory0 = ConstantFactory.constantFactory((Collection<Collection<Integer>>) arrayList0);
      MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<Integer>>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) factory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, linkedList0);
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      Factory<Collection<Collection<Integer>>> factory0 = ConstantFactory.constantFactory((Collection<Collection<Integer>>) arrayList0);
      MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<Integer>>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) factory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<MultiValueMap<Object, Integer>, Object> hashMap0 = new HashMap<MultiValueMap<Object, Integer>, Object>();
      HashMap<Object, Collection<Integer>> hashMap1 = new HashMap<Object, Collection<Integer>>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap1);
      hashMap0.put(multiValueMap0, "org.apache.commons.collections4.FunctorException");
      MultiValueMap<MultiValueMap<Object, Integer>, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<MultiValueMap<Object, Integer>, ? super Collection<HashMap<Object, Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<? extends MultiValueMap<Object, Integer>, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Collection<Integer>>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Collection<Integer>>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) hashMap0);
      Integer integer0 = new Integer(0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(integer0, arrayList0);
      Object object0 = multiValueMap0.put(integer0, "ZX|T");
      assertEquals("ZX|T", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ConstantFactory<Object>>();
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap1 = new MultiValueMap<LinkedList<Object>, Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap1.put(linkedList0, (Object) null);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap1.put(hashMap0, hashMap0);
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>((LinkedList<LinkedList<String>>) null);
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) hashMap1, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ConstantFactory<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Object, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<Object, ConstantFactory<Object>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(2147483645);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<Object>>();
      MultiValueMap<ArrayList<String>, Collection<AbstractMap.SimpleEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<AbstractMap.SimpleEntry>>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, multiValueMap1);
      LinkedList<AbstractMap.SimpleEntry<Integer, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Integer, Object>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Integer, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<AbstractMap.SimpleEntry<Integer, Object>>>) multiValueMap1, factory0);
      MultiValueMap<ArrayList<String>, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) multiValueMap2);
      int int0 = multiValueMap3.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, linkedList0);
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      Factory<Collection<Collection<Integer>>> factory0 = ConstantFactory.constantFactory((Collection<Collection<Integer>>) arrayList0);
      MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<Integer>>>) hashMap0, factory0);
      Iterator<Collection<Integer>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Object> multiValueMap0 = new MultiValueMap<Collection<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap1);
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((Collection<Integer>) linkedList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, ":0YyE7B|;ge5.", biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) ":0YyE7B|;ge5.");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Integer>>>) hashMap0);
      Collection<Collection<Integer>> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<LinkedList<String>, HashMap<String, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, HashMap<String, String>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      Iterator<Map.Entry<Object, LinkedList<String>>> iterator0 = (Iterator<Map.Entry<Object, LinkedList<String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
