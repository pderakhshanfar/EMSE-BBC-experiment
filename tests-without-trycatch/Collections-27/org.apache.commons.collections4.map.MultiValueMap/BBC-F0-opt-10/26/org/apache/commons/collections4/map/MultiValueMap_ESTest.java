/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:17:19 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = new MultiValueMap<Collection<Integer>, Integer>();
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap1 = new MultiValueMap<Collection<Integer>, ArrayList<String>>();
      multiValueMap1.putAll((Map<? extends Collection<Integer>, ?>) multiValueMap0);
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      Set<Map.Entry<LinkedList<Object>, Object>> set0 = (Set<Map.Entry<LinkedList<Object>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Collection<Integer>, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Collection<Integer>, Object>(arrayList0, object0);
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Collection<Integer>, Object>, ? super Collection<Integer>>) hashMap0);
      hashMap0.put(abstractMap_SimpleEntry0, multiValueMap0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Collection<Integer>>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Collection<Integer>>>();
      ConstantFactory<ArrayList<Integer>> constantFactory0 = new ConstantFactory<ArrayList<Integer>>((ArrayList<Integer>) null);
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<Integer>>) multiValueMap0, (Factory<ArrayList<Integer>>) constantFactory0);
      Collection<Integer> collection0 = multiValueMap1.createCollection(125);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Object>();
      Integer integer0 = new Integer((-2272));
      hashMap0.put((AbstractMap.SimpleEntry<Collection<Integer>, Object>) null, integer0);
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Collection<Integer>, Object>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.Integer
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      multiValueMap0.map = (Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) "org.apache.commons.collections4.functors.PrototypeFactory");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) "org.apache.commons.collections4.functors.PrototypeFactory");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      HashMap<Comparable<Object>, Object> hashMap0 = new HashMap<Comparable<Object>, Object>();
      MultiValueMap<Comparable<Object>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Comparable<Object>, ? super Collection<Collection<Integer>>>) hashMap0);
      hashMap0.put((Comparable<Object>) null, constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping((Object) null, (Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Collection<Integer>, AbstractMap.SimpleImmutableEntry<String, Collection<Integer>>> multiValueMap0 = new MultiValueMap<Collection<Integer>, AbstractMap.SimpleImmutableEntry<String, Collection<Integer>>>();
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<ArrayList<String>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<? extends Collection<Integer>, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      Factory<Collection<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, multiValueMap0);
      MultiValueMap<Collection<Integer>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<ArrayList<Integer>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<? extends Collection<Integer>, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>((Integer) null);
      ArrayList<ConstantFactory<Integer>> arrayList0 = new ArrayList<ConstantFactory<Integer>>();
      arrayList0.add(constantFactory0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<Collection<ConstantFactory<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ConstantFactory<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ConstantFactory<Integer>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) hashMap0, (Collection<ConstantFactory<Integer>>) arrayList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll("VvP~.V*XI", (Collection<Integer>) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, ConstantFactory<Integer>> multiValueMap0 = new MultiValueMap<Object, ConstantFactory<Integer>>();
      LinkedList<ConstantFactory<Integer>> linkedList0 = new LinkedList<ConstantFactory<Integer>>();
      multiValueMap0.map = null;
      Integer integer0 = new Integer(0);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      linkedList0.add(constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) linkedList0, (Collection<ConstantFactory<Integer>>) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<ConstantFactory<Integer>, Object> hashMap0 = new HashMap<ConstantFactory<Integer>, Object>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ConstantFactory<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Integer>, ? super LinkedList<Integer>>) hashMap0, factory0);
      Integer integer0 = new Integer(61);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(constantFactory0, hashMap0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<ConstantFactory<Collection<Integer>>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<ConstantFactory<Collection<Integer>>, AbstractMap.SimpleEntry<Object, String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<ConstantFactory<Collection<Integer>>, Object> hashMap0 = new HashMap<ConstantFactory<Collection<Integer>>, Object>();
      multiValueMap0.map = (Map<ConstantFactory<Collection<Integer>>, Object>) hashMap0;
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<ConstantFactory<Collection<Integer>>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<Collection<Integer>>, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) constantFactory0);
      multiValueMap0.map = (Map<ConstantFactory<Collection<Integer>>, Object>) multiValueMap1;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ConstantFactory<Collection<Integer>> constantFactory1 = new ConstantFactory<Collection<Integer>>(arrayList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(constantFactory1, multiValueMap1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) arrayList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<AbstractMap.SimpleEntry<Object, Integer>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, ConstantFactory<String>>();
      MultiValueMap<ArrayList<Integer>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Collection<Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Integer>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<Object>>();
      MultiValueMap<ExceptionFactory<Object>, Object> multiValueMap1 = new MultiValueMap<ExceptionFactory<Object>, Object>();
      multiValueMap1.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<MultiValueMap<Object, Object>, Collection<Integer>> hashMap0 = new HashMap<MultiValueMap<Object, Object>, Collection<Integer>>();
      MultiValueMap<MultiValueMap<Object, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<MultiValueMap<Object, Object>, ? super Collection<Integer>>) hashMap0);
      Factory<ArrayList<ArrayList<MultiValueMap<Object, String>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<MultiValueMap<Object, Object>, ArrayList<MultiValueMap<Object, String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<MultiValueMap<Object, Object>, ? super ArrayList<ArrayList<MultiValueMap<Object, String>>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<MultiValueMap<Object, Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Object, Collection<Integer>> hashMap0 = new HashMap<Object, Collection<Integer>>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.createCollection(0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Collection<Integer>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, Collection<Integer>>>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      AbstractMap.SimpleImmutableEntry<Integer, Collection<Integer>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Collection<Integer>>((Integer) null, arrayList0);
      hashMap0.put("Qi", abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Collection<Integer>> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Collection<Integer>>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Integer, Collection<Integer>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Collection<Integer>>(abstractMap_SimpleImmutableEntry1);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(abstractMap_SimpleEntry0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) "Qi", (Object) constantFactory0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.AbstractMap$SimpleImmutableEntry cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Object>();
      hashMap0.put((AbstractMap.SimpleEntry<Collection<Integer>, Object>) null, (Object) null);
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Collection<Integer>, Object>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) linkedList0);
      AbstractMap.SimpleEntry<Collection<Integer>, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Collection<Integer>, Object>(linkedList0, linkedList0);
      HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Object>(557);
      hashMap0.put(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Collection<Integer>, Object>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) factory0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.AbstractMap$SimpleEntry cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<String>>) hashMap0);
      hashMap0.put(arrayList0, arrayList0);
      arrayList1.add("org.apache.commons.collections4.map.MultiValueMap$Values");
      boolean boolean0 = multiValueMap0.putAll((Collection<Integer>) arrayList0, (Collection<String>) arrayList1);
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Object>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      Collection<Object> collection0 = multiValueMap0.getCollection(hashMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = new MultiValueMap<ArrayList<Object>, String>();
      Iterator<String> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, ArrayList<Object>>();
      MultiValueMap<Object, ConstantFactory<Integer>> multiValueMap1 = new MultiValueMap<Object, ConstantFactory<Integer>>();
      ArrayList<ConstantFactory<Integer>> arrayList0 = new ArrayList<ConstantFactory<Integer>>();
      Integer integer0 = new Integer(2);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      arrayList0.add(constantFactory0);
      boolean boolean0 = multiValueMap1.putAll((Object) multiValueMap0, (Collection<ConstantFactory<Integer>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MultiValueMap<HashMap<String, String>, Object> multiValueMap0 = new MultiValueMap<HashMap<String, String>, Object>();
      boolean boolean0 = multiValueMap0.putAll(hashMap0, (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent((Object) null, arrayList0);
      int int0 = multiValueMap0.size((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Collection<Integer>>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Collection<Integer>>>();
      multiValueMap0.put("(**6.LS#i6_~|d5", "(**6.LS#i6_~|d5");
      Integer integer0 = new Integer((-18));
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "(**6.LS#i6_~|d5");
      boolean boolean0 = multiValueMap0.containsValue((Object) "(**6.LS#i6_~|d5", (Object) abstractMap_SimpleEntry0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Collection<Integer>>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Collection<Integer>>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Collection<Integer>>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Collection<Integer>>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = multiValueMap0.put("lC@%Sx6", linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "lC@%Sx6", object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<LinkedList<Collection<Integer>>, Object> hashMap0 = new HashMap<LinkedList<Collection<Integer>>, Object>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      hashMap0.put(linkedList0, (Object) null);
      MultiValueMap<LinkedList<Collection<Integer>>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<Integer>>, ? super Collection<AbstractMap.SimpleEntry<String, Object>>>) hashMap0);
      multiValueMap0.putAll((Map<? extends LinkedList<Collection<Integer>>, ?>) hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.put(arrayList0, "org.apache.commons.collections4.map.MultiValueMap$ValuesIterator");
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<ArrayList<String>>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends Collection<Integer>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Object>();
      linkedList0.offer((Integer) null);
      hashMap0.put((AbstractMap.SimpleEntry<Collection<Integer>, Object>) null, linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Collection<Integer>, Object>, ? super Collection<Integer>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Collection<Integer>, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Collection<Integer>, Object>(arrayList0, object0);
      hashMap0.put(abstractMap_SimpleEntry0, linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Collection<Integer>, Object>, ? super Collection<Integer>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Integer>, Collection<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BiFunction<Object, Object, Collection<Integer>> biFunction0 = (BiFunction<Object, Object, Collection<Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(930);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      multiValueMap0.put(arrayList0, abstractMap_SimpleEntry0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, abstractMap_SimpleEntry0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Integer>, Collection<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(930);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      multiValueMap0.put(arrayList0, abstractMap_SimpleEntry0);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, abstractMap_SimpleEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ConstantFactory<Integer>, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<ConstantFactory<Integer>, ConstantFactory<String>>();
      MultiValueMap<ConstantFactory<Integer>, LinkedList<AbstractMap.SimpleEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<Integer>, ? super Collection<LinkedList<AbstractMap.SimpleEntry>>>) multiValueMap0);
      MultiValueMap<Integer, Collection<Object>> multiValueMap2 = new MultiValueMap<Integer, Collection<Object>>();
      Integer integer0 = new Integer((-880));
      Object object0 = multiValueMap2.put(integer0, multiValueMap0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap3 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>();
      boolean boolean0 = multiValueMap3.removeMapping(object0, multiValueMap1);
      assertEquals(1, multiValueMap2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Integer>, Collection<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BiFunction<Object, Object, Collection<Integer>> biFunction0 = (BiFunction<Object, Object, Collection<Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(930);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, abstractMap_SimpleEntry0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Collection<Integer>, Integer>>>) multiValueMap0, (Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Collection<Integer>, Integer>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) linkedList0);
      Integer integer0 = new Integer((-2));
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      multiValueMap0.put(constantFactory0, (Object) null);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0, factory0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Integer>, Collection<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BiFunction<Object, Object, Collection<Integer>> biFunction0 = (BiFunction<Object, Object, Collection<Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      multiValueMap0.iterator((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<HashMap<String, String>, Object> multiValueMap1 = new MultiValueMap<HashMap<String, String>, Object>();
      boolean boolean0 = multiValueMap1.putAll((HashMap<String, String>) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Collection<Integer>>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Collection<Integer>>, LinkedList<Integer>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      Iterator<Map.Entry<Collection<String>, String>> iterator0 = (Iterator<Map.Entry<Collection<String>, String>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
