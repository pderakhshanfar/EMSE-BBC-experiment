/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:57:24 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      Integer integer0 = new Integer(1);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends Integer, ?>) hashMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConstantFactory<ArrayList<String>> constantFactory0 = new ConstantFactory<ArrayList<String>>(arrayList0);
      MultiValueMap<HashMap<Collection<Object>, Integer>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Collection<Object>, Integer>, ArrayList<Integer>>();
      MultiValueMap<HashMap<Collection<Object>, Integer>, ExceptionFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Collection<Object>, Integer>, ? super Collection<ExceptionFactory<String>>>) multiValueMap0);
      HashMap<Collection<Object>, Integer> hashMap0 = new HashMap<Collection<Object>, Integer>();
      multiValueMap0.putIfAbsent(hashMap0, constantFactory0);
      HashMap<Collection<Object>, Object> hashMap1 = new HashMap<Collection<Object>, Object>();
      multiValueMap1.getCollection(hashMap1);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(10);
      assertFalse(collection0.contains(10));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<Object>>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Collection<Object>>, Integer>();
      MultiValueMap<ArrayList<Collection<Object>>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Object>>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Collection<Object>>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) "^gg/");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Object>, Integer> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Object>, Integer>();
      multiValueMap1.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap1.size((Object) multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("<>skittiB", "<>skittiB");
      MultiValueMap<String, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) "<>skittiB");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = new MultiValueMap<Object, Collection<Object>>();
      multiValueMap1.map = null;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(multiValueMap0, integer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("6qrN", "6qrN");
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping("6qrN", "6qrN");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<HashMap<Collection<Object>, Object>, Object> hashMap0 = new HashMap<HashMap<Collection<Object>, Object>, Object>();
      HashMap<Collection<Object>, Object> hashMap1 = new HashMap<Collection<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.push(hashMap0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("+ofaI:E98:1dF@fm)B");
      hashMap1.put(linkedList0, constantFactory0);
      Integer integer0 = new Integer((-1));
      ConstantFactory<Integer> constantFactory1 = new ConstantFactory<Integer>(integer0);
      hashMap0.put(hashMap1, constantFactory1);
      MultiValueMap<HashMap<Collection<Object>, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Collection<Object>, Object>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends HashMap<Collection<Object>, Object>, ?>) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(1086);
      MultiValueMap<Integer, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ConstantFactory<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("2hBqHq SQGn");
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(integer0, (Collection<String>) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<LinkedList<Object>>) null);
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.put(linkedList0, hashMap1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put(hashMap1, hashMap1);
      MultiValueMap<HashMap<Object, String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(hashMap1, linkedList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<ArrayList<Integer>> arrayList0 = new ArrayList<ArrayList<Integer>>();
      Factory<Collection<ArrayList<Integer>>> factory0 = ConstantFactory.constantFactory((Collection<ArrayList<Integer>>) arrayList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<ArrayList<Integer>>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) hashMap0);
      hashMap0.put("P", linkedList0);
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      MultiValueMap<ConstantFactory<Collection<Object>>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<ConstantFactory<Collection<Object>>, ArrayList<Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<Object>>, EntrySetToMapIteratorAdapter<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<Object>>, EntrySetToMapIteratorAdapter<Object, String>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      multiValueMap0.map = null;
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) multiValueMap1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Integer, Object>>();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      Integer integer0 = new Integer(488);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(integer0, multiValueMap0, biFunction0);
      // Undeclared exception!
//      try { 
        multiValueMap1.getCollection(multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(1086);
      MultiValueMap<Integer, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ConstantFactory<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) null, (Object) integer0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(506);
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) integer0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      HashMap<Collection<Object>, Object> hashMap1 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, ExceptionFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ExceptionFactory<String>>>) hashMap1);
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Collection<Object>>>) multiValueMap1, factory0);
      hashMap0.put("6qrN", multiValueMap2);
      MultiValueMap<String, Collection<Collection<Object>>> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Collection<Object>>>>) multiValueMap0);
      MultiValueMap<String, LinkedList<Integer>> multiValueMap4 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Integer>>>) multiValueMap3);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("6qrN");
      // Undeclared exception!
//      try { 
        multiValueMap4.containsValue((Object) "6qrN", (Object) constantFactory0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("6qrN", (Object) null);
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = hashMap0.put((String) null, "6qrN");
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue(object0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.clear();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(107);
      Collection<Object> collection0 = multiValueMap0.getCollection(integer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Collection<Object>, ConstantFactory<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, ConstantFactory<Integer>>();
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap1 = new MultiValueMap<Object, HashMap<Object, Object>>();
      Iterator<HashMap<Object, Object>> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent((Object) null, arrayList0);
      arrayList0.add((Integer) null);
      boolean boolean0 = multiValueMap0.putAll((Object) null, (Collection<Integer>) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Object, Collection<Object>> hashMap0 = new HashMap<Object, Collection<Object>>();
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.putAll((Object) hashMap0, (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(1086);
      multiValueMap0.put(integer0, (Object) null);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) hashMap0);
      hashMap0.put("6qrN", linkedList0);
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Integer>>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "6qrN", (Object) hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<Integer, String> multiValueMap1 = new MultiValueMap<Integer, String>();
      MultiValueMap<String, LinkedList<Integer>> multiValueMap2 = new MultiValueMap<String, LinkedList<Integer>>();
      boolean boolean0 = multiValueMap2.containsValue((Object) multiValueMap0, (Object) multiValueMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put("6qrN", linkedList0);
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      MultiValueMap<String, Collection<Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Collection<Object>>>>) multiValueMap0);
      MultiValueMap<String, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Integer>>>) multiValueMap1);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("6qrN");
      boolean boolean0 = multiValueMap2.containsValue((Object) "6qrN", (Object) constantFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<HashMap<Collection<Object>, Object>, Object> hashMap0 = new HashMap<HashMap<Collection<Object>, Object>, Object>();
      HashMap<Collection<Object>, Object> hashMap1 = new HashMap<Collection<Object>, Object>();
      Integer integer0 = new Integer((-1));
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      hashMap0.put(hashMap1, constantFactory0);
      MultiValueMap<HashMap<Collection<Object>, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Collection<Object>, Object>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends HashMap<Collection<Object>, Object>, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put("qN", linkedList0);
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList arrayList1 = (ArrayList)multiValueMap0.put("qN", arrayList0);
      assertEquals(0, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put("q6qrN", linkedList0);
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      multiValueMap0.put(hashMap0, hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) hashMap0);
      linkedList0.offerLast(hashMap0);
      hashMap0.put("", linkedList0);
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping("", hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) hashMap0);
      hashMap0.put("", linkedList0);
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping("", hashMap0);
      assertTrue(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<ExceptionFactory<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ExceptionFactory<String>, ArrayList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put("", linkedList0);
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping("", hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) multiValueMap0, (Factory<Collection<LinkedList<String>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Integer>) arrayList0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      Integer integer0 = new Integer(1542);
      multiValueMap0.putIfAbsent(integer0, integer0);
      multiValueMap0.iterator((Object) integer0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Object>, Integer> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Object>, Integer>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<String>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Integer, Object>>();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      Iterator<Map.Entry<Integer, Integer>> iterator0 = (Iterator<Map.Entry<Integer, Integer>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<HashMap<Object, String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      multiValueMap0.put(hashMap1, linkedList0);
      MultiValueMap<Collection<String>, MultiValueMap<String, Object>> multiValueMap1 = new MultiValueMap<Collection<String>, MultiValueMap<String, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(multiValueMap0, arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
