/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:03:56 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(arrayList0, linkedList0);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<LinkedList, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<LinkedList, Object>>>) hashMap0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) multiValueMap0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap1, factory0);
      multiValueMap2.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
      assertFalse(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(arrayList0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      hashMap0.put(arrayList1, (Object) null);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<LinkedList, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<LinkedList, Object>>>) hashMap0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap1, (Factory<Collection<String>>) constantFactory0);
      multiValueMap2.putAll((Map<? extends ArrayList<Object>, ?>) multiValueMap0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      multiValueMap1.putAll((Object) multiValueMap0, (Collection<Integer>) linkedList0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      multiValueMap0.putIfAbsent((LinkedList<Integer>) null, (Object) null);
      MultiValueMap<LinkedList<Integer>, ConstantFactory<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<ConstantFactory<Integer>>>) multiValueMap0);
      multiValueMap1.getCollection((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Collection<Object>>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Collection<Object>>, Object>();
      ConstantFactory<LinkedList<Collection<Object>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Object>>>((LinkedList<Collection<Object>>) null);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Collection<Object>>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Collection<Object>>, ? super LinkedList<Collection<Object>>>) hashMap0, (Factory<LinkedList<Collection<Object>>>) constantFactory0);
      Collection<Collection<Object>> collection0 = multiValueMap0.createCollection((-2));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      multiValueMap1.putAll((Object) multiValueMap0, (Collection<Integer>) linkedList0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap2.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      Integer integer0 = new Integer(2147483645);
      linkedList0.addFirst(integer0);
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = new MultiValueMap<String, ArrayList<String>>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      hashMap0.put(arrayList0, multiValueMap1);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<LinkedList, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<LinkedList, Object>>>) hashMap0);
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<String>>>) multiValueMap2);
      // Undeclared exception!
//      try { 
        multiValueMap3.size((Object) arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<HashMap<String, Object>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap1, (Object) null);
      multiValueMap1.put(abstractMap_SimpleEntry0, (Object) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(collection0);
      MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap2.removeMapping(multiValueMap0, arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = new MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = multiValueMap1.putIfAbsent(hashMap0, multiValueMap0);
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(object0, object0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(10);
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Integer>>>) hashMap0);
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Integer>>> factory0 = ConstantFactory.constantFactory((LinkedList<AbstractMap.SimpleImmutableEntry<Object, Integer>>) null);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, Integer>>>) multiValueMap0, factory0);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(integer0, multiValueMap2);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<HashMap<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, LinkedList<Object>>();
      MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap0);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>((Object) null);
      multiValueMap1.putIfAbsent(hashMap0, constantFactory0);
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Collection<Object>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Object>, LinkedList<Object>>();
      HashMap<Object, Collection<Object>> hashMap0 = new HashMap<Object, Collection<Object>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      Collection<Object> collection0 = multiValueMap1.values();
      hashMap0.put(multiValueMap0, collection0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll((Map<?, ?>) hashMap0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      arrayList0.add((LinkedList<Object>) null);
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<LinkedList<Object>>) null);
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<LinkedList<Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll(linkedList0, (Collection<LinkedList<Object>>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      HashMap<Collection<Integer>, Object> hashMap1 = new HashMap<Collection<Integer>, Object>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>>) hashMap1, factory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap0.put(arrayList0, hashMap0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = new MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap1.putIfAbsent(hashMap0, multiValueMap0);
      hashMap0.put(multiValueMap0, multiValueMap1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap1.put(hashMap0, arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Factory<Collection<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<Object>>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put(";Y@kP2fB3l%G\"p", ";Y@kP2fB3l%G\"p");
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) ";Y@kP2fB3l%G\"p");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      multiValueMap0.map = (Map<String, Object>) multiValueMap0;
      MultiValueMap<String, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ConstantFactory<Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Collection<Object>>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Collection<Object>>>();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap1.getCollection(hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>>>) hashMap0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap2 = new MultiValueMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<String>>>) multiValueMap2);
      multiValueMap2.map = (Map<ArrayList<String>, Object>) multiValueMap3;
      // Undeclared exception!
//      try { 
        multiValueMap2.containsValue((Object) multiValueMap1, (Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      multiValueMap0.map = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) arrayList0, object0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, (Object) null);
      ConstantFactory<LinkedList<LinkedList<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<Integer>>>((LinkedList<LinkedList<Integer>>) null);
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<Integer>>>) hashMap0, (Factory<LinkedList<LinkedList<Integer>>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.putAll((Object) integer0, (Collection<Integer>) linkedList0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.Integer
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, LinkedList<Integer>>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = new MultiValueMap<LinkedList<String>, Object>((Map<LinkedList<String>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<Integer>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<Collection<Integer>>>) multiValueMap0);
      Set<Map.Entry<AbstractMap.SimpleEntry<Object, String>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<Object, String>, Object>>)multiValueMap1.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      MultiValueMap<LinkedList<Integer>, ConstantFactory<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<ConstantFactory<Integer>>>) multiValueMap0);
      Collection<ConstantFactory<Integer>> collection0 = multiValueMap1.getCollection((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, ArrayList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      MultiValueMap<LinkedList<String>, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<LinkedList<String>, LinkedList<Integer>>();
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<Object>>>) multiValueMap1);
      Iterator<Collection<Object>> iterator0 = multiValueMap2.iterator((Object) collection0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<String>) arrayList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      boolean boolean0 = multiValueMap0.putAll((Integer) null, (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Object>>();
      MultiValueMap<HashMap<Object, Object>, MultiValueMap<String, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<MultiValueMap<String, String>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap2.values();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(multiValueMap0, collection0, biFunction0);
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList0.add(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      multiValueMap0.putAll(linkedList1, (Collection<LinkedList<Object>>) arrayList0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList1, (Object) arrayList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList0.add(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      multiValueMap0.putAll(linkedList1, (Collection<LinkedList<Object>>) arrayList0);
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory(linkedList1);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) factory0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = new MultiValueMap<String, ArrayList<String>>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      hashMap0.put(arrayList0, multiValueMap1);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<LinkedList, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<LinkedList, Object>>>) hashMap0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) arrayList1);
      MultiValueMap<ArrayList<Object>, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap2, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap3.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, "org.apache.commons.collections4.collection.AbstractCollectionDecorator", biFunction0);
      Object object0 = multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      multiValueMap0.putIfAbsent((LinkedList<Integer>) null, (Object) null);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = new MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap1.putIfAbsent(hashMap0, multiValueMap0);
      HashMap<LinkedList<Object>, Object> hashMap1 = new HashMap<LinkedList<Object>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.put(hashMap0, arrayList0);
      boolean boolean0 = multiValueMap1.removeMapping(hashMap0, hashMap1);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = new MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap1.putIfAbsent(hashMap0, multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      
      HashMap<LinkedList<Object>, Object> hashMap1 = new HashMap<LinkedList<Object>, Object>();
      boolean boolean0 = multiValueMap1.removeMapping(hashMap0, hashMap1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, LinkedList<Object>>();
      MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap1.removeMapping(arrayList0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = new MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap1.putIfAbsent(hashMap0, multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, "F51");
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap0, (Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap1.put(linkedList0, linkedList0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll((Collection<String>) arrayList0, collection0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      MultiValueMap<String, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ConstantFactory<Object>>>) multiValueMap0);
      Iterator<Map.Entry<String, ConstantFactory<Object>>> iterator0 = (Iterator<Map.Entry<String, ConstantFactory<Object>>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<HashMap<String, Object>>>) multiValueMap0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap1, (Object) null);
      multiValueMap1.put(abstractMap_SimpleEntry0, (Object) null);
      MultiValueMap<Object, ArrayList<String>> multiValueMap2 = new MultiValueMap<Object, ArrayList<String>>();
      // Undeclared exception!
//      try { 
        multiValueMap2.size((Object) multiValueMap1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
