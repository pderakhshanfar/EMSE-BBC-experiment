/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:37:43 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<ArrayList<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Integer>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      Integer integer0 = new Integer(2615);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(integer0, arrayList0);
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0, factory0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap1.put(integer0, "VU|aJ.X194I~fLj=");
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap1);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.put((String) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, MultiValueMap<String, String>> multiValueMap0 = new MultiValueMap<String, MultiValueMap<String, String>>();
      multiValueMap0.putIfAbsent("h", "h");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Factory<ArrayList<Object>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<Object>>) multiValueMap0, factory0);
      multiValueMap1.getCollection("h");
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Integer>, Object>();
      Factory<ArrayList<Object>> factory0 = ConstantFactory.constantFactory((ArrayList<Object>) null);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super ArrayList<Object>>) hashMap0, factory0);
      Collection<Object> collection0 = multiValueMap0.createCollection(1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<String, Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      MultiValueMap<Collection<String>, ArrayList<Collection>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ArrayList<Collection>>>) hashMap0);
      hashMap0.put((Collection<String>) null, (Object) null);
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, String> multiValueMap1 = new MultiValueMap<Collection<String>, String>((Map<Collection<String>, ? super LinkedList<String>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<ConstantFactory<String>, Object> hashMap0 = new HashMap<ConstantFactory<String>, Object>();
      MultiValueMap<ConstantFactory<String>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<ArrayList<String>>>) hashMap0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("p0N@Yq%\"<.y!r");
      MultiValueMap<ConstantFactory<String>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      hashMap0.put(constantFactory0, constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object object0 = multiValueMap0.put(arrayList0, multiValueMap0);
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap1 = new MultiValueMap<Collection<Object>, LinkedList<String>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(multiValueMap0, object0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      multiValueMap0.map = null;
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(object0, object0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      Integer integer0 = new Integer(2575);
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0, factory0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap1.put(integer0, "");
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<Object>>();
      Object object0 = multiValueMap1.getOrDefault(multiValueMap0, hashMap0);
      hashMap0.put(object0, "F+p0\"$Yx$,Yl");
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<?, ?>) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<HashMap<String, String>, Object> hashMap0 = new HashMap<HashMap<String, String>, Object>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Integer integer0 = new Integer(2);
      hashMap0.put(hashMap1, integer0);
      MultiValueMap<HashMap<String, String>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, String>, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends HashMap<String, String>, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      HashMap<Object, Collection<String>> hashMap0 = new HashMap<Object, Collection<String>>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap0, factory0);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Object) "rB|UpHR|9xOX", (Collection<Integer>) arrayList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Factory<LinkedList<HashMap<Integer, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, HashMap<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<HashMap<Integer, Object>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      arrayList0.add((Integer) null);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) arrayList0, (Collection<Integer>) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>();
      Factory<Collection<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<ArrayList<Integer>>>) hashMap0, factory0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>((String) null, (String) null);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(abstractMap_SimpleEntry0, (Object) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<ArrayList<Object>>>) hashMap0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("R 6gLP^+#F]", "R 6gLP^+#F]");
      hashMap0.put(abstractMap_SimpleEntry0, multiValueMap0);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(multiValueMap0, "iH^[)d[AEXrW");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(abstractMap_SimpleEntry1, "iH^[)d[AEXrW");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Integer>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Integer>, ? super LinkedList<String>>) hashMap0, factory0);
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("wVq3EO+", integer0);
      hashMap0.put(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(abstractMap_SimpleEntry0, "org.apache.commons.collections4.functors.PrototypeFactory");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.AbstractMap$SimpleEntry cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Object>, ? super Collection<ArrayList<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleEntry<Integer, Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("|w-5dl5UiBW5C");
      // Undeclared exception!
//      try { 
        multiValueMap0.getCollection(constantFactory0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.getCollection("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap0, hashMap0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(hashMap0);
      multiValueMap0.put(abstractMap_SimpleEntry1, constantFactory0);
      MultiValueMap<ExceptionFactory<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap1 = new MultiValueMap<ExceptionFactory<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.map = null;
      MultiValueMap<ExceptionFactory<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap1 = new MultiValueMap<ExceptionFactory<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(integer0, multiValueMap0);
      hashMap0.put(abstractMap_SimpleEntry0, (Object) null);
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object>((Map<AbstractMap.SimpleEntry<Object, Object>, ? super ArrayList<Object>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      Integer integer0 = new Integer(2);
      hashMap0.put((AbstractMap.SimpleEntry<Object, Object>) null, integer0);
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object>((Map<AbstractMap.SimpleEntry<Object, Object>, ? super ArrayList<Object>>) hashMap0, factory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(linkedList0, unaryOperator0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      multiValueMap0.replace(linkedList0, (Object) linkedList1);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, MultiValueMap<String, String>> multiValueMap0 = new MultiValueMap<String, MultiValueMap<String, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Factory<ArrayList<Object>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<Object>>) multiValueMap0, factory0);
      Collection<Object> collection0 = multiValueMap1.getCollection("h");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Iterator<Integer> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer((-1));
      hashMap0.put((Object) null, integer0);
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Integer integer0 = new Integer((-154));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.put(integer0, arrayList0);
      arrayList0.add(integer0);
      boolean boolean0 = multiValueMap0.putAll((Object) integer0, (Collection<Integer>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      boolean boolean0 = multiValueMap0.putAll((AbstractMap.SimpleEntry<Object, Object>) null, (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Integer, ExceptionFactory<String>> multiValueMap0 = new MultiValueMap<Integer, ExceptionFactory<String>>();
      MultiValueMap<Integer, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<String>>>) multiValueMap0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      int int0 = multiValueMap1.size((Object) hashMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Collection<Object> collection1 = multiValueMap1.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ExceptionFactory<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ExceptionFactory<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      BiFunction<Object, Object, Collection<String>> biFunction0 = (BiFunction<Object, Object, Collection<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge((Object) null, collection0, biFunction0);
      MultiValueMap<Object, HashMap<Collection<String>, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<Collection<String>, Integer>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<?, ?>) hashMap0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put((AbstractMap.SimpleEntry<Object, Object>) null, arrayList0);
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object>((Map<AbstractMap.SimpleEntry<Object, Object>, ? super ArrayList<Object>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, MultiValueMap<String, String>> multiValueMap0 = new MultiValueMap<String, MultiValueMap<String, String>>();
      multiValueMap0.putIfAbsent("h", "h");
      boolean boolean0 = multiValueMap0.containsValue((Object) "h");
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Collection<String>, ExceptionFactory<String>> multiValueMap0 = new MultiValueMap<Collection<String>, ExceptionFactory<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      Integer integer0 = new Integer((-4251));
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      Integer integer0 = new Integer(2);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<String, String>>();
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap1.putAll((Object) integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Collection<String>, ExceptionFactory<String>> multiValueMap0 = new MultiValueMap<Collection<String>, ExceptionFactory<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      
      ArrayList<Collection<String>> arrayList1 = new ArrayList<Collection<String>>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList1, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      Object object0 = new Object();
      boolean boolean0 = multiValueMap0.removeMapping(object0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      multiValueMap1.clear();
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      Iterator<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<String, Integer>>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<String, Integer>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory((LinkedList<Integer>) null);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.put((Object) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }
}
