/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:36:13 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      MultiValueMap<LinkedList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Integer>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap1.put(linkedList0, linkedList0);
      multiValueMap1.putAll((Map<? extends LinkedList<String>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("org.apache.commons.collections4.map.MultiValueMap$1$1$1");
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, ArrayList<Object>>();
      MultiValueMap<ArrayList<Integer>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Collection<Object>>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap1.put(arrayList0, (Object) null);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>(0);
      multiValueMap0.put(arrayList0, "~9Ho1kHy%Q");
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      Factory<LinkedList<HashMap<Object, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<HashMap<Object, Object>>>) multiValueMap0, factory0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<String> arrayList1 = new ArrayList<String>(0);
      multiValueMap0.put(arrayList1, "~9Ho1kHy%Q");
      multiValueMap0.getCollection(arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      Factory<Collection<HashMap<Object, String>>> factory0 = ConstantFactory.constantFactory((Collection<HashMap<Object, String>>) null);
      MultiValueMap<String, HashMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Object, String>>>) multiValueMap0, factory0);
      Collection<HashMap<Object, String>> collection0 = multiValueMap1.createCollection((-3975));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(779);
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, integer0);
      arrayList0.add("");
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(779);
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, integer0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Integer, String>>();
      MultiValueMap<Collection<String>, LinkedList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<Collection<String>>>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<String>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) "Collection must not be null.");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.map = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<HashMap<String, Integer>, Integer> multiValueMap0 = new MultiValueMap<HashMap<String, Integer>, Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<HashMap<String, Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<HashMap<String, Integer>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(hashMap0, hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Object, ExceptionFactory<Integer>> multiValueMap0 = new MultiValueMap<Object, ExceptionFactory<Integer>>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.addFirst((Integer) null);
      multiValueMap1.putAll((Object) multiValueMap0, (Collection<Integer>) linkedList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<?, ?>) multiValueMap1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<HashMap<Object, String>> arrayList0 = new ArrayList<HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      arrayList0.add(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      ConstantFactory<Collection<LinkedList<Integer>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Integer>>>(linkedList0);
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Integer>>>) hashMap1, (Factory<Collection<LinkedList<Integer>>>) constantFactory0);
      Factory<Collection<HashMap<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, HashMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Object, String>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll("rYH#3RO22B}", (Collection<HashMap<Object, String>>) arrayList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<String, HashMap<Object, String>>();
      ArrayList<HashMap<Object, String>> arrayList0 = new ArrayList<HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      multiValueMap0.map = null;
      arrayList0.add(hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll("Cannot instantiate class: ", (Collection<HashMap<Object, String>>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(290);
      ArrayList<AbstractMap.SimpleEntry<Integer, String>> arrayList1 = new ArrayList<AbstractMap.SimpleEntry<Integer, String>>();
      ConstantFactory<ArrayList<AbstractMap.SimpleEntry<Integer, String>>> constantFactory0 = new ConstantFactory<ArrayList<AbstractMap.SimpleEntry<Integer, String>>>(arrayList1);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super ArrayList<AbstractMap.SimpleEntry<Integer, String>>>) multiValueMap0, (Factory<ArrayList<AbstractMap.SimpleEntry<Integer, String>>>) constantFactory0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.put(arrayList0, integer0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>((Collection<Object>) null);
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = new MultiValueMap<LinkedList<String>, Object>((Map<LinkedList<String>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) constantFactory0);
      MultiValueMap<LinkedList<String>, Collection<HashMap>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<HashMap>>>) multiValueMap1);
      MultiValueMap<LinkedList<String>, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Integer>>) multiValueMap2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap3.put(linkedList0, multiValueMap1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<String>>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(arrayList0);
      hashMap0.put((String) null, constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put((String) null, hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Collection<ArrayList<String>>> arrayList0 = new ArrayList<Collection<ArrayList<String>>>();
      ConstantFactory<Collection<Collection<ArrayList<String>>>> constantFactory0 = new ConstantFactory<Collection<Collection<ArrayList<String>>>>(arrayList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super Collection<Collection<ArrayList<String>>>>) null, (Factory<Collection<Collection<ArrayList<String>>>>) constantFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) "?p6;3Oar+/XUlO[");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap1);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap2);
      // Undeclared exception!
//      try { 
        multiValueMap3.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.map = null;
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.entrySet();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<Integer>>();
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super LinkedList<LinkedList<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.createCollection((-3036));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      Integer integer0 = new Integer(290);
      multiValueMap0.put(arrayList0, integer0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) integer0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, ArrayList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      multiValueMap0.map = null;
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Object> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Object>((Map<AbstractMap.SimpleEntry<String, Integer>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) null, (Object) "^2R%<MCY");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(290);
      multiValueMap0.put(arrayList0, integer0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<String, HashMap<Object, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Collection<HashMap<Object, String>> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Object>>();
      Iterator<ArrayList<Object>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, AbstractMap.SimpleEntry<Integer, Object>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Integer integer0 = new Integer(1786);
      Object object0 = multiValueMap0.put(hashMap0, integer0);
      ArrayList<AbstractMap.SimpleEntry<Integer, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Integer, Object>>();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>((Integer) object0, integer0);
      arrayList0.add(abstractMap_SimpleEntry0);
      boolean boolean0 = multiValueMap0.putAll(hashMap0, (Collection<AbstractMap.SimpleEntry<Integer, Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(779);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Integer>>();
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<AbstractMap.SimpleEntry<Object, Integer>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Object>>();
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, arrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(1144);
      multiValueMap0.put(arrayList0, integer0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(arrayList0);
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>((Map<ArrayList<String>, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) constantFactory0);
      Integer integer0 = new Integer((-546));
      hashMap0.put(arrayList0, integer0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<String>, ?>) multiValueMap1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, String>();
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("D8x", (Integer) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      multiValueMap0.putAll(abstractMap_SimpleImmutableEntry0, (Collection<String>) arrayList0);
      Object object0 = multiValueMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, arrayList0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap1);
      LinkedList<ArrayList<Integer>> linkedList0 = new LinkedList<ArrayList<Integer>>();
      ConstantFactory<Collection<ArrayList<Integer>>> constantFactory0 = new ConstantFactory<Collection<ArrayList<Integer>>>(linkedList0);
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Integer>>>) multiValueMap2, (Factory<Collection<ArrayList<Integer>>>) constantFactory0);
      boolean boolean0 = multiValueMap3.removeMapping(multiValueMap2, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap1 = new MultiValueMap<LinkedList<Object>, ArrayList<String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap1.putIfAbsent(linkedList0, multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = multiValueMap1.removeMapping(linkedList1, multiValueMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap1.entrySet();
      assertEquals(0, set0.size());
  }
}
