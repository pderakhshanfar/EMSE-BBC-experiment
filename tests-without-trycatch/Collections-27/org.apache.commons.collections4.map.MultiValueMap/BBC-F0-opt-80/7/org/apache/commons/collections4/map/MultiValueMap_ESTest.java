/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:37:50 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Integer, String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(linkedList0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList1, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.put("org.apache.commons.collections4.map.MultiValueMap$1$1", arrayList0);
      multiValueMap0.putAll((Map<? extends String, ?>) multiValueMap1);
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>>();
      multiValueMap0.put("", (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.createCollection(554);
      assertFalse(collection0.contains(554));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = new MultiValueMap<LinkedList<Object>, Object>((Map<LinkedList<Object>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put("SDc%6KS ", "org.a+ache.commons.collections4.iterators.LazyIteratorChain");
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) arrayList0);
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      hashMap0.put("org.apache.commons.collections4.map.MultiValueMap", multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) "org.apache.commons.collections4.map.MultiValueMap");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, Collection<ArrayList<Object>>> multiValueMap0 = new MultiValueMap<Object, Collection<ArrayList<Object>>>();
      multiValueMap0.map = null;
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0);
      multiValueMap0.put(arrayList0, hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Collection<ArrayList<Object>>, Collection<ArrayList<Object>>> multiValueMap0 = new MultiValueMap<Collection<ArrayList<Object>>, Collection<ArrayList<Object>>>();
      ArrayList<Collection<ArrayList<Object>>> arrayList0 = new ArrayList<Collection<ArrayList<Object>>>(1);
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      multiValueMap0.map = null;
      arrayList0.add((Collection<ArrayList<Object>>) linkedList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Collection<ArrayList<Object>>) null, (Collection<Collection<ArrayList<Object>>>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Integer, String>>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      Factory<Collection<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory((Collection<ArrayList<Object>>) arrayList0);
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Collection<String>, ArrayList<Object>>((Map<Collection<String>, ? super Collection<ArrayList<Object>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<Collection<String>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.put((Collection<String>) null, (Object) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      Factory<LinkedList<LinkedList<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<String>>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Collection<ArrayList<Object>>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Integer, MultiValueMap<Collection<ArrayList<Object>>, Integer>> multiValueMap0 = new MultiValueMap<Integer, MultiValueMap<Collection<ArrayList<Object>>, Integer>>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      MultiValueMap<Integer, MultiValueMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<MultiValueMap<Object, Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Collection<ArrayList<Object>>>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Collection<ArrayList<Object>>>, Object>();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<MultiValueMap<String, Collection<ArrayList<Object>>>, Collection<ArrayList<Object>>> multiValueMap0 = new MultiValueMap<MultiValueMap<String, Collection<ArrayList<Object>>>, Collection<ArrayList<Object>>>();
      LinkedList<EmptyIterator<Object>> linkedList0 = new LinkedList<EmptyIterator<Object>>();
      ConstantFactory<LinkedList<EmptyIterator<Object>>> constantFactory0 = new ConstantFactory<LinkedList<EmptyIterator<Object>>>(linkedList0);
      MultiValueMap<MultiValueMap<String, Collection<ArrayList<Object>>>, EmptyIterator<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<MultiValueMap<String, Collection<ArrayList<Object>>>, ? super LinkedList<EmptyIterator<Object>>>) multiValueMap0, (Factory<LinkedList<EmptyIterator<Object>>>) constantFactory0);
      multiValueMap0.map = (Map<MultiValueMap<String, Collection<ArrayList<Object>>>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<ArrayList<Object>>>, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<LinkedList<Collection<ArrayList<Object>>>, ConstantFactory<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.entrySet();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = hashMap0.clone();
      arrayList0.add((Object) hashMap0);
      hashMap0.put(arrayList0, "Zy-O,^C=f_PK7");
      MultiValueMap<ArrayList<Object>, LinkedList<ArrayList<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<ArrayList<String>>>>) hashMap0);
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, object0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      multiValueMap0.map = null;
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("org.apache.commons.collections4.functors.ConstantFactory", "org.apache.commons.collections4.functors.ConstantFactory");
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) "The prototype must be cloneable via a public clone method");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) arrayList0);
      MultiValueMap<Object, String> multiValueMap0 = null;
//      try {
        multiValueMap0 = new MultiValueMap<Object, String>((Map<Object, ? super Collection<String>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(3000);
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("Class to instantiate must not be null").when(biFunction0).apply(anyInt() , any());
      multiValueMap0.compute(integer0, biFunction0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      MultiValueMap<Collection<Object>, Object> multiValueMap1 = null;
//      try {
        multiValueMap1 = new MultiValueMap<Collection<Object>, Object>((Map<Collection<Object>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<String>, Integer> multiValueMap0 = new MultiValueMap<Collection<String>, Integer>();
      Set<Map.Entry<Collection<String>, Object>> set0 = (Set<Map.Entry<Collection<String>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      Collection<ArrayList<Object>> collection0 = multiValueMap0.getCollection("3vIm54t)wo&+_");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(3017);
      Object object0 = multiValueMap0.put(integer0, integer0);
      multiValueMap0.iterator(object0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, Collection<ArrayList<Object>>> multiValueMap0 = new MultiValueMap<Object, Collection<ArrayList<Object>>>();
      LinkedList<Collection<ArrayList<Object>>> linkedList0 = new LinkedList<Collection<ArrayList<Object>>>();
      MultiValueMap<Object, Collection<ArrayList<Object>>> multiValueMap1 = new MultiValueMap<Object, Collection<ArrayList<Object>>>();
      LinkedList<ArrayList<Object>> linkedList1 = new LinkedList<ArrayList<Object>>();
      linkedList0.offerLast(linkedList1);
      multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      boolean boolean0 = multiValueMap1.putAll((Object) multiValueMap0, (Collection<Collection<ArrayList<Object>>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Integer>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<LinkedList<String>>>) multiValueMap0, factory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap1.putAll(linkedList0, (Collection<LinkedList<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<String, AbstractMap.SimpleEntry<Collection<ArrayList<Object>>, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Collection<ArrayList<Object>>, Integer>>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("+Sj", "+Sj", biFunction0);
      int int0 = multiValueMap0.size((Object) "+Sj");
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      multiValueMap0.put("", "");
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      Factory<LinkedList<Collection<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<String, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<String>>>) multiValueMap0, factory0);
      LinkedList<ArrayList<Object>> linkedList1 = new LinkedList<ArrayList<Object>>();
      boolean boolean0 = multiValueMap1.containsValue((Object) "", (Object) linkedList1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) null, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put("7XAQO=QgZ", arrayList0);
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      Factory<LinkedList<Collection<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<String, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<String>>>) multiValueMap0, factory0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) "7XAQO=QgZ", (Object) linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0);
      multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, LinkedList<Collection<ArrayList<Object>>>> multiValueMap0 = new MultiValueMap<String, LinkedList<Collection<ArrayList<Object>>>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Integer integer0 = new Integer(2);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add(integer0);
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      multiValueMap0.putAll((Object) linkedList0, (Collection<Integer>) arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Integer integer0 = new Integer(2);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add(integer0);
      multiValueMap0.putAll((Object) integer0, (Collection<Integer>) arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "N6Au'yhB4Q9");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, (Object) null);
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Integer, String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      multiValueMap0.put(linkedList0, hashMap0);
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Integer, String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(linkedList0, linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList1, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Object, Collection<ArrayList<Object>>> multiValueMap0 = new MultiValueMap<Object, Collection<ArrayList<Object>>>();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<EmptyIterator<String>>>) multiValueMap0, (Factory<LinkedList<EmptyIterator<String>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Object, Collection<ArrayList<Object>>> multiValueMap0 = new MultiValueMap<Object, Collection<ArrayList<Object>>>();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      LinkedList<Collection<ArrayList<Object>>> linkedList1 = new LinkedList<Collection<ArrayList<Object>>>();
      linkedList1.add((Collection<ArrayList<Object>>) linkedList0);
      multiValueMap0.putAll((Object) linkedList1, (Collection<Collection<ArrayList<Object>>>) linkedList1);
      MultiValueMap<AbstractMap.SimpleEntry<Collection<ArrayList<Object>>, Object>, Object> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<ArrayList<Object>>, Object>, Object>();
      AbstractMap.SimpleImmutableEntry<Collection<ArrayList<Object>>, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Collection<ArrayList<Object>>, String>(linkedList0, "IVZCoI~Y>[Vr#");
      AbstractMap.SimpleImmutableEntry<Collection<ArrayList<Object>>, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Collection<ArrayList<Object>>, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Collection<ArrayList<Object>>, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Collection<ArrayList<Object>>, Object>(abstractMap_SimpleImmutableEntry1);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap2.values();
      boolean boolean0 = multiValueMap1.putAll(abstractMap_SimpleEntry0, collection0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      multiValueMap0.put("3vIm54t)wo&+_", "3vIm54t)wo&+_");
      multiValueMap0.getCollection("3vIm54t)wo&+_");
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<HashMap<String, Collection<ArrayList<Object>>>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = new MultiValueMap<HashMap<String, Collection<ArrayList<Object>>>, AbstractMap.SimpleEntry<Integer, Integer>>();
      Iterator<Map.Entry<HashMap<String, Collection<ArrayList<Object>>>, AbstractMap.SimpleEntry<Integer, Integer>>> iterator0 = (Iterator<Map.Entry<HashMap<String, Collection<ArrayList<Object>>>, AbstractMap.SimpleEntry<Integer, Integer>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.createCollection(360);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }
}
