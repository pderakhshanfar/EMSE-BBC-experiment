/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:06:58 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Object>>();
      multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) multiValueMap0);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-2661));
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(linkedList0, (Object) null);
      multiValueMap0.replace(linkedList0, (Object) integer0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, HashMap<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Object, Integer>>>) hashMap0);
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0, factory0);
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap1.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>((Map<String, ? super LinkedList<Integer>>) hashMap1, (Factory<LinkedList<Integer>>) constantFactory0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap1.put("6w?M[RhCXJ|2", arrayList0);
      Factory<Collection<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0, factory0);
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent("\"|j", unaryOperator0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<Integer>>();
      MultiValueMap<MultiValueMap<Integer, Integer>, ArrayList<String>> multiValueMap1 = new MultiValueMap<MultiValueMap<Integer, Integer>, ArrayList<String>>();
      MultiValueMap<Integer, Collection<String>> multiValueMap2 = new MultiValueMap<Integer, Collection<String>>();
      MultiValueMap<Integer, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap2);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap4 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(multiValueMap3, multiValueMap4, biFunction0);
      multiValueMap1.getCollection(multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      ConstantFactory<LinkedList<ArrayList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Object>>>((LinkedList<ArrayList<Object>>) null);
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<ArrayList<Object>>>) hashMap0, (Factory<LinkedList<ArrayList<Object>>>) constantFactory0);
      Collection<ArrayList<Object>> collection0 = multiValueMap0.createCollection(1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.createCollection(0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(multiValueMap0, "3}OTS,0`LX6A");
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, HashMap<Integer, String>>();
      LinkedList<HashMap<Integer, String>> linkedList0 = new LinkedList<HashMap<Integer, String>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(hashMap0);
      multiValueMap0.putAll(linkedList1, (Collection<HashMap<Integer, String>>) linkedList0);
      linkedList1.addAll((Collection<?>) linkedList0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(arrayList0, integer0);
      ConstantFactory<ArrayList<ArrayList<Object>>> constantFactory0 = new ConstantFactory<ArrayList<ArrayList<Object>>>((ArrayList<ArrayList<Object>>) null);
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super ArrayList<ArrayList<Object>>>) hashMap0, (Factory<ArrayList<ArrayList<Object>>>) constantFactory0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, ExceptionFactory<Integer>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, ExceptionFactory<Integer>>();
      MultiValueMap<HashMap<String, Object>, ConstantFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<ConstantFactory<String>>>) multiValueMap0);
      multiValueMap1.map = null;
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("PrototypeCloneFactory: Clone method must be public");
      // Undeclared exception!
//      try { 
        multiValueMap1.size((Object) constantFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<LinkedList<ArrayList<Object>>, Object> hashMap0 = new HashMap<LinkedList<ArrayList<Object>>, Object>(1784);
      MultiValueMap<LinkedList<ArrayList<Object>>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<ArrayList<Object>>, ? super Collection<LinkedList<Object>>>) hashMap0);
      Factory<LinkedList<HashMap<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<ArrayList<Object>>, HashMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<ArrayList<Object>>, ? super LinkedList<HashMap<Object, String>>>) multiValueMap0, factory0);
      hashMap0.put((LinkedList<ArrayList<Object>>) null, (Object) null);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<? extends LinkedList<ArrayList<Object>>, ?>) hashMap0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(multiValueMap0, "3}OTS,0`LX6A");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("3}OTS,0`LX6A", hashMap0, biFunction0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<?, ?>) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<HashMap<Integer, String>> linkedList0 = new LinkedList<HashMap<Integer, String>>();
      linkedList0.addLast((HashMap<Integer, String>) null);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0);
      Factory<Collection<HashMap<Integer, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, HashMap<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<Integer, String>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll(linkedList1, (Collection<HashMap<Integer, String>>) linkedList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, HashMap<Integer, String>>();
      LinkedList<HashMap<Integer, String>> linkedList0 = new LinkedList<HashMap<Integer, String>>();
      Factory<Collection<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap1;
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      linkedList0.add(hashMap0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(linkedList1, (Collection<HashMap<Integer, String>>) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, HashMap<Integer, String>>();
      LinkedList<HashMap<Integer, String>> linkedList0 = new LinkedList<HashMap<Integer, String>>();
      multiValueMap0.map = null;
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      linkedList0.add(hashMap0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(linkedList1, (Collection<HashMap<Integer, String>>) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, HashMap<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Object, Integer>>>) hashMap0);
      Integer integer0 = new Integer(512);
      hashMap0.put(integer0, integer0);
      ArrayList<HashMap<Object, Integer>> arrayList0 = new ArrayList<HashMap<Object, Integer>>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      arrayList0.add(hashMap1);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(integer0, (Collection<HashMap<Object, Integer>>) arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super ArrayList<Object>>) multiValueMap0, factory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap1.put(arrayList0, multiValueMap0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Integer>>();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Collection, Collection>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<Collection, Collection>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.put(arrayList0, linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Factory<ArrayList<String>> factory0 = ConstantFactory.constantFactory((ArrayList<String>) null);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<String>>) multiValueMap0, factory0);
      MultiValueMap<Object, MultiValueMap<String, Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<MultiValueMap<String, Integer>>>) multiValueMap0);
      MultiValueMap<ArrayList<Object>, HashMap<String, Integer>> multiValueMap3 = new MultiValueMap<ArrayList<Object>, HashMap<String, Integer>>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap4 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap3);
      // Undeclared exception!
//      try { 
        multiValueMap1.put(multiValueMap2, multiValueMap4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-2328));
      Object object0 = hashMap0.put(linkedList0, integer0);
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(linkedList0, object0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Collection>, ? super LinkedList<ArrayList<Object>>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<Object>>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Collection<Object>>>) multiValueMap0, (Factory<Collection<Collection<Object>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      MultiValueMap<Collection<Integer>, ArrayList<Collection<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<ArrayList<Collection<String>>>>) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = multiValueMap0.put(linkedList0, hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator(object0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      MultiValueMap<HashMap<Integer, String>, ArrayList<String>> multiValueMap1 = new MultiValueMap<HashMap<Integer, String>, ArrayList<String>>();
      multiValueMap1.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      ConstantFactory<LinkedList<LinkedList<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<Integer>>>(linkedList0);
      MultiValueMap<String, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<Integer>>>) multiValueMap0, (Factory<LinkedList<LinkedList<Integer>>>) constantFactory0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, HashMap<Integer, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, HashMap<Integer, Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, MultiValueMap<String, Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<MultiValueMap<String, Collection<String>>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, multiValueMap1);
      linkedList0.add((Object) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap1.getCollection(linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue(object0, (Object) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, ExceptionFactory<Integer>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, ExceptionFactory<Integer>>();
      MultiValueMap<HashMap<String, Object>, ConstantFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<ConstantFactory<String>>>) multiValueMap0);
      multiValueMap1.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      hashMap0.put((Integer) null, iterator0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) null, (Object) linkedList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.iterators.EmptyIterator cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = new MultiValueMap<String, ArrayList<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-2328));
      hashMap0.put(linkedList0, integer0);
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Collection<String>, MultiValueMap<Integer, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, MultiValueMap<Integer, Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.clear();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<LinkedList<Object>>>) hashMap0);
      Collection<LinkedList<Object>> collection0 = multiValueMap0.getCollection(hashMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, HashMap<Integer, String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      LinkedList<HashMap<Integer, String>> linkedList1 = new LinkedList<HashMap<Integer, String>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      linkedList1.add(hashMap0);
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<HashMap<Integer, String>>) linkedList1);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Integer integer0 = new Integer((-2255));
      boolean boolean0 = multiValueMap0.putAll((Object) integer0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, HashMap<Integer, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap2 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>>();
      MultiValueMap<Object, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap2);
      multiValueMap1.putIfAbsent(arrayList1, multiValueMap3);
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0, (Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0, (Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, HashMap<Integer, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Object>();
      multiValueMap1.putIfAbsent(arrayList0, "The factory must not be null");
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0, (Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>((Map<String, ? super LinkedList<Integer>>) hashMap1, (Factory<LinkedList<Integer>>) constantFactory0);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap2, factory0);
      Object object0 = multiValueMap1.getOrDefault(hashMap1, factory0);
      hashMap1.put("6w?M[RhCXJ|2", object0);
      Factory<Collection<ArrayList<String>>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0, factory1);
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll((Map<? extends String, ?>) multiValueMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "+IBIBN0$A(G");
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, HashMap<Integer, String>>();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = new MultiValueMap<Object, ArrayList<String>>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap1.merge(multiValueMap0, multiValueMap0, biFunction0);
      boolean boolean0 = multiValueMap1.removeMapping(object0, (Object) null);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put((Object) null, "PrototypeCloneFactory: The clone method must exist and be public ");
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<String>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<String>>>) multiValueMap0);
      multiValueMap1.iterator(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<String>>, Collection<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<String>>, Collection<Integer>>();
      MultiValueMap<ArrayList<Collection<String>>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<String>>, ? super Collection<Object>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap2 = new MultiValueMap<HashMap<Object, Object>, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      boolean boolean0 = multiValueMap2.putAll(hashMap0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("org.apache.commons.collections4.map.MultiValueMap$1", "}Zqcu][k", biFunction0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping("org.apache.commons.collections4.map.MultiValueMap$1", "}Zqcu][k");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MultiValueMap<Collection<String>, MultiValueMap<Integer, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, MultiValueMap<Integer, Object>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Integer>>();
      Iterator<Map.Entry<Object, LinkedList<Integer>>> iterator0 = (Iterator<Map.Entry<Object, LinkedList<Integer>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }
}
