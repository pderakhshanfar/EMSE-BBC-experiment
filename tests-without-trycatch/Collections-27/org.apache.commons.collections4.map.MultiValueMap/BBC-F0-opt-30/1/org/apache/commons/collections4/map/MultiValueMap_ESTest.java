/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:34:00 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer integer0 = new Integer(2207);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, ArrayList<String>>();
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      multiValueMap0.put(abstractMap_SimpleImmutableEntry0, arrayList0);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap1);
      HashMap<Collection<Integer>, String> hashMap0 = new HashMap<Collection<Integer>, String>();
      int int0 = multiValueMap2.size((Object) hashMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, String>>();
      MultiValueMap<Collection<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Integer>>) multiValueMap0);
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(linkedList0, multiValueMap0, biFunction0);
      LinkedList<LinkedList<Object>> linkedList1 = new LinkedList<LinkedList<Object>>(arrayList0);
      ConstantFactory<LinkedList<LinkedList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<Object>>>(linkedList1);
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<LinkedList<Object>>>) multiValueMap1, (Factory<LinkedList<LinkedList<Object>>>) constantFactory0);
      MultiValueMap<Collection<String>, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<String>>) multiValueMap2);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      multiValueMap3.getCollection(arrayList1);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      Collection<Object> collection0 = multiValueMap0.createCollection(3225);
      assertFalse(collection0.contains(3225));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Integer>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleEntry<Integer, Integer>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("org.apache.commons.collections4.iterators.AbstractEmptyIterator", "Y(9J[e.");
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, String>>();
      Iterator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, String>>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, String>>>)multiValueMap0.iterator();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>();
      hashMap0.put(multiValueMap2, iterator0);
      // Undeclared exception!
//      try { 
        multiValueMap1.size((Object) multiValueMap2);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap$1 cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, String>>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Integer>();
      multiValueMap1.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Integer>();
      multiValueMap1.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put((Integer) null, (Object) null);
      Factory<LinkedList<AbstractMap.SimpleEntry<Integer, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleEntry<Integer, Object>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<ArrayList<String>> arrayList0 = new ArrayList<ArrayList<String>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add(arrayList1);
      MultiValueMap<Collection<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<String>>();
      Factory<LinkedList<ArrayList<String>>> factory0 = ConstantFactory.constantFactory((LinkedList<ArrayList<String>>) null);
      MultiValueMap<Collection<String>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Collection<String>) arrayList1, (Collection<ArrayList<String>>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) hashMap0);
      MultiValueMap<LinkedList<Integer>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<LinkedList<String>> arrayList0 = new ArrayList<LinkedList<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      arrayList0.add(linkedList1);
      hashMap0.put(linkedList0, multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll(linkedList0, (Collection<LinkedList<String>>) arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      hashMap0.put("", multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put("", "");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<String>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Integer>>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, hashMap0);
      MultiValueMap<HashMap<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap1 = new MultiValueMap<HashMap<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator(object0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      multiValueMap0.map = null;
      MultiValueMap<LinkedList<Object>, LinkedList<String>> multiValueMap1 = new MultiValueMap<LinkedList<Object>, LinkedList<String>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Collection<Collection<Integer>>, Object> hashMap0 = new HashMap<Collection<Collection<Integer>>, Object>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Collection<Integer>, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Collection<Integer>>, AbstractMap.SimpleImmutableEntry<Collection<Integer>, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Collection<Integer>>, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Collection<Integer>, Integer>>>) hashMap0, factory0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("The factory must not be null");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge((Collection<Collection<Integer>>) null, constantFactory0, biFunction0);
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ConstantFactory<Object>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<ConstantFactory<Object>, HashMap<Integer, String>>();
      MultiValueMap<ConstantFactory<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<ConstantFactory<Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<String>>>) hashMap0, factory0);
      hashMap0.put("", factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) "", (Object) factory0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      Integer integer0 = new Integer(4551);
      hashMap0.put(multiValueMap0, integer0);
      Collection<Object> collection0 = multiValueMap0.values();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(collection0).when(biFunction0).apply(any() , any());
      hashMap0.replaceAll(biFunction0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      Integer integer0 = new Integer(4551);
      hashMap0.put(multiValueMap0, integer0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.replaceAll(biFunction0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap2 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      hashMap2.put((AbstractMap.SimpleEntry<Object, Object>) null, hashMap1);
      Factory<Collection<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ConstantFactory.constantFactory((Collection<AbstractMap.SimpleEntry<Object, Object>>) arrayList0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap2, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = new MultiValueMap<Collection<Integer>, Integer>();
      MultiValueMap<Collection<Integer>, String> multiValueMap1 = null;
//      try {
        multiValueMap1 = new MultiValueMap<Collection<Integer>, String>((Map<Collection<Integer>, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>>();
      Collection<AbstractMap.SimpleEntry<String, Object>> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<LinkedList<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, LinkedList<String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Iterator<LinkedList<String>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<String>>();
      Iterator<Map.Entry<LinkedList<String>, ArrayList<String>>> iterator0 = (Iterator<Map.Entry<LinkedList<String>, ArrayList<String>>>)multiValueMap0.iterator();
      MultiValueMap<Object, LinkedList<Collection<Integer>>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Collection<Integer>>>();
      multiValueMap1.put(iterator0, multiValueMap0);
      multiValueMap1.iterator((Object) iterator0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<Integer>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(arrayList0, "");
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleEntry0, (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(arrayList0, arrayList1);
      MultiValueMap<HashMap<Object, Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, ArrayList<String>>();
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Integer>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) abstractMap_SimpleEntry0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      Object object0 = multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      Integer integer0 = new Integer((-436));
      boolean boolean0 = multiValueMap1.containsValue(object0, (Object) integer0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Object, String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      HashMap<Collection<Object>, String> hashMap0 = new HashMap<Collection<Object>, String>();
      multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) hashMap0);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<String>>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(multiValueMap0);
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, integer0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Integer, Object>>>) hashMap1);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, ArrayList<Integer>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Integer>, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      multiValueMap0.replace(arrayList0, (Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(arrayList0, arrayList1);
      multiValueMap0.putIfAbsent(abstractMap_SimpleEntry0, arrayList1);
      Integer integer0 = new Integer(2);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      multiValueMap0.put((AbstractMap.SimpleEntry<Object, Object>) null, "s{.8D'|+pQ6iP");
      boolean boolean0 = multiValueMap0.containsValue((Object) "s{.8D'|+pQ6iP");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<ArrayList<Integer>> linkedList0 = new LinkedList<ArrayList<Integer>>();
      MultiValueMap<Collection<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<ArrayList<String>> arrayList1 = new ArrayList<ArrayList<String>>();
      arrayList1.add(arrayList0);
      multiValueMap0.putIfAbsent(arrayList0, "\"");
      multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<ArrayList<String>>) arrayList1);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<ArrayList<Integer>> linkedList0 = new LinkedList<ArrayList<Integer>>();
      MultiValueMap<Collection<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<ArrayList<String>> arrayList1 = new ArrayList<ArrayList<String>>();
      arrayList1.add(arrayList0);
      multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<ArrayList<String>>) arrayList1);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<ArrayList<Integer>> linkedList0 = new LinkedList<ArrayList<Integer>>();
      MultiValueMap<Collection<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<ArrayList<String>> arrayList1 = new ArrayList<ArrayList<String>>();
      arrayList1.add(arrayList0);
      multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<ArrayList<String>>) arrayList1);
      assertEquals(1, arrayList1.size());
      
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<HashMap<String, String>, Object> hashMap0 = new HashMap<HashMap<String, String>, Object>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<HashMap<String, String>, ? super Collection<Integer>>) hashMap0, (Factory<Collection<Integer>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<ArrayList<Integer>> linkedList0 = new LinkedList<ArrayList<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      linkedList0.add(arrayList0);
      MultiValueMap<ArrayList<Integer>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, ArrayList<Integer>>();
      ArrayList<ArrayList<Integer>> arrayList1 = new ArrayList<ArrayList<Integer>>();
      Factory<ArrayList<ArrayList<Integer>>> factory0 = ConstantFactory.constantFactory(arrayList1);
      MultiValueMap<ArrayList<Integer>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super ArrayList<ArrayList<Integer>>>) multiValueMap0, factory0);
      multiValueMap1.putAll(arrayList0, (Collection<ArrayList<Integer>>) linkedList0);
      int int0 = multiValueMap1.totalSize();
      assertTrue(arrayList1.contains(arrayList0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll("L<bv@Fm@K1mcnq~4", collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Integer>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<LinkedList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<LinkedList<LinkedList>>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleEntry<Object, Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.put((AbstractMap.SimpleEntry<Object, Object>) null, (Object) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<HashMap<Integer, Object>, Object> hashMap0 = new HashMap<HashMap<Integer, Object>, Object>();
      ConstantFactory<LinkedList<Collection<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Integer>>>((LinkedList<Collection<Integer>>) null);
      MultiValueMap<HashMap<Integer, Object>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Object>, ? super LinkedList<Collection<Integer>>>) hashMap0, (Factory<LinkedList<Collection<Integer>>>) constantFactory0);
      Collection<Collection<Integer>> collection0 = multiValueMap0.createCollection((-2374));
      assertNull(collection0);
  }
}
