/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:54:11 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) hashMap0);
      Integer integer0 = new Integer(1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(integer0, arrayList0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList arrayList2 = (ArrayList)multiValueMap0.put(integer0, arrayList1);
      assertEquals(0, arrayList2.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(hashMap0, hashMap0, biFunction0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      Integer integer0 = new Integer(1);
      multiValueMap1.put(integer0, (Object) null);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.getCollection(arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, String>();
      Collection<String> collection0 = multiValueMap0.createCollection((-699));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Collection<String>> hashMap0 = new HashMap<String, Collection<String>>();
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      hashMap0.put("org.apache.commons.collections4.map.MultiValueMap$Values", (Collection<String>) null);
      MultiValueMap<String, HashMap<ArrayList, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<ArrayList, String>>>) multiValueMap0);
      ArrayList<LinkedList<Integer>> arrayList0 = new ArrayList<LinkedList<Integer>>();
      ConstantFactory<ArrayList<LinkedList<Integer>>> constantFactory0 = new ConstantFactory<ArrayList<LinkedList<Integer>>>(arrayList0);
      MultiValueMap<String, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<LinkedList<Integer>>>) multiValueMap1, (Factory<ArrayList<LinkedList<Integer>>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<HashMap<Object, String>, Object> hashMap1 = new HashMap<HashMap<Object, String>, Object>();
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<String>>) hashMap1);
      hashMap1.put((HashMap<Object, String>) null, hashMap0);
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) null);
      MultiValueMap<HashMap<Object, String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(1819);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, "x7%N[");
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<ArrayList<String>, ArrayList<Integer>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<ArrayList<String>, ArrayList<Integer>>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) linkedList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Object, Object>>();
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(multiValueMap0, linkedList0);
      linkedList0.add(hashMap0);
      LinkedList<Collection<String>> linkedList1 = new LinkedList<Collection<String>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(linkedList0, linkedList1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      hashMap0.put(object0, "org.apache.commons.collections4.map.MultiValueMap$Values");
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<?, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(arrayList0, (Collection<Object>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      Factory<Collection<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Collection<String>>>) hashMap0, factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.put(linkedList0, ",kBZE");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      Integer integer0 = new Integer(1);
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory((LinkedList<String>) null);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.put(integer0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Integer>>) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(linkedList0, integer0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(linkedList0, integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap0;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      multiValueMap0.map = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<String>>();
      MultiValueMap<LinkedList<Integer>, Collection<LinkedList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Collection<LinkedList>>>) multiValueMap0);
      Factory<LinkedList<LinkedList<Collection<String>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Integer>, LinkedList<Collection<String>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<LinkedList<Collection<String>>>>) multiValueMap1, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.createCollection(10);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(arrayList0, (Collection<Object>) arrayList0);
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) hashMap0, factory0);
      MultiValueMap<ConstantFactory<String>, ConstantFactory<Object>> multiValueMap2 = new MultiValueMap<ConstantFactory<String>, ConstantFactory<Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap2.containsValue((Object) multiValueMap0, (Object) multiValueMap1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      multiValueMap0.map = null;
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) constantFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, Collection<String>> multiValueMap0 = new MultiValueMap<Object, Collection<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.clear();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Object, Object>>();
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      linkedList0.add(hashMap0);
      Integer integer0 = new Integer(10);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      multiValueMap0.put(linkedList1, integer0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<HashMap<Object, Object>>) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Collection<Object> collection1 = multiValueMap1.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Collection<String>>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, Collection<String>>>();
      Integer integer0 = new Integer(0);
      Iterator<AbstractMap.SimpleEntry<String, Collection<String>>> iterator0 = multiValueMap0.iterator((Object) integer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, String>();
      int int0 = multiValueMap0.size((Object) hashMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      Integer integer0 = new Integer((-1537));
      boolean boolean0 = multiValueMap0.containsValue(object0, (Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("Cannot instantiate class: ", integer0);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      multiValueMap0.put("Cannot instantiate class: ", "Cannot instantiate class: ");
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object object0 = multiValueMap0.put((ArrayList<Integer>) null, arrayList0);
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.put(arrayList0, "org.apache.commons.collections4.map.MultiValueMap$1$1");
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Object, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      linkedList0.add(hashMap0);
      linkedList0.add(hashMap0);
      multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<HashMap<Object, Object>>) linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, hashMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Object, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      linkedList0.add(hashMap0);
      multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<HashMap<Object, Object>>) linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Object, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Object, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      linkedList0.add(hashMap0);
      multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<HashMap<Object, Object>>) linkedList0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      linkedList0.add((Object) constantFactory0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      multiValueMap0.putAll(arrayList0, (Collection<Object>) linkedList0);
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: org.apache.commons.collections4.functors.ConstantFactory
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap1.putIfAbsent(arrayList0, multiValueMap0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      multiValueMap1.iterator((Object) arrayList1);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.putAll((Object) multiValueMap0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Object, Collection<String>> multiValueMap0 = new MultiValueMap<Object, Collection<String>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      Iterator<Map.Entry<ArrayList<Object>, Object>> iterator0 = (Iterator<Map.Entry<ArrayList<Object>, Object>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<ArrayList, LinkedList<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<ArrayList, LinkedList<String>>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
