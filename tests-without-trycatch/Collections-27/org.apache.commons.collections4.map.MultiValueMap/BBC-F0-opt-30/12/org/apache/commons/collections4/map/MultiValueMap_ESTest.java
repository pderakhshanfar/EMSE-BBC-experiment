/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:52:25 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<AbstractMap.SimpleImmutableEntry<String, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) multiValueMap0);
      multiValueMap1.putIfAbsent("Fpp9LzXZ)PDU4", linkedList0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      MultiValueMap<LinkedList<Collection<String>>, Collection<Object>> multiValueMap1 = new MultiValueMap<LinkedList<Collection<String>>, Collection<Object>>();
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      multiValueMap1.putIfAbsent(linkedList0, multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int0 = multiValueMap1.size((Object) arrayList0);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      Collection<ArrayList<Integer>> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<Integer, Collection<String>> hashMap0 = new HashMap<Integer, Collection<String>>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>(hashMap0);
      Integer integer0 = new Integer(0);
      hashMap1.put(integer0, "");
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(linkedList0);
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap1, (Factory<Collection<String>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = hashMap0.put("org.apache.commons.collections4.map.MultiValueMap$Values", (Integer) null);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap1.put(hashMap0, integer0);
      hashMap0.put(hashMap1, integer0);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Collection<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Collection<String>>();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, HashMap<Collection<String>, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, String>, ? super Collection<HashMap<Collection<String>, String>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.size((Object) hashMap1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Integer integer0 = new Integer(3);
      multiValueMap0.map = null;
      multiValueMap0.map = (Map<String, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping((Object) null, integer0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Integer integer0 = new Integer(3);
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping((Object) null, integer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<Collection<HashMap<Integer, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(arrayList1);
      hashMap0.put(arrayList0, constantFactory0);
      MultiValueMap<Object, HashMap<Integer, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<Integer, Object>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(arrayList1, hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("suffix may not be null");
      hashMap0.put(arrayList1, arrayList1);
      hashMap0.put(arrayList0, arrayList1);
      MultiValueMap<Collection<String>, ExceptionFactory<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ExceptionFactory<Integer>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends Collection<String>, ?>) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Collection<String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Collection<String>> arrayList1 = new ArrayList<Collection<String>>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList1.add((Collection<String>) arrayList2);
      Factory<LinkedList<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Integer>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super LinkedList<Collection<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll(arrayList0, (Collection<Collection<String>>) arrayList1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, MultiValueMap<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<MultiValueMap<String, String>>>) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.put("", hashMap1);
      ArrayList<MultiValueMap<String, String>> arrayList0 = new ArrayList<MultiValueMap<String, String>>();
      HashMap<String, Collection<String>> hashMap2 = new HashMap<String, Collection<String>>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap2);
      arrayList0.add(multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) "", (Collection<MultiValueMap<String, String>>) arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Collection<Collection<String>>, Object> hashMap0 = new HashMap<Collection<Collection<String>>, Object>();
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      Factory<LinkedList<Collection<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Collection<Collection<String>>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Collection<String>>, ? super LinkedList<Collection<String>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(linkedList0, linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<Integer>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Collection<String>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(multiValueMap0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<ArrayList<Collection<String>>, HashMap<String, Collection<String>>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<ArrayList<Collection<String>>, HashMap<String, Collection<String>>>>>) hashMap0);
      ConstantFactory<LinkedList<Collection<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Integer>>>((LinkedList<Collection<Integer>>) null);
      MultiValueMap<Object, Collection<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Collection<Integer>>>) multiValueMap1, (Factory<LinkedList<Collection<Integer>>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.put(arrayList0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>>();
      Iterator<Map.Entry<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>>> iterator0 = (Iterator<Map.Entry<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>>>)multiValueMap0.iterator();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, iterator0);
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(linkedList0);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.put(integer0, linkedList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap$1 cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<Object>>>) null, (Factory<LinkedList<LinkedList<Object>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>>();
      Iterator<Map.Entry<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>>> iterator0 = (Iterator<Map.Entry<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>>>)multiValueMap0.iterator();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-5435));
      hashMap0.put(integer0, iterator0);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap$1 cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Collection<String>>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Collection<String>>>();
      MultiValueMap<LinkedList<Object>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("", hashMap0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
      hashMap0.put(abstractMap_SimpleEntry0, abstractMap_SimpleImmutableEntry0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.getCollection(hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Collection<Integer>>();
      multiValueMap0.map = null;
      Integer integer0 = new Integer((-1338));
      // Undeclared exception!
//      try { 
        multiValueMap0.getCollection(integer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) hashMap0);
      Factory<LinkedList<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Integer>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super LinkedList<ArrayList<Integer>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.createCollection(177);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<String>>();
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<MultiValueMap<Collection<String>, Integer>, LinkedList<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<MultiValueMap<Collection<String>, Integer>, LinkedList<String>>>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<Object>, Object>) multiValueMap1;
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) integer0, (Object) integer0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<String>>, LinkedList<Collection<String>>> multiValueMap0 = new MultiValueMap<LinkedList<Collection<String>>, LinkedList<Collection<String>>>();
      multiValueMap0.map = null;
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Collection<String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Collection<String>> arrayList1 = new ArrayList<Collection<String>>();
      multiValueMap0.put(arrayList0, arrayList1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList1.add((Collection<String>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Collection<String>>) arrayList1);
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>>();
      Iterator<Map.Entry<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>>> iterator0 = (Iterator<Map.Entry<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>>>)multiValueMap0.iterator();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, iterator0);
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(linkedList0);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) constantFactory0);
      MultiValueMap<Integer, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap2.totalSize();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap$1 cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Integer>>();
      Factory<Collection<LinkedList<ArrayList<String>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, LinkedList<ArrayList<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<ArrayList<String>>>>) multiValueMap0, factory0);
      MultiValueMap<ArrayList<String>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) multiValueMap1);
      int int0 = multiValueMap2.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Integer, MultiValueMap<String, Object>> multiValueMap0 = new MultiValueMap<Integer, MultiValueMap<String, Object>>();
      Iterator<MultiValueMap<String, Object>> iterator0 = multiValueMap0.iterator((Object) "c'hm:WXq-");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      boolean boolean0 = multiValueMap0.putAll("g:x2>]s", (Collection<Collection<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<Collection<HashMap<Integer, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, HashMap<Integer, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<Integer, Object>>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Integer, MultiValueMap<String, Object>> multiValueMap0 = new MultiValueMap<Integer, MultiValueMap<String, Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      HashMap<Collection<String>, Integer> hashMap0 = new HashMap<Collection<String>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer integer0 = new Integer(2798);
      hashMap0.put(arrayList0, integer0);
      multiValueMap0.putAll((Map<? extends Collection<String>, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      MultiValueMap<Collection<String>, LinkedList<String>> multiValueMap1 = new MultiValueMap<Collection<String>, LinkedList<String>>();
      multiValueMap1.map = (Map<Collection<String>, Object>) multiValueMap0;
      multiValueMap0.putAll((Map<? extends Collection<String>, ?>) multiValueMap1);
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Collection<String>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Integer>, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("The factory must not be null", "The factory must not be null");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(abstractMap_SimpleEntry0, arrayList0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<String>>, LinkedList<Collection<String>>> multiValueMap0 = new MultiValueMap<LinkedList<Collection<String>>, LinkedList<Collection<String>>>();
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      multiValueMap0.put(linkedList0, hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      MultiValueMap<LinkedList<Collection<String>>, LinkedList<Collection<String>>> multiValueMap0 = new MultiValueMap<LinkedList<Collection<String>>, LinkedList<Collection<String>>>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      multiValueMap0.put(linkedList0, (Object) null);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList1, linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      MultiValueMap<LinkedList<Collection<String>>, LinkedList<Collection<String>>> multiValueMap0 = new MultiValueMap<LinkedList<Collection<String>>, LinkedList<Collection<String>>>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      assertEquals(1, multiValueMap0.size());
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList1, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Object, Collection<String>> hashMap0 = new HashMap<Object, Collection<String>>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<Collection<String>>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = new MultiValueMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap1.putAll(arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      Set<Map.Entry<ArrayList<String>, Object>> set0 = (Set<Map.Entry<ArrayList<String>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Collection<Integer>>();
      Integer integer0 = new Integer((-1338));
      Collection<Collection<Integer>> collection0 = multiValueMap0.getCollection(integer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, MultiValueMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<MultiValueMap<String, Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) "");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
