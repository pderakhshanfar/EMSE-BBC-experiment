/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:36:26 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, String>>();
      Set<Map.Entry<ArrayList<String>, Object>> set0 = (Set<Map.Entry<ArrayList<String>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = new MultiValueMap<String, ArrayList<String>>();
      multiValueMap0.putIfAbsent((String) null, (Object) null);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      Integer integer0 = new Integer((-1));
      multiValueMap0.put("@Ljk?uJO/MCn=G`YK_", integer0);
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) "@Ljk?uJO/MCn=G`YK_");
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      multiValueMap0.put((LinkedList<String>) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.put("org.apache.commons.collections4.functors.InstantiateFactory", "org.apache.commons.collections4.functors.InstantiateFactory");
      multiValueMap0.getCollection("org.apache.commons.collections4.functors.InstantiateFactory");
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Factory<ArrayList<String>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super ArrayList<String>>) multiValueMap0, factory0);
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>((LinkedList<String>) null);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super LinkedList<String>>) multiValueMap1, (Factory<LinkedList<String>>) constantFactory0);
      Collection<String> collection0 = multiValueMap2.createCollection(0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      Collection<LinkedList<String>> collection0 = multiValueMap0.createCollection((-1));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<ArrayList<Integer>, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<ArrayList<Integer>, Object>>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<HashMap<String, Object>>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Stream<Object> stream0 = arrayList0.parallelStream();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(hashMap0, stream0);
      multiValueMap0.putIfAbsent(abstractMap_SimpleImmutableEntry0, hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, (Object) null);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      hashMap0.put("org.apache.commons.collections4.functors.InstantiateFactory", multiValueMap0);
      MultiValueMap<ArrayList<Integer>, LinkedList<String>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, LinkedList<String>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.size((Object) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      multiValueMap0.map = null;
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap0.size((Object) multiValueMap1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.put("org.apache.commons.collections4.map.MultiValueMap$1$1$1", "org.apache.commons.collections4.map.MultiValueMap$1$1$1");
      MultiValueMap<Object, ConstantFactory<Collection<String>>> multiValueMap1 = new MultiValueMap<Object, ConstantFactory<Collection<String>>>();
      MultiValueMap<Object, ConstantFactory<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ConstantFactory<Object>>>) multiValueMap1);
      multiValueMap1.map = (Map<Object, Object>) multiValueMap2;
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) hashMap0);
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = new MultiValueMap<Object, Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap1, (Factory<LinkedList<Object>>) constantFactory0);
      hashMap0.put("org.apache.commons.collections4.map.MultiValueMap$Values", "");
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(hashMap0, integer0);
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      linkedList0.add(arrayList0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, HashMap<Integer, Object>>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super LinkedList<ArrayList<Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll(abstractMap_SimpleEntry0, (Collection<ArrayList<Object>>) linkedList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(512);
      arrayList0.add(integer0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Object) multiValueMap0, (Collection<Integer>) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>((LinkedList<Object>) null);
      MultiValueMap<Collection<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      MultiValueMap<String, Integer> multiValueMap2 = new MultiValueMap<String, Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap1.put((Collection<Object>) null, multiValueMap2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<ArrayList<Object>, Collection<String>> hashMap0 = new HashMap<ArrayList<Object>, Collection<String>>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(arrayList0, linkedList0);
      multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Integer>>>) hashMap0);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>("./T7=");
      hashMap0.put("./T7=", constantFactory0);
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ConstantFactory<Collection<ArrayList<Object>>> constantFactory1 = new ConstantFactory<Collection<ArrayList<Object>>>(linkedList0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0, (Factory<Collection<ArrayList<Object>>>) constantFactory1);
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) "./T7=");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      LinkedList<ConstantFactory<String>> linkedList0 = new LinkedList<ConstantFactory<String>>();
      ConstantFactory<LinkedList<ConstantFactory<String>>> constantFactory0 = new ConstantFactory<LinkedList<ConstantFactory<String>>>(linkedList0);
      MultiValueMap<String, ConstantFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ConstantFactory<String>>>) multiValueMap0, (Factory<LinkedList<ConstantFactory<String>>>) constantFactory0);
      MultiValueMap<String, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) multiValueMap1);
      multiValueMap0.map = (Map<String, Object>) multiValueMap2;
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.createCollection(0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.put("or._pacFe.comm5ns.colecons4.WpMulueMp$73ueI", multiValueMap0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) multiValueMap0, (Object) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put(linkedList0, hashMap1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConstantFactory<ArrayList<String>> constantFactory0 = new ConstantFactory<ArrayList<String>>(arrayList0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object0 = multiValueMap0.computeIfAbsent(linkedList0, unaryOperator0);
      MultiValueMap<Collection<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super ArrayList<String>>) hashMap0, (Factory<ArrayList<String>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue(object0, (Object) arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) "dxhX0QG%x>[X:6");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = new MultiValueMap<Object, Collection<Integer>>();
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>(multiValueMap0);
      MultiValueMap<Collection<String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Object>>) hashMap0);
      hashMap0.put(linkedList0, multiValueMap2);
      MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap3.containsValue((Object) multiValueMap1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, "6Pd6ppFv}TOM]v");
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = new MultiValueMap<String, ArrayList<String>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<Integer> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.putAll((Object) ".GM", (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      multiValueMap0.put("2^u^J72", "2^u^J72");
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "2^u^J72", (Object) "2^u^J72");
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Collection<String> collection0 = multiValueMap0.getCollection("org.apache.commons.collections4.functors.InstantiateFactory");
      boolean boolean0 = multiValueMap0.containsValue((Object) collection0, (Object) "org.apache.commons.collections4.functors.InstantiateFactory");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      multiValueMap0.put("org.aRache.commons.ollectio[s.map.MultiValueMap$ValuesIteratir", "org.aRache.commons.ollectio[s.map.MultiValueMap$ValuesIteratir");
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "org.aRache.commons.ollectio[s.map.MultiValueMap$ValuesIteratir", (Object) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.put("org.apache.commons.collections4.functors.InstantiateFactory", "org.apache.commons.collections4.functors.InstantiateFactory");
      boolean boolean0 = multiValueMap0.containsValue((Object) "org.apache.commons.collections4.functors.InstantiateFactory");
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.put("org.apache.commons.collections4.functors.InstantiateFactory", "org.apache.commons.collections4.functors.InstantiateFactory");
      MultiValueMap<ArrayList<Integer>, LinkedList<String>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, LinkedList<String>>();
      Object object0 = multiValueMap1.getOrDefault(multiValueMap0, hashMap0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      multiValueMap0.put(";#'\"", hashMap0);
      MultiValueMap<ArrayList<Integer>, LinkedList<String>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, LinkedList<String>>();
      MultiValueMap<String, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0);
      multiValueMap2.put(";#'\"", multiValueMap1);
      boolean boolean0 = multiValueMap2.removeMapping(";#'\"", hashMap0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      multiValueMap0.put(";#'\"", hashMap0);
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap1.removeMapping(";#'\"", hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) multiValueMap0);
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap2 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<String, ArrayList<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap2);
      boolean boolean0 = multiValueMap3.removeMapping(multiValueMap1, multiValueMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.put("org.apache.commons.collections4.functors.InstantiateFactory", "org.apache.commons.collections4.functors.InstantiateFactory");
      MultiValueMap<ArrayList<Integer>, LinkedList<String>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, LinkedList<String>>();
      MultiValueMap<String, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap2.removeMapping("org.apache.commons.collections4.functors.InstantiateFactory", multiValueMap1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = null;
//      try {
        multiValueMap0 = new MultiValueMap<Collection<Object>, Object>((Map<Collection<Object>, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = new MultiValueMap<String, LinkedList<String>>();
      multiValueMap1.put("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", "org.apache.commons.collections4.map.MultiValueMap$ValuesIterator");
      MultiValueMap<String, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap1);
      MultiValueMap<Object, String> multiValueMap3 = new MultiValueMap<Object, String>();
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap4 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<Object>>) hashMap0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap0, multiValueMap3);
      Collection<Object> collection0 = multiValueMap2.values();
      // Undeclared exception!
//      try { 
        multiValueMap4.putAll(abstractMap_SimpleEntry0, collection0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = new MultiValueMap<String, LinkedList<String>>();
      MultiValueMap<String, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap1);
      MultiValueMap<Object, String> multiValueMap3 = new MultiValueMap<Object, String>();
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap4 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<Object>>) hashMap0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap0, multiValueMap3);
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap4.putAll(abstractMap_SimpleEntry0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.put((Object) null, arrayList0);
      arrayList0.add((Integer) null);
      boolean boolean0 = multiValueMap0.putAll((Object) null, (Collection<Integer>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      Iterator<Map.Entry<Object, String>> iterator0 = (Iterator<Map.Entry<Object, String>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super LinkedList<Integer>>) null, (Factory<LinkedList<Integer>>) constantFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }
}
