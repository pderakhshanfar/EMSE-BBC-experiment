/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:36:03 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<MultiValueMap<String, Object>, Object> hashMap0 = new HashMap<MultiValueMap<String, Object>, Object>();
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(multiValueMap0, arrayList0);
      MultiValueMap<MultiValueMap<String, Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<MultiValueMap<String, Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      multiValueMap1.put(multiValueMap0, arrayList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Integer, Collection<Collection<Object>>> multiValueMap0 = new MultiValueMap<Integer, Collection<Collection<Object>>>();
      Integer integer0 = new Integer(3145);
      multiValueMap0.putIfAbsent(integer0, integer0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>(1);
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(arrayList0, linkedList0);
      Collection<Object> collection0 = multiValueMap0.getCollection(arrayList0);
      assertFalse(collection0.contains(1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, Integer>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer((-163));
      hashMap0.put(multiValueMap0, integer0);
      multiValueMap0.putIfAbsent(hashMap0, hashMap0);
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Object, Integer>, String> multiValueMap1 = new MultiValueMap<HashMap<Object, Integer>, String>((Map<HashMap<Object, Integer>, ? super Collection<String>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Collection<Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(linkedList0);
      hashMap0.put(multiValueMap0, arrayList0);
      Factory<LinkedList<MultiValueMap<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, MultiValueMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<MultiValueMap<Object, String>>>) hashMap0, factory0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap1.replaceAll(biFunction0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap2.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Factory<Collection<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Collection<Object>>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: org.apache.commons.collections4.functors.ExceptionFactory
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Collection<Object>, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Collection<Object>, Object>, Object>();
      ArrayList<ArrayList<MultiValueMap<Integer, Integer>>> arrayList0 = new ArrayList<ArrayList<MultiValueMap<Integer, Integer>>>();
      AbstractMap.SimpleEntry<Collection<Object>, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Collection<Object>, Object>((Collection<Object>) null, (Object) null);
      hashMap0.put(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      ConstantFactory<ArrayList<ArrayList<MultiValueMap<Integer, Integer>>>> constantFactory0 = new ConstantFactory<ArrayList<ArrayList<MultiValueMap<Integer, Integer>>>>(arrayList0);
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Object>, ArrayList<MultiValueMap<Integer, Integer>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Collection<Object>, Object>, ? super ArrayList<ArrayList<MultiValueMap<Integer, Integer>>>>) hashMap0, (Factory<ArrayList<ArrayList<MultiValueMap<Integer, Integer>>>>) constantFactory0);
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Object>, Object> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Object>, Object>((Map<AbstractMap.SimpleEntry<Collection<Object>, Object>, ? super ArrayList<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.AbstractMap$SimpleEntry cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<MultiValueMap<Collection<Object>, Integer>, Object> hashMap0 = new HashMap<MultiValueMap<Collection<Object>, Integer>, Object>();
      Factory<LinkedList<LinkedList<Collection<Object>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      MultiValueMap<Collection<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) constantFactory0);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>();
      hashMap0.put(multiValueMap1, multiValueMap2);
      MultiValueMap<MultiValueMap<Collection<Object>, Integer>, LinkedList<Collection<Object>>> multiValueMap3 = MultiValueMap.multiValueMap((Map<MultiValueMap<Collection<Object>, Integer>, ? super LinkedList<LinkedList<Collection<Object>>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap3.size((Object) multiValueMap2);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(arrayList0, arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(arrayList0, arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-53));
      MultiValueMap<Integer, String> multiValueMap1 = new MultiValueMap<Integer, String>();
      multiValueMap1.put(integer0, integer0);
      Factory<LinkedList<Collection<Collection<Object>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Collection<Collection<Object>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Collection<Collection<Object>>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll((Map<? extends Integer, ?>) multiValueMap1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, Integer>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer((-163));
      hashMap0.put(multiValueMap0, integer0);
      multiValueMap0.putIfAbsent(hashMap0, hashMap0);
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Object, Integer>, String> multiValueMap1 = new MultiValueMap<HashMap<Object, Integer>, String>((Map<HashMap<Object, Integer>, ? super Collection<String>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<? extends HashMap<Object, Integer>, ?>) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      ConstantFactory<Collection<LinkedList<Object>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Object>>>(arrayList0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>(0);
      hashMap0.put(arrayList1, constantFactory0);
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) hashMap0, (Factory<Collection<LinkedList<Object>>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2100799218));
      LinkedList<ConstantFactory<Collection<Object>>> linkedList1 = new LinkedList<ConstantFactory<Collection<Object>>>();
      ConstantFactory<Collection<ConstantFactory<Collection<Object>>>> constantFactory0 = new ConstantFactory<Collection<ConstantFactory<Collection<Object>>>>(linkedList1);
      MultiValueMap<String, ConstantFactory<Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ConstantFactory<Collection<Object>>>>) multiValueMap0, (Factory<Collection<ConstantFactory<Collection<Object>>>>) constantFactory0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      linkedList0.add(integer0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((String) null, (Collection<Integer>) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) arrayList0);
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory((LinkedList<Object>) null);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) multiValueMap0, factory0);
      Integer integer0 = new Integer(252);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll(integer0, (Collection<Object>) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<HashMap<String, MultiValueMap<Integer, Object>>, Object> hashMap0 = new HashMap<HashMap<String, MultiValueMap<Integer, Object>>, Object>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      hashMap0.put((HashMap<String, MultiValueMap<Integer, Object>>) null, constantFactory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1842);
      linkedList0.add(integer0);
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) linkedList0);
      MultiValueMap<HashMap<String, MultiValueMap<Integer, Object>>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, MultiValueMap<Integer, Object>>, ? super Collection<Integer>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((HashMap<String, MultiValueMap<Integer, Object>>) null, (Collection<Integer>) linkedList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      HashMap<Integer, Collection<Object>> hashMap0 = new HashMap<Integer, Collection<Object>>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(collection0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
      Integer integer0 = new Integer(0);
      ConstantFactory<Integer> constantFactory1 = new ConstantFactory<Integer>(integer0);
      // Undeclared exception!
//      try { 
        multiValueMap1.put(integer0, constantFactory1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Integer>, Collection<Object>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Integer>, Collection<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super Collection<Object>>) hashMap0);
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(hashMap0, integer0);
      Collection<Object> collection0 = multiValueMap0.createCollection((-1945));
      hashMap0.put(abstractMap_SimpleEntry0, collection0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(abstractMap_SimpleEntry0, (Object) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.put("", "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      Factory<Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>>>) hashMap0, factory0);
      HashMap<Object, Collection<Object>> hashMap1 = new HashMap<Object, Collection<Object>>();
      hashMap0.put((Collection<Object>) null, hashMap1);
      // Undeclared exception!
//      try { 
        multiValueMap0.put((Collection<Object>) null, hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Collection<String>>>) null, (Factory<Collection<Collection<String>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      MultiValueMap<ArrayList<Object>, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ConstantFactory<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, ArrayList<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      Factory<Collection<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.createCollection(1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<Object>>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<Object>>, Collection<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.map = (Map<ArrayList<Collection<Object>>, Object>) multiValueMap0;
      HashMap<String, Collection<Object>> hashMap0 = new HashMap<String, Collection<Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) hashMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("uiw;ACA");
      hashMap0.put(arrayList0, constantFactory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory1 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>((Map<Collection<Object>, ? super LinkedList<Integer>>) hashMap0, (Factory<LinkedList<Integer>>) constantFactory1);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) constantFactory1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.clear();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-95));
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(integer0, integer0, biFunction0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) integer0);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<Object>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Object, Collection<Object>> hashMap0 = new HashMap<Object, Collection<Object>>();
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      Collection<String> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Iterator<String> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(integer0, (Collection<Object>) linkedList0);
      MultiValueMap<Integer, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<String, Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      boolean boolean0 = multiValueMap0.putAll((Object) "T", (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      int int0 = multiValueMap0.size((Object) " ^+Q=BWt/s}");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ConstantFactory<Object>>();
      Integer integer0 = new Integer((-2142033179));
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(multiValueMap0, multiValueMap0, biFunction0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, Integer>();
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      multiValueMap0.values();
      MultiValueMap<HashMap<Object, Integer>, String> multiValueMap1 = new MultiValueMap<HashMap<Object, Integer>, String>((Map<HashMap<Object, Integer>, ? super Collection<String>>) multiValueMap0, factory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Integer, Collection<Collection<Object>>> multiValueMap0 = new MultiValueMap<Integer, Collection<Collection<Object>>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(3145);
      hashMap0.put(integer0, "}Ga(3P3#6+_^");
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, Integer>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      multiValueMap0.putIfAbsent(hashMap0, hashMap0);
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Object, Integer>, String> multiValueMap1 = new MultiValueMap<HashMap<Object, Integer>, String>((Map<HashMap<Object, Integer>, ? super Collection<String>>) multiValueMap0, factory0);
      multiValueMap1.putAll((Map<? extends HashMap<Object, Integer>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      multiValueMap0.put((LinkedList<Object>) null, (Object) null);
      multiValueMap0.replace((LinkedList<Object>) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap1.merge(multiValueMap0, multiValueMap0, biFunction0);
      boolean boolean0 = multiValueMap1.containsValue(object0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      assertEquals(1, multiValueMap0.size());
      
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      Iterator<String> iterator0 = multiValueMap0.iterator(object0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList1, iterator0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Integer integer0 = new Integer(0);
      MultiValueMap<Integer, String> multiValueMap1 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, Collection<Collection<Object>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Collection<Object>>>>) multiValueMap1);
      multiValueMap1.put(integer0, collection0);
      int int0 = multiValueMap2.totalSize();
      assertEquals(1, multiValueMap2.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      Set<Map.Entry<AbstractMap.SimpleEntry<String, Object>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<String, Object>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, ArrayList<String>>();
      Iterator<Map.Entry<HashMap<Object, String>, ArrayList<String>>> iterator0 = (Iterator<Map.Entry<HashMap<Object, String>, ArrayList<String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap1.putAll(linkedList0, (Collection<Integer>) linkedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }
}
