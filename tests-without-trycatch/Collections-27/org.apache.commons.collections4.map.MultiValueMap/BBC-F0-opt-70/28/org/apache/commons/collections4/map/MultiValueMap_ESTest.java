/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:19:27 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-31));
      hashMap0.put("p@do!Wv  Jz4IZ9'l", integer0);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      Integer integer0 = new Integer((-1352));
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      Object object0 = multiValueMap0.putIfAbsent(integer0, abstractMap_SimpleImmutableEntry1);
      assertNotNull(object0);
      
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<Object>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, Object>>();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry, ArrayList<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry, ArrayList<Object>>>>) multiValueMap0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap1);
      Object object0 = multiValueMap2.put(arrayList0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Collection<Integer>>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Collection<Integer>>>();
      Integer integer0 = new Integer(4146);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      multiValueMap0.put("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", constantFactory0);
      Collection<ArrayList<Collection<Integer>>> collection0 = multiValueMap0.getCollection("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<MultiValueMap<String, String>, Object> hashMap0 = new HashMap<MultiValueMap<String, String>, Object>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory((LinkedList<String>) null);
      MultiValueMap<MultiValueMap<String, String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<MultiValueMap<String, String>, ? super LinkedList<String>>) hashMap0, factory0);
      Collection<String> collection0 = multiValueMap0.createCollection(0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      linkedList0.add((Object) multiValueMap0);
      arrayList0.add(linkedList0);
      multiValueMap0.putAll(linkedList0, (Collection<LinkedList<Object>>) arrayList0);
      MultiValueMap<LinkedList<Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, (Object) null);
      MultiValueMap<ArrayList<String>, Collection<AbstractMap.SimpleEntry>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<AbstractMap.SimpleEntry>>>) hashMap0);
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>(linkedList0);
      AbstractMap.SimpleImmutableEntry<String, Collection<Integer>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Collection<Integer>>("org.apache.commons.collections4.map.MultiValueMap$1$1$1", linkedList1);
      AbstractMap.SimpleEntry<String, Collection<Integer>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Collection<Integer>>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, Collection<Integer>> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Collection<Integer>>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleEntry0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) hashMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      MultiValueMap<Object, Comparable<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Comparable<Object>>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.AbstractMap$SimpleEntry cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<Integer, ConstantFactory<Object>> multiValueMap1 = new MultiValueMap<Integer, ConstantFactory<Object>>();
      MultiValueMap<Integer, LinkedList<HashMap>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<HashMap>>>) multiValueMap1);
      multiValueMap1.map = (Map<Integer, Object>) multiValueMap2;
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      multiValueMap0.map = null;
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = new MultiValueMap<String, LinkedList<Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      arrayList0.add(linkedList0);
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(linkedList0, (Collection<LinkedList<Object>>) arrayList0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<LinkedList<Object>, ArrayList<Collection>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Collection>>>) multiValueMap0);
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) multiValueMap1, factory0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap2;
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      arrayList0.add(linkedList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(linkedList0, (Collection<LinkedList<Object>>) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      arrayList0.add(linkedList0);
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>(",.lYu*6e2E'RR=Be");
      hashMap0.put(linkedList0, constantFactory0);
      Factory<LinkedList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(linkedList0, (Collection<LinkedList<Object>>) arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(0);
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.put(collection0, "The factory must not be null");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ConstantFactory<Object>, Comparable<Object>> multiValueMap0 = new MultiValueMap<ConstantFactory<Object>, Comparable<Object>>();
      MultiValueMap<ConstantFactory<Object>, ExceptionFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<ExceptionFactory<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<ConstantFactory<Object>, Object>) multiValueMap1;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) hashMap0);
      MultiValueMap<String, String> multiValueMap3 = new MultiValueMap<String, String>();
      // Undeclared exception!
//      try { 
        multiValueMap2.put(multiValueMap0, multiValueMap3);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Object, Object>>();
      Factory<ArrayList<Object>> factory0 = ConstantFactory.constantFactory((ArrayList<Object>) null);
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, Object>((Map<ArrayList<Integer>, ? super ArrayList<Object>>) multiValueMap0, factory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object object0 = new Object();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(object0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(multiValueMap0, constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.put(arrayList0, abstractMap_SimpleImmutableEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Object object0 = new Object();
      hashMap0.put(hashMap1, object0);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      Integer integer0 = new Integer(1);
      ConstantFactory<LinkedList<Collection<Object>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Object>>>(linkedList0);
      MultiValueMap<HashMap<Object, String>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super LinkedList<Collection<Object>>>) hashMap0, (Factory<LinkedList<Collection<Object>>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(hashMap1, integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Object cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super LinkedList<Object>>) null, (Factory<LinkedList<Object>>) constantFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Object>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<HashMap<Object, Object>>>) multiValueMap0, (Factory<LinkedList<HashMap<Object, Object>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      multiValueMap0.map = null;
      MultiValueMap<ExceptionFactory<Integer>, String> multiValueMap1 = new MultiValueMap<ExceptionFactory<Integer>, String>();
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<ConstantFactory<Integer>, Integer> multiValueMap0 = new MultiValueMap<ConstantFactory<Integer>, Integer>();
      multiValueMap0.map = (Map<ConstantFactory<Integer>, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>((Map<Object, ? super LinkedList<Object>>) multiValueMap0, factory0);
      MultiValueMap<Object, MultiValueMap<Object, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<MultiValueMap<Object, Object>>>) multiValueMap0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "Mb~91F$-cNC");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      LinkedList<MultiValueMap<Object, Object>> linkedList0 = new LinkedList<MultiValueMap<Object, Object>>();
      linkedList0.add(multiValueMap1);
      multiValueMap2.putAll((Object) abstractMap_SimpleEntry1, (Collection<MultiValueMap<Object, Object>>) linkedList0);
      // Undeclared exception!
//      try { 
        multiValueMap1.getCollection(multiValueMap2);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<Integer>>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Collection<Integer>>, ArrayList<Object>>();
      Factory<LinkedList<Collection<Collection<Integer>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Collection<Integer>>, Collection<Collection<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<Integer>>, ? super LinkedList<Collection<Collection<Integer>>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.createCollection(1222);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(1764);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(multiValueMap0, (Object) null);
      multiValueMap0.put(integer0, abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("@YH},ZY|FJ+9", "@YH},ZY|FJ+9");
      hashMap0.put(arrayList0, abstractMap_SimpleEntry0);
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) linkedList0, (Object) linkedList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.AbstractMap$SimpleEntry cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, (Object) null);
      MultiValueMap<ArrayList<String>, ExceptionFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ExceptionFactory<Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("G[~0`x6?#iM}3Yw/?) ", "G[~0`x6?#iM}3Yw/?) ");
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, HashMap<Object, String>>();
      Integer integer0 = new Integer(1970);
      Collection<HashMap<Object, String>> collection0 = multiValueMap0.getCollection(integer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Iterator<String> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-2931));
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, integer0, biFunction0);
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      arrayList0.add(linkedList0);
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<LinkedList<Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<LinkedList<Object>>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<AbstractMap.SimpleEntry<String, Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, Object>>();
      int int0 = multiValueMap0.size((Object) "N_nB(pX`Ye)%N$Y+");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      arrayList0.add(linkedList0);
      multiValueMap0.putAll(linkedList0, (Collection<LinkedList<Object>>) arrayList0);
      ConstantFactory<LinkedList<ExceptionFactory<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<ExceptionFactory<Integer>>>((LinkedList<ExceptionFactory<Integer>>) null);
      MultiValueMap<LinkedList<Object>, ExceptionFactory<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<ExceptionFactory<Integer>>>) multiValueMap0, (Factory<LinkedList<ExceptionFactory<Integer>>>) constantFactory0);
      int int0 = multiValueMap1.size((Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      arrayList0.add(linkedList0);
      multiValueMap0.putAll(linkedList0, (Collection<LinkedList<Object>>) arrayList0);
      LinkedList<Comparable<Integer>> linkedList1 = new LinkedList<Comparable<Integer>>();
      Factory<LinkedList<Comparable<Integer>>> factory0 = ConstantFactory.constantFactory(linkedList1);
      MultiValueMap<LinkedList<Object>, Comparable<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Comparable<Integer>>>) multiValueMap0, factory0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap1.containsValue((Object) linkedList2, (Object) linkedList2);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<String>, ExceptionFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ExceptionFactory<Object>>>) hashMap0);
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, multiValueMap0);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      multiValueMap0.put((LinkedList<Object>) null, "");
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>>();
      MultiValueMap<ArrayList<Object>, HashMap<String, Object>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, HashMap<String, Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      Integer integer0 = new Integer(380);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>((Object) null, integer0);
      multiValueMap2.putIfAbsent(abstractMap_SimpleEntry0, multiValueMap0);
      boolean boolean0 = multiValueMap2.containsValue((Object) multiValueMap1);
      assertEquals(1, multiValueMap2.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<String>, ExceptionFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ExceptionFactory<Object>>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<Collection<Integer>, Collection<Integer>> hashMap0 = new HashMap<Collection<Integer>, Collection<Integer>>();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Integer>>) hashMap0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent(arrayList1, arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      HashMap<Collection<Integer>, Collection<Integer>> hashMap0 = new HashMap<Collection<Integer>, Collection<Integer>>();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Integer>>) hashMap0);
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Integer integer0 = new Integer(1188);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList1, integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      arrayList0.add(linkedList0);
      multiValueMap0.putAll(linkedList0, (Collection<LinkedList<Object>>) arrayList0);
      MultiValueMap<LinkedList<Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = new MultiValueMap<Collection<Integer>, Integer>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      MultiValueMap<Collection<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.iterator(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, Object>>();
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Object>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(collection0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("yT", multiValueMap0);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.size((Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = new MultiValueMap<String, LinkedList<Object>>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<String>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<String, Object>>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<String>>) multiValueMap0, factory0);
      Iterator<Map.Entry<LinkedList<String>, String>> iterator0 = (Iterator<Map.Entry<LinkedList<String>, String>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }
}
