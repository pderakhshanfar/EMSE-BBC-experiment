/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:03:51 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer((-13));
      Object object0 = multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      Integer integer1 = new Integer((-1814));
      Object object1 = multiValueMap1.put((Integer) object0, integer1);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals((-1814), object1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1120));
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      multiValueMap0.put(integer0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping(integer0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(0);
      multiValueMap0.put(integer0, integer0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      MultiValueMap<ArrayList<Object>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Integer>>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap1.put(arrayList0, arrayList0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap1.getCollection(linkedList0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      Collection<Integer> collection0 = multiValueMap0.createCollection(0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, HashMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap0.put((LinkedList<String>) null, (Object) null);
      multiValueMap0.replaceAll(biFunction0);
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.map = (Map<Object, Object>) multiValueMap0;
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      ArrayList<HashMap<String, Object>> arrayList0 = new ArrayList<HashMap<String, Object>>();
      ConstantFactory<Collection<HashMap<String, Object>>> constantFactory0 = new ConstantFactory<Collection<HashMap<String, Object>>>(arrayList0);
      MultiValueMap<LinkedList<Integer>, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<HashMap<String, Object>>>) hashMap0, (Factory<Collection<HashMap<String, Object>>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.size((Object) multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      hashMap0.put(multiValueMap0, "Q@synh%\"U<s");
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(hashMap0, "Q@synh%\"U<s");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      hashMap0.putIfAbsent((ArrayList<Object>) null, hashMap0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.HashMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Collection<Object>> hashMap0 = new HashMap<String, Collection<Object>>(1, 1);
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<String, String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(collection0);
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>((Map<String, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
      LinkedList<HashMap<Integer, String>> linkedList0 = new LinkedList<HashMap<Integer, String>>();
      Factory<LinkedList<HashMap<Integer, String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>(1);
      linkedList0.add(hashMap1);
      MultiValueMap<String, HashMap<Integer, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<HashMap<Integer, String>>>) multiValueMap1, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll("org.apache.commons.collections4.map.MultiValueMap$1$1$1", (Collection<HashMap<Integer, String>>) linkedList0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      MultiValueMap<ArrayList<String>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Object object0 = multiValueMap1.getOrDefault(multiValueMap0, linkedList0);
      linkedList1.addFirst(object0);
      linkedList0.add(linkedList1);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap2 = new MultiValueMap<Object, LinkedList<Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll((Object) linkedList0, (Collection<LinkedList<Object>>) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap0, factory0);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        multiValueMap1.put(factory0, object0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      multiValueMap0.map = null;
      Integer integer0 = new Integer(15);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(integer0, integer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, HashMap<Collection<Object>, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Collection<Object>, Object>>>) hashMap0);
      Integer integer0 = new Integer(4);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(integer0, hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      Factory<LinkedList<Collection<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<String>>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) multiValueMap1);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, MultiValueMap<Object, String>> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, MultiValueMap<Object, String>>();
      LinkedList<ConstantFactory<Object>> linkedList0 = new LinkedList<ConstantFactory<Object>>();
      Factory<Collection<ConstantFactory<Object>>> factory0 = ConstantFactory.constantFactory((Collection<ConstantFactory<Object>>) linkedList0);
      MultiValueMap<HashMap<Object, Integer>, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<ConstantFactory<Object>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<HashMap<Object, Integer>, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Collection<Object>>, Object> multiValueMap0 = new MultiValueMap<ExceptionFactory<Collection<Object>>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.createCollection(1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(10);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0);
      multiValueMap0.put(integer0, multiValueMap0);
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) hashMap0, (Object) integer0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<ExceptionFactory<String>, Object> multiValueMap0 = new MultiValueMap<ExceptionFactory<String>, Object>();
      multiValueMap0.map = null;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Comparable<Object>, Class<Integer>> multiValueMap0 = new MultiValueMap<Comparable<Object>, Class<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.clear();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Collection<Object>> hashMap0 = new HashMap<String, Collection<Object>>(1, 1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList0);
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>((Map<String, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
      LinkedList<HashMap<Integer, String>> linkedList1 = new LinkedList<HashMap<Integer, String>>();
      Factory<LinkedList<HashMap<Integer, String>>> factory0 = ConstantFactory.constantFactory(linkedList1);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>(1);
      linkedList1.add(hashMap1);
      MultiValueMap<String, HashMap<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<HashMap<Integer, String>>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.putAll("org.apache.commons.collections4.map.MultiValueMap$1$1$1", (Collection<HashMap<Integer, String>>) linkedList1);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Collection<Integer> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      Iterator<String> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<String>>) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(0);
      hashMap0.put(linkedList0, arrayList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Class to instantiate must not be null");
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<String>) linkedList1);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(453);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Object>>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap1.computeIfAbsent(multiValueMap0, unaryOperator0);
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(0);
      Object object0 = multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue(object0, (Object) "");
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(0);
      Object object0 = multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer((-20));
      multiValueMap0.put(integer0, integer0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, hashMap0, biFunction0);
      Integer integer0 = new Integer((-2));
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put((Integer) null, multiValueMap0);
      MultiValueMap<Integer, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer((-20));
      Object object0 = multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      multiValueMap1.putAll((Map<? extends Integer, ?>) multiValueMap0);
      multiValueMap1.put((Integer) object0, object0);
      boolean boolean0 = multiValueMap1.removeMapping(integer0, integer0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(15);
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      multiValueMap0.put(integer0, integer0);
      boolean boolean0 = multiValueMap0.removeMapping(integer0, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      boolean boolean0 = multiValueMap0.removeMapping("InstantiateFactory: InstantiationException", factory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(15);
      multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      multiValueMap1.map = (Map<Integer, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.Integer
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(20);
      Object object0 = multiValueMap0.put(integer0, integer0);
      multiValueMap0.iterator(object0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      MultiValueMap<String, LinkedList<Collection<Object>>> multiValueMap2 = new MultiValueMap<String, LinkedList<Collection<Object>>>();
      MultiValueMap<String, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap2);
      boolean boolean0 = multiValueMap3.putAll((String) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      hashMap0.putIfAbsent((ArrayList<Object>) null, (Object) null);
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0);
      multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, ArrayList<String>>();
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, ArrayList<String>>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, ArrayList<String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Collection<Integer>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Collection<Integer>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<String>>) multiValueMap1);
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("~@:5SoHc[ujbA", integer0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object0 = multiValueMap2.computeIfAbsent(abstractMap_SimpleEntry1, unaryOperator0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap1);
      boolean boolean0 = multiValueMap3.containsValue((Object) multiValueMap0, object0);
      assertEquals(1, multiValueMap2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) multiValueMap0, (Factory<Collection<Collection<String>>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }
}
