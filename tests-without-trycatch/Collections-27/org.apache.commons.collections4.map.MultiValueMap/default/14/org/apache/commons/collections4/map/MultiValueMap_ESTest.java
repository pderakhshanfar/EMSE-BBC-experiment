/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:28:53 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, EmptyIterator<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, EmptyIterator<Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.putIfAbsent(arrayList0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, linkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<String, Integer>, Object> hashMap0 = new HashMap<HashMap<String, Integer>, Object>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap0.put(hashMap1, (Object) null);
      MultiValueMap<HashMap<String, Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, Integer>, ? super Collection<String>>) hashMap0);
      multiValueMap0.putAll((Map<? extends HashMap<String, Integer>, ?>) hashMap0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, hashMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, EmptyIterator<String>> multiValueMap0 = new MultiValueMap<String, EmptyIterator<String>>();
      BiFunction<Object, Object, Collection<Object>> biFunction0 = (BiFunction<Object, Object, Collection<Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("", "", biFunction0);
      int int0 = multiValueMap0.size((Object) "");
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      multiValueMap0.put(arrayList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      ConstantFactory<LinkedList<HashMap<Collection<Object>, Collection<Object>>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<Collection<Object>, Collection<Object>>>>((LinkedList<HashMap<Collection<Object>, Collection<Object>>>) null);
      MultiValueMap<LinkedList<Object>, HashMap<Collection<Object>, Collection<Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<HashMap<Collection<Object>, Collection<Object>>>>) hashMap0, (Factory<LinkedList<HashMap<Collection<Object>, Collection<Object>>>>) constantFactory0);
      Collection<HashMap<Collection<Object>, Collection<Object>>> collection0 = multiValueMap0.createCollection((-1));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      Collection<String> collection0 = multiValueMap0.createCollection((-2234));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, EmptyIterator<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<EmptyIterator<Object>>>) multiValueMap0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap1.computeIfAbsent(multiValueMap0, unaryOperator0);
      // Undeclared exception!
//      try { 
        multiValueMap1.totalSize();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<HashMap<String, Integer>, Object> hashMap0 = new HashMap<HashMap<String, Integer>, Object>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap0.put(hashMap1, "InstantiateFactory: InstantiationException");
      MultiValueMap<HashMap<String, Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, Integer>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends HashMap<String, Integer>, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap1;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll(arrayList0, (Collection<Object>) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      multiValueMap0.map = null;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<ArrayList<Integer>> linkedList1 = new LinkedList<ArrayList<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      linkedList1.add(arrayList0);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Object) linkedList0, (Collection<ArrayList<Integer>>) linkedList1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<LinkedList<String>, AbstractMap.SimpleEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<LinkedList<String>, AbstractMap.SimpleEntry>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
//      try { 
        multiValueMap0.put("8`mFaCx", "8`mFaCx");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) null);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap1.put("8`mFaCx", "8`mFaCx");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putAll(arrayList0, (Collection<Object>) linkedList0);
      MultiValueMap<LinkedList<String>, HashMap<Integer, Collection<Object>>> multiValueMap1 = new MultiValueMap<LinkedList<String>, HashMap<Integer, Collection<Object>>>();
      // Undeclared exception!
//      try { 
        multiValueMap1.iterator((Object) linkedList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Integer>>();
      multiValueMap0.map = null;
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator(object0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.map = (Map<String, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<LinkedList<Object>, EmptyIterator<String>> multiValueMap1 = new MultiValueMap<LinkedList<Object>, EmptyIterator<String>>();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ConstantFactory<LinkedList<ArrayList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Object>>>(linkedList0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<Object>>>) multiValueMap0, (Factory<LinkedList<ArrayList<Object>>>) constantFactory0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) multiValueMap2);
      Integer integer0 = new Integer(1);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap3.merge(multiValueMap2, integer0, biFunction0);
      // Undeclared exception!
//      try { 
        multiValueMap1.getCollection(multiValueMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.getCollection("org.apache.commons.collections4.map.MultiValueMap$Values");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      hashMap0.put(arrayList1, "R");
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Object>>>) hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.getCollection(arrayList0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Collection<Object>, String>, Collection<Object>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Collection<Object>, String>, Collection<Object>>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, String>, Object>((Map<AbstractMap.SimpleEntry<Collection<Object>, String>, ? super LinkedList<Object>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.createCollection(2147483645);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      HashMap<ArrayList<Integer>, Collection<Object>> hashMap0 = new HashMap<ArrayList<Integer>, Collection<Object>>();
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Object>>) hashMap0);
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, hashMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue(object0, (Object) "");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) "5yjnz{Nw@v#au;4<ma");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(hashMap1, "Index cannot be negative: ");
      MultiValueMap<HashMap<Object, Object>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super LinkedList<LinkedList<String>>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.clear();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<String>>>) multiValueMap0);
      Collection<LinkedList<String>> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<Integer>, EmptyIterator<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, EmptyIterator<Object>>();
      Iterator<EmptyIterator<Object>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Object>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Object>>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object object0 = multiValueMap1.putIfAbsent(arrayList0, linkedList0);
      boolean boolean0 = multiValueMap1.containsValue(object0, (Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Integer, Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, String> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList1);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList1, (Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      HashMap<String, Collection<Object>> hashMap0 = new HashMap<String, Collection<Object>>();
      hashMap0.put("", (Collection<Object>) null);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      linkedList0.add((Object) arrayList1);
      multiValueMap0.putAll(arrayList0, (Collection<Object>) linkedList0);
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = new MultiValueMap<Object, Collection<Object>>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(arrayList0, linkedList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, multiValueMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<Integer>, EmptyIterator<Object>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, EmptyIterator<Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap1.putIfAbsent(arrayList0, arrayList0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap1.removeMapping(linkedList0, multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<Integer>, EmptyIterator<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, EmptyIterator<Object>>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, Collection<Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<ArrayList<String>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<Integer>, EmptyIterator<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, EmptyIterator<Object>>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent(arrayList1, arrayList0);
      multiValueMap0.iterator((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>(10);
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, String>>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll(arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, LinkedList<Object>>();
      Set<Map.Entry<AbstractMap.SimpleEntry<Object, Integer>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<Object, Integer>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Object>>();
      Iterator<Map.Entry<LinkedList<Object>, ArrayList<Object>>> iterator0 = (Iterator<Map.Entry<LinkedList<Object>, ArrayList<Object>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }
}
