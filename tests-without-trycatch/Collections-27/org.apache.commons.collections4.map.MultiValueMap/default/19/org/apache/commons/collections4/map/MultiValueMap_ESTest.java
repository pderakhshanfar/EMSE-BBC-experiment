/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:29:17 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Collection<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Collection<String>>();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, String>();
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<String, HashMap>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, HashMap>>>) multiValueMap1);
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) multiValueMap2);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multiValueMap0).when(biFunction0).apply(any() , any());
      multiValueMap3.compute(arrayList0, biFunction0);
      int int0 = multiValueMap3.totalSize();
      assertEquals(1, multiValueMap3.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>> collection0 = multiValueMap0.createCollection((-1878));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<LinkedList<Integer>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Collection<Object>>>) hashMap0);
      hashMap0.put(linkedList0, multiValueMap0);
      // Undeclared exception!
//      try { 
        multiValueMap0.removeMapping(hashMap0, (Object) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, integer0);
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(multiValueMap0);
      Factory<Collection<String>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap1, factory1);
      MultiValueMap<Object, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<String>>>) multiValueMap1);
      // Undeclared exception!
//      try { 
        multiValueMap2.putAll((Map<?, ?>) hashMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Integer>, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>) multiValueMap1;
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      arrayList0.add((AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      arrayList0.add((AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<EntrySetToMapIteratorAdapter<String, Integer>, Collection<Integer>> multiValueMap0 = new MultiValueMap<EntrySetToMapIteratorAdapter<String, Integer>, Collection<Integer>>();
      MultiValueMap<EntrySetToMapIteratorAdapter<String, Integer>, Collection<Comparable>> multiValueMap1 = MultiValueMap.multiValueMap((Map<EntrySetToMapIteratorAdapter<String, Integer>, ? super Collection<Collection<Comparable>>>) multiValueMap0);
      Factory<ArrayList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<EntrySetToMapIteratorAdapter<String, Integer>, Integer> multiValueMap2 = new MultiValueMap<EntrySetToMapIteratorAdapter<String, Integer>, Integer>((Map<EntrySetToMapIteratorAdapter<String, Integer>, ? super ArrayList<Integer>>) multiValueMap1, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.put((EntrySetToMapIteratorAdapter<String, Integer>) null, multiValueMap1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Collection<Integer>, Collection<Integer>> hashMap0 = new HashMap<Collection<Integer>, Collection<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) arrayList0);
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Integer>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put(arrayList0, arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>((Collection<Object>) null);
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>((Map<String, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.put((String) null, hashMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      MultiValueMap<Collection<Integer>, LinkedList<Collection<Integer>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<LinkedList<Collection<Integer>>>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, factory0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
//      try { 
        multiValueMap0.put(linkedList1, linkedList1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Collection<Collection<Integer>>> linkedList0 = new LinkedList<Collection<Collection<Integer>>>();
      Factory<LinkedList<Collection<Collection<Integer>>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<Collection<Integer>>>>) null, factory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, String>>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Map must not be null.
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator((Object) multiValueMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<ConstantFactory<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ConstantFactory<Object>, ArrayList<Object>>();
      multiValueMap0.map = (Map<ConstantFactory<Object>, Object>) multiValueMap0;
      // Undeclared exception!
//      try { 
        multiValueMap0.iterator();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Comparable<Integer>, Object> hashMap0 = new HashMap<Comparable<Integer>, Object>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Comparable<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Comparable<Integer>, ? super Collection<Integer>>) hashMap0, factory0);
      // Undeclared exception!
//      try { 
        multiValueMap0.createCollection(1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // ExceptionFactory invoked
//         //
//         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Integer integer0 = new Integer((-3));
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(arrayList0, integer0);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      arrayList0.add(abstractMap_SimpleImmutableEntry1);
      MultiValueMap<Collection<Object>, Comparable<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Comparable<Object>>();
      // Undeclared exception!
//      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      MultiValueMap<Integer, String> multiValueMap1 = new MultiValueMap<Integer, String>();
      Collection<Object> collection0 = multiValueMap1.values();
      multiValueMap0.putIfAbsent(collection0, "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Collection<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      // Undeclared exception!
//      try { 
        multiValueMap2.totalSize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unsupported object type: java.lang.String
//         //
//         verifyException("org.apache.commons.collections4.CollectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<MultiValueMap<Object, Object>, Comparable<Object>> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, Object>, Comparable<Object>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = null;
//      try {
        multiValueMap0 = new MultiValueMap<Object, String>((Map<Object, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<String>>>) hashMap0, factory0);
      Collection<LinkedList<String>> collection0 = multiValueMap0.getCollection("|97C82#@Ut!1/z}G)A9");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Iterator<String> iterator0 = multiValueMap0.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      arrayList0.add((AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      boolean boolean0 = multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      boolean boolean0 = multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = new MultiValueMap<Collection<Integer>, Integer>();
      boolean boolean0 = multiValueMap0.putAll((Collection<Integer>) null, (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, Collection<Integer>>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, Collection<Integer>>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Collection<Object>, Comparable<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Comparable<Object>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("'3]H=DQlimAFmg6i4x%", "");
      HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<String>>) hashMap0);
      multiValueMap0.put(abstractMap_SimpleEntry0, "");
      multiValueMap0.putAll((Map<? extends AbstractMap.SimpleEntry<String, String>, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Collection<Object>, MultiValueMap<Object, Collection<Integer>>> multiValueMap0 = new MultiValueMap<Collection<Object>, MultiValueMap<Object, Collection<Integer>>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<Integer, String> multiValueMap1 = new MultiValueMap<Integer, String>();
      Set<Integer> set0 = multiValueMap1.keySet();
      multiValueMap0.putIfAbsent(linkedList0, set0);
      MultiValueMap<Object, Integer> multiValueMap2 = new MultiValueMap<Object, Integer>();
      multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, multiValueMap2.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      multiValueMap0.put((Collection<Object>) null, "org.apache.commons.collections4.map.MultiValueMap");
      multiValueMap0.put((Collection<Object>) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap1 = new MultiValueMap<Collection<Integer>, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap1.put(arrayList0, multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap1 = new MultiValueMap<Collection<Integer>, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap1.put(arrayList0, multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      arrayList0.add((AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      arrayList0.add((AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      arrayList0.add((AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Comparable<Integer>, Object> hashMap0 = new HashMap<Comparable<Integer>, Object>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Comparable<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Comparable<Integer>, ? super Collection<Integer>>) hashMap0, factory0);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(factory0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(constantFactory0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      arrayList0.add((AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      Object object0 = new Object();
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, object0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-789));
      Collection<Object> collection0 = multiValueMap0.values();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(arrayList0, unaryOperator0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.putAll((Object) integer0, collection0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Iterator<Map.Entry<Object, String>> iterator0 = (Iterator<Map.Entry<Object, String>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
//      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0, (Factory<Collection<Integer>>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The factory must not be null
//         //
//         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
//      }
  }
}
