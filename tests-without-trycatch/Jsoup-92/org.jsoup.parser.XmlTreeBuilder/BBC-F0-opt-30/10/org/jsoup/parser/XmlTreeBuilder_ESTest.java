/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:32:59 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlTreeBuilder_ESTest extends XmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      xmlTreeBuilder0.parse(stringReader0, "x");
      Token.Doctype token_Doctype0 = new Token.Doctype();
      xmlTreeBuilder0.insert(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("Vg/W~9[3Riz$m9Fyib", "h6");
      Token.Comment token_Comment0 = new Token.Comment();
      xmlTreeBuilder0.insert(token_Comment0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      xmlTreeBuilder0.parseFragment("i;|Go{#", "", parser0);
      Token.Character token_Character0 = new Token.Character();
      xmlTreeBuilder0.insert(token_Character0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("org.jsoup.select.nodefilter$filterresult");
      xmlTreeBuilder0.initialiseParse(stringReader0, "ZNX}3saIF*oAJJ\"?b", parser0);
      assertFalse(parser0.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      xmlTreeBuilder0.parseFragment("[3!Ne", "5c3*", parser0);
      Token.Doctype token_Doctype0 = new Token.Doctype();
      boolean boolean0 = xmlTreeBuilder0.process(token_Doctype0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("", "mrGEkN");
      assertEquals("mrGEkN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("s");
      Document document0 = xmlTreeBuilder0.parse(stringReader0, "s");
      assertEquals("s", document0.location());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      assertTrue(parseSettings0.preserveTagCase());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.EndTag token_EndTag0 = new Token.EndTag();
      Token.TokenType token_TokenType0 = Token.TokenType.Doctype;
      token_EndTag0.type = token_TokenType0;
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.process(token_EndTag0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Doctype
//         //
//         verifyException("org.jsoup.parser.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.parseFragment("[D", (Element) null, "", (Parser) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.TreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("T5", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "RNDt7Om", attributes0);
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.parseFragment("T5", formElement0, (String) null, (Parser) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // BaseURI must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.parseFragment((String) null, "~^cs^", parser0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.parseFragment("th", (String) null, parser0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // BaseURI must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.parse((String) null, "Tab");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.parse("E ", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // BaseURI must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.parse(stringReader0, "i;|Go{#");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Stream closed
//         //
//         verifyException("org.jsoup.parser.CharacterReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.parse((Reader) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String input must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.insert((Token.StartTag) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.XmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      ParseErrorList parseErrorList0 = new ParseErrorList(8222, 8222);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.insert(token_StartTag0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be false
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.insert((Token.Doctype) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.XmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.Comment token_Comment0 = new Token.Comment();
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.insert(token_Comment0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.TreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      Parser parser0 = Parser.htmlParser();
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.initialiseParse(stringReader0, "", parser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Stream closed
//         //
//         verifyException("org.jsoup.parser.CharacterReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader(894);
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.initialiseParse(pipedReader0, "t^:KiuZu", (Parser) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.TreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader();
      Parser parser0 = Parser.htmlParser();
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.initialiseParse(pipedReader0, "\"0G'-d\"z3?,", parser0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      xmlTreeBuilder0.parseFragment("6hgdT", "*-NOS,lig,:*p'Q", parser0);
      xmlTreeBuilder0.processStartTag("6hgdT");
      xmlTreeBuilder0.processStartTag("#data");
      boolean boolean0 = xmlTreeBuilder0.processEndTag("6hgdT");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("#document", "#document");
      boolean boolean0 = xmlTreeBuilder0.processEndTag("#document");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("#document", "#document");
      boolean boolean0 = xmlTreeBuilder0.processEndTag("A");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.CData token_CData0 = new Token.CData("a");
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.insert(token_CData0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.TreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("YyJ?j<?z@%", "YyJ?j<?z@%");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("YyJ?j<?*@%", "YyJ?j<?*@%");
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.Comment token_Comment0 = new Token.Comment();
      token_Comment0.bogus = true;
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.process(token_Comment0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.TreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("#document", "#document");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      xmlTreeBuilder0.settings = parseSettings0;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("A", attributes0);
      Element element0 = xmlTreeBuilder0.insert(token_StartTag1);
      assertEquals("a", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("#document", "#document");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("A", attributes0);
      Element element0 = xmlTreeBuilder0.insert(token_StartTag1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.processEndTag("A");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.XmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
//      try { 
        xmlTreeBuilder0.process(token_StartTag0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be false
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      xmlTreeBuilder0.parse(stringReader0, "");
      CharacterReader characterReader0 = new CharacterReader("tbody");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1912946080));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("tbody", attributes0);
      Element element0 = xmlTreeBuilder0.insert(token_StartTag1);
      assertEquals("tbody", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragmentRelaxed("truespeed", "truespeed");
      xmlTreeBuilder0.parseFragment("{;WkY", document0, "truespeed", parser0);
  }
}
