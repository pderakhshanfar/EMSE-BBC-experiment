/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:25:48 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("O+qSe?3!`N/[QTKZ", "O+qSe?3!`N/[QTKZ");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.processStartTag("code");
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("code");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Z9mj]EY0", parseSettings0);
      Element element0 = new Element(tag0, "area");
      htmlTreeBuilder0.parseFragment("Z9mj]EY0", element0, "Z9mj]EY0", parser0);
      htmlTreeBuilder0.processStartTag("code");
      htmlTreeBuilder0.processStartTag("code");
      htmlTreeBuilder0.removeFromActiveFormattingElements(element0);
      assertEquals("z9mj]ey0", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragmentRelaxed("E:ijOg^rnC", "DJS!lT/TvA.^n\"");
      Document document1 = document0.clone();
      htmlTreeBuilder0.parseFragment("inrow", document1, "DJS!lT/TvA.^n\"", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = new Document("9Aj]Y0");
      htmlTreeBuilder0.parseFragment("9Aj]Y0", document0, "9Aj]Y0", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j k-_");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "noscript", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.appendTagName('r');
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("Tvtl");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.replaceOnStack((Element) null, document0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = Parser.parse("c5e]}'n", "j k-_");
      htmlTreeBuilder0.parseFragment("mHK#%", document0, "c5e]}'n", parser0);
      Token.Comment token_Comment0 = new Token.Comment();
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("h2", "h2");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("j k-_", document0, "mHK#%", parser0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterFrameset;
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("h2", "h2");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("j k-_", document0, "mHK#%", parser0);
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCell;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(false);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFormElement((FormElement) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.framesetOk(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "[", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("[");
      htmlTreeBuilder0.replaceOnStack(element0, element0);
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tD");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "tD", parser0);
      String string0 = htmlTreeBuilder0.toString();
      assertEquals("TreeBuilder{currentToken=null, state=Initial, currentElement=null}", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      Element element0 = new Element(tag0, "8`h`]1h6B8@_Nu", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("table", element0, "$TC@~FB[@N!>", parser0);
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tD");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "tD", parser0);
      Document document0 = Parser.parseBodyFragment("async", "tD");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("c5e]}'n", "dCdRY>R&8{u#{kx");
      htmlTreeBuilder0.insert(document0);
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertEquals(1, document0.siblingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      StringReader stringReader0 = new StringReader("tD");
      htmlTreeBuilder0.initialiseParse(stringReader0, "{&WH8b7", parser0);
      Token.Doctype token_Doctype0 = new Token.Doctype();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHtml;
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("wU", "wU");
      htmlTreeBuilder0.parseFragment("select", document0, "wU", parser0);
      Token.Doctype token_Doctype0 = new Token.Doctype();
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      Element element0 = new Element(tag0, "tD", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("6fv3f^", element0, "table", parser0);
      htmlTreeBuilder0.processStartTag("tD");
      htmlTreeBuilder0.processStartTag("table");
      htmlTreeBuilder0.insertInFosterParent(element0);
      Element element1 = htmlTreeBuilder0.pop();
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      StringReader stringReader0 = new StringReader(">Eqs");
      Document document0 = parser1.parseInput((Reader) stringReader0, ">Eqs");
      htmlTreeBuilder0.push(document0);
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = new Document("9Aj]Y0");
      htmlTreeBuilder0.parseFragment("9Aj]Y0", document0, "9Aj]Y0", parser0);
      Element element0 = htmlTreeBuilder0.pop();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(element1);
      assertEquals("html", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      Element element0 = new Element(tag0, "tD", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("6fv3f^", element0, "table", parser0);
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("tfoot", parseSettings0);
      Element element0 = new Element(tag0, "tD", (Attributes) null);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("applet", element0, "{AVw0os", parser0);
      htmlTreeBuilder0.push(element0);
      boolean boolean0 = htmlTreeBuilder0.onStack(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = parser1.parseInput("ocjipt", "$Mi%? uF");
      boolean boolean0 = htmlTreeBuilder0.onStack(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tD");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "tD", parser0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("F]P+.&<~<uJ&>aV", "5'kZ<pjM8|");
      Element element0 = document0.body();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(1, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("(v1r0&", "(v1r0&");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("F]P+.&<~<uJ&>aV", "5'kZ<pjM8|");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("o]Yq");
      boolean boolean0 = htmlTreeBuilder0.isSpecial(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      Element element0 = new Element(tag0, "tD", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment(", currentElement=", element0, "table", parser0);
      htmlTreeBuilder0.processStartTag("tD");
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tD");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "tD", parser0);
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("tfoot", parseSettings0);
      Element element0 = new Element(tag0, "tD", (Attributes) null);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("applet", element0, "{AVw0os", parser0);
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("^=");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "tD", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("body", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("sh");
      Element element0 = new Element(tag0, "sh");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("sh", element0, "sh");
      StringReader stringReader0 = new StringReader("eoDPe>az</m^4IeIy");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("td", attributes0);
      Element element1 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("6fv3f^", (Element) null, "6fv3f^", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.processStartTag("section");
      boolean boolean0 = htmlTreeBuilder0.inTableScope("section");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = new Document("qi0}6T_17x4,bJ~Zq");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("qi0}6T_17x4,bJ~Zq", document0, "9Aj]Y0", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.processStartTag("code");
      String[] stringArray0 = new String[3];
      stringArray0[1] = "9Aj]Y0";
      stringArray0[2] = "code";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j k-_");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "noscript", parser0);
      String[] stringArray0 = new String[2];
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "[", parser0);
      htmlTreeBuilder0.insertStartTag("[");
      String[] stringArray0 = new String[0];
      boolean boolean0 = htmlTreeBuilder0.inScope("[", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("body", "h2");
      htmlTreeBuilder0.popStackToBefore("noresize");
      String[] stringArray0 = new String[8];
      boolean boolean0 = htmlTreeBuilder0.inScope("noresize", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Z9Aj]Y0", parseSettings0);
      Element element0 = new Element(tag0, "select");
      htmlTreeBuilder0.parseFragment("Z9Aj]Y0", element0, "Z9Aj]Y0", parser0);
      htmlTreeBuilder0.processStartTag("code");
      boolean boolean0 = htmlTreeBuilder0.inScope("code");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      StringReader stringReader0 = new StringReader("noresize");
      htmlTreeBuilder0.initialiseParse(stringReader0, "noresize", parser0);
      boolean boolean0 = htmlTreeBuilder0.inScope("noresize");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("Kxh");
      Element element0 = new Element(tag0, "Kxh");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = parser0.parseFragmentInput("Kxh", element0, "Kxh");
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.processStartTag("code");
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("code");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("Z9mj]EY0");
      Element element0 = new Element(tag0, "area");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("Z9mj]EY0", element0, "Z9mjE0", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.processStartTag("code");
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("code");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("Z9mj]EY0");
      Element element0 = new Element(tag0, "area");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("Z9mj]EY0", element0, "Z9mj]EY0", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("Z9mj]EY0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j k-_");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "noscript", parser0);
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("`e&C", (Element) null, "}.38hMu.\" Nt`w", parser0);
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "[", parser0);
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertFalse(list0.contains("["));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("c5e]}'n", "dCdRY>R&8{u#{kx");
      htmlTreeBuilder0.insert(document0);
      htmlTreeBuilder0.setHeadElement(document0);
      assertEquals(1, document0.siblingIndex());
      
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("c5e]}'n", "dCdRY>R&8{u#{kx");
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("dd}EgPQ>G@", "ocjipt");
      htmlTreeBuilder0.setHeadElement(document0);
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("o]Yq");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("o]Yq", document0, "o]Yq", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("9'!s`PGIUi");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("object", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "object", attributes0);
      htmlTreeBuilder0.parseFragment("object", element0, "object", parser0);
      htmlTreeBuilder0.processStartTag("object");
      Element element1 = htmlTreeBuilder0.getFromStack("object");
      assertEquals("object", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("xh");
      Element element0 = new Element(tag0, "xh");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("xh", element0, "xh");
      Element element1 = htmlTreeBuilder0.getFromStack("html");
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j k-_");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "noscript", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.appendTagName('c');
      htmlTreeBuilder0.insertEmpty(token_StartTag0);
      htmlTreeBuilder0.insertForm(token_StartTag0, true);
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertEquals(0, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j k-_");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "noscript", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.appendTagName('c');
      htmlTreeBuilder0.insertForm(token_StartTag0, true);
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j k-_");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "noscript", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.appendTagName('c');
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
      formElement0.prependChild(element0);
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertEquals("c", formElement1.tagName());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("org.jsoup.select.Collector$Accumulator", ".rSot");
      htmlTreeBuilder0.insert(document0);
      assertEquals(1, document0.siblingIndex());
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j k-_");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "noscript", parser0);
      Document document0 = htmlTreeBuilder0.getDocument();
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      parser0.parseInput("(v1r0&", "(v1r0&");
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("(v1r0&", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      htmlTreeBuilder0.parseFragment("", document0, "", parser0);
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("O+qSe?3!`N/[QTKZ", "O+qSe?3!`N/[QTKZ");
      htmlTreeBuilder0.insertStartTag("O+qSe?3!`N/[QTKZ");
      htmlTreeBuilder0.processStartTag("code");
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("code");
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j k-_");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "noscript", parser0);
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("ocipt");
      htmlTreeBuilder0.initialiseParse(stringReader0, "ocipt", parser0);
      Element element0 = new Element("ocipt");
      htmlTreeBuilder0.push(element0);
      Element element1 = htmlTreeBuilder0.insertStartTag("ocipt");
      Element element2 = htmlTreeBuilder0.aboveOnStack(element1);
      assertEquals(1, element2.childNodeSize());
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("ab|#Ft'9FD1.kr/!!S");
      CDataNode cDataNode0 = new CDataNode("ab|#Ft'9FD1.kr/!!S");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "ab|#Ft'9FD1.kr/!!S", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("2v%f.S7.TN>@^q3", element0, "ab|#Ft'9FD1.kr/!!S", parser0);
      htmlTreeBuilder0.processStartTag("ab|#Ft'9FD1.kr/!!S");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.nameAttr("ab|#Ft'9FD1.kr/!!S", attributes0);
      Element element1 = htmlTreeBuilder0.insert(token_StartTag0);
      assertEquals(0, element1.siblingIndex());
      
      htmlTreeBuilder0.insertInFosterParent(element1);
      Element element2 = htmlTreeBuilder0.aboveOnStack(element1);
      assertEquals(2, element1.siblingIndex());
      assertNotSame(element1, element2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("c5e]}'n", "dCdRY>R&8{u#{kx");
      htmlTreeBuilder0.insert(document0);
      // Undeclared exception!
      htmlTreeBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("Z9mj]EY0");
      Element element0 = new Element(tag0, "area");
      htmlTreeBuilder0.parseFragment("Z9mj]EY0", element0, "Z9mj]EY0", parser0);
      htmlTreeBuilder0.processEndTag((String) null);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.toString();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be false
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.resetInsertionMode();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tD");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "summary", parser0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.replaceOnStack((Element) null, (Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("JUp&wujd,96CVV", "+`O}nW@QWL?f3");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.removeFromStack(document0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("37Q?Y$");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("j k-_", "mHK#%");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.EndTag token_EndTag0 = new Token.EndTag();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterAfterFrameset;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.process(token_EndTag0, htmlTreeBuilderState0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.EOF token_EOF0 = new Token.EOF();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHtml;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      CharacterReader characterReader0 = new CharacterReader("tfoot");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.Doctype token_Doctype0 = tokeniser0.doctypePending;
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_Doctype0.type = token_TokenType0;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterFrameset;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Comment
//         //
//         verifyException("org.jsoup.parser.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput(",<6>_P{3+N", ",<6>_P{3+N");
      String[] stringArray0 = new String[7];
      stringArray0[1] = ">ClHSY=]UFmuAs^X'";
      stringArray0[2] = ",<6>_P{3+N";
      stringArray0[3] = "ud";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      Token.EOF token_EOF0 = new Token.EOF();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Text;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      CharacterReader characterReader0 = new CharacterReader("j k-_");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-3024));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.EndTag token_EndTag0 = tokeniser0.endPending;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.process(token_EndTag0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("body", "body");
      htmlTreeBuilder0.processStartTag("body");
      htmlTreeBuilder0.clearStackToTableContext();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "body";
      stringArray0[2] = "body";
      stringArray0[3] = "f7YlapV?v";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      Token.StartTag token_StartTag0 = (Token.StartTag)htmlTreeBuilder0.currentToken;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.process(token_StartTag0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("ab|#Ft'9FD1.kr`/!!S");
      CDataNode cDataNode0 = new CDataNode("ab|#Ft'9FD1.kr`/!!S");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "ab|#Ft'9FD1.kr`/!!S", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("2v%f.S7.TN>@^q3", element0, "ab|#Ft'9FD1.kr`/!!S", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      token_StartTag0.nameAttr("ab|#Ft'9FD1.kr`/!!S", attributes0);
      htmlTreeBuilder0.insert(token_StartTag0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.process(token_StartTag0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // There is an unread token pending!
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("wU", "wU");
      htmlTreeBuilder0.parseFragment("s9elct", document0, "wU", parser0);
      Token.Doctype token_Doctype0 = new Token.Doctype();
      Token token0 = token_Doctype0.reset();
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token0.type = token_TokenType0;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.process(token0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Comment
//         //
//         verifyException("org.jsoup.parser.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.popStackToClose((String[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.popStackToClose("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.popStackToBefore("j k-_");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.pop();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tD");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "tD", parser0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.pop();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("Z d2/IrYb5", "dCdRY>R&8{u#{kx");
      htmlTreeBuilder0.insert(document0);
      // Undeclared exception!
      htmlTreeBuilder0.parseFragment("QT", document0, "Z d2/IrYb5", parser0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("mHK#%", "s|$'T\"6:.m-yz{?s");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.parseFragment("bN@ZsL#[IsjstW&iP", document0, "c5e]}'n", (Parser) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Z9Aj]Y0", parseSettings0);
      Element element0 = new Element(tag0, "area");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.parseFragment("area", element0, (String) null, parser0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // BaseURI must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("noframes", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "object", attributes0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.onStack(pseudoTextElement0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.lastFormattingElement();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertStartTag("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertStartTag((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertOnStackAfter((Element) null, (Element) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      DataNode dataNode0 = new DataNode("li", "sa8kGtrF}");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertInFosterParent(dataNode0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader(",D");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, ",D", parser0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("menu");
      CDataNode cDataNode0 = new CDataNode("pre");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "wx", attributes0);
      htmlTreeBuilder0.parseFragment("#KY)[$yRfL", element0, "wx", parser0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("bgsound");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("/=:.&N0+\"m5 mg]>", attributes0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertForm(token_StartTag1, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be false
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be false
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insert((Token.StartTag) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be false
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Comment token_Comment0 = new Token.Comment();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insert(token_Comment0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insert((Token.Character) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("Ad]_Xn");
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$IsEmpty");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insert(element0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j k-_");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "noscript", parser0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insert((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader(".B<q#X !<[nOlcQK|");
      stringReader0.close();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "sl", parser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Stream closed
//         //
//         verifyException("org.jsoup.parser.CharacterReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tD");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "tD", (Parser) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "j k-_", parser0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inSelectScope("G");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inScope("noscript", stringArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inScope("hm`56R[");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inButtonScope("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.getFromStack(">+n8?nI^`[");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.getActiveFormattingElement("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Text;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.clearStackToTableContext();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "[", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("[");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tD");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "tD", parser0);
      htmlTreeBuilder0.processStartTag("1C5oC6Kq");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("style", "style");
      boolean boolean0 = htmlTreeBuilder0.processStartTag("style");
      Token.Character token_Character0 = new Token.Character();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InHeadNoscript;
      boolean boolean1 = htmlTreeBuilder0.process(token_Character0, htmlTreeBuilderState0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j`kR_");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "noscript", parser0);
      Token.CData token_CData0 = new Token.CData("4_yZYY'{Cs7+");
      boolean boolean0 = htmlTreeBuilder0.process(token_CData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("Kxh");
      Element element0 = new Element(tag0, "Kxh");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("Kxh", element0, "Kxh");
      htmlTreeBuilder0.processStartTag("code");
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("Kxh");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Z9Aj]Y0", parseSettings0);
      Element element0 = new Element(tag0, "SFT~S8lXRA");
      htmlTreeBuilder0.parseFragment("Could not parse attribute query '%s': unexpected token at '%s'", element0, "marquee", parser0);
      htmlTreeBuilder0.processStartTag("marquee");
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("datalist");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "", parser0);
      Document document0 = Parser.parseBodyFragment("", "");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tD");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "tD", parser0);
      Document document0 = Parser.parseBodyFragment("async", "tD");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      Element element0 = new Element(tag0, "tD", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("6fv3f^", element0, "table", parser0);
      htmlTreeBuilder0.processStartTag("tD");
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("O+qekx*3!`/[Tx", "O+qekx*3!`/[Tx");
      document0.toggleClass("OJl?AQ1\"t8d");
      Document document1 = parser0.parseInput("Attributes incorrectly present on end tag", "nX");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("");
      htmlTreeBuilder0.parseFragment("", document0, "", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("Kxh");
      Element element0 = new Element(tag0, "Kxh");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("Kxh", element0, "Kxh");
      htmlTreeBuilder0.processStartTag("code");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("Kxh");
      Element element0 = new Element(tag0, "Kxh");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = parser0.parseFragmentInput("Kxh", element0, "Kxh");
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.processStartTag("code");
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(element1);
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table", parseSettings0);
      Element element0 = new Element(tag0, "8`h`]h6B8@Nu", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("8`h`]h6B8@Nu", element0, "noembed", parser0);
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("ab|#Ft'FVX1.kY`/!!S");
      CDataNode cDataNode0 = new CDataNode("ab|#Ft'FVX1.kY`/!!S");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "ab|#Ft'FVX1.kY`/!!S", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("6fv3f^", element0, "ab|#Ft'FVX1.kY`/!!S", parser0);
      htmlTreeBuilder0.processStartTag("p");
      htmlTreeBuilder0.generateImpliedEndTags("");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("o]Yq");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("o]Yq", document0, "o]Yq", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.insertStartTag("option");
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("#root");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("Kxh");
      Element element0 = new Element(tag0, "Kxh");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = parser0.parseFragmentInput("Kxh", element0, "Kxh");
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.processStartTag("code");
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("code");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tD");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "tD", parser0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inSelectScope("tD");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Should not be reachable
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ul");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "ul", parser0);
      htmlTreeBuilder0.insertStartTag("ul");
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("~Li-l\"?!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("xh");
      Element element0 = new Element(tag0, "xh");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = parser0.parseFragmentInput("xh", element0, "xh");
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.processStartTag("code");
      boolean boolean0 = htmlTreeBuilder0.inTableScope("fieldset");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("frameset");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "article", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("yw;9qh%q8h]4muztx", element0, "frameset", parser0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("tD", "fieldset");
      Element element0 = document0.head();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("tD", element0, "fieldset", parseErrorList0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, list0.size());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tD");
      Parser parser0 = Parser.htmlParser();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse(stringReader0, "tD");
      Element element0 = document0.createElement("colgroup");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("colgroup", element0, "colgroup", parser0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("caption");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "ruby", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("ascii", element0, "q/p", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("thead", parseSettings0);
      Element element0 = new Element(tag0, "]CsVg1", (Attributes) null);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("wx", element0, "`E%j%5s-Z[^AL9", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("tbody", parseSettings0);
      Element element0 = new Element(tag0, "9D", (Attributes) null);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("plaintext", element0, "", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("tr");
      Element element0 = new Element(tag0, "xh");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = parser0.parseFragmentInput("xh", element0, "xh");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("th");
      Element element0 = new Element(tag0, "th", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("th", element0, "3L\"KScc:7{n", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      parser0.parseInput("th", "th");
      htmlTreeBuilder0.insertStartTag("th");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("tD");
      Element element0 = new Element(tag0, "tD", attributes0);
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("script", element0, "tD", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Element element0 = new Element("select");
      List<Node> list0 = Parser.parseFragment("Z9Aj]Y0", element0, "select");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j k-_");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "noscript", parser0);
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("sh");
      Element element0 = new Element(tag0, "sh");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("sh", element0, "sh");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(element0, element0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "[", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("declare");
      Document document0 = Parser.parseBodyFragmentRelaxed("[", "[");
      htmlTreeBuilder0.insertOnStackAfter(element0, document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("h2", "h2");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("j k-_", document0, "mHK#%", parser0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("Kxh");
      Element element0 = new Element(tag0, "Kxh");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("Kxh", element0, "Kxh");
      htmlTreeBuilder0.processStartTag("code");
      htmlTreeBuilder0.insertStartTag("id");
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("code");
      assertNotNull(element1);
      
      Element element2 = htmlTreeBuilder0.aboveOnStack(element1);
      assertEquals(2, element2.childNodeSize());
      assertEquals("html", element2.nodeName());
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tD");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "tD", parser0);
      Document document0 = Parser.parseBodyFragment("async", "tD");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
//        fail("Expecting exception: AssertionError");
      
//      } catch(AssertionError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("Kxh");
      Element element0 = new Element(tag0, "Kxh");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      Element element0 = new Element(tag0, "ta,:1tg{{lu1WYN-lJ");
      htmlTreeBuilder0.parseFragment("yS[Cl9Ia\"gH.)I", element0, "#root", parser0);
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("Unexpectedly reached end of file (EOF) in input state [%s]", "html");
      htmlTreeBuilder0.popStackToBefore("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      Element element0 = new Element(tag0, "tD", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("6fv3f^", element0, "table", parser0);
      htmlTreeBuilder0.popStackToBefore("image");
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("L\"j0G");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "wbt2a6nixg", parser0);
      htmlTreeBuilder0.insertStartTag("invalid named reference '%s'");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "invalid named reference '%s'";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("sh");
      Element element0 = new Element(tag0, "sh");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("sh", element0, "sh");
      htmlTreeBuilder0.popStackToClose((String) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("style", parseSettings0);
      Element element0 = new Element(tag0, "ta,:1tg{{lu1WYN-lJ");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("yS[Cl9Ia\"gH.)I", element0, "#root", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf(" (]bn kQ),h'");
      CDataNode cDataNode0 = new CDataNode("tD");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("E6VrU2'+", element0, "table", parser0);
      htmlTreeBuilder0.processStartTag("style");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      parser1.parseInput("ocjipt", "$Mi%? uF");
      boolean boolean0 = htmlTreeBuilder0.processStartTag("script");
      Token.Character token_Character0 = new Token.Character();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InHeadNoscript;
      boolean boolean1 = htmlTreeBuilder0.process(token_Character0, htmlTreeBuilderState0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tD");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, ")6V>*#LPbIDJ|/", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("H#%");
      Attributes attributes0 = cDataNode0.attributes();
      token_StartTag0.nameAttr(":ImmediateParent%s", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, false);
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("`e&C", (Element) null, "}.38hMu.\" Nt`w", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("tr", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      assertEquals(1, element0.siblingIndex());
      assertEquals("}.38hMu.\" Nt`w", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      Element element0 = new Element(tag0, "8`h`]1h6B8@_Nu", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.setTrackErrors(100);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("table", element0, "$TC@~FB[@N!>", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j k-_");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "noscript", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.appendTagName('r');
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
      htmlTreeBuilder0.maybeSetBaseUri(formElement0);
      assertEquals("noscript", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      FormElement formElement0 = new FormElement(tag0, "table", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("table", formElement0, "$TC@~FB[@N!>", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("plaintext", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "seaTmless", attributes0);
      List<Node> list0 = Parser.parseFragment(",@DXYU]|5s'W>/U5V", element0, "seaTmless");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("noscript");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "noscript", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("noresize", element0, "tD", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("script", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "script", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("[", element0, ":oresize", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      CDataNode cDataNode0 = new CDataNode("tt");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Element element0 = new Element(tag0, "[?O.Ksz$^", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("[?O.Ksz$^", element0, "object", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inTableScope("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("applet", parseSettings0);
      Element element0 = new Element(tag0, "applet", (Attributes) null);
      boolean boolean0 = htmlTreeBuilder0.isSpecial(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("th", "th");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.push(document0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("sh");
      Element element0 = new Element(tag0, "sh");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(element0, element0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      Element element0 = new Element(tag0, "tD", attributes0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.isInActiveFormattingElements(element0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      Element element0 = new Element(tag0, "tD", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("6fv3f^", element0, "table", parser0);
      htmlTreeBuilder0.processStartTag("tD");
      boolean boolean0 = htmlTreeBuilder0.processStartTag("table");
      boolean boolean1 = htmlTreeBuilder0.processStartTag("cRde");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inScope(stringArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      Element element0 = new Element(tag0, "table", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("table", element0, "tD", parser0);
      boolean boolean0 = htmlTreeBuilder0.processStartTag("tD");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      boolean boolean1 = htmlTreeBuilder0.processStartTag("xh");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("video");
      Element element0 = new Element(tag0, "video", (Attributes) null);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("video", element0, "org.jsoup.safety.Cleaner$CleaningVisitor", parser0);
      htmlTreeBuilder0.processStartTag("isindex");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inListItemScope("code");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }
}
