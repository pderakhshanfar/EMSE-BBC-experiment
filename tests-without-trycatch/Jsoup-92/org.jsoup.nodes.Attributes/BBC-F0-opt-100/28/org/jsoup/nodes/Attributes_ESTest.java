/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:14:27 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$Dataset$EntrySet", "");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      attributes1.hashCode();
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = new Attributes();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotNull(attributes1);
      assertEquals(0, attributes1.size());
      
      Attributes attributes2 = attributes1.put(" ${:", true);
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotNull(attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      boolean boolean0 = attributes0.equals(attributes2);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertFalse(boolean0);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("-|.9O.W", "-|.9O.W");
      assertNotNull(attribute0);
      assertEquals("-|.9O.W", attribute0.getValue());
      assertEquals("-|.9O.W", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("-|.9O.W", attribute0.getValue());
      assertEquals("-|.9O.W", attribute0.getKey());
      assertEquals(1, attributes1.size());
      
      String string0 = attributes1.toString();
      assertNotNull(string0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(" -|.9O.W=\"-|.9O.W\"", string0);
      assertEquals(1, attributes0.size());
      assertEquals("-|.9O.W", attribute0.getValue());
      assertEquals("-|.9O.W", attribute0.getKey());
      assertEquals(1, attributes1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("org.jsoup.helper.Validate", "to[llc8px{b", attributes0);
      assertNotNull(attribute0);
      assertEquals(0, attributes0.size());
      assertEquals("org.jsoup.helper.Validate", attribute0.getKey());
      assertEquals("to[llc8px{b", attribute0.getValue());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("org.jsoup.helper.Validate", attribute0.getKey());
      assertEquals("to[llc8px{b", attribute0.getValue());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.put("to[llc8px{b", "");
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals("org.jsoup.helper.Validate", attribute0.getKey());
      assertEquals("to[llc8px{b", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals("org.jsoup.helper.Validate", attribute0.getKey());
      assertEquals("to[llc8px{b", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      attributes2.normalize();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals("org.jsoup.helper.Validate", attribute0.getKey());
      assertEquals("to[llc8px{b", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      attributes2.addAll(attributes3);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertEquals(3, attributes0.size());
      assertEquals("org.jsoup.helper.Validate", attribute0.getKey());
      assertEquals("to[llc8px{b", attribute0.getValue());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertEquals(2, attributes3.size());
      
      attributes1.putIgnoreCase("Unexpectedly reached end of file (EOF) in input state [%s]", "w-dz?");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertEquals(4, attributes0.size());
      assertEquals("org.jsoup.helper.Validate", attribute0.getKey());
      assertEquals("to[llc8px{b", attribute0.getValue());
      assertEquals(4, attributes1.size());
      
      Attributes attributes4 = attributes2.put("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", true);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes3));
      assertNotNull(attributes4);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertEquals(5, attributes0.size());
      assertEquals("org.jsoup.helper.Validate", attribute0.getKey());
      assertEquals("to[llc8px{b", attribute0.getValue());
      assertEquals(5, attributes1.size());
      assertEquals(5, attributes2.size());
      assertEquals(5, attributes4.size());
      
      attributes4.addAll(attributes2);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertEquals(5, attributes0.size());
      assertEquals("org.jsoup.helper.Validate", attribute0.getKey());
      assertEquals("to[llc8px{b", attribute0.getValue());
      assertEquals(5, attributes1.size());
      assertEquals(5, attributes2.size());
      assertEquals(5, attributes4.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("8e.&Gz", "org.jsoup.nodes.Attributes");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attribute attribute0 = new Attribute("P{q<LLGr((3U6", "6&t|P0", attributes0);
      assertNotNull(attribute0);
      assertEquals(1, attributes0.size());
      assertEquals("P{q<LLGr((3U6", attribute0.getKey());
      assertEquals("6&t|P0", attribute0.getValue());
      
      Attributes attributes2 = attributes0.put(attribute0);
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals("P{q<LLGr((3U6", attribute0.getKey());
      assertEquals("6&t|P0", attribute0.getValue());
      assertEquals(2, attributes2.size());
      
      attributes2.addAll(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("P{q<LLGr((3U6", attribute0.getKey());
      assertEquals("6&t|P0", attribute0.getValue());
      assertEquals(2, attributes2.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("->a-z]ux}7*d2", "->a-z]ux}7*d2", attributes0);
      assertNotNull(attribute0);
      assertEquals(0, attributes0.size());
      assertEquals("->a-z]ux}7*d2", attribute0.getKey());
      assertEquals("->a-z]ux}7*d2", attribute0.getValue());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("->a-z]ux}7*d2", attribute0.getKey());
      assertEquals("->a-z]ux}7*d2", attribute0.getValue());
      assertEquals(1, attributes1.size());
      
      int int0 = attributes1.size();
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, int0);
      assertEquals(1, attributes0.size());
      assertEquals("->a-z]ux}7*d2", attribute0.getKey());
      assertEquals("->a-z]ux}7*d2", attribute0.getValue());
      assertEquals(1, attributes1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put(" ${:", true);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      int int0 = attributes0.indexOfKey(" ${:");
      assertSame(attributes0, attributes1);
      assertEquals(0, int0);
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("pRG~f-!6FtAa{7pHW", "");
      assertNotNull(attribute0);
      assertEquals("pRG~f-!6FtAa{7pHW", attribute0.getKey());
      assertEquals("", attribute0.getValue());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("pRG~f-!6FtAa{7pHW", attribute0.getKey());
      assertEquals("", attribute0.getValue());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.put("", "");
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals("pRG~f-!6FtAa{7pHW", attribute0.getKey());
      assertEquals("", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      int int0 = attributes2.indexOfKey("");
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertEquals(1, int0);
      assertEquals(2, attributes0.size());
      assertEquals("pRG~f-!6FtAa{7pHW", attribute0.getKey());
      assertEquals("", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      int int0 = attributes0.indexOfKey("org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      assertEquals((-1), int0);
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = attributes0.html();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("data-", "data-");
      assertNotNull(attribute0);
      assertEquals("data-", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("data-", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
      assertEquals(1, attributes1.size());
      
      String string0 = attributes0.getIgnoreCase("data-");
      assertNotNull(string0);
      assertSame(attributes0, attributes1);
      assertEquals("data-", string0);
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = Attributes.checkNotNull("LGtE2zfk[ofkC8v^P/8");
      assertNotNull(string0);
      assertEquals("LGtE2zfk[ofkC8v^P/8", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = Attributes.checkNotNull("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("$y)", "%x>#Gpj5.wo7w'");
      assertNotNull(attribute0);
      assertEquals("$y)", attribute0.getKey());
      assertEquals("%x>#Gpj5.wo7w'", attribute0.getValue());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("$y)", attribute0.getKey());
      assertEquals("%x>#Gpj5.wo7w'", attribute0.getValue());
      assertEquals(1, attributes1.size());
      
      attributes0.keys = null;
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("FJn,", "J,xt] +'AhO=", attributes0);
      assertNotNull(attribute0);
      assertEquals(0, attributes0.size());
      assertEquals("FJn,", attribute0.getKey());
      assertEquals("J,xt] +'AhO=", attribute0.getValue());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("FJn,", attribute0.getKey());
      assertEquals("J,xt] +'AhO=", attribute0.getValue());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes0.put("n3jp;@U7@>M 4VeKg", "(*p| ");
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      
      String[] stringArray0 = new String[1];
      attributes1.vals = stringArray0;
      assertEquals(2, attributes0.size());
      assertEquals("FJn,", attribute0.getKey());
      assertEquals("J,xt] +'AhO=", attribute0.getValue());
      assertEquals(2, attributes1.size());
      
      // Undeclared exception!
//      try { 
        attributes1.toString();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("frameset", "frameset");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      attributes1.keys = null;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
//      try { 
        attributes0.removeIgnoreCase("data-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.removeIgnoreCase((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$Dataset$EntrySet", "XS}7P~;");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes0.put("XS}7P~;", "@/-^");
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      
      String[] stringArray0 = new String[1];
      attributes2.vals = stringArray0;
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      
      // Undeclared exception!
//      try { 
        attributes2.removeIgnoreCase("XS}7P~;");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      attributes0.putIgnoreCase("#Uye*?", "z");
      assertEquals(1, attributes0.size());
      
      attributes0.keys = null;
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.remove("org.jsoup.nodes.Attributes$1");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.remove((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("", "");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.remove(" =\"\"");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      attributes0.keys = null;
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.putIgnoreCase("D", "D");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.putIgnoreCase((String) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String[] stringArray0 = new String[6];
      attributes0.keys = stringArray0;
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.putIgnoreCase("org.jsoup.nodes.Attributes$1", "org.jsoup.nodes.Attributes$1");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("Unexpectedly reached end of file (EOF) in input state [%s]", true);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      attributes1.vals = null;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attribute attribute0 = new Attribute("Rsy?nuv|]k_$A)", "quirks", attributes1);
      assertNotNull(attribute0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("quirks", attribute0.getValue());
      assertEquals("Rsy?nuv|]k_$A)", attribute0.getKey());
      
      // Undeclared exception!
//      try { 
        attributes1.put(attribute0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.put((Attribute) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("D", "keygen");
      assertNotNull(attribute0);
      assertEquals("D", attribute0.getKey());
      assertEquals("keygen", attribute0.getValue());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("D", attribute0.getKey());
      assertEquals("keygen", attribute0.getValue());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("D", attribute0.getKey());
      assertEquals("keygen", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      attributes0.keys = attributes2.vals;
      assertEquals(1, attributes0.size());
      assertEquals("D", attribute0.getKey());
      assertEquals("keygen", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      // Undeclared exception!
//      try { 
        attributes0.put(attribute0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes", "org.jsoup.nodes.Attributes");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      attributes1.keys = null;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
//      try { 
        attributes1.put("org.jsoup.nodes.Attributes", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.put((String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String[] stringArray0 = new String[2];
      attributes0.keys = stringArray0;
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.put("v7l[`xyyjo&9}bv<a", true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      attributes0.keys = null;
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.put("org.jsoup.nodes.Attributes$1", "org.jsoup.nodes.Attributes$1");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.put((String) null, "[zKH=, )^diP");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String[] stringArray0 = new String[2];
      attributes0.keys = stringArray0;
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.put("zQ4pTR", "zQ4pTR");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("zCace<", "zCace<");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      attributes1.keys = null;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
//      try { 
        attributes1.normalize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("1<r$r8U](q+w", "1<r$r8U](q+w");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
//      try { 
        attributes0.normalize();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("$y)", "%x>#Gpj5.wo7w'");
      assertNotNull(attribute0);
      assertEquals("$y)", attribute0.getKey());
      assertEquals("%x>#Gpj5.wo7w'", attribute0.getValue());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("$y)", attribute0.getKey());
      assertEquals("%x>#Gpj5.wo7w'", attribute0.getValue());
      assertEquals(1, attributes1.size());
      
      attributes0.keys = null;
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.indexOfKey("$y)");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.indexOfKey((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("x#5s{", "'Z", attributes0);
      assertNotNull(attribute0);
      assertEquals(0, attributes0.size());
      assertEquals("'Z", attribute0.getValue());
      assertEquals("x#5s{", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("'Z", attribute0.getValue());
      assertEquals("x#5s{", attribute0.getKey());
      assertEquals(1, attributes1.size());
      
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals("'Z", attribute0.getValue());
      assertEquals("x#5s{", attribute0.getKey());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
//      try { 
        attributes0.indexOfKey("qURs|`");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("%H%5`Tzl3g", "%H%5`Tzl3g", attributes0);
      assertNotNull(attribute0);
      assertEquals(0, attributes0.size());
      assertEquals("%H%5`Tzl3g", attribute0.getKey());
      assertEquals("%H%5`Tzl3g", attribute0.getValue());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("%H%5`Tzl3g", attribute0.getKey());
      assertEquals("%H%5`Tzl3g", attribute0.getValue());
      assertEquals(1, attributes1.size());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      // Undeclared exception!
//      try { 
        attributes1.html((Appendable) charBuffer0, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("xhtml", "9#HT6d32?4AZ(Y");
      assertNotNull(attribute0);
      assertEquals("xhtml", attribute0.getKey());
      assertEquals("9#HT6d32?4AZ(Y", attribute0.getValue());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("xhtml", attribute0.getKey());
      assertEquals("9#HT6d32?4AZ(Y", attribute0.getValue());
      assertEquals(1, attributes1.size());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(6);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      // Undeclared exception!
//      try { 
        attributes0.html((Appendable) charBuffer0, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      attributes0.putIgnoreCase("5L3sp%}Sp76XzC:!", "sx nx<jd~Xewp22k");
      assertEquals(1, attributes0.size());
      
      StringWriter stringWriter0 = new StringWriter(2);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
//      try { 
        attributes0.html((Appendable) stringBuffer0, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      attributes0.putIgnoreCase("1.0", "xhtml");
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.put("DzT]Hc", "=\"");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      
      MockFile mockFile0 = new MockFile("DzT]Hc");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      String[] stringArray0 = new String[1];
      attributes1.vals = stringArray0;
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      
      // Undeclared exception!
//      try { 
        attributes1.html((Appendable) mockFileWriter0, document_OutputSettings0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$Dataset$EntrySet", "\"b9");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
//      try { 
        attributes0.html((Appendable) pipedWriter0, (Document.OutputSettings) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("#4%ycp)", "#4%ycp)", attributes0);
      assertNotNull(attribute0);
      assertEquals(0, attributes0.size());
      assertEquals("#4%ycp)", attribute0.getValue());
      assertEquals("#4%ycp)", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("#4%ycp)", attribute0.getValue());
      assertEquals("#4%ycp)", attribute0.getKey());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes0.clone();
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes2.size());
      
      attributes2.keys = null;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes2.size());
      
      // Undeclared exception!
//      try { 
        attributes2.html();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("FJn,", "J,xt] +'AhO=", attributes0);
      assertNotNull(attribute0);
      assertEquals(0, attributes0.size());
      assertEquals("J,xt] +'AhO=", attribute0.getValue());
      assertEquals("FJn,", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("J,xt] +'AhO=", attribute0.getValue());
      assertEquals("FJn,", attribute0.getKey());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes0.put("n3jp;@U7@>M 4VeKg", "(*p| ");
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      
      String[] stringArray0 = new String[1];
      attributes1.vals = stringArray0;
      assertEquals(2, attributes0.size());
      assertEquals("J,xt] +'AhO=", attribute0.getValue());
      assertEquals("FJn,", attribute0.getKey());
      assertEquals(2, attributes1.size());
      
      // Undeclared exception!
//      try { 
        attributes1.html();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes", "org.jsoup.nodes.Attributes");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      attributes1.keys = null;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
//      try { 
        attributes0.hasKeyIgnoreCase("org.jsoup.nodes.Document$OutputSettings");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.hasKeyIgnoreCase((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("1<r$r8U](q+w", "1<r$r8U](q+w");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
//      try { 
        attributes1.hasKeyIgnoreCase("org.jsoup.nodes.Attributes$Dataset$EntrySet");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("zcace<", "W?FPy`,F_HV~");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      attributes0.keys = null;
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.hasKey("zcace<");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.hasKey((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String[] stringArray0 = new String[0];
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", "W68 2.3`E");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      attributes0.keys = stringArray0;
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.hasKey("org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("=\"", "=\"");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      attributes2.vals = null;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      // Undeclared exception!
//      try { 
        attributes2.getIgnoreCase("=\"");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
//      try { 
        attributes0.getIgnoreCase((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("_(8g +xfo3ztb'{`n|", "_(8g +xfo3ztb'{`n|");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      String[] stringArray0 = new String[0];
      attributes2.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      // Undeclared exception!
//      try { 
        attributes2.getIgnoreCase("_(8g +xfo3ztb'{`n|");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("%", ",");
      attributes1.vals = null;
      // Undeclared exception!
//      try { 
        attributes1.get("%");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
//      try { 
        attributes0.get((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("p4JrX^V-Jl_ [,%", "p4JrX^V-Jl_ [,%");
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
//      try { 
        attributes1.get("m?7'I2");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(":b,lnx%&W", ":b,lnx%&W");
      attributes1.vals = null;
      // Undeclared exception!
//      try { 
        attributes1.clone();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("+pybdu=r.q\",ui22gc", true);
      attributes1.vals = null;
      // Undeclared exception!
//      try { 
        attributes0.asList();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("", "9.8YemU%mic5");
      // Undeclared exception!
//      try { 
        attributes0.asList();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("FJn,", "J,xt] +'AhO=", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes0.put("n3jp;@U7@>M 4VeKg", "(*p| ");
      String[] stringArray0 = new String[1];
      attributes1.vals = stringArray0;
      // Undeclared exception!
//      try { 
        attributes2.asList();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
//      try { 
        attributes0.addAll((Attributes) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("->a-z]ux}7*d2", false);
      Attributes attributes2 = attributes1.clone();
      String[] stringArray0 = new String[2];
      attributes1.keys = stringArray0;
      Attributes attributes3 = attributes2.put("_`[}dfd", "_`[}dfd");
      // Undeclared exception!
//      try { 
        attributes0.addAll(attributes3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" =\"\"");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attributes1.html((Appendable) mockPrintWriter0, document_OutputSettings0);
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.remove("VoAuo");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("-|.9O.W", "-|.9O.W");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.put("-|.9O.W", "=\"");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("=\"", (String) null);
      attributes0.put(attribute0);
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      int int0 = attributes0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Iterator<Attribute> iterator0 = attributes0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("1.0", "xhtml");
      Attributes attributes1 = attributes0.clone();
      boolean boolean0 = attributes0.equals(attributes1);
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "");
      Attributes attributes2 = attributes1.clone();
      attributes2.removeIgnoreCase("");
      attributes0.equals(attributes2);
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals(attributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("data-", true);
      MockFile mockFile0 = new MockFile("data-", "0<T]t(&");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      attributes1.html((Appendable) mockPrintStream0, document_OutputSettings0);
      assertEquals(1, attributes0.size());
      assertEquals(9L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("|F^0kL]t3*(:", (String) null);
      attributes0.html();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("=\"", true);
      attributes0.asList();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.addAll(attributes0);
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("a( *T+aLRNHV<Q}I:=", true);
      boolean boolean0 = attributes0.hasKeyIgnoreCase("a( *T+aLRNHV<Q}I:=");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKeyIgnoreCase("IO37NK5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("", "");
      boolean boolean0 = attributes0.hasKey("");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKey("Yf){f.|Yl\u0000&Hwt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.removeIgnoreCase("2#!^}t! la6.");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("pRG~f-!6FtAa{7pHW", "");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("", "");
      attributes2.remove("pRG~f-!6FtAa{7pHW");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("8e.&Gz", "org.jsoup.nodes.Attributes");
      attributes1.normalize();
      attributes1.putIgnoreCase("8e.&Gz", "vy@vrf=");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.getIgnoreCase("l|h");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.get("'Z");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("%", ",");
      String string0 = attributes1.get("%");
      assertEquals(1, attributes0.size());
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("", "");
      attributes0.putIgnoreCase("", "");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.helper.Validate", "to[llc8px{b", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("to[llc8px{b", "");
      Attributes attributes3 = attributes2.clone();
      Attributes attributes4 = attributes3.put("", false);
      attributes4.normalize();
      attributes2.addAll(attributes4);
      Attributes attributes5 = attributes2.clone();
      attributes1.addAll(attributes1);
      assertEquals(3, attributes0.size());
      assertFalse(attributes0.equals((Object)attributes5));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("pRG~f-!6FtAa{7pHW", "");
      attributes0.put(attribute0);
      Attributes attributes1 = attributes0.put("meta", true);
      Attributes attributes2 = attributes1.put("", "pRG~f-!6FtAa{7pHW");
      // Undeclared exception!
//      try { 
        attributes0.addAll(attributes2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      boolean boolean0 = attributes0.equals(attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hashCode();
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.dataset();
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.toString();
  }
}
