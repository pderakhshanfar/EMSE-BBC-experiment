/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 17:55:13 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.net.Proxy;
import java.time.Instant;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.ComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Week week0 = new Week();
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, " for that time period. Duplicates are not ", " for that time period. Duplicates are not ", class0);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(" for that time period. Duplicates are not ", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(" for that time period. Duplicates are not ", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      Vector<TimeSeriesDataItem> vector0 = new Vector<TimeSeriesDataItem>();
      timeSeries1.data = (List) vector0;
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1, timeSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Week week0 = new Week();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, class0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(1);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(1);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 1);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(0, 2157);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 1);
      timeSeries0.delete((RegularTimePeriod) week0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.setMaximumItemAge(1);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.setMaximumItemCount(1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.update((RegularTimePeriod) week0, (Number) 53);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Float float0 = new Float(282.84F);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) float0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, 908.554551);
      timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Year year0 = new Year();
      Week week1 = new Week(2110458067, year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Float float0 = new Float(282.84F);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) float0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, 908.554551);
      timeSeries0.getDataItem((RegularTimePeriod) week0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Year year0 = new Year();
      Week week1 = new Week(2110458066, year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries("TableOrder.BY_COLUMN", "TableOrder.BY_COLUMN", "Second", class0);
      timeSeries0.setRangeDescription("org.jfree.data.time.SimpleTimePeriod");
      assertEquals("org.jfree.data.time.SimpleTimePeriod", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "org.jfree.data.general.SeriesException", class0);
      assertEquals("", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription("org.jfree.data.general.SeriesException");
      assertEquals("org.jfree.data.general.SeriesException", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getEnd();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      Minute minute0 = new Minute(date0);
      timeSeries0.add((RegularTimePeriod) minute0, Double.POSITIVE_INFINITY);
      timeSeries0.update(0, (Number) 1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2755, 304, 2755, 2755, 2755);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Byte byte0 = new Byte((byte)0);
      TimeZone timeZone0 = TimeZone.getTimeZone("[V8S!");
      Day day0 = new Day(mockDate0, timeZone0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) byte0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-2147457193), year0);
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(year0, "Could not find separator.", "Could not find separator.", class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) bigInteger0);
      Number number0 = timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals("Could not find separator.", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(number0);
      assertEquals("Could not find separator.", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-2147457193), year0);
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(year0, "Could not find separator.", "Could not find separator.", class0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) bigInteger0);
      Number number0 = timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals("Could not find separator.", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(number0);
      assertEquals("Could not find separator.", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timeSeries0.getValue(0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Null 'item' argument.", "", class0);
      timeSeries0.getTimePeriodClass();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("Null 'item' argument.", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4), (-4), 35, (-2778), 121);
      Year year0 = new Year(mockDate0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      TimeSeries timeSeries0 = new TimeSeries(year0, "T`)x%$et6[^ $~", ">]S7W:n!k@SWg=%Z", class0);
      timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("T`)x%$et6[^ $~", timeSeries0.getDomainDescription());
      assertEquals(">]S7W:n!k@SWg=%Z", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Week week0 = new Week();
      Class<Integer> class0 = Integer.TYPE;
      TimeSeries timeSeries0 = new TimeSeries(week0, "0^uE_px\"0e+n160nI", "n:YJ$1fxB/!QHr", class0);
      timeSeries0.getTimePeriodClass();
      assertEquals("n:YJ$1fxB/!QHr", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("0^uE_px\"0e+n160nI", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 999);
      timeSeries0.getTimePeriod(0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", string0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Week week0 = new Week();
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, "", "", class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 0);
      timeSeries0.getNextTimePeriod();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(2, "", "", class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.getMaximumItemAge();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 999);
      timeSeries0.getIndex(millisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      int int0 = timeSeries0.getIndex(week0);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "", class0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", string0);
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getEnd();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      Minute minute0 = new Minute(date0);
      timeSeries0.add((RegularTimePeriod) minute0, Double.POSITIVE_INFINITY);
      timeSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getEnd();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      Minute minute0 = new Minute(date0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      timeSeries0.setMaximumItemCount(0);
      Day day0 = new Day();
      timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      Minute minute0 = new Minute();
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(305, 1467);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Minute minute0 = new Minute();
      Short short0 = new Short((short)580);
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(short0, "YAgxU)C%Z&&j:", "", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, 933.969883697);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("YAgxU)C%Z&&j:", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getEnd();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      Minute minute0 = new Minute(date0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.update((RegularTimePeriod) millisecond0, (Number) 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.update(1, (Number) 53);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries(date0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.update((-2145895271), (Number) 59);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemCount(2779);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemAge(1677L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Week week0 = new Week();
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, class0);
      ArrayList<TimeSeriesDataItem> arrayList0 = new ArrayList<TimeSeriesDataItem>();
      timeSeries0.data = (List) arrayList0;
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      arrayList0.add((TimeSeriesDataItem) null);
      // Undeclared exception!
//      try { 
        timeSeries0.removeAgedItems(false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries("Second", "", "v@`M", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.removeAgedItems((long) 1217, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.hashCode();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getValue((RegularTimePeriod) week0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Week week0 = new Week(2107715432, 5529);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
//      try { 
        timeSeries0.getValue((-626));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(1, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 53);
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Year constructor: year (53) outside valid range.
//         //
//         verifyException("org.jfree.data.time.Year", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockDate mockDate0 = new MockDate(181L);
      Hour hour0 = new Hour(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriods();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriod((-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriod((-2002));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getNextTimePeriod();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", ".", class0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getItems();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getItemCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem((RegularTimePeriod) millisecond0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Second second0 = new Second();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "", class0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      timeSeries0.data = (List) linkedList0;
      linkedList0.add((Integer) second0.LAST_SECOND_IN_MINUTE);
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem((RegularTimePeriod) second0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimeSeriesDataItem cannot be cast to java.lang.Integer
//         //
//         verifyException("java.lang.Integer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem((-702));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(999, 999);
      timeSeries1.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.equals(timeSeries1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.delete((RegularTimePeriod) week0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries(integer0, class0);
      List list0 = timeSeries0.getItems();
      timeSeries0.data = list0;
      // Undeclared exception!
//      try { 
        timeSeries0.delete(100, 325);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.delete((-285), (-285));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Minute> class0 = Minute.class;
      Short short0 = new Short((short)0);
      TimeSeries timeSeries0 = new TimeSeries(short0, "", "", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete((-898), 880);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      stack0.add(xYDatasetTableModel0);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(1, Integer.MAX_VALUE);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.clone();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'collection' argument.
//         //
//         verifyException("org.jfree.chart.util.ObjectUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Week week0 = new Week();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, class0);
      Vector<FixedMillisecond> vector0 = new Vector<FixedMillisecond>();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2763L));
      vector0.add(fixedMillisecond0);
      timeSeries0.data = (List) vector0;
//      try { 
        timeSeries0.clone();
//        fail("Expecting exception: CloneNotSupportedException");
      
//      } catch(CloneNotSupportedException e) {
//         //
//         // Failed to clone.
//         //
//         verifyException("org.jfree.chart.util.ObjectUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.clear();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Vector<Day> vector0 = new Vector<Day>();
      JComboBox<Day> jComboBox0 = new JComboBox<Day>(vector0);
      ComboBoxModel<Day> comboBoxModel0 = jComboBox0.getModel();
      JList<Day> jList0 = new JList<Day>(comboBoxModel0);
      List<Day> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Week week0 = new Week();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, class0);
      Vector<FixedMillisecond> vector0 = new Vector<FixedMillisecond>();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2763L));
      vector0.add(fixedMillisecond0);
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "Fri Feb 14 20:21:21 GMT 2014", "K5c*x(*yNvCAj{", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (-2800.07968));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "X-value already exists.", "Null 'start' argument.", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(1, 1);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 1);
      // Undeclared exception!
//      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Year constructor: year (1) outside valid range.
//         //
//         verifyException("org.jfree.data.time.Year", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, (Class) null);
      Minute minute0 = new Minute();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 0);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 59);
      MockDate mockDate0 = new MockDate(274, 59, 2772);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of java.net.Proxy$Type.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, (Class) null);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, 0.0);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'item' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0, false);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0, (Class) null);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries("", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-702L));
      Month month0 = new Month(mockDate0);
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(month0, (String) null, "", class0);
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) month0, (Number) byte0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of java.lang.Integer.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0, (Class) null);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 53);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getEnd();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      Minute minute0 = new Minute(date0);
      timeSeries0.add((RegularTimePeriod) minute0, Double.POSITIVE_INFINITY);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) minute0, 0.0, false);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 999, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      MockDate mockDate0 = new MockDate(0, 999, 999, 999, 0, 0);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, (Class) null);
      Minute minute0 = new Minute(mockDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (double) 59);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(0, "", "(|_VO0", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      Vector<TimeSeries> vector0 = new Vector<TimeSeries>();
      timeSeries0.data = (List) vector0;
      Minute minute0 = new Minute();
      vector0.add(timeSeries0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (double) 59);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = null;
//      try {
        timeSeries0 = new TimeSeries((Comparable) null, "", "org.jfree.data.jdbc.JDBCCategoryDataset", class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries0 = null;
//      try {
        timeSeries0 = new TimeSeries((Comparable) null, class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      Day day0 = new Day();
      Short short0 = new Short((short) (-1885));
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) short0);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.delete((-3075), Integer.MAX_VALUE);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries("", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete(1985, 1985);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1985, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.removeAgedItems(false);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries("", class0);
      timeSeries0.removeAgedItems(true);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      Minute minute0 = new Minute();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 0);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      Minute minute0 = new Minute();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 59);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-702L));
      Month month0 = new Month(mockDate0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(month0, class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (-2.147483648E9));
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, (String) null, (String) null, class0);
      timeSeries0.getIndex(millisecond0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Week week0 = new Week();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, class0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(2, "", "", class0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, long0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, (String) null, (String) null, class0);
      String string0 = timeSeries0.getRangeDescription();
      assertNull(string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriod(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Short short0 = new Short((short) (-2));
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(short0, "", "", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem(999);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 999, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Week week0 = new Week((-1800), (-1800));
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, "", "Range", class0);
      timeSeries0.getItemCount();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Range", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 1);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 1);
      timeSeries0.hashCode();
      assertEquals(3, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.hashCode();
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0, (Class) null);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, (String) null, (String) null, class0);
      timeSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      timeSeries1.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertTrue(boolean0);
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (-449.2750388871604));
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
      timeSeries1.setMaximumItemCount(53);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(53, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.setMaximumItemAge(999);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(999L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.setRangeDescription("0mH*KOV?)NX4");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("0mH*KOV?)NX4", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries1 = new TimeSeries(week0, "java.util.Date", "gg_,?CHc@e?I", class0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("java.util.Date", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getEnd();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      SerialDate serialDate0 = SerialDate.createInstance(date0);
      TimeSeries timeSeries1 = new TimeSeries(serialDate0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries("", class0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      boolean boolean0 = timeSeries0.equals(integer0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      MockDate mockDate0 = new MockDate((-363), 87, 1);
      Class<Integer> class0 = Integer.class;
      Short short0 = new Short((short)0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "B^2QT(#zz", "", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) short0);
      timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) week0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-459L));
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Week week0 = new Week(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "Null 'date' argument.", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) week0, regularTimePeriod0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start on or before end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'end' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Range");
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'start' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(2, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start <= end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((-103), 1710);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start >= 0.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries("=[Ard;P{,kl1D", "#,P$=9V-ykaqA", "!@Ga$", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete(999, (-2208));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start <= end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.delete((RegularTimePeriod) week0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.delete((RegularTimePeriod) millisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.clear();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Week week0 = new Week();
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(1);
      MockDate mockDate0 = new MockDate(0, 266, 1);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(1, minute0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.removeAgedItems((long) 266, true);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Week week0 = new Week();
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(1);
      MockDate mockDate0 = new MockDate(0, 266, 1);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(1, minute0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.removeAgedItems((long) 266, false);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 999);
      timeSeries0.removeAgedItems((long) 999, false);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.removeAgedItems((-3722L), true);
      timeSeries0.removeAgedItems((long) 1, true);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Year year0 = new Year();
      Week week1 = new Week((-819), year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.setMaximumItemAge(1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Year year0 = new Year();
      Week week1 = new Week((-819), year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.setMaximumItemAge(1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Short short0 = new Short((short)0);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) short0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getEnd();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 999);
      Class<TimeSeries> class1 = TimeSeries.class;
      TimeSeries timeSeries1 = new TimeSeries(date0, class1);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 999);
      // Undeclared exception!
//      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) week0, (Number) 53);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Week week0 = new Week();
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries("Second", "", "v@`M", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.update((RegularTimePeriod) week0, (Number) 1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // TimeSeries.update(TimePeriod, Number):  period does not exist.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries(year0, "_-+F", "_-+F", class0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) null);
      timeSeries0.add((RegularTimePeriod) year0, (double) (-2924), true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Day day0 = new Day();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "", class0);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.add(regularTimePeriod0, (double) 1);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      Minute minute0 = new Minute();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 0);
      timeSeries0.add(timeSeriesDataItem0);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'item' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries("y{%v1rf-6eDTM;TYO", class0);
      timeSeries0.getValue((RegularTimePeriod) minute0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
//      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      TimeSeries timeSeries1 = new TimeSeries("");
      timeSeries1.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add((Integer) 999);
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ArrayList<String> arrayList0 = new ArrayList<String>(set0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriods();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1.0);
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, "", "", class0);
      timeSeries0.getTimePeriods();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, 908.554551);
      timeSeries0.getDataItem((RegularTimePeriod) week0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.getDataItem((RegularTimePeriod) millisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      Week week0 = new Week(date0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, " for that time period. Duplicates are not ", " for that time period. Duplicates are not ", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemAge((-1351L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative 'periods' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy(0, 999);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries("", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemCount((-1818));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative 'maximum' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(3811.287315026, 3811.287315026);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      TimeSeries timeSeries1 = null;
//      try {
        timeSeries1 = new TimeSeries((Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 23);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1);
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(552, hour0);
      Second second0 = new Second(1, minute0);
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) second0, 2.0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "org.jfree.data.general.DefaultKeyedValuesDataset", "org.jfree.data.general.DefaultKeyedValuesDataset", class0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, (Class) null);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, 0.0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.getValue(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
//      try { 
        timeSeries0.getNextTimePeriod();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0, (Class) null);
      timeSeries0.getTimePeriodClass();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
//      try { 
        timeSeries0.update(1, (Number) 53);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription((String) null);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }
}
