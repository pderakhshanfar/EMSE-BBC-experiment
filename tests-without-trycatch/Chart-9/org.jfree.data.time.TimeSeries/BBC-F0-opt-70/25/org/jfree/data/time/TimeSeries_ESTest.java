/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 23:32:49 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.text.AttributedCharacterIterator;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DropMode;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Year year0 = new Year();
      Month month0 = new Month(2, year0);
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(month0, "permitted.  Try using the addOrUpdate() method.", "permitted.  Try using the addOrUpdate() method.", class0);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("permitted.  Try using the addOrUpdate() method.", timeSeries0.getDomainDescription());
      assertEquals("permitted.  Try using the addOrUpdate() method.", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      timeSeries1.addOrUpdate((RegularTimePeriod) millisecond0, 4719.26163985566);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      timeSeries1.setMaximumItemCount(0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(0, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      timeSeries1.setMaximumItemAge(59);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(59L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Day day0 = new Day(mockDate0);
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0, true);
      timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 0);
      timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) minute0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      Quarter quarter0 = new Quarter();
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      Quarter quarter1 = new Quarter(1, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (Number) 1);
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      timeSeries0.setMaximumItemCount(1);
      Week week0 = new Week();
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 53);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      Quarter quarter0 = new Quarter();
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      Quarter quarter1 = new Quarter(1, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (Number) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, 0.0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      timeSeries0.update((RegularTimePeriod) quarter0, (Number) 4);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      timeSeries0.getValue((RegularTimePeriod) quarter0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<Integer> class0 = Integer.TYPE;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      Quarter quarter0 = new Quarter();
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      Quarter quarter1 = new Quarter(4, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (Number) 4);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Quarter quarter1 = new Quarter(1, 4);
      Quarter quarter2 = new Quarter();
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter2, 3601.724909);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (double) 0L);
      timeSeries0.getDataItem((RegularTimePeriod) quarter0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 59);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.add(regularTimePeriod0, (Number) 59);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<Integer> class0 = Integer.TYPE;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      Quarter quarter0 = new Quarter();
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      Quarter quarter1 = new Quarter(4, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (Number) 1);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries("?qx~.3G+Q#m=yN3m1C", "x-T3]G=S\"n<[Q39M7<|", "?qx~.3G+Q#m=yN3m1C", class0);
      timeSeries0.setRangeDescription("Null 'start' argument.");
      assertEquals("Null 'start' argument.", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries("?qx~.3G+Q#m=yN3m1C", "-T3]G=S\"n<[Q39M7<|", "?qx~.3G+Q#m=yN3m1C", class0);
      assertEquals("-T3]G=S\"n<[Q39M7<|", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription((String) null);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("?qx~.3G+Q#m=yN3m1C", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute(mockDate0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, "", "", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, 2670.04109605308);
      Number number0 = timeSeries0.getValue(0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2670.04109605308, number0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(0, hour0);
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, 3226.677215901);
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(222, hour0);
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, "t=:%X#2`e!n<ew{", "t=:%X#2`e!n<ew{", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 59);
      timeSeries0.update(0, (Number) 23);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("t=:%X#2`e!n<ew{", timeSeries0.getDomainDescription());
      assertEquals("t=:%X#2`e!n<ew{", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(0, hour0);
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.add((RegularTimePeriod) minute0, (-5135.6));
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<Integer> class0 = Integer.TYPE;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<List> class0 = List.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      timeSeries0.getTimePeriodClass();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<DropMode> class0 = DropMode.class;
      TimeSeries timeSeries0 = new TimeSeries(quarter0, (String) null, "82l9>m9C", class0);
      timeSeries0.getTimePeriodClass();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("82l9>m9C", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(222, hour0);
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (-372.4406));
      timeSeries0.getTimePeriod(0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, (String) null, class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("Value", string0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate(255, 696, 255, 3, 696);
      TimeZone timeZone0 = TimeZone.getDefault();
      Year year0 = new Year(mockDate0, timeZone0);
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "]zE03BS8^|Nj061l[", "", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 3);
      timeSeries0.getNextTimePeriod();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("]zE03BS8^|Nj061l[", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.getMaximumItemAge();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, (String) null, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
      timeSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Minute minute0 = new Minute(mockDate0);
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "DefaultIntervalCategoryDataset.getValue(): series index out of range.");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 29.056144586749518);
      timeSeries0.getIndex(year0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      int int0 = timeSeries0.getIndex(quarter0);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1), 1, 4, (-305), (-1));
      TimeSeries timeSeries0 = new TimeSeries(mockGregorianCalendar0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription((String) null);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 4218, 3389, (-1), 1315, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", string0);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      Minute minute0 = new Minute();
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 0);
      timeSeries0.getDataItem(0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries("?qx~.3G+Q#m=yN3m1C", "x-T3]G=S\"n<[Q39M7<|", "?qx~.3G+Q#m=yN3m1C", class0);
      timeSeries0.setMaximumItemCount(0);
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) minute0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      TimeSeries timeSeries1 = timeSeries0.createCopy(59, 59);
      assertNotSame(timeSeries0, timeSeries1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Day day0 = new Day();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "eoDxlmcm_~=d5o,SI", "eoDxlmcm_~=d5o,SI", class0);
      timeSeries0.data = null;
      Float float0 = new Float(1848.0);
      // Undeclared exception!
//      try { 
        timeSeries0.update((RegularTimePeriod) day0, (Number) float0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Day day0 = new Day();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "eoDxlmcm_~=d5o,SI", "Requires start >= 0.", class0);
      timeSeries0.data = null;
      Byte byte0 = new Byte((byte) (-39));
      // Undeclared exception!
//      try { 
        timeSeries0.update(30, (Number) byte0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 4218, 3389, (-1), 1315, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
//      try { 
        timeSeries0.update((-729), (Number) 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemAge(60L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.removeAgedItems(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, (String) null, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.removeAgedItems(738L, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.hashCode();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Day day0 = new Day();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "eoDxlmcm_~=d5o,SI", "eoDxlmcm_~=d5o,SI", class0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getValue((RegularTimePeriod) day0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute(mockDate0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, "", "", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.getValue((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(3);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriods();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Day day0 = new Day();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "eoDxlmcm_~=d5o,SI", "Requires start >= 0.", class0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriod((-277));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(222, hour0);
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriod(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Day day0 = new Day();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "eoDxlmcm_~=d5o,SI", "Requires start >= 0.", class0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getNextTimePeriod();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      LinkedList<AttributedCharacterIterator.Attribute> linkedList0 = new LinkedList<AttributedCharacterIterator.Attribute>();
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
//      try { 
        timeSeries0.getNextTimePeriod();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: -1, Size: 0
//         //
//         verifyException("java.util.LinkedList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      LinkedList<AttributedCharacterIterator.Attribute> linkedList0 = new LinkedList<AttributedCharacterIterator.Attribute>();
      timeSeries0.data = (List) linkedList0;
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.READING;
      linkedList0.add(0, attributedCharacterIterator_Attribute0);
      // Undeclared exception!
//      try { 
        timeSeries0.getNextTimePeriod();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.text.AttributedCharacterIterator$Attribute cannot be cast to org.jfree.data.time.TimeSeriesDataItem
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getItems();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getItemCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Day day0 = new Day();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "eoDxlmcm_~=d5o,SI", "eoDxlmcm_~=d5o,SI", class0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getIndex(day0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem((RegularTimePeriod) hour0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3975.0), 1.0, false, false);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries("?qx~.3G+Q#m=yN3m1C", "x-T3]G=S\"n<[Q39M7<|", "?qx~.3G+Q#m=yN3m1C", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem((-1268));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      ArrayList<Day> arrayList0 = new ArrayList<Day>();
      timeSeries0.data = (List) arrayList0;
      arrayList0.add((Day) null);
      // Undeclared exception!
//      try { 
        timeSeries0.delete((RegularTimePeriod) quarter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute(mockDate0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, "", "", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Day day0 = new Day();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "eoDxlmcm_~=d5o,SI", "eoDxlmcm_~=d5o,SI", class0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.delete(30, 30);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "+ckN/nYEXV%O", "+ckN/nYEXV%O", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete((-3937), 60);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      LinkedList<AttributedCharacterIterator.Attribute> linkedList0 = new LinkedList<AttributedCharacterIterator.Attribute>();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      linkedList0.add(attributedCharacterIterator_Attribute0);
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(1, 1743);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(222, hour0);
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (-372.4406));
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(0, Integer.MAX_VALUE);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      LinkedList<Quarter> linkedList0 = new LinkedList<Quarter>();
      Date date0 = minute0.getStart();
      Quarter quarter0 = new Quarter(date0);
      linkedList0.offerFirst(quarter0);
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(0, 59);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.Quarter cannot be cast to org.jfree.data.time.TimeSeriesDataItem
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.clone();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'collection' argument.
//         //
//         verifyException("org.jfree.chart.util.ObjectUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Month month0 = new Month();
      Class<Locale> class0 = Locale.class;
      TimeSeries timeSeries0 = new TimeSeries(month0, "&h", "Y)W<A", class0);
      ArrayList<Millisecond> arrayList0 = new ArrayList<Millisecond>();
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond((-3504), second0);
      arrayList0.add(millisecond0);
      timeSeries0.data = (List) arrayList0;
//      try { 
        timeSeries0.clone();
//        fail("Expecting exception: CloneNotSupportedException");
      
//      } catch(CloneNotSupportedException e) {
//         //
//         // Failed to clone.
//         //
//         verifyException("org.jfree.chart.util.ObjectUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.clear();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.setSize(1);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Stack<Minute> stack0 = new Stack<Minute>();
      DefaultComboBoxModel<Minute> defaultComboBoxModel0 = new DefaultComboBoxModel<Minute>(stack0);
      JList<Minute> jList0 = new JList<Minute>(defaultComboBoxModel0);
      List<Minute> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries("", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Minute minute0 = new Minute();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(quarter0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) (-1L));
      // Undeclared exception!
//      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of java.lang.Integer.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute(mockDate0);
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) 1392409281320L);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0, false);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.TimeSeries.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(28, minute0);
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "aoi<C+qg['tDLFR?_DY", "aoi<C+qg['tDLFR?_DY", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 59, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 999);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries(quarter0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) year0, 0.0, true);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, (Class) null);
      Quarter quarter0 = new Quarter();
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (-242.66863769546), true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, (Class) null);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3975.0), 1.0, false, false);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) null, 1.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = null;
//      try {
        timeSeries0 = new TimeSeries((Comparable) null, "", "", class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = null;
//      try {
        timeSeries0 = new TimeSeries((Comparable) null, class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TimeSeries timeSeries0 = null;
//      try {
        timeSeries0 = new TimeSeries((Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.general.Series", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy(2, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start <= end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      timeSeries0.delete((-2164), Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Day day0 = new Day();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "eoDxlmcm_~=d5o,SI", "eoDxlmcm_~=d5o,SI", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete(30, 30);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 30, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      Quarter quarter0 = new Quarter();
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      Quarter quarter1 = new Quarter(1, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (Number) 1);
      timeSeries0.removeAgedItems(true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      timeSeries0.removeAgedItems(true);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      Week week0 = new Week();
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 23);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, 0.0);
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      timeSeries0.add(regularTimePeriod0, (Number) 59);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3975.0), 1.0, false, false);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, class0);
      MockDate mockDate0 = new MockDate(44, 3135, 3135);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Year year0 = new Year(mockDate0, zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-1202.410688762));
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-1079.994588));
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'item' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.getIndex(minute0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(23, hour0);
      Class<Minute> class0 = Minute.class;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 59);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0, "", "", class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.getValue(59);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 59, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Day day0 = new Day();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "eoDxlmcm_~=d5o,SI", "FF", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.getTimePeriod((-277));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "", "", class0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
//      try { 
        timeSeries0.getDataItem(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      timeSeries0.hashCode();
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, (Class) null);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, (String) null, class0);
      timeSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Minute minute0 = new Minute(mockDate0);
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 59);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertTrue(boolean0);
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries(quarter0, class0);
      TimeSeries timeSeries1 = new TimeSeries(quarter0, class0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      timeSeries1.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (double) 4);
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1, timeSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.setMaximumItemCount(59);
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(59, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 23);
      timeSeries1.setRangeDescription("I9T68T");
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals("I9T68T", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries("?qx~.3G+Q#m=yN3m1C", "x-T3]G=S\"n<[Q39M7<|", "?qx~.3G+Q#m=yN3m1C", class0);
      Hour hour0 = new Hour();
      Class<Month> class1 = Month.class;
      TimeSeries timeSeries1 = new TimeSeries(hour0, class1);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("?qx~.3G+Q#m=yN3m1C", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals("x-T3]G=S\"n<[Q39M7<|", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<TimeSeries> class0 = TimeSeries.class;
      XYDataItem xYDataItem0 = new XYDataItem(2.0, 0.0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "?qx~.3G+Q#m=yN3m1C", "[VUab6TSkwVu", class0);
      boolean boolean0 = timeSeries0.equals(class0);
      assertEquals("?qx~.3G+Q#m=yN3m1C", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("[VUab6TSkwVu", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(222, hour0);
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Year year0 = new Year();
      Month month0 = new Month(2, year0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "permitted.  Try using the addOrUpdate() method.", "permitted.  Try using the addOrUpdate() method.", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, 1.0);
      timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) month0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1.0, false, false);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, class0);
      MockDate mockDate0 = new MockDate(44, 1600, 44, 44, (-438));
      Millisecond millisecond0 = new Millisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = millisecond0.next();
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, regularTimePeriod0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start on or before end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Minute minute0 = new Minute();
      Date date0 = minute0.getStart();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(date0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'end' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'start' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start <= end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1.0, false, false);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0);
      // Undeclared exception!
//      try { 
        timeSeries0.createCopy((-1824), 904);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start >= 0.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
//      try { 
        timeSeries0.delete(4, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires start <= end.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
      timeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries(quarter0, class0);
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3975.0), 1.0, false, false);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, class0);
      MockDate mockDate0 = new MockDate(44, 44, 44, 44, (-438));
      Millisecond millisecond0 = new Millisecond(mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.clear();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(24L);
      timeSeries0.removeAgedItems((long) 1, false);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(24L);
      timeSeries0.removeAgedItems((long) 1, true);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      timeSeries0.removeAgedItems((long) 1, true);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.removeAgedItems(4L, false);
      timeSeries0.removeAgedItems(1729L, true);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Quarter quarter1 = new Quarter(1, 2692);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (double) (-1893));
      timeSeries0.setMaximumItemAge(2239);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1274);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 59);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.add(regularTimePeriod0, (Number) 0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.setMaximumItemAge(0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(0, hour0);
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.setMaximumItemCount(0);
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) bigInteger0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      MockDate mockDate0 = new MockDate((-1L));
      Minute minute0 = new Minute();
      Instant instant0 = mockDate0.toInstant();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(quarter0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) (-1L));
      TimeSeries timeSeries1 = new TimeSeries(instant0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 59);
      assertNull(timeSeriesDataItem0);
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<Integer> class0 = Integer.TYPE;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      Quarter quarter0 = new Quarter();
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) quarter0, (Number) 4);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
//      try { 
        timeSeries0.update((RegularTimePeriod) hour0, (Number) 0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // TimeSeries.update(TimePeriod, Number):  period does not exist.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, class0);
      timeSeries0.add(regularTimePeriod0, (Number) 1);
      timeSeries0.add((RegularTimePeriod) quarter0, 0.0, true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 59);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 23);
      // Undeclared exception!
//      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries(quarter0, class0);
      Stack<RegularTimePeriod> stack0 = new Stack<RegularTimePeriod>();
      stack0.add((RegularTimePeriod) quarter0);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.Quarter cannot be cast to org.jfree.data.time.TimeSeriesDataItem
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries("?qx~.3G+Q#m=yN3m1C", "?qx~.3G+Q#m=yN3m1C", "x-T3]G=S\"n<[Q39M7<|", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'item' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries(quarter0, class0);
      timeSeries0.getValue((RegularTimePeriod) quarter0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
//      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      Class<List> class0 = List.class;
      TimeSeries timeSeries1 = new TimeSeries(minute0, class0);
      timeSeries1.addOrUpdate((RegularTimePeriod) minute0, (double) 0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockDate mockDate0 = new MockDate(255, 696, 255, 3, 696);
      TimeZone timeZone0 = TimeZone.getDefault();
      Year year0 = new Year(mockDate0, timeZone0);
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "]zE03BS8^|Nj061l[", "", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 3);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(222, hour0);
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (-372.4406));
      timeSeries0.getDataItem((RegularTimePeriod) minute0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      timeSeries0.getDataItem((RegularTimePeriod) hour0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(222, hour0);
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemAge((-1441L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative 'periods' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute(mockDate0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, "", "", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.setMaximumItemCount((-2261));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative 'maximum' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, (Class) null);
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
      Quarter quarter0 = new Quarter();
      // Undeclared exception!
//      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of java.lang.Integer.
//         //
//         verifyException("org.jfree.data.time.TimeSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      timeSeries0.getValue((RegularTimePeriod) quarter0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
//      try { 
        timeSeries0.getNextTimePeriod();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, (Class) null);
      timeSeries0.getItems();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(222, hour0);
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, "t=:%X#2`e!n<ew{", "t=:%X#2`e!n<ew{", class0);
      // Undeclared exception!
//      try { 
        timeSeries0.update(0, (Number) 23);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Class<java.awt.List> class0 = java.awt.List.class;
      TimeSeries timeSeries1 = new TimeSeries(quarter0, "org.jfree.data.time.Day", "';vt/YyF", class0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("org.jfree.data.time.Day", timeSeries1.getDomainDescription());
      assertFalse(boolean0);
      assertEquals("';vt/YyF", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }
}
