/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 03:23:56 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xArray cannot be empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xfOw>o/,)}@Bul");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x90`^}W8KQw\"M!K h!Fm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-55), (byte) (-72), (byte) (-72));
      assertEquals((byte) (-55), byte0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = NumberUtils.max((short) (byte)33, (short) (byte)33, (short) (byte)33);
      assertEquals((short)33, short0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = NumberUtils.max((long) (short) (-1269), (long) (short) (-1269), (long) (short) (-1269));
      assertEquals((-1269L), long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = NumberUtils.max((-1L), (-1L), 614L);
      assertEquals(614L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-128), (byte)120, (byte) (-1));
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = NumberUtils.min((short)0, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = NumberUtils.min((-732), 32, 32);
      assertEquals((-732), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = NumberUtils.min(224L, 224L, 224L);
      assertEquals(224L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1439);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("Bb$e5");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short short0 = NumberUtils.toShort("-0", (short) (byte) (-101));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short short0 = NumberUtils.toShort("4");
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = NumberUtils.toLong("", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = NumberUtils.toLong("'?$%/[/PILX@");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = NumberUtils.toLong("4");
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = NumberUtils.toInt("(!F", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = NumberUtils.toInt("", 65);
      assertEquals(65, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = NumberUtils.toInt("4");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float float0 = NumberUtils.toFloat("RE~Oyl8^RtO@r%*u3-/", 1044.8F);
      assertEquals(1044.8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float float0 = NumberUtils.toFloat("4");
      assertEquals(4.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-0X");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-05");
      assertEquals((-5.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("cqRuO!TY/ >", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("|!|xRMG'", (byte)28);
      assertEquals((byte)28, byte0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("4");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)48;
      shortArray0[1] = (short)48;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short)48;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)48, short0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 865L;
      longArray0[1] = 613L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(613L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3846;
      intArray0[1] = 1438;
      intArray0[2] = 46;
      intArray0[3] = 8;
      intArray0[4] = 57;
      intArray0[5] = 655;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[3] = (int) (short) (-335);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-335), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)3;
      floatArray0[1] = (float) (byte)3;
      floatArray0[2] = (float) (byte)32;
      floatArray0[3] = (float) (byte)3;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(3.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 2357.0F;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 2357.0F;
      doubleArray0[4] = (double) 2357.0F;
      doubleArray0[5] = (double) 2357.0F;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) 203.0F;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)3, byte0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short short0 = NumberUtils.min((short) (byte)75, (short) (byte)75, (short)1875);
      assertEquals((short)75, short0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = NumberUtils.min(1L, 75L, 75L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = NumberUtils.min((int) (short)557, (-2984), 76);
      assertEquals((-2984), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float float0 = NumberUtils.min((-1.0F), (float) (short)69, (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = NumberUtils.min(1709.1029989255917, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = NumberUtils.min((-389.37577592785), 0.0, (-1066.049606));
      assertEquals((-1066.049606), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)51);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)32, (byte)32, (byte)3);
      assertEquals((byte)3, byte0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-104);
      shortArray0[1] = (short) (byte) (-104);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-104), short0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = 1956L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1956L, long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-443);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-443L), long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-536);
      intArray0[1] = (-732);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-536), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2357.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(2357.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-536);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-536.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-117);
      doubleArray0[1] = (double) (byte) (-117);
      doubleArray0[2] = (double) (byte) (-117);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-117.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)70, byte0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte) (-117);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-117), byte0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short) (-1399), (short) (-1399));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-2054), (short) (-1445), (short) (-2054));
      assertEquals((short) (-1445), short0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = NumberUtils.max((long) (short)0, (long) (-2984), (long) (-2984));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = NumberUtils.max((-1984L), (-1688L), (-1984L));
      assertEquals((-1688L), long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = NumberUtils.max(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = NumberUtils.max((-2101479493), (-3403), (-39));
      assertEquals((-39), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = NumberUtils.max((-387.32F), 0.0F, (-1.0F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float float0 = NumberUtils.max((float) (byte) (-89), (float) (byte) (-89), (float) (byte) (-89));
      assertEquals((-89.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = NumberUtils.max((double) (byte) (-128), (-1.0), (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = NumberUtils.max((double) (-2984), (double) (-2984), (double) (-2984));
      assertEquals((-2984.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("08");
      assertEquals((short)8, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-09");
      assertEquals((short) (-9), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0x1e");
      assertEquals((-30L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("4");
      assertEquals(4, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-0");
      assertEquals(-0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-09");
      assertEquals((-9.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("4");
      assertEquals(4.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-09");
      assertEquals((-9.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-09");
      assertEquals((short) (-9), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("5e5");
      assertEquals((short) (-24288), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("06e5");
      assertEquals((short)10176, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createNumber("l");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createLong("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length string
//         //
//         verifyException("java.lang.Long", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createInteger("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length string
//         //
//         verifyException("java.lang.Integer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createFloat("0e0l");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigInteger("06e5");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"6e5\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigDecimal("u8F");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("-0x1e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("4");
      assertEquals((short)4, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Long long0 = NumberUtils.createLong("4");
      assertEquals(4L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0x1e");
      assertEquals((-30), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createDouble("J");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("2");
      assertEquals(2.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)48);
      assertEquals((short)48, short0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "++B9<5.\\u.";
      short short0 = NumberUtils.toShort(string0, (short) (-8777));
      assertEquals((short) (-8777), short0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("", (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte) (-89));
      assertEquals((byte) (-89), byte0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (float) (byte) (-57));
      assertEquals((-57.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float float0 = NumberUtils.toFloat("iK3d-HHhCxjt~r :_)", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = NumberUtils.toLong(".$DCZ*k[gWD&", (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = NumberUtils.toInt(";HT}`ox", (-2984));
      assertEquals((-2984), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0e0l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0eg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0e.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("---0rx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "++B9<5.\\u.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("Ec~vy");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0ytx^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".2l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xaFCr%U4cTGSe=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x-0X-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x1e");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0e5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("2.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-3), (byte) (-3), (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-111), (byte) (-104), (byte) (-104));
      assertEquals((byte) (-104), byte0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)33, (byte)33, (byte)33);
      assertEquals((byte)33, byte0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-443), (short) (-443), (short)3);
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = NumberUtils.max((int) (byte)98, 0, 4877);
      assertEquals(4877, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = NumberUtils.max(0, (int) (byte)98, 0);
      assertEquals(98, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)120, (byte) (-101), (byte)120);
      assertEquals((byte) (-101), byte0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-117), (byte) (-117), (byte) (-117));
      assertEquals((byte) (-117), byte0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short short0 = NumberUtils.min((short)1379, (short) (-1636), (short)293);
      assertEquals((short) (-1636), short0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      short short0 = NumberUtils.min((short)45, (short)1638, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = NumberUtils.min(108, 102, 102);
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = NumberUtils.min(76, 76, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = NumberUtils.min((-1L), 2371L, (-272L));
      assertEquals((-272L), long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = NumberUtils.min(0L, (-1302L), (long) (byte)75);
      assertEquals((-1302L), long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = NumberUtils.min((long) 0, (long) 0, 2466L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-537L);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(floatArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((float[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = 287.378227629873;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(287.378227629873, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) Float.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((byte[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[3] = (short)69;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)69, short0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((short[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(shortArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 45;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(intArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((int[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-537L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
//      try { 
        NumberUtils.max(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.max((long[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-829.4813F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-829.4813F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[6] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(floatArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((float[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (-1680.783F);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1680.782958984375), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) Float.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-124);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-124), byte0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((byte[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short) (-2223);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-2223), short0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(shortArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((short[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2106412996;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(intArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((int[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = (-1065L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1065L), long0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
//      try { 
        NumberUtils.min(longArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array cannot be empty.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.min((long[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The Array must not be null
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
//      try { 
        NumberUtils.createBigDecimal("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // A blank string is not a valid number
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("h<Gt>E!P7enbpQ7");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"h<Gt>E\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("6F");
      assertEquals(6.0F, number0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("-8x*l");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // -8x*l is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0l");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("Strings must not be null");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Strings must not be null is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0l");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("U-gb?EWUf");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // U-gb?EWUf is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("4d");
      assertEquals(4.0, number0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("IkiPHKvH.u&@HL");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // IkiPHKvH.u&@HL is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("m<D");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // m<D is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0eg");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // 0eg is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0e");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // 0e is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("J/c/H>SbeEN(E[S@");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // J/c/H>SbeEN(E[S@ is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0e5");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("W.1gMe>iE5tBQ");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // W.1gMe>iE5tBQ is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
//      try { 
        NumberUtils.createNumber(" is not a valid number.");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         //  is not a valid number. is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("?m+oQk0.88eb");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // ?m+oQk0.88eb is not a valid number.
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("2.");
      assertEquals(2.0F, number0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("-0X.Yr4sn)v");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"-.Yr4sn)v\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0X");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("-0xaFCr%U4cTGSe=");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"-aFCr%U4cTGSe=\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("0xMinimum abbreviation width is 4");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"Minimum abbreviation width is 4\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--c*.s{\"'toQ5amnlsL\"+");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
//      try { 
        NumberUtils.createNumber("");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // A blank string is not a valid number
//         //
//         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (-405.27094513871));
      assertEquals((-405.27094513871), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (long) (short)716);
      assertEquals(716L, long0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (-2660));
      assertEquals((-2660), int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      short short0 = NumberUtils.toShort("-09");
      assertEquals((short) (-9), short0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-09");
      assertEquals((-9.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = NumberUtils.toInt("-1");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      long long0 = NumberUtils.toLong("-09");
      assertEquals((-9L), long0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double double0 = NumberUtils.max((-1.0), 1.0, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-09");
      assertEquals((byte) (-9), byte0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double double0 = NumberUtils.min(1066.25965357839, 1066.25965357839, 1066.25965357839);
      assertEquals(1066.25965357839, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double double0 = NumberUtils.toDouble("4");
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      float float0 = NumberUtils.min((float) (byte)51, (float) (byte)51, (float) (byte)51);
      assertEquals(51.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.max((float) numberUtils0.FLOAT_MINUS_ONE, 2687.5933F, (-1948.176F));
      assertEquals(2687.5933F, float0, 0.01F);
  }
}
