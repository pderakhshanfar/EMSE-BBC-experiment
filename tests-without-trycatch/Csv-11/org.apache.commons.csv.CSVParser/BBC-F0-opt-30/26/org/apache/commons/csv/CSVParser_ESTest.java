/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 01:53:47 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      // Undeclared exception!
//      try { 
        CSVParser.parse("CpgLW;z5", cSVFormat2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat1);
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      cSVParser0.getCurrentLineNumber();
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "format";
      stringArray0[1] = "NOr`G9bfT0@=";
      stringArray0[2] = "]!`D:VB3k-H?]V.|tWF";
      stringArray0[3] = "Vo]~YR+XNaZh7AFHC";
      stringArray0[4] = "";
      stringArray0[5] = " q";
      stringArray0[6] = "TzJP6 15%J}{<5-.j{|";
      stringArray0[7] = "trc";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("]!`D:VB3k-H?]V.|tWF", cSVFormat1);
      cSVParser0.nextRecord();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      URI uRI2 = MockURI.resolve(uRI1, "reader");
      MockFile mockFile0 = new MockFile(uRI2);
      // Undeclared exception!
//      try { 
        Charset.forName(" q");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         //  q
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      File file0 = MockFile.createTempFile("]P;]Hdr5.<e'r`UF$", "*Jgfag_{");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser.parse(file0, charset0, cSVFormat0);
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat0);
//      try { 
        cSVParser0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*Kg>I:63|zO=@L]('");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.nextRecord();
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/*Kg>I:63|zO=@L]('");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "*Kg>I:63|zO=@L]('");
      URL uRL1 = MockURL.URL(uRL0, "*Kg>I:63|zO=@L]('");
      CSVParser.parse("", cSVFormat0);
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse(uRL1, charset0, cSVFormat0);
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("7m");
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
//      try { 
        CSVParser.parse("\" in ", cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // (startline 1) EOF reached before encapsulated token finished
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("charset");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('e');
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "charset");
      cSVFormat1.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3);
      cSVParser0.getRecordNumber();
      // Undeclared exception!
//      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('M');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('H');
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      // Undeclared exception!
//      try { 
        CSVParser.parse("8_/#Mc}rgV4WDY'", cSVFormat3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
//      try { 
        cSVParser0.getRecords(linkedList0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("[dCg9O-71vBu", cSVFormat0);
      cSVParser0.close();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader(65534);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("#");
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      StringReader stringReader1 = new StringReader("#");
      StringReader stringReader2 = new StringReader("#");
      CSVParser cSVParser1 = CSVParser.parse("h6f&bx", cSVFormat0);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("h6f&bx");
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      stringReader0.close();
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedReader pipedReader0 = new PipedReader();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "etzJENXO?;Xeo@r4";
      stringArray0[1] = "yL)/EW:{8i";
      stringArray0[2] = "jTtqt2k";
      stringArray0[4] = "h6f&bx";
      stringArray0[5] = "fYB<ID|";
      stringArray0[6] = "";
      String string0 = "QuoteChar=<";
      stringArray0[7] = "QuoteChar=<";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedReader pipedReader0 = new PipedReader();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "etzJENXO?;Xeo@r4";
      stringArray0[1] = "yL)/EW:{8i";
      stringArray0[2] = "jTtqt2k";
      stringArray0[3] = "d%$Z1bwbWvEZ";
      stringArray0[4] = "h6f&bx";
      stringArray0[5] = "fYB<ID|";
      stringArray0[6] = "";
      stringArray0[7] = "QuoteChar=<";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
      StringReader stringReader0 = new StringReader("+(i4W%oQe");
      CSVParser cSVParser1 = CSVParser.parse("QuoteChar=<", cSVFormat0);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringReader stringReader0 = new StringReader("M");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("h6f&Bx");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[M]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader(65534);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      StringReader stringReader0 = new StringReader("");
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      StringReader stringReader1 = new StringReader("");
      CSVParser cSVParser1 = CSVParser.parse("Unexpected Token type: ", cSVFormat2);
      cSVParser1.getHeaderMap();
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader(65534);
      StringReader stringReader0 = new StringReader("");
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      MockURL.getHttpExample();
      CSVParser cSVParser1 = cSVFormat2.parse(stringReader0);
      cSVParser1.close();
      Map<String, Integer> map0 = cSVParser1.getHeaderMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat.newFormat('I');
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("-Y2P");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("-Y2P");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CSVParser cSVParser1 = cSVFormat2.parse(stringReader0);
      CSVRecord cSVRecord0 = cSVParser1.nextRecord();
      assertEquals("[null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringReader stringReader0 = new StringReader("M");
      StringReader stringReader1 = new StringReader("M");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("M");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader(65534);
      Character character0 = new Character('p');
      cSVFormat0.withQuoteChar(character0);
      cSVFormat0.withEscape('p');
      StringReader stringReader0 = new StringReader("");
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      StringReader stringReader1 = new StringReader("");
      CSVParser cSVParser1 = CSVParser.parse("Unexpected Token type: ", cSVFormat1);
      assertEquals(1L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader(65534);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      cSVFormat1.withNullString("");
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader(65534);
      StringReader stringReader0 = new StringReader("");
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      StringReader stringReader1 = new StringReader("");
      CSVParser cSVParser1 = CSVParser.parse("", cSVFormat0);
      assertFalse(cSVParser1.equals((Object)cSVParser0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('I');
      CSVFormat.newFormat('w');
      StringReader stringReader0 = new StringReader("-Y2P");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVFormat0.withNullString("-Y2P");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      MockFile mockFile0 = new MockFile("yedK8**Z5", "$PrG& vo!G_");
      MockFile mockFile1 = new MockFile(mockFile0, "-Y2P");
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse((File) mockFile1, charset0, cSVFormat1);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*Kg>I:63|zO=@L]('");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.nextRecord();
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "*Kg>I:63|zO=@L]('");
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(uRL1, charset0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('~');
      CSVFormat.newFormat('~');
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVFormat0.withNullString((String) null);
      // Undeclared exception!
//      try { 
        cSVParser0.forEach(consumer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2679);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      pipedReader0.markSupported();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withDelimiter('V');
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      cSVParser0.close();
      String string0 = "u5<bKN+u4RK>EI2GA1";
      CSVParser cSVParser1 = CSVParser.parse("u5<bKN+u4RK>EI2GA1", cSVFormat2);
      cSVParser1.getHeaderMap();
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringReader stringReader0 = new StringReader("X8B\"c=LX<Wnyf]$j]M");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.nextRecord();
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2679);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      pipedReader0.markSupported();
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      cSVFormat1.withDelimiter('V');
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("u5<bKN+u4RK>EI2GA1", cSVFormat2);
      cSVParser1.getHeaderMap();
      File file0 = MockFile.createTempFile("\" in ", "u5<bKN+u4RK>EI2GA1");
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser2 = CSVParser.parse(file0, charset0, cSVFormat1);
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      charset0.encode(charBuffer0);
      cSVParser2.getRecords((LinkedList<CSVRecord>) null);
      CSVParser cSVParser3 = CSVParser.parse(file0, charset0, cSVFormat2);
      CSVParser.parse("\" in ", cSVFormat1);
      cSVParser3.close();
      cSVParser3.close();
      boolean boolean0 = cSVParser3.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("string");
      cSVFormat0.parse(stringReader0);
      // Undeclared exception!
//      try { 
        CSVParser.parse((String) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'string' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("79_]FWJ", cSVFormat0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVParser cSVParser1 = CSVParser.parse("79_]FWJ", cSVFormat1);
      cSVParser1.getRecords();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyHeaders(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qtULm%|<S");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVParser cSVParser0 = CSVParser.parse("qtULm%|<S", cSVFormat3);
      cSVParser0.getRecords();
      cSVFormat3.withQuoteChar('n');
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyHeaders(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qtULm%|<S");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVParser cSVParser0 = CSVParser.parse("qtULm%|<S", cSVFormat3);
      cSVParser0.getRecords();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      pipedReader0.markSupported();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      cSVFormat1.withDelimiter('V');
      cSVParser0.getHeaderMap();
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("u5<bKN+u4RK>EI2GA1", cSVFormat2);
      cSVParser1.getHeaderMap();
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      charset0.encode(charBuffer0);
      CSVParser.parse("", cSVFormat1);
      cSVFormat2.parse(pipedReader0);
      // Undeclared exception!
//      try { 
        CSVParser.parse((File) null, charset0, cSVFormat1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'file' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.MINIMAL;
      cSVFormat0.withQuotePolicy(quote0);
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('o');
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVParser cSVParser0 = CSVParser.parse("u5<bKN+u4RK>EI2GA1", cSVFormat2);
      cSVParser0.getHeaderMap();
      Charset charset0 = Charset.defaultCharset();
      CharBuffer.allocate(13);
      charset0.encode("u5<bKN+u4RK>EI2GA1");
      CSVParser cSVParser1 = CSVParser.parse("", cSVFormat1);
      cSVParser1.nextRecord();
      cSVParser0.getCurrentLineNumber();
      CSVParser cSVParser2 = CSVParser.parse("XT2", cSVFormat2);
      assertFalse(cSVParser2.equals((Object)cSVParser0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character(',');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Index for header '%s' is %d but CSVRecord only has %d values!");
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.close();
      CSVParser cSVParser1 = cSVFormat2.parse(pipedReader0);
//      try { 
        cSVParser1.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe closed
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#=>NoP|2/uh>~g6");
      File file0 = MockFile.createTempFile("pP\"#6jm#TJ", "pP\"#6jm#TJ", (File) mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(false);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('T');
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charset
//         //
//         verifyException("java.io.InputStreamReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("@bT(O,iOj9GhLQ");
      String[] stringArray0 = new String[0];
      cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVParser.parse("ehXNnL.:%bK s", cSVFormat2);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[@bT(O, iOj9GhLQ]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("79_FWJ", cSVFormat0);
      cSVParser0.getRecordNumber();
      cSVParser0.getHeaderMap();
      cSVParser0.getRecords();
      MockFile mockFile0 = new MockFile("79_FWJ");
      MockFile mockFile1 = new MockFile(mockFile0, "79_FWJ");
      MockFile.createTempFile("UeGR5", "Xz3KR", (File) mockFile1);
      // Undeclared exception!
//      try { 
        Charset.forName("");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2679);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      pipedReader0.markSupported();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      cSVFormat1.withDelimiter('V');
      Map<String, Integer> map0 = new HashMap<String, Integer>();
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("u5<bKN+u4RK>EI2GA1", cSVFormat2);
      cSVParser1.getHeaderMap();
      File file0 = MockFile.createTempFile("\" in ", "XT2");
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser2 = CSVParser.parse(file0, charset0, cSVFormat1);
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      charset0.encode(charBuffer0);
      cSVParser2.getRecords((LinkedList<CSVRecord>) null);
      CSVParser cSVParser3 = CSVParser.parse(file0, charset0, cSVFormat2);
      CSVParser cSVParser4 = CSVParser.parse("\" in ", cSVFormat1);
      cSVParser3.close();
      cSVFormat2.parse(pipedReader0);
      cSVParser4.nextRecord();
      cSVParser1.getCurrentLineNumber();
      CSVParser cSVParser5 = CSVParser.parse("XT2", cSVFormat2);
      assertFalse(cSVParser5.equals((Object)cSVParser2));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreEmptyHeaders(true);
      Character character0 = new Character('u');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.getHeaderMap();
      cSVParser0.iterator();
      cSVFormat1.withCommentStart('q');
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVParser", "NON_NUMERIC");
      // Undeclared exception!
//      try { 
        Charset.forName("");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("79_FWJ", cSVFormat0);
      cSVParser0.getRecordNumber();
      cSVParser0.getHeaderMap();
      cSVParser0.getRecords();
      cSVParser0.getRecords();
      MockURL.getFileExample();
      String string0 = "CgSmV&k?p8pUcEW_L*R";
      cSVFormat0.withQuoteChar('.');
      // Undeclared exception!
//      try { 
        Charset.forName("CgSmV&k?p8pUcEW_L*R");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // CgSmV&k?p8pUcEW_L*R
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('l');
      CSVParser.parse("#yD(oXc+;S}8L$", cSVFormat1);
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler0);
      URL uRL2 = MockURL.URL(uRL1, "");
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL2, (Charset) null, cSVFormat1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'charset' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      pipedReader0.markSupported();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      cSVFormat1.withDelimiter('V');
      cSVParser0.getHeaderMap();
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("u5<bKN+u4RK>EI2GA1", cSVFormat2);
      cSVParser1.getHeaderMap();
      String string0 = "";
      String string1 = "XT2";
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", "XT2");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "";
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.getRecordNumber();
      String string1 = "2{ >v";
      CSVParser.parse("2{ >v", cSVFormat0);
      String string2 = "rKSO2AE=\\gwfDt~sJ";
      // Undeclared exception!
//      try { 
        cSVFormat0.withRecordSeparator('q');
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Record separator can only by CR, LF or CRLF
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      stringReader0.markSupported();
      MockFile mockFile0 = new MockFile("", "");
      Charset charset0 = null;
      char char0 = 'a';
      cSVParser0.iterator();
      Character character0 = new Character('a');
      cSVFormat1.withQuoteChar(character0);
//      try { 
        CSVParser.parse((File) mockFile0, (Charset) null, cSVFormat0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }
}
