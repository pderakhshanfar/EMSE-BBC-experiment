/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:26:04 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7uv!LeI", "Vd+-VGG7uv!LeI");
      document0.addClass("Vd+-VGG7uv!LeI");
      document0.toggleClass("T,.EiO\n tgba");
      document0.hasClass("`qYpL%y\"bZz");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("s+", "/_wTO`*l");
      Element element0 = document0.appendElement("OU@|<I");
      document0.prependElement("s+");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ETk@", "ETk@");
      Element element0 = new Element("~");
      Element element1 = document0.doClone(element0);
      element1.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Minr", "Minr");
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array must not contain any null objects
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document("EOF");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "EOF");
      document0.outerHtmlTail(stringBuilder0, 22, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Tag tag0 = Tag.valueOf(",2KHd\"IN\"jrXI4");
      Element element0 = new Element(tag0, ",2KHd\"IN\"jrXI4");
      element0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("<nth-chEld(%d)", "<nth-chEld(%d)");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("%i?LRFH(1hW 8u/@");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: %i?LRFH(1hW 8u/@
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("'S$is!Pm<U");
      document0.getElementsByAttributeValueMatching("~Cx[kKs", "'S$is!Pm<U");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("Mi%u");
      Element element0 = document0.prependElement("i");
      element0.wrap("VxxTtY8B@r$^");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("strANGFng", "strANGFng");
      Element element0 = document0.prependElement("basefont");
      element0.wrap("<basefont>\n<html>\n <head></head>\n <body>\n  strANGFng\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "dh0fX#dS8H;B;p3Ng1");
      Element element0 = document0.body();
      element0.wrap("dh0fX#dS8H;B;p3Ng1");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEscapedLesshanSign");
      document0.siblingIndex = (-2407);
      document0.val("ScriptDataEscapedLesshanSign");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      Element element0 = document0.body();
      element0.val("tbody");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("'S$is!Pm<U");
      document0.val("'S$is!Pm<U");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("Script4ataEsap:dLeswSi0n");
      document0.setSiblingIndex((-1275));
      document0.toggleClass(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.body();
      element0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.toggleClass("textarea");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.body();
      element0.text("<html>\n <head></head>\n <body>\n  :nth-child(%d)\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.text("+V");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#BobNOVj\"-JH7F");
      Element element0 = new Element(tag0, "#BobNOVj\"-JH7F");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("43");
      document0.setSiblingIndex((-1));
      document0.tagName("43");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = new Document("'S$is!Pm<U");
      document0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("Igr^q3");
      Element element0 = document0.body();
      element0.tagName("*Y~CF*");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("inwyt", "xmlns");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Document.createShell("^v0`|fEQJ2&M1b'\"bBo~");
      Element element0 = document0.prependElement("basefont");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parse("Mi%u", "Mi%u");
      Element element0 = document0.prependElement("i");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parse(").)\";Y=%,QX", "org.jsoup.select.StructuralEvaluator$Has");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse(".", ".");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("}4A-|b_", "AeD]BiY7;");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.selectFirst("#root");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      Document document1 = document0.normalise();
      document1.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element element0 = new Element("b");
      element0.selectFirst("b");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("   ");
      Document document0 = parser0.parseInput((Reader) stringReader0, "   ");
      document0.selectFirst("html");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("inwyt", "inwyt");
      document0.prependElement("inwyt");
      document0.select("inwyt");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.body();
      element0.removeClass("value");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("strong", ":nth-last-child(");
      Element element0 = document0.body();
      element0.prependText("strong");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("k%9", "k%9");
      document0.reparentChild(document0);
      document0.prependText("8N/");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("inert", "inert");
      Element element0 = document0.prependElement("style");
      element0.removeClass("style");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Element element0 = document0.body();
      element0.prepend("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell(":th-child(%d)");
      Element element0 = document0.head();
      element0.prepend(")=1%ayU,fzM^ O");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.empty();
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-last-child(", ":nth-last-child(");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000046", "#X5(;$$7a?=Zr'a");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("                ", "Tag name must not be empty.");
      document0.appendChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("'S$is!Pm<U");
      Document document1 = Document.createShell("'S$is!Pm<U");
      document0.appendTo(document1);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse(":H^Vt)!", "");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell("strANGFng");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("j3USr8py");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell("43");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedLeshanSign", "ScriptDataEscapedLeshanSign");
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("ScriptDataEscapedLeshanSign");
      document0.is((Evaluator) evaluator_ContainsText0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("F$`obP");
      document0.is((Evaluator) evaluator_ContainsText0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Tag tag0 = Tag.valueOf("inwyt");
      CDataNode cDataNode0 = new CDataNode("inwyt");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "inwyt", attributes0);
      element0.is("inwyt");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedLeshanSign", "ScriptDataEscapedLeshanSign");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("0`|fEQJ2&M1b'\"bBo~", "0`|fEQJ2&M1b'\"bBo~");
      document0.reparentChild(document0);
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("actioOn");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      document0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      document0.reparentChild(document0);
      document0.unwrap();
      document0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("attributeNameCharsSorted", parseSettings0);
      Element element0 = new Element(tag0, "attributeNameCharsSorted");
      element0.val("class");
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("~#E{[g");
      Pattern pattern0 = Pattern.compile("td^5F$&2jbw");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("actioOn", "actioOn");
      Pattern pattern0 = Pattern.compile("", 5455);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = new Document("action");
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      document0.getElementsByTag("mi%u");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("]~OCpuf`", "html");
      Document document1 = document0.normalise();
      document1.getElementsByTag("html");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.body();
      element0.getElementsByIndexLessThan(536);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "dh0fX#dS8H;B;p3Ng1");
      document0.getElementsByIndexGreaterThan((-2604));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "dh0fX#dS8H;B;p3Ng1");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("<nth-chEld(%d)", "<nth-chEld(%d)");
      document0.getElementsByAttributeValueStarting("head", "head");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Element element0 = new Element("'Sis!P<U");
      Element element1 = element0.attr("'Sis!P<U", "'Sis!P<U");
      element1.getElementsByAttributeValueStarting("'Sis!P<U", "'Sis!P<U");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("vx");
      document0.getElementsByAttributeValueNot("#", "               ");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("'S$is!Pm<U");
      document0.getElementsByAttributeValueNot("textarea", "6");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a", "a");
      document0.toggleClass("Jd]ZPeB9%Yn$b6");
      document0.getElementsByAttributeValueMatching("class", "a");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.getElementsByAttributeValueEnding(":nth-child(%d)", "$,_r#9~{V9U4");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",criptDtaEscapedLlhanSign", ",criptDtaEscapedLlhanSign");
      document0.addClass(",criptDtaEscapedLlhanSign");
      document0.getElementsByAttributeStarting("class");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      document0.getElementsByAttribute(":th-child(%d)");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000046", "#X5(;$$7a?=Zr'a");
      Element element0 = document0.appendElement("9HT`!qqHOX");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".:ma~n{UqL Snk", ".:ma~n{UqL Snk");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("'S$is!Pm<U");
      document0.setSiblingIndex((-1876));
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("B@T/`+>W0~&5e", "43");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("43");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "`io;)@C");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("'S$is!Pm<U");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-last-child(", ":nth-last-child(");
      Element element0 = document0.body();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("k%9", "k%9");
      Element element0 = document0.head();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      CDataNode cDataNode0 = new CDataNode("class");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("class", "class");
      FormElement formElement0 = new FormElement(tag0, "comment", attributes1);
      formElement0.classNames();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedLeshanSign", "ScriptDataEscapedLeshanSign");
      document0.addClass("ScriptDataEscapedLeshanSign");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
      element0.children();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "OEaA3>");
      Element element0 = document0.createElement("OEaA3>");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell(",N");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S@x8", "S@x8");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("ForeignContent");
      Element element0 = document0.prependElement("ForeignContent");
      element0.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-last-child(", ":nth-last-child(");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("InBody", "i,");
      Element element0 = new Element("InBody");
      document0.reparentChild(element0);
      element0.before(".");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      Element element0 = document0.head();
      element0.before(":th-child(%d)");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":th-child(%d)", ":th-child(%d)");
      Element element0 = document0.body();
      element0.before(":th-child(%d)");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document("action");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("'S$is!Pm<U");
      Element element0 = document0.addClass("'S$is!Pm<U");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.attr("Vd+-VGG7tv!LeI", true);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("@4&]g;9srsnt`~ebrl", "Hq5jDF@`]t|");
      document0.setSiblingIndex((-1860));
      document0.attr("   ", false);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      Element element0 = document0.head();
      element0.attr("Vd+-VGG7tv!LeI", true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      Element element0 = document0.body();
      element0.attr("<html>\n <head></head>\n <body>\n  :th-child(%d)\n </body>\n</html>", ":th-child(%d)");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("attributeNameCharsSorted");
      Document document0 = parser0.parseInput((Reader) stringReader0, "attributeNameCharsSorted");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("=K4", parseSettings0);
      Element element0 = new Element(tag0, "zU%a'('RzeXjsNU**");
      Document document0 = Parser.parse("><N)H ", "_Ev");
      Element element1 = document0.body();
      element0.appendTo(element1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.body();
      element0.appendText("br");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell(",N");
      document0.siblingIndex = (-2070787801);
      document0.appendText(",N");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      Element element0 = document0.head();
      element0.appendText("#");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.html("");
      document0.appendElement("#root");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("j3USrS8py");
      document0.appendElement("head");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("Mi%A", "Mi%A");
      Element element0 = document0.body();
      document0.setSiblingIndex((-1722320336));
      document0.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", "html");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~D.Rlk3mDj~F", "Mi%u");
      document0.siblingIndex = (-1595);
      document0.append("~D.Rlk3mDj~F");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dir", "org.jsoup.nodes.PseudoTextElement");
      Document document1 = document0.clone();
      document1.appendTo(document0);
      document1.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "dh0fX#dS8H;B;p3Ng1");
      Element element0 = document0.head();
      element0.after("*/");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("inert", "s+");
      Element element0 = document0.appendElement("#root");
      element0.prependElement("s+");
      element0.after("#root");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("43");
      document0.setSiblingIndex((-1));
      document0.addClass("oUlS6l`C\"Y");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      Element element0 = document0.head();
      Element element1 = element0.before((Node) document0);
      element1.addClass(":th-child(%d)");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("inert", "inert");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.wrap("+");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document("action");
      // Undeclared exception!
//      try { 
        document0.wrap("f:i");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ScriptDataEscapedLeshanSign", "ScriptDataEscapedLeshanSign");
      Element element0 = document0.prependElement("ScriptDataEscapedLeshanSign");
      element0.before((Node) document0);
      // Undeclared exception!
      document0.val("stron0g");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("43");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = new Document("inwyR");
      // Undeclared exception!
//      try { 
        document0.text("]@u[(N>L1");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i,", "i,");
      DocumentType documentType0 = new DocumentType("<S:|pDNzs8|Z<", "i,", "Cudz]", "Cudz]");
      document0.setParentNode(documentType0);
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.tagName("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("h2");
      Document document0 = parser0.parseInput((Reader) stringReader0, "4 _!zc");
      // Undeclared exception!
//      try { 
        document0.selectFirst("(kBPH<A");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '(kBPH<A': unexpected token at '(kBPH<A'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedLeshanSign", "ScriptDataEscapedLeshanSign");
      // Undeclared exception!
//      try { 
        document0.select("|}prl");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '|}prl': unexpected token at '|}prl'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Tag tag0 = Tag.valueOf("~1Hf\"3");
      Element element0 = new Element(tag0, "!W2N4gm7o&[");
      // Undeclared exception!
//      try { 
        element0.select("P[JVDs%8'nb");
//        fail("Expecting exception: UnknownFormatConversionException");
      
//      } catch(UnknownFormatConversionException e) {
//         //
//         // Conversion = '8'
//         //
//         verifyException("java.util.Formatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "dh0fX#dS8H;B;p3Ng1");
      // Undeclared exception!
//      try { 
        document0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("asinwyt", "asinwyt");
      CDataNode cDataNode0 = new CDataNode("asinwyt");
      cDataNode0.reparentChild(document0);
      // Undeclared exception!
//      try { 
        document0.previousElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Script4ataEscap:dLeshawSi0n", "Script4ataEscap:dLeshawSi0n");
      List<Node> list0 = document0.childNodes();
      Element element0 = document0.addClass("Script4ataEscap:dLeshawSi0n");
      element0.childNodes = list0;
      // Undeclared exception!
//      try { 
        element0.prependText("java.lang.string@0000000076");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = new Document("");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.prependElement("");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("i", "i");
      Element element0 = document0.appendElement("i");
      List<Node> list0 = Parser.parseFragment(")Jka.:Rwri", element0, "i");
      element0.childNodes = list0;
      // Undeclared exception!
//      try { 
        element0.prependElement("i");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = new Document("CommentStart");
      Parser parser0 = Parser.htmlParser();
      parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser0);
      // Undeclared exception!
//      try { 
        document1.prependElement("CommentStart");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.Tag", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
//      try { 
        document0.prependElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("Mi%u", "Mi%u");
      document0.reparentChild(document0);
      Element element0 = document0.empty();
      // Undeclared exception!
//      try { 
        element0.prependChild(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Mi%u", "Mi%u");
      // Undeclared exception!
//      try { 
        document0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("g1i*", "g1i*");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prepend("g1i*");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      List<Node> list0 = Parser.parseXmlFragment(" vBDcWy&i", ":nth-child(%d)");
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.prepend(":nth-child(%d)");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("|/.|<Q%Q-JEr*&Kg", "html");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$@>wDq0$", "$@>wDq0$");
      DataNode dataNode0 = new DataNode("[ch)>");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
//      try { 
        document0.parents();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("vY:\"sn&$xC^");
      MockFileWriter mockFileWriter0 = new MockFileWriter("mZ^?SxFEU", false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(556);
      // Undeclared exception!
      document0.outerHtmlTail(mockFileWriter0, 556, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      Element element0 = new Element(tag0, "html", (Attributes) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        element0.outerHtmlTail(charBuffer0, 835, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w@$6L9", "w@$6L9");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(charBuffer0, 2999, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("strong", "strong");
      MockFile mockFile0 = new MockFile("q|HzE'U", "AttributeValue_unquoted");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(mockPrintStream0, (-3076), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("vY:\"sn&$xC^");
      MockFileWriter mockFileWriter0 = new MockFileWriter("mZ^?SxFEU", false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      mockFileWriter0.close();
//      try { 
        document0.outerHtmlTail(mockFileWriter0, 556, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedLessthanSign", "ScriptDataEscapedLessthanSign");
      StringBuilder stringBuilder0 = new StringBuilder("ScriptDataEscapedLessthanSign");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(8211);
      // Undeclared exception!
      document0.outerHtmlHead(stringBuilder0, 8211, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a", "a");
      Charset charset0 = document0.charset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(62);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charBuffer0, 62, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "la,RuF#=&Q<xfHmy", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.outerHtmlHead((Appendable) null, 222, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?,", "mi%u");
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charBuffer0, (-1064), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("j3USrS8py");
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<Ff{GR+}Ztt0}", "<Ff{GR+}Ztt0}");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.is((Evaluator) null);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = new Document("action");
      // Undeclared exception!
//      try { 
        document0.is("><t#{4>w/Sq");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '<t#{4': unexpected token at '<t#{4'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("inwyt", "inwyt");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.is("inwyt");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren(1, nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("`3Ag/]w=?,aR?D7", "`3Ag/]w=?,aR?D7");
      Elements elements0 = document0.getElementsContainingText("`3Ag/]w=?,aR?D7");
      // Undeclared exception!
//      try { 
        document0.insertChildren(1, (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("Mi%u", "Mi%u");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html("Mi%u");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedLeshanSign", "ScriptDataEscapedLeshanSign");
      // Undeclared exception!
//      try { 
        document0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Document.createShell("iyt");
      Tag tag0 = Tag.valueOf("iyt");
      CDataNode cDataNode0 = new CDataNode("iyt");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "iyt", attributes0);
      element0.setParentNode(cDataNode0);
      document0.appendTo(element0);
      // Undeclared exception!
//      try { 
        document0.html("iyt");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.parentNode = (Node) document0;
      MockFileWriter mockFileWriter0 = new MockFileWriter("attributenamecharssorted", false);
      // Undeclared exception!
      document0.html((OutputStreamWriter) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", " ");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "+nwyt");
      // Undeclared exception!
//      try { 
        document0.html(charBuffer0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^s+", "<Jg$L5EI{");
      // Undeclared exception!
//      try { 
        document0.html((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell(",N");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("eo)TC (/&[zY", "eo)TC (/&[zY");
      TextNode textNode0 = TextNode.createFromEncoded("eo)TC (/&[zY", "eo)TC (/&[zY");
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.html();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ho9]PhC", "Ho9]PhC");
      Element element0 = document0.prependElement("basefont");
      element0.setSiblingIndex((-1624544097));
      // Undeclared exception!
//      try { 
        document0.html();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Document.createShell("id");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("JNI", "JNI");
      Element element0 = document0.body();
      element0.siblingIndex = (-2675);
      Pattern pattern0 = Pattern.compile("JNI", 60);
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText(pattern0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("~#E{[g");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("~#E{[g");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: ~#E{[g
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell("-lY26=c{r1et");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell("'S$is!Pm<U");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vx", "vx");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.getElementsContainingText("strong");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.NodeTraversor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F>wDq0$", "F>wDq0$");
      DataNode dataNode0 = new DataNode("g?Tx_MP&eHNW8]SD@W");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
//      try { 
        document0.getElementsContainingText("ad");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i,", "i,");
      document0.siblingIndex = (-39);
      document0.reparentChild(document0);
      // Undeclared exception!
//      try { 
        document0.getElementsContainingText("i,");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      Element element0 = document0.createElement("7rgJ&JJ*Q\"U9mN%");
      element0.childNodes = null;
      // Undeclared exception!
//      try { 
        element0.getElementsContainingOwnText("s+");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("h2");
      Document document0 = parser0.parseInput((Reader) stringReader0, "4 _!zc");
      // Undeclared exception!
//      try { 
        document0.getElementsByTag("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".:ma~n{UqL Snk", ".:ma~n{UqL Snk");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexLessThan(59);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.NodeTraversor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Script4ataEscap:dLeshawSi0n", "Script4ataEscap:dLeshawSi0n");
      DocumentType documentType0 = new DocumentType(">X02$@.c.f+CPT;<BG", ">X02$@.c.f+CPT;<BG", "s6?@r)uCr?mr#0$kYz8", "s6?@r)uCr?mr#0$kYz8", "Script4ataEscap:dLeshawSi0n");
      document0.setParentNode(documentType0);
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexGreaterThan(6);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document("#root");
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vx", "vx");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting("tt", "'");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Document.createShell("attributeNameCharsSorted");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("strong", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$MatchText");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("<|kK!>U(qs]1GaaqbD", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("0`|fEQJ2&M1b'\"bBo~", "0`|fEQJ2&M1b'\"bBo~");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("", " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "bxm{pMn&{C+");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeStarting("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("43");
      // Undeclared exception!
//      try { 
        document0.getElementById((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = new Document("action");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m\"li'j(oocqs2t/88b", "vx");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.data();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      Element element0 = document0.head();
      Element element1 = document0.createElement(":th-child(%d)");
      element0.replaceWith(element1);
      // Undeclared exception!
//      try { 
        element1.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '|th-child(%d)': unexpected token at '|th-child(%d)'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Element element0 = new Element("s+");
      // Undeclared exception!
//      try { 
        element0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.child(860);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 860, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = new Document("i,");
      document0.reparentChild(document0);
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      Element element0 = document0.head();
      Element element1 = element0.before((Node) document0);
      // Undeclared exception!
      element1.before(":th-child(%d)");
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#Hi}bQ1f0F@AG", "P@ ");
      Element element0 = document0.prependElement("P@ ");
      element0.siblingIndex = 46;
      // Undeclared exception!
//      try { 
        element0.before("#Hi}bQ1f0F@AG");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 46, Size: 2
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      TextNode textNode0 = new TextNode("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      Document document1 = (Document)document0.doClone(textNode0);
      // Undeclared exception!
//      try { 
        document1.before("org.jsoup.parser.ParseErrorList");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k%9", "k%9");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr("      ", "B@T/`+>W0~&5e");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Document.createShell("Rawtext");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, "Rawtext");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("inwyt");
      CDataNode cDataNode0 = new CDataNode("inwyt");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.appendTo(document0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      Element element0 = document0.head();
      document0.parentNode = (Node) element0;
      // Undeclared exception!
//      try { 
        document0.appendTo(element0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("8L6JRRGb5h]R%0f", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "8L6JRRGb5h]R%0f", attributes0);
      // Undeclared exception!
//      try { 
        element0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.appendElement("Vd+-VGG7tv!LeI");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("h!+&/1jbxfF?e");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.appendElement("br");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^", ", ");
      // Undeclared exception!
//      try { 
        document0.appendElement((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("!3`v5=0X'z", "!3`v5=0X'z");
      Element element0 = document0.head();
      CDataNode cDataNode0 = new CDataNode("!3`v5=0X'z");
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
//      try { 
        element0.appendChild(node0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("'S$is!Pm<U");
      // Undeclared exception!
//      try { 
        document0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(0, nodeArray0);
      // Undeclared exception!
      document0.append("#root");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("actioOn", "actioOn");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w@$6L9", "w@$6L9");
      document0.reparentChild(document0);
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("inert", "inert");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.after("iU?QLlSu4");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", ":th-child(%d)");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Tag name must not be empty.");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "Tag name must not be empty.", attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, ":th-child(%d)");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = new Document("PP");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 40);
      document0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = new Document("'S$is!Pm<U");
      document0.hasClass("'S$is!Pm<U");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Document.createShell("strong");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) linkedHashSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-last-child(", ":nth-last-child(");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Document.createShell("~#E{[g");
      Element element0 = document0.appendText("~#E{[g");
      element0.data();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader(":nth-child(%d)");
      Document document0 = parser0.parseInput((Reader) stringReader0, "Otoz-@o}K2c");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("inert", "inert");
      document0.reparentChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell("^Lq3o#2");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("inert", "inert");
      Element element0 = document0.appendElement("D~ c-R+bSsD@");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      Element element0 = document0.body();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.token$starttag");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("Mi%u", "Mi%u");
      document0.reparentChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      Element element0 = document0.body();
      element0.html("pU<:w&");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("'S$is!Pm<U");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedLeshanSign", "ScriptDataEscapedLeshanSign");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("43");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("0xi/x", "0xi/x");
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsByAttributeValueMatching("", pattern0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i,", "i,");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "id");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail((Appendable) null, (-1), document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("strong", "strong");
      Element element0 = document0.appendElement("strong");
      element0.prependElement("strong");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Element element0 = document0.createElement("textarea");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("strANGFng", "strANGFng");
      document0.prependElement("basefont");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IndexEquals");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("$Y=O%np", "$Y=O%np");
      MockFile mockFile0 = new MockFile("class");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(mockPrintStream0, 932, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$@>wDq0$", "$@>wDq0$");
      Element element0 = document0.createElement("textarea");
      element0.val("$@>wDq0$");
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+*qEOW", ",+#x_idz");
      Element element0 = document0.createElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedLeshanSign", "ScriptDataEscapedLeshanSign");
      document0.addClass("");
      document0.addClass("");
      document0.hasClass("Sce:%X]Jb^6YMf/?H");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("stV\rNGFng", "stV\rNGFng");
      document0.addClass("stV\rNGFng");
      document0.toggleClass("java.lang.string@0000000076");
      document0.toggleClass("publicId");
      document0.hasClass("java.lang.string@0000000076");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("stV\rNGFng", "stV\rNGFng");
      document0.addClass("stV\rNGFng");
      document0.toggleClass("java.lang.string@0000000076");
      document0.hasClass("java.lang.string@0000000076");
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Script4ataEscap:dLeshawSi0n", "Script4ataEscap:dLeshawSi0n");
      document0.toggleClass("IFw!;M");
      document0.addClass("Script4ataEscap:dLeshawSi0n");
      document0.toggleClass("Script4ataEscap:dLeshawSi0n");
      document0.hasClass("java.lang.string@0000000076");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("k%9", "k%9");
      document0.addClass("br");
      document0.hasClass("org.jsoup.parser.CharacterReader");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("menuitem", "menuitem");
      Element element0 = document0.createElement("menuitem");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      CDataNode cDataNode0 = new CDataNode("pf'^j1m>>");
      Node node0 = cDataNode0.doClone(nodeArray0[1]);
      nodeArray0[2] = node0;
      element0.addChildren(nodeArray0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("menuitem", "menuitem");
      DataNode dataNode0 = DataNode.createFromEncoded("h@]mz:tngc$ufyf", "DKbWKC;9:)4AF{G'Vj");
      document0.appendChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell(",N");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$NodeList");
      document0.prependChild(cDataNode0);
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$NodeList");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = new Document("actioOn");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      DocumentType documentType0 = new DocumentType("body", "actioOn", "actioOn", "5x:KtK=8", "mTQe;uDKtNob[tG$");
      linkedHashSet0.add(documentType0);
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse(".", ".");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("j3USrS8py");
      Element element0 = document0.appendText("j3USrS8py");
      element0.prepend("|/.|<Q%Q-JEr*&Kg");
      document0.getElementsContainingText("j3USrS8py");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("j3USrS8py");
      document0.prepend("|/.|<Q%Q-JEr*&Kg");
      document0.getElementsContainingText("j3USrS8py");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("inert", ".");
      document0.appendElement("br");
      document0.getElementsContainingText("open");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("strong", ":nth-last-child(");
      document0.appendElement("strong");
      document0.getElementsContainingText("open");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("0`|fEQJ2&M1b'\"bBo~", "0`|fEQJ2&M1b'\"bBo~");
      document0.title("0`|fEQJ2&M1b'\"bBo~");
      document0.getElementsContainingText("0`|fEQJ2&M1b'\"bBo~");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = new Document("l&?Bu/RBdQ");
      Element element0 = document0.html("_eq@VZm|)-6J<!PnvH");
      element0.getElementsContainingText("R");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Element element0 = new Element("'S$is!Pm<U");
      element0.getElementById("'S$is!Pm<U");
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.appendChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.reparentChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vx", "vx");
      Element element0 = document0.prependElement("basefont");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(":th-child(%d)", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.nextElementSibling();
      assertEquals(":nth-child(%d)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals("Vd+-VGG7tv!LeI", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parse("<nth-chEld(%d)", "<nth-chEld(%d)");
      document0.siblingElements();
      assertEquals("<nth-chEld(%d)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("inwyt", "inwyt");
      Comment comment0 = new Comment("inwyt", "?v>0!:;#syjTx$WD");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
//      try { 
        document0.siblingElements();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Document.createShell("inwyt");
      Element element0 = document0.body();
      element0.after("inwyt");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(2)", string0);
      assertEquals("inwyt", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Document.createShell("inwyt");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("inwyt", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("'S$is!Pm<U");
      Element element0 = document0.addClass("6");
      element0.cssSelector();
      assertEquals("'S$is!Pm<U", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "dh0fX#dS8H;B;p3Ng1");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
//      try { 
        document0.insertChildren(97, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "dh0fX#dS8H;B;p3Ng1");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-39), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("menuitem", "menuitem");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(1, nodeArray0);
      assertEquals("menuitem", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      // Undeclared exception!
//      try { 
        document0.insertChildren(46, (Collection<? extends Node>) linkedHashSet0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Document.createShell("j3USrS8py");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1298), (Collection<? extends Node>) linkedHashSet0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("strong", "strong");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      DataNode dataNode0 = new DataNode("P~[lQgT", "y;NZMo%Ar");
      nodeArray0[3] = (Node) dataNode0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.dataNodes();
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("j3USrS8py", "dh0fX#dS8H;B;p3Ng1");
      Element element0 = document0.appendText(";E*prKF");
      element0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~D.Rlk3mDj~F", "Mi%u");
      document0.append("~D.Rlk3mDj~F");
      document0.children();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("inert", "inert");
      Elements elements0 = document0.getElementsByIndexGreaterThan(841);
      assertEquals("inert", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      // Undeclared exception!
//      try { 
        document0.selectFirst((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Elements elements0 = document0.getElementsMatchingText("Ju^XmI");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(":nth-child(%d)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Elements elements0 = document0.getAllElements();
      assertEquals(4, elements0.size());
      assertEquals(":nth-child(%d)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.removeClass("");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      // Undeclared exception!
//      try { 
        document0.before(":th-child(%d)");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("", "org.jsoup.nodes.Element$2");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals(":th-child(%d)", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.doSetBaseUri(":nth-child(%d)");
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vd+-VGG7tv!LeI", "Vd+-VGG7tv!LeI");
      document0.getElementsByAttributeValueContaining("Vd+-VGG7tv!LeI", "textarea");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Vd+-VGG7tv!LeI", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = new Document("action");
      Elements elements0 = document0.getElementsByClass("action");
      assertEquals("action", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding((String) null, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-last-child(", ":nth-last-child(");
      document0.is("dHG>GnC");
      assertEquals(1, document0.childNodeSize());
      assertEquals(":nth-last-child(", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Document.createShell("id");
      // Undeclared exception!
//      try { 
        document0.wrap("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Elements elements0 = document0.getElementsByIndexEquals((-4381));
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      document0.getElementsByAttributeStarting("(=~W2nA#");
      assertEquals(1, document0.childNodeSize());
      assertEquals(":th-child(%d)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Elements elements0 = document0.getElementsByIndexLessThan(2119);
      assertEquals("#root", document0.baseUri());
      assertEquals(3, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Document.createShell("inwyt");
      // Undeclared exception!
//      try { 
        document0.after("inwyt");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("actioOn", "actioOn");
      Elements elements0 = document0.getElementsMatchingOwnText("actioOn");
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, elements0.size());
      assertEquals("actioOn", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("inwyt", "inwyt");
      document0.select("inwyt");
      assertEquals(1, document0.childNodeSize());
      assertEquals("inwyt", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("k%9", "k%9");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting("8N/", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vx", "vx");
      document0.getElementsByAttributeValue(":nth-child(%d)", ":nth-child(%d)");
      assertEquals("vx", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("inert", "inert");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.html(":nth-child(%d)");
      String string0 = element0.ownText();
      assertEquals(":nth-child(%d)", string0);
      assertEquals(":nth-child(%d)", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.wholeText();
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",criptDtaEscapedLlhanSign", ",criptDtaEscapedLlhanSign");
      document0.addClass(",criptDtaEscapedLlhanSign");
      document0.hasClass(",criptDtaEscapedLlhanSign");
      assertEquals(",criptDtaEscapedLlhanSign", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = new Document("'S$is!Pm<U");
      Elements elements0 = document0.getElementsContainingOwnText("'S$is!Pm<U");
      assertEquals(0, elements0.size());
      assertEquals("'S$is!Pm<U", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-last-child(", ":nth-last-child(");
      // Undeclared exception!
//      try { 
        document0.tagName("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.prependText("     ");
      boolean boolean0 = element0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = new Document("'S$is!Pm<U");
      // Undeclared exception!
//      try { 
        document0.child((-546));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse(":th-child(%d)", ":th-child(%d)");
      document0.previousElementSiblings();
      assertEquals(":th-child(%d)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("strANGFng", "strANGFng");
      document0.prependElement("br");
      document0.ownText();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parse("JNI", "JNI");
      Pattern pattern0 = Pattern.compile("JNI", 60);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals("JNI", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Document.createShell("71FMu@Gkh~NH\"D'");
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }
}
