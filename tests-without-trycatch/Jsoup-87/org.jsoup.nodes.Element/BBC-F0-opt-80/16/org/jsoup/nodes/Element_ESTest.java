/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:00:27 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("qx", "qx");
      document0.appendElement("qx");
      Element element0 = document0.appendElement("org.jsoup.select.evaluator$containsdata");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("_Q|%Tu_Gg:Y", "_Q|%Tu_Gg:Y");
      document0.setParentNode(document0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matchhes(", ":matchhes(");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array must not contain any null objects
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("`=hV@");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "hGY'URnB6$E#{'{u8");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, (-251), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Tag tag0 = Tag.valueOf("UW9MuYd|Orwqmc*");
      Element element0 = new Element(tag0, "");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "Hyfa/2Gj");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("hGY'URnB6$E#{'{u8");
      Element element0 = document0.prependElement("hGY'URnB6$E#{'{u8");
      element0.wrap("hGY'URnB6$E#{'{u8");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(?.aAdh)$H", "N+uNT3b6r");
      Element element0 = document0.head();
      element0.wrap("FZ'QF2R$_,%YD");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      Element element0 = document0.body();
      element0.wrap(":matches(");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("%N?'FscCrxy|");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("Object must not be null", "D}y:");
      Element element0 = document0.head();
      element0.siblingIndex = (-2013403795);
      element0.val("8Psq0@");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/>", "/>");
      Element element0 = document0.body();
      element0.val("7itV9`<2W");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Element element0 = new Element("na~rames");
      DataNode dataNode0 = new DataNode("Tag name must not be empty.", "na~rames");
      element0.parentNode = (Node) dataNode0;
      element0.val("na~rames");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Element element0 = new Element("naframes");
      Element element1 = element0.val("naframes");
      element1.val();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("_Q|%Tu_Gg:Y", "_Q|%Tu_Gg:Y");
      Element element0 = document0.body();
      element0.toggleClass("inert");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("Z.<U.Om0ST#|>", "Z.<U.Om0ST#|>");
      Element element0 = document0.body();
      element0.text("tk~pueyjdecs05zn_z!");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("Z.<U.Om0ST#|>", "Z.<U.Om0ST#|>");
      document0.text("tk~pueyjdecs05zn_z!");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      Element element0 = document0.shallowClone();
      element0.text();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("naframes", "30");
      Document document1 = document0.ownerDocument();
      document1.siblingIndex = (-4142);
      document1.tagName("30");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.appendElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell(":matczes(");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      element1.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("_Q|%Tu_Gg:Y", "_Q|%Tu_Gg:Y");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", "");
      document0.selectFirst("form");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.appendElement("br");
      document0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("kBd");
      document0.select("HC");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Element element0 = new Element("iPsindex");
      element0.select("iPsindex");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Element element0 = new Element("na~rames");
      element0.setSiblingIndex((-1989));
      element0.removeClass("na~rames");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", ":empty");
      Element element0 = document0.body();
      element0.removeClass("button");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Element element0 = new Element("6n]Ef");
      Document document0 = Parser.parseBodyFragmentRelaxed("w", "w");
      document0.setParentNode(element0);
      document0.removeClass("w");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse(" />", "9p");
      Element element0 = document0.appendElement(" />");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[r", "[r");
      document0.setSiblingIndex((-1397));
      document0.prependText("wB@u[SF>F.@LW");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell(":matczes(");
      Element element0 = document0.body();
      element0.prependText("");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      Element element0 = document0.prependElement("hGY'URnB6$E#{'{u8");
      element0.prependText("hGY'URnB6$E#{'{u8");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.prependElement("html");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&SHSQHROsewsf", ">&SHSQHROsewsf");
      document0.siblingIndex = (-952);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("B#'-Yv ", false);
      document0.prependChild(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("_Q|%Tu_Gg:Y", "_Q|%Tu_Gg:Y");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" \"a4)zh;=<9:f>p\"", " \"a4)zh;=<9:f>p\"");
      document0.setSiblingIndex((-2206));
      document0.prepend("hgy'ivurj/6$e#{'{ue");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell("kBd");
      Element element0 = document0.head();
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~BQc:kj~Wl\"VL!mu5", " > ");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&{SHSWHR)5sef", "br");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&{SHSWHR)5sef", "%N?'FscCrxy|");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      Element element0 = document0.prependElement("hGY'URnB6$E#{'{u8");
      document0.setParentNode(element0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      Element element0 = document0.prependElement("hGY'URnB6$E#{'{u8");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("'?=JqAr", "'?=JqAr");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("`=hV@");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("kBd", "kBd");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse("ZB.<U.ODDm0ST#w>", "jeCRTP t,1A|");
      Element element0 = document0.appendElement("br");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":matczes(", "s+");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":matches(", ":matches(");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      document0.is((Evaluator) evaluator_AllElements0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("-@ca;f(r ,Af`)P", "^z<E=EyBA$^HkA7W");
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("object", "org.jsoup.parser.CharacterReader");
      document0.is((Evaluator) evaluator_AttributeWithValueEnding0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u", "u");
      Element element0 = document0.appendElement("u");
      element0.is("u");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&{SHSWHR)5sef", "br");
      Element element0 = document0.appendElement(">&{SHSWHR)5sef");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("9p", "@10nwS3L>t_B#");
      Element element0 = document0.appendElement("9)6");
      element0.html("*768aae(mrj.eche");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Element element0 = document0.createElement("#root");
      element0.siblingIndex = (-1);
      element0.html("#root");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("kBd");
      Element element0 = document0.head();
      element0.html(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("?");
      document0.html("");
      document0.tagName("iframe");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Document.createShell("?");
      Element element0 = document0.prependElement("org.jsoup.nodes.Element$1");
      element0.html((OutputStreamWriter) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Element element0 = new Element("naframes");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":matches(", ":matches(");
      document0.removeClass(":matches(");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("`=hV@");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u", "u");
      Pattern pattern0 = Pattern.compile("<html>\n <head></head>\n <body>\n  u\n </body>\n</html>\n<u></u>", 2997);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("PLAINTEXT", "PLAINTEXT");
      Pattern pattern0 = Pattern.compile("", 16);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Document.createShell("?");
      Pattern pattern0 = Pattern.compile("%N?'FscCrxy|");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("?", "#root");
      document0.getElementsMatchingOwnText("]K62");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ZB.<U.ODDm0ST#w>", "ZB.<U.ODDm0ST#w>");
      document0.getElementsContainingText("4c]Y.B5r0&1bA^UYet5");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("gi:", "gi:");
      document0.getElementsContainingOwnText("gi:");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":matches(", "");
      document0.getElementsByTag(":matches(");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Element element0 = new Element(":matches(");
      element0.getElementsByTag(":matches(");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "f<3j,aZsc");
      document0.getElementsByIndexLessThan(38);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", "");
      document0.getElementsByIndexGreaterThan(879);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("_Q|%Tu_Gg:Y", "_Q|%Tu_Gg:Y");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = new Document("k1~");
      document0.addClass("k1~");
      Element element0 = document0.toggleClass("li");
      element0.getElementsByClass("li");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&SHSWHR)sef", "br");
      document0.getElementsByAttributeValueStarting("br", "br");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = new Document("-->");
      document0.attr("-->", "-->");
      document0.getElementsByAttributeValueNot("-->", "-->");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Tag tag0 = Tag.valueOf("LxW");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("?-jY>9;;wN", "LxW");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "LxW", attributes1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%p";
      attributes1.keys = stringArray0;
      pseudoTextElement0.getElementsByAttributeStarting("%p");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%eFetYO#3{%-p^x", "%eFetYO#3{%-p^x");
      document0.attr("%eFetYO#3{%-p^x", "%eFetYO#3{%-p^x");
      document0.getElementsByAttribute("%eFetYO#3{%-p^x");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("Object must not be null", "D}y:");
      Element element0 = document0.head();
      element0.siblingIndex = (-2013403795);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":matches(", ":matches(");
      Element element0 = document0.appendElement("Sh(9L&s?");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matczes(", ":matczes(");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = new Document(":matches(");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", "");
      Element element0 = document0.appendElement(" />");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell(":matczes(");
      Element element0 = document0.body();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("?");
      document0.toggleClass("Children collection to be inserted must not be null.");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell("?");
      document0.toggleClass("Children collection to be inserted must not be null.");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("J@t6", "RB8Ts:ar0Q=86/bvLlS");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("b[@96FpojaJY", "b[@96FpojaJY");
      document0.prepend("b[@96FpojaJY");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("title");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("b9r", "b9r");
      document0.setParentNode(document0);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("E+", "b9r", true);
      document0.before((Node) xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse(" />", "9p");
      Element element0 = document0.appendElement("9p");
      element0.before("9p");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&{SHSWHR)5sef", "%N?'FscCrxy|");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Element element0 = new Element("iPsindex");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("`=hV@");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&SHSWHR)sef", "br");
      Element element0 = document0.addClass("");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("z.<u.m0s&t#|>", "sub");
      Element element0 = document0.body();
      element0.attr("#root", false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&{SHSWHR)5sef", "br");
      Element element0 = document0.appendElement("br");
      element0.attr(">&{SHSWHR)5sef", true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell("boy");
      Document document1 = document0.clone();
      document1.appendTo(document0);
      document1.attr("html", "U1olwatep{");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ol", (ParseSettings) null);
      CDataNode cDataNode0 = new CDataNode("ol");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "ol", attributes0);
      pseudoTextElement0.attr("ol", "ol");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      Element element0 = new Element(":matches(");
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hGY'RnB6$E#{'{u8", "hGY'RnB6$E#{'{u8");
      document0.setSiblingIndex((-422));
      document0.appendText("hGY'RnB6$E#{'{u8");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", ":empty");
      Element element0 = document0.body();
      element0.appendText(":empty");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("id", "id");
      document0.appendChild(document0);
      document0.appendText("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("Qf`yBPojYMF-Ot>sQCI", "body");
      document0.appendElement("body");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("Z.<U.Om0ST#|>", "Z.<U.Om0ST#|>");
      Element element0 = document0.body();
      element0.appendChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", "");
      Element element0 = document0.appendElement(" />");
      element0.siblingIndex = (-1);
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Element element0 = new Element("noframes");
      element0.append(".");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", "");
      Element element0 = document0.appendElement(" />");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("no aframes", "no aframes");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse(" />", "9p");
      Element element0 = document0.appendElement("9p");
      DataNode dataNode0 = DataNode.createFromEncoded("+gy'ucnb6$i#{'{u8", "inselect");
      element0.after((Node) dataNode0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      document0.setParentNode(document0);
      DataNode dataNode0 = new DataNode("hGY'URnB6$E#{'{u8");
      document0.after((Node) dataNode0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Cy", "Cy");
      Element element0 = document0.doClone(document0);
      element0.after("html");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse(" />", "9p");
      Element element0 = document0.appendElement("9p");
      element0.after("/> 9p");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/>", "/>");
      Element element0 = document0.body();
      element0.after("/>");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&{SHSWHR)5sef", "br");
      Element element0 = document0.body();
      element0.addClass("Yx");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = new Document("U&gWD_7o#");
      Element element0 = document0.appendElement("'");
      element0.addClass("Jl`;");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("gi:", "gi:");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.wrap("gi:");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.wrap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y#B+O  *WD#A9m", "Y#B+O  *WD#A9m");
      DocumentType documentType0 = new DocumentType("Y#B+O  *WD#A9m", "9p", "X]Lu!cS<yFY$m6", "MXQ7{UyRK('j");
      document0.setParentNode(documentType0);
      // Undeclared exception!
//      try { 
        document0.wrap("Y#B+O  *WD#A9m");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell("kBd");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.val("");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("?");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = new Document("`=hV@");
      // Undeclared exception!
//      try { 
        document0.text("AfterHead");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b9r", "b9r");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse(">&{SHdWHR)5ef", ">&{SHdWHR)5ef");
      DocumentType documentType0 = new DocumentType("Insert position out of bounds.", "Insert position out of bounds.", "Insert position out of bounds.");
      document0.setParentNode(documentType0);
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("naframes", "30");
      Document document1 = document0.ownerDocument();
      document1.siblingIndex = (-4142);
      document1.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = new Document("hGY'URnB6$E#{'{u8");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.tagName("hgy'urnb6$e#{'{u8");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("J@t6", "RB8Ts:ar0Q=86/bvLlS");
      // Undeclared exception!
//      try { 
        document0.tagName("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("+GY'UCnB6$i#{'{u8", "+GY'UCnB6$i#{'{u8");
      Element element0 = document0.prependElement("+GY'UCnB6$i#{'{u8");
      document0.setParentNode(element0);
      // Undeclared exception!
//      try { 
        document0.siblingElements();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal Capacity: -1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$IsLastChild", "org.jsoup.select.Evaluator$IsLastChild");
      // Undeclared exception!
//      try { 
        document0.selectFirst("s+");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '': unexpected token at ''
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[r", "[r");
      // Undeclared exception!
//      try { 
        document0.selectFirst("~$F(%T#JIJh&.yzT9I");
//        fail("Expecting exception: UnknownFormatConversionException");
      
//      } catch(UnknownFormatConversionException e) {
//         //
//         // Conversion = 'T'
//         //
//         verifyException("java.util.Formatter$FormatSpecifier", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      // Undeclared exception!
//      try { 
        document0.selectFirst("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("e;t0y~B", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("HC");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "e;t0y~B", attributes0);
      // Undeclared exception!
//      try { 
        pseudoTextElement0.select("Y1<+V0");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'Y1<+V0': unexpected token at '<+V0'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("hGY'URnB6$E#{'{u8");
      // Undeclared exception!
//      try { 
        document0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse(":matches(", ":matches(");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.prependElement(":matches(");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("sSMMN4", "");
      // Undeclared exception!
//      try { 
        document0.prependElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Element element0 = new Element("textarea");
      CDataNode cDataNode0 = new CDataNode("+[tuqSDyl");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("textarea", ".'si8kc2z", false);
      Node node0 = cDataNode0.doClone(xmlDeclaration0);
      // Undeclared exception!
//      try { 
        element0.prependChild(node0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Element element0 = new Element("6n]Ef");
      Document document0 = Parser.parseBodyFragmentRelaxed("w", "w");
      document0.setParentNode(element0);
      // Undeclared exception!
//      try { 
        element0.prependChild(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell("h4");
      // Undeclared exception!
//      try { 
        document0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prepend(">G>wL4OH");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = new Document("B[r");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":matches(", "");
      TextNode textNode0 = TextNode.createFromEncoded("2O:|[+V");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
//      try { 
        element0.prepend("fU2z|'BR%:Ae8MxqEx");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("hGYc'URj/6$E#'{u8", "hGYc'URj/6$E#'{u8");
      StringBuilder stringBuilder0 = new StringBuilder(28);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(28);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 1190, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&SHSWHR)sef", "br");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(charBuffer0, 916, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell("?");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail((Appendable) null, 16, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse("b9r", "b9r");
      MockPrintStream mockPrintStream0 = new MockPrintStream(">*V$eCPY(_");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(mockPrintStream0, (-3803), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "~");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1082);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(1082);
      // Undeclared exception!
      document0.outerHtmlHead(charArrayWriter0, 1082, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Element element0 = new Element("na~rames");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(15);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        element0.outerHtmlHead(charBuffer0, 15, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      MockFileWriter mockFileWriter0 = new MockFileWriter(";GNy$V.nDO.=cqiF5Yr", false);
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(mockFileWriter0, (-1203), (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Document.createShell("tite");
      MockFileWriter mockFileWriter0 = new MockFileWriter("F/Ru-^m,GB6?@7j%.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(mockFileWriter0, (-3069), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      CDataNode cDataNode0 = new CDataNode("q");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.nextElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      CDataNode cDataNode0 = new CDataNode("hGY'URnB6$E#{'{u8");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.nextElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$IsLastChild", "org.jsoup.select.Evaluator$IsLastChild");
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      document0.setParentNode(document0);
      Pattern pattern0 = Pattern.compile("#root", 1056);
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_MatchesOwn0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Document.createShell("`=hV@");
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$IsLastChild", "org.jsoup.select.Evaluator$IsLastChild");
      // Undeclared exception!
//      try { 
        document0.is("<U6YYy$");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '<U6YYy$': unexpected token at '<U6YYy$'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("b");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren(1, nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("FYGl<:1|`#", "FYGl<:1|`#");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html("FYGl<:1|`#");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = new Document("k1~");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.html("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      // Undeclared exception!
//      try { 
        document0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("naframes", "naframes");
      Comment comment0 = new Comment("naframes");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
//      try { 
        document0.html("naframes");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("ZB.<U.ODDm0ST#w>", "jeCRTP t,1A|");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      document0.setParentNode(document0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(124);
      // Undeclared exception!
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("vm\t", "vm\t");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "var");
      // Undeclared exception!
//      try { 
        document0.html(charBuffer0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("n=!TI=!%At'Gg", "n=!TI=!%At'Gg");
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
//      try { 
        document0.html(charBuffer0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "K=5W2PN\"C7+J{7");
      // Undeclared exception!
//      try { 
        document0.html((OutputStreamWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("br", "E/y0xu");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      // Undeclared exception!
//      try { 
        document1.html();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", "ScriptDataDoubleEscapedDashDash");
      DocumentType documentType0 = new DocumentType("iH3dZgr3E", "eoyS%(o]B^ihQ", ":nth-child(%d)");
      document0.setParentNode(documentType0);
      // Undeclared exception!
//      try { 
        document0.html();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&SHSWHR)sef", "br");
      Element element0 = document0.appendElement("br");
      element0.siblingIndex = (-2004682548);
      // Undeclared exception!
//      try { 
        document0.html();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("_Q|%Tu_Gg:Y", "_Q|%Tu_Gg:Y");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", "");
      Element element0 = document0.appendElement(" />");
      element0.siblingIndex = (-1);
      document0.getElementsMatchingText(" />");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("?");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("i6/.k`V(R7uinIj");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: i6/.k`V(R7uinIj
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("-P`nI}Y_^4{~vW", "-P`nI}Y_^4{~vW");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%N?'FscCrxy|", "#root");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matchhes(", ":matchhes(");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText(":matchhes(");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: :matchhes(
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("na~rames", "na~rames");
      Comment comment0 = new Comment("na~rames");
      document0.setParentNode(comment0);
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("na~rames");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("bpr", "body");
      Element element0 = document0.body();
      element0.siblingIndex = (-1395);
      // Undeclared exception!
//      try { 
        document0.getElementsContainingText("#root");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("qx", "qx");
      Element element0 = document0.appendElement("qx");
      element0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.getElementsContainingOwnText("qx");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iPsindex", "6$ u\\T-g\"|;");
      DocumentType documentType0 = new DocumentType("iPsindex", "iPsindex", "6$ u\\T-g\"|;");
      document0.setParentNode(documentType0);
      // Undeclared exception!
//      try { 
        document0.getElementsContainingOwnText("e_OrTS");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hY%UINf/6$t#!r{u8", "hY%UINf/6$t#!r{u8");
      document0.setParentNode(document0);
      document0.setSiblingIndex((-1707));
      // Undeclared exception!
//      try { 
        document0.getElementsContainingOwnText("4}n$");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Tag tag0 = Tag.valueOf("W6|I ;v&");
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "j~fz}", attributes0);
      // Undeclared exception!
//      try { 
        pseudoTextElement0.getElementsByTag((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("hGYc'URj/6$E#'{u8", "hGYc'URj/6$E#'{u8");
      document0.setSiblingIndex((-4184));
      document0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.getElementsByTag("hGYc'URj/6$E#'{u8");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("[r");
      DataNode dataNode0 = new DataNode((String) null);
      document0.setParentNode(dataNode0);
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexGreaterThan((-1527));
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("hr", "hr");
      TextNode textNode0 = TextNode.createFromEncoded("hr", "hr");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
//      try { 
        element0.getElementsByIndexEquals((-4054));
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "K=5W2PN\"C7+J{7");
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "org.jsoup.nodes.Element");
      document0.setSiblingIndex((-3301));
      document0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("#root");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("Object must not be null", "D}y:");
      Element element0 = document0.head();
      element0.siblingIndex = (-2013403795);
      // Undeclared exception!
//      try { 
        element0.getElementsByAttributeValueStarting("D}y:", "Object must not be null");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" J>", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("<html>\n <head></head>\n <body>\n   J&gt;\n </body>\n</html>\n<j>></j>>", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("+", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("checked");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("+", "7GUK(");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "bv7TgxI(a%9,= sYFO", attributes1);
      // Undeclared exception!
//      try { 
        pseudoTextElement0.getElementsByAttributeValueMatching("+", (Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$AttributeWithValueMatching", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("`!VfoD4CTAgoY", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("O=#[cId*%KuS~TJ", "class");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("w#Y", "/az9VN[");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: /az9VN[
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = new Document("U&gWD_7o#");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding("U&gWD_7o#", "'");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse(" />", "9p");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding((String) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("7isl3=_-j#_J/F", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parse("title", "title");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("title", "\"");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000016 insert position ut %p bounds.", "java.lang.string@0000000016 insert position ut %p bounds.");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("-8Pt44", "qI!W");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeStarting("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("#", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("#", "#");
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#", attributes0);
      // Undeclared exception!
//      try { 
        pseudoTextElement0.getElementsByAttributeStarting(" > ");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("_Q|%Tu_Gg:Y", "_Q|%Tu_Gg:Y");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", "");
      // Undeclared exception!
//      try { 
        document0.getElementById((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = new Document(":matches(");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = new Document("y_");
      Set<String> set0 = document0.classNames();
      Element element0 = document0.classNames(set0);
      List<Node> list0 = Parser.parseXmlFragment("y_", "br");
      element0.childNodes = list0;
      // Undeclared exception!
//      try { 
        element0.empty();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      Element element0 = document0.body();
      element0.tagName("fq\"\"j1");
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'fq\"\"j1': unexpected token at '\"\"j1'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ZB.<U.ODDm0ST#w>", "ZB.<U.ODDm0ST#w>");
      CDataNode cDataNode0 = new CDataNode("f1!t3(rByNZq");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.cssSelector();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parse("ZB.<U.Om0ST#|>", "ZB.<U.Om0ST#|>");
      Element element0 = document0.body();
      element0.setSiblingIndex((-1250));
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Document.createShell("?");
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("-@ca;f(r ,Af`)P", "^z<E=EyBA$^HkA7W");
      // Undeclared exception!
//      try { 
        document0.child((-1742));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("mim);qsh_z+9k:3&\":", "mim);qsh_z+9k:3&\":");
      CDataNode cDataNode0 = new CDataNode("mim);qsh_z+9k:3&\":");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
//      try { 
        element0.before((Node) cDataNode0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("+GY'UCnB6$i#{'{u8", "+GY'UCnB6$i#{'{u8");
      Element element0 = document0.prependElement("+GY'UCnB6$i#{'{u8");
      document0.setParentNode(element0);
      // Undeclared exception!
//      try { 
        element0.before((Node) document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before("meta[name=charset]");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&SHSWHR)sef", "br");
      Element element0 = document0.appendElement("br");
      element0.siblingIndex = (-2004682548);
      // Undeclared exception!
//      try { 
        element0.before("br");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: -2004682548, Size: 2
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("value", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "value", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.attr((String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.attr(" />", " />");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse(" />", "cjhD>F03sx");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, "e%*Q3hyB[KQDxza");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      Element element0 = document0.prependElement("hGY'URnB6$E#{'{u8");
      document0.setParentNode(element0);
      // Undeclared exception!
//      try { 
        document0.appendTo(element0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&{SHSWHR)5sef", "br");
      // Undeclared exception!
//      try { 
        document0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("pKufxif>.9h|H\"", "mM?;O-]h");
      Element element0 = document0.head();
      element0.before((Node) document0);
      // Undeclared exception!
      document0.appendElement("br");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("qx", "qx");
      List<Node> list0 = Parser.parseFragment("qx", (Element) document0, "T");
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.appendElement("qx");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.settings((ParseSettings) null);
      Document document0 = parser0.parseInput("hGY'RnB6$E#{'{u8", "jbfT}(V");
      // Undeclared exception!
//      try { 
        document0.appendElement("hGY'RnB6$E#{'{u8");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.Tag", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document("`=hV@");
      // Undeclared exception!
//      try { 
        document0.appendElement((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = new Document("k1~");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.appendChild(document0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";)_63I#SJj*fJ[", ";)_63I#SJj*fJ[");
      Tag tag0 = Tag.valueOf(";)_63I#SJj*fJ[");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "nowrap", attributes0);
      document0.setParentNode(element0);
      // Undeclared exception!
//      try { 
        element0.appendChild(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "br");
      // Undeclared exception!
//      try { 
        document0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell("kBd");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("hGY'URnB6$E#{'{u8");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Element element0 = new Element("na~rames");
      DataNode dataNode0 = new DataNode("Tag name must not be empty.", "na~rames");
      element0.parentNode = (Node) dataNode0;
      // Undeclared exception!
//      try { 
        element0.append("i?[jj&(");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = new Document("akDxi6/vY");
      document0.appendTo(document0);
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("DLP[:M4so");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Element element0 = new Element("]E,fl");
      Document document0 = Parser.parseBodyFragmentRelaxed("HByYh`I$aET3<xW97", "HByYh`I$aET3<xW97");
      document0.setParentNode(element0);
      // Undeclared exception!
//      try { 
        document0.after("]E,fl");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("qx", "qx");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "w)vzhrcl=ie^0\"ld-@}", attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "!z!2%bodm{|>+");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parse("J@t6", "RB8Ts:ar0Q=86/bvLlS");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      document0.hasClass("`Glf&");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&SHSQHROsewsf", ">&SHSQHROsewsf");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("B#'-Yv ", false);
      document0.prependChild(xmlDeclaration0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("_Q|%Tu_Gg:Y", "_Q|%Tu_Gg:Y");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse(" />", "9p");
      Element element0 = document0.appendElement(" />");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = new Document("`=hV@");
      Element element0 = document0.appendTo(document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matczes(", ":matczes(");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("kBd");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      element1.prepend("");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = new Document("hGY'URnB6$E#{'{u8");
      Element element0 = document0.prependElement("hGY'URnB6$E#{'{u8");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell(":matczes(");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":matches(", ":matches(");
      // Undeclared exception!
//      try { 
        document0.child(1565);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1565, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("Z.<U.Om0ST#|>", "Z.<U.Om0ST#|>");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":matczes(", "s+");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matczes(", ":matczes(");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ZB.<U.ODDm0ST#w>", "ZB.<U.ODDm0ST#w>");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Element element0 = new Element("Children collection to be inserted must not be null.");
      Pattern pattern0 = Pattern.compile("Children collection to be inserted must not be null.", 0);
      element0.getElementsByAttributeValueMatching("Children collection to be inserted must not be null.", pattern0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parse(":matches(", ":matches(");
      // Undeclared exception!
//      try { 
        document0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("br", "R");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.appendElement("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Element element0 = new Element("b");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(38);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlHead(charArrayWriter0, 38, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.appendElement("br");
      element0.appendElement("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9p", "9p");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.toString();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("!Y7y&%2(o");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = new Document("k1~");
      document0.addClass("k1~");
      Element element0 = document0.toggleClass("li");
      element0.toggleClass("li");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("qx");
      document0.addClass("title");
      Element element0 = document0.toggleClass("qx");
      element0.hasClass("qx");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hGY'URj/6$E#{'{u8", "hGY'URj/6$E#{'{u8");
      document0.addClass(" L#~\t<{0E(3");
      Element element0 = document0.toggleClass("w7v+=9w>2rxNB ");
      element0.hasClass("w7v+=9w>2rxNB ");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("title");
      Element element0 = document0.addClass("naframes");
      element0.toggleClass("$Z8e( Ey3$");
      document0.hasClass("title");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("-->", "-->");
      document0.addClass("-->");
      document0.toggleClass("insert position out of bounds.");
      document0.hasClass("out");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = new Document(" \"a4)zh;=<9:f>p\"");
      Element element0 = document0.addClass("title");
      element0.toggleClass(" \"a4)zh;=<9:f>p\"");
      document0.hasClass("+w@|");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = new Document("k1~");
      document0.addClass("k1~");
      document0.toggleClass("li");
      document0.hasClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Document.createShell("?");
      Element element0 = document0.toggleClass(":matches(");
      element0.hasClass("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_g`~_=JKF8", "1A~)- tL]\"Uz&/V -");
      CDataNode cDataNode0 = new CDataNode(" />");
      document0.appendChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</8woflc}$?", "</8woflc}$?");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b9r", "b9r");
      document0.setParentNode(document0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Comment comment0 = new Comment("6I658Y=/g)");
      Element.preserveWhitespace(comment0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n <head></head>\n <body>\n  br\n </body>\n</html>\n<br>", "");
      document0.getElementsContainingOwnText("<html>\n <head></head>\n <body>\n  br\n </body>\n</html>\n<br>");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("<html>\n <head></head>\n <body>\n  br\n </body>\n</html>\n<br>");
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("rt");
      Document document0 = Parser.parse("s4!", "8{jF\"24vBdPHjI");
      document0.prependChild(cDataNode0);
      document0.getElementsContainingOwnText("Kw(Lu");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<!--", "<!--");
      document0.getElementsContainingOwnText("O$qNS ~v");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("HByYh`I$aET3<xW97", "naframes");
      Document document1 = document0.normalise();
      document1.appendText("Pattern syntax error: ");
      document1.text();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      document0.appendText("hGY'URnB6$E#{'{u8");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.appendElement("br");
      element0.appendElement("br");
      document0.getElementsMatchingText("br");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hGY'RnB6$E#{'{u8", "hGY'RnB6$E#{'{u8");
      document0.title("+x");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      Comment comment0 = new Comment("hGY'URnB6$E#{'{u8", "g<");
      document0.appendChild(comment0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "br");
      document0.getElementById("s+Zr2u+^>|{U");
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Document.createShell("kBd");
      Element element0 = document0.head();
      element0.appendTo(element0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("gi:", "gi:");
      document0.setParentNode(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.setParentNode(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":matches(", ":matches(");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parse("S", ": ");
      DocumentType documentType0 = new DocumentType("org.jsoup.nodes.Element$1", "xg^r.-", "<4Jz<");
      document0.setParentNode(documentType0);
      // Undeclared exception!
//      try { 
        document0.previousElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse(" />", "9p");
      document0.appendElement("9p");
      Element element0 = new Element(" />");
      element0.setParentNode(document0);
      assertEquals("9p", document0.baseUri());
      
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      document0.nextElementSibling();
      assertEquals("hGY'URnB6$E#{'{u8", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Element element0 = new Element("textarea");
      Elements elements0 = element0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals(":matches(", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b9r", "b9r");
      Element element0 = document0.body();
      element0.before("KN\"k)bCg6X(8L(Y@J");
      String string0 = element0.cssSelector();
      assertEquals("b9r", element0.baseUri());
      assertEquals("html > body:nth-child(4)", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("?");
      document0.toggleClass("Children collection to be inserted must not be null.");
      document0.cssSelector();
      assertEquals("?", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = new Document(";E&Y%R>");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
//      try { 
        document0.insertChildren(2522, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-15), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "org.jsoup.nodes.element$1");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(1, nodeArray0);
      assertEquals("org.jsoup.nodes.element$1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&{SHSWHR)5sef", "%N?'FscCrxy|");
      List<DataNode> list0 = document0.dataNodes();
      Element element0 = document0.appendElement("%N?'FscCrxy|");
      // Undeclared exception!
//      try { 
        element0.insertChildren((-2), (Collection<? extends Node>) list0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse("Z.<U.Om0ST#|>", "Z.<U.Om0ST#|>");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
      assertEquals("Z.<U.Om0ST#|>", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/>", "/>");
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      // Undeclared exception!
//      try { 
        document0.insertChildren(1859, (Collection<? extends Node>) linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^}f*)Y+vA4fH&T(9", "^}f*)Y+vA4fH&T(9");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      DataNode dataNode0 = new DataNode("v8%t");
      nodeArray0[2] = (Node) dataNode0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.dataNodes();
      assertEquals(2, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse(":matches(", ":matches(");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(":matches(", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("5\"8}+(:6(WRYfcq/U,l", "v_e!w");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("v_e!w", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      Comment comment0 = new Comment("hGY'URnB6$E#{'{u8", "g<");
      document0.appendChild(comment0);
      document0.setParentNode(document0);
      Element element0 = document0.nextElementSibling();
      assertEquals("hGY'URnB6$E#{'{u8", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Document.createShell("[r");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1527));
      assertEquals("[r", document0.baseUri());
      assertEquals(4, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Element element0 = new Element("naframes");
      Element element1 = element0.selectFirst("naframes");
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.is("b");
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      document0.getAllElements();
      assertEquals("id", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parse(":matches(", ":matches(");
      // Undeclared exception!
//      try { 
        document0.before("[VNs0+=");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~BQc:kj~Wl\"VL!mu5", " > ");
      document0.getElementsByAttribute(" > ");
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iPsindex", "6$ u\\T-g\"|;");
      document0.getElementsByAttributeValueNot("6$ u\\T-g\"|;", "6$ u\\T-g\"|;");
      assertEquals("6$ u\\T-g\"|;", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hGYc%URjf/6$E#f{u8", "hGYc%URjf/6$E#f{u8");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~BQc:kj~Wl\"VL!mu5", " > ");
      document0.doSetBaseUri(" > ");
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      DataNode dataNode0 = new DataNode("hGY'URnB6$E#{'{u8");
      // Undeclared exception!
//      try { 
        document0.after((Node) dataNode0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "K=5W2PN\"C7+J{7");
      document0.getElementsByAttributeValueContaining("head", "head");
      assertEquals("K=5W2PN\"C7+J{7", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      document0.getElementsContainingText("");
      assertEquals(" ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = new Document("k1~");
      Elements elements0 = document0.getElementsByClass("li");
      assertEquals("k1~", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ZB.<U.ODDm0ST#w>", "ZB.<U.ODDm0ST#w>");
      document0.getElementsByAttributeValueEnding("ZB.<U.ODDm0ST#w>", "m");
      assertEquals("ZB.<U.ODDm0ST#w>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Element element0 = new Element("%N?'FscCrxy|");
      Elements elements0 = element0.getElementsByAttributeValueMatching("Text", "B#Lu*qo/4}KUIKoT");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parse("gi:", "gi:");
      // Undeclared exception!
//      try { 
        document0.wrap("gi:");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("na~rames", "na~rames");
      Elements elements0 = document0.getElementsMatchingOwnText("na~rames");
      assertEquals(1, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("na~rames", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell("jL&#qP)x*");
      Elements elements0 = document0.getElementsByIndexEquals(60);
      assertEquals("jL&#qP)x*", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">&{SHSWHR)5sef", "br");
      document0.getElementsByAttributeStarting("Did not find balanced marker at '");
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "K=5W2PN\"C7+J{7");
      Elements elements0 = document0.getElementsByIndexLessThan((-760));
      assertEquals("K=5W2PN\"C7+J{7", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      // Undeclared exception!
//      try { 
        document0.after("DLP[:M4so");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      Pattern pattern0 = Pattern.compile("Children collection to be inserted must not be null.", (-16));
      document0.getElementsMatchingOwnText(pattern0);
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parse("ZB.<U.Om0ST#|>", "ZB.<U.Om0ST#|>");
      Element element0 = document0.body();
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("ZB.<U.Om0ST#|>", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = new Document(" \"a4)zh;=<9:f>p\"");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting((String) null, "title");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000016 insert position ut %p bounds.", "java.lang.string@0000000016 insert position ut %p bounds.");
      document0.getElementsByAttributeValue("-8Pt44", "qI!W");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      Element element0 = document0.attr("", true);
      assertEquals(" ", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("listing", "listing");
      document0.html(" ");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("listing", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":matches(", ":matches(");
      String string0 = document0.wholeText();
      assertEquals(":matches(", document0.baseUri());
      assertEquals(":matches(", string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parse("b9r", "b9r");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("E+", "b9r", true);
      // Undeclared exception!
//      try { 
        document0.before((Node) xmlDeclaration0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Document.createShell("qx");
      document0.addClass("title");
      document0.hasClass("org.jsoup.parser.Token$Tag");
      assertEquals("qx", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Parser.parse("+GY'UCnB6$i#{'{u8", "+GY'UCnB6$i#{'{u8");
      document0.dataset();
      assertEquals("+GY'UCnB6$i#{'{u8", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      Element element0 = document0.tagName("H2");
      assertEquals(1, element0.childNodeSize());
      assertEquals("id", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = new Document(" > ");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parse("S", ": ");
      document0.previousElementSiblings();
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parse("hGY'URnB6$E#{'{u8", "hGY'URnB6$E#{'{u8");
      Element element0 = document0.prependElement("hGY'URnB6$E#{'{u8");
      Element element1 = element0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      Elements elements0 = document0.getElementsMatchingText(" ");
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Parser.parse("m?%to>rdjo", " />");
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Element element0 = new Element(":matches(");
      Elements elements0 = element0.children();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("listing", "listing");
      document0.id();
  }
}
