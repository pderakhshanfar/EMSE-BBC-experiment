/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:25:35 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^Kyqdhv,hb=J'.C", "^Kyqdhv,hb=J'.C");
      document0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.getElementsByIndexGreaterThan(0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      Element element1 = element0.attr("n@3@OfVa!K^l\"=Ltr", "n@3@OfVa!K^l\"=Ltr");
      element1.before("AttributeName");
      element1.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Te/ZH/-;jSdZ", "Te/ZH/-;jSdZ");
      Element element0 = new Element(".");
      Element element1 = document0.doClone(element0);
      element1.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("class", "class");
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      document0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = new Document("m,}#DzL");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringBuilder0, 492, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Element element0 = new Element("WmjMoM&");
      StringBuilder stringBuilder0 = new StringBuilder(":nth-child(%d)");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlHead(stringBuilder0, 4342, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea", (Attributes) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Te/ZH/-;jSdZ", "Te/ZH/-;jSdZ");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9JT-[r5<W", "{I0 9JT-[r5<W");
      Document document1 = new Document("{I0 9JT-[r5<W");
      document0.appendTo(document1);
      document0.wrap("{I0 9JT-[r5<W");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[r5<W", "{I0 9J-[r5<W");
      Element element0 = document0.head();
      Element element1 = (Element)element0.nextSibling();
      element1.wrap("body");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document("*mmMaCDaP}LRMM;5h_:");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document1.appendTo(document0);
      element0.val("5sQ%0<z'");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      document0.siblingIndex = (-1012);
      document0.val(" VWw)B0<@w[)");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      Element element0 = new Element(tag0, "body");
      element0.val("body");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      document0.val("~qg9QZQs@bPC4");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      document0.appendChild(document0);
      document0.toggleClass("{I0 9J-5<W");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.toggleClass("@nS`(Ab$-QjD");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = new Document("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      document0.toggleClass("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[r5<W", "{I0 9J-[r5<W");
      Element element0 = document0.head();
      element0.text("{I0 9J-[r5<W");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "class");
      document0.text("img");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000124 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default tl]j-[t0x{:/n{3 iso646-us ibm367 646 us", "DpLlmRx(BVWX$");
      document0.tagName("tfoot");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[rq<", "{I0 9J-[rq<");
      Document document1 = Document.createShell("attributeDoubleValueCharsSorted");
      Element element0 = document0.appendTo(document1);
      element0.tagName("{I0 9J-[rq<");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Element element0 = new Element("id");
      element0.tagName(".xnX");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Element element0 = new Element(">U59Gv$!9yF@Vw*F");
      element0.tagName();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      Element element0 = new Element(tag0, "body");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = new Document("+wS3@'0T3");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Element element0 = new Element("gE");
      element0.selectFirst("gE");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "#root");
      document0.select("[vD.F+l]reDQpLh");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gE", "gE");
      Element element0 = new Element("gE");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      document0.insertChildren((-1), nodeArray0);
      document0.select("gE");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("~qg9QZQs@bPC4");
      Element element0 = document0.appendElement("~qg9QZQs@bPC4");
      element0.removeClass("%\u0002#@ lZg|`5rr2s.'");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = new Document("*mmMaCDaP}LRMM;5h_:");
      document0.appendTo(document0);
      document0.removeClass(" > ");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.removeClass("#root");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.prepend("org.jsoup.nodes.Element$1");
      document0.appendTo(element0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.prependText(",2");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.prependText(",2");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.prependText(",2");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("u3", "u3");
      Element element0 = document0.head();
      element0.prependChild(element0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*mSMaCDaPF}LRMM;5h_:", "*mSMaCDaPF}LRMM;5h_:");
      document0.appendTo(document0);
      DataNode dataNode0 = new DataNode("ScriptDataDoubleEscapeStart", "ScriptDataDoubleEscapeStart");
      document0.prependChild(dataNode0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.prepend("'0A;%!|*Ax;q/k");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = new Document("*mmMaCDaP}LRMM;5h_:");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(":matches(%s)", "value");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("u", "u");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("~qg9QZQs@bPC4", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", (Attributes) null);
      document0.appendTo(pseudoTextElement0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[r5<W", "{I0 9J-[r5<W");
      document0.appendTo(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      document0.html("br");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|Z2?zhEq3W6_s`", "textarea");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = new Document(".c1E&");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("}1d{6{8q^1|2@4*");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Element element0 = new Element(">eUW*uUm");
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag(">eUW*uUm");
      element0.is((Evaluator) evaluator_Tag0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell(">eUW*uUm");
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag(">eUW*uUm");
      document0.is((Evaluator) evaluator_Tag0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      document0.is("image");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gE", "gE");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Element element0 = document0.body();
      element0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "class");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
      document0.text("img");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Element element0 = new Element("{I0 9J-5<W");
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse("{I0A9J-rq<", "{I0A9J-rq<");
      document0.appendTo(document0);
      LinkedHashSet<Element> linkedHashSet0 = new LinkedHashSet<Element>(0);
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("itemscope", "]sA");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("hU", "hU");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{S0hCRG.L69-\"KlgZW", "sCpQ");
      document0.attr("sCpQ", "sCpQ");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.prepend("'0A;%!|*Ax;q/k");
      Pattern pattern0 = Pattern.compile("'0A;%!|*Ax;q/k", 5915);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.prepend("=.?");
      document0.getElementsMatchingText("=.?");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document("x$yoHd");
      Pattern pattern0 = Pattern.compile("x$yoHd");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsMatchingOwnText("$");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "#root");
      document0.getElementsContainingOwnText("[vD.F+l]reDQpLh");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell(">eUW*uUm");
      document0.getElementsByTag(">eUW*uUm");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*mmMaCDaP}LRMM;5h_:", "*mmMaCDaP}LRMM;5h_:");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Document.createShell("~qg9QZQs@bPC4");
      document0.getElementsByIndexLessThan(2034);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "#root");
      Element element0 = document0.createElement("[vD.F+l]reDQpLh");
      element0.getElementsByIndexGreaterThan(0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("itemscope", "]sA");
      document0.getElementsByIndexEquals(1368);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gi,", "gi,");
      document0.getElementsByClass("~qg9QZQs@bPC4");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      document0.getElementsByAttributeValueStarting("^vh-M\"", "<html>\n <head></head>\n <body>\n  {I0 9J-5\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      document0.getElementsByAttributeValueNot("}", "org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("{S0hCRG.L69-\"KlgZW", "{S0hCRG.L69-\"KlgZW");
      document0.attr("{S0hCRG.L69-\"KlgZW", "{S0hCRG.L69-\"KlgZW");
      document0.getElementsByAttributeValueMatching("{S0hCRG.L69-\"KlgZW", "");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell(">eUW*uUm");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-5<W", "{I0 9J-5<W");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Element element0 = new Element("html");
      element0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*mmMaCDaP}LRMM;5h_:", "*mmMaCDaP}LRMM;5h_:");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",", ",");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("m,}#DzL");
      Document document1 = (Document)document0.prepend("m,}#DzL");
      document1.clone();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      document0.appendTo(document0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Document document0 = Parser.parseBodyFragment("\"qz4,,n{n\"gd\u0006hmi", "");
      document0.classNames(set0);
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.toggleClass("<56nS.qOG}x1Rq'aEq8t></56nS.qOG}x1Rq'aEq8t>'0A;%!|*Ax;q/k\n<html>\n <head></head>\n <body></body>\n</html>");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Element element0 = new Element("head");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = new Document("m,}#DzL");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parse("{I0 9J-[r5<W", "{I0 9J-[r5<W");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~qg9QZQs@bPC4", "~qg9QZQs@bPC4");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[rq=<", "{I0 9J-[rq=<");
      Document document1 = new Document("{I0 9J-[rq=<");
      Document document2 = (Document)document1.appendTo(document0);
      document2.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~/kMr(+0+R&>", "~/kMr(+0+R&>");
      Document document1 = (Document)document0.doClone(document0);
      document1.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = new Document("*mmMaCDaP}LRMM;5h_:");
      Element element0 = new Element("P](>0W),Q");
      Element element1 = element0.appendTo(document0);
      element1.before("*mmMaCDaP}LRMM;5h_:");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("{I0 9J-5<W", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", (Attributes) null);
      document0.appendTo(pseudoTextElement0);
      document0.before("");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000124 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default tl]j-[t0x{:/n{3 iso646-us ibm367 646 us", "DpLlmRx(BVWX$");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.attr("~qg9QZQs@bPC4", false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.attr("~qg9QZQs@bPC4", false);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      Parser parser0 = Parser.htmlParser();
      Document document1 = parser0.parseInput("~qg9QZQs@bPC4", "#root");
      document0.appendTo(document1);
      document0.attr("org.jsoup.examples.HtmlToPlainText$FormattingVisitor", "wchKA!+YQv0N");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      document0.setSiblingIndex((-916));
      document0.appendText("}wium\")wM_Mq,-7Rwq");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.appendText("#root");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      CDataNode cDataNode0 = new CDataNode("#root");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "head", attributes0);
      formElement0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("html", "YOA*S!s6Mq;xX*u");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dl");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "F8M", attributes0);
      formElement0.append("TL]j-[T0X{:/N{3");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[rq<", "{I0 9J-[rq<");
      Document document1 = new Document("{I0 9J-[rq<");
      document1.appendTo(document0);
      document1.append("br");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = new Document("gi,");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("LCQ;#Hk,x;O4");
      Element element0 = document0.head();
      element0.after("wwrrmZzNN");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Te/ZH/-;jSdZ", "Te/ZH/-;jSdZ");
      Document document1 = Parser.parseBodyFragmentRelaxed("Te/ZH/-;jSdZ", "Te/ZH/-;jSdZ");
      Document document2 = (Document)document0.appendTo(document1);
      document2.after("Te/ZH/-;jSdZ");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[r5<W", "{I0 9J-[r5<W");
      Element element0 = document0.appendTo(document0);
      element0.addClass("{I0 9J-[r5<W");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.addClass("");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "{I0 9J-5<W");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.wrap("TL]j-[T0X{:/N{3");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Element element0 = new Element("m,}#DzL");
      // Undeclared exception!
//      try { 
        element0.wrap("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "{I0 9J-5<W");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.val("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Element element0 = new Element("head");
      // Undeclared exception!
//      try { 
        element0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = new Document("*mmMaCDaP}LRMM;5h_:");
      // Undeclared exception!
//      try { 
        document0.text("textarea");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tse/ZH/-;jSdZ", "Tse/ZH/-;jSdZ");
      // Undeclared exception!
//      try { 
        document0.tagName("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      // Undeclared exception!
//      try { 
        document0.siblingElements();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal Capacity: -1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("*mmMaCDaP}LRMM;5h_:");
      // Undeclared exception!
//      try { 
        document0.selectFirst("D*Ay]{w1 Cb");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'D*Ay]{w1 Cb': unexpected token at ']{w1 Cb'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gi,", "gi,");
      // Undeclared exception!
//      try { 
        document0.selectFirst((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document("n-H%\"lI?6<");
      // Undeclared exception!
//      try { 
        document0.select((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[rq<", "{I0 9J-[rq<");
      TextNode textNode0 = new TextNode("{I0 9J-[rq<", ":contains(");
      Element element0 = document0.doClone(textNode0);
      Element element1 = document0.appendTo(element0);
      // Undeclared exception!
//      try { 
        Element.preserveWhitespace(element1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document("");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.prependElement("");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("*mmMaCDaP}LRMM;5h_:");
      // Undeclared exception!
//      try { 
        document0.prependElement((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Te/ZH/-;jSdZ", "Te/ZH/-;jSdZ");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Te/ZH/-;jSdZ", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Te/ZH/-;jSdZ", attributes0);
      document0.parentNode = (Node) formElement0;
      // Undeclared exception!
//      try { 
        formElement0.prependChild(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gE", "gE");
      // Undeclared exception!
//      try { 
        document0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = new Document("*mmMaCDaP}LRMM;5h_:");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prepend("v;iM8nCP-`Bo#Y");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("qg>fQBQh$a");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Te/ZH/-;jSdZ", "Te/ZH/-;jSdZ");
      DocumentType documentType0 = new DocumentType("-$F4K8TWk,'$ B", "-$F4K8TWk,'$ B", "Te/ZH/-;jSdZ", "?Vyr&5o\thY|{#<nvQe");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
//      try { 
        document0.prepend("Te/ZH/-;jSdZ");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZL=(", "ZL=(");
      TextNode textNode0 = new TextNode("ZL=(", "ZL=(");
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.parent();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gE", "gE");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(charBuffer0, (-3157), document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[rq<", "{I0 9J-[rq<");
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail((Appendable) null, 0, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("class", "class");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charArrayWriter0, 6, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gE", "gE");
      TextNode textNode0 = TextNode.createFromEncoded("gE", "gE");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
//      try { 
        element0.nextElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Element element0 = new Element(">U59Gv$!9yF@Vw*F");
      // Undeclared exception!
//      try { 
        element0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Element element0 = new Element("html");
      // Undeclared exception!
//      try { 
        element0.is("n@3@OfVa!K^l\"=Ltr");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'n@3@OfVa!K^l\"=Ltr': unexpected token at '@3@OfVa!K^l\"=Ltr'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.is("#root");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "{I0 9J-5<W");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1), nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(4535);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{I0 9J-5<W");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      // Undeclared exception!
      document1.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("sCpQ", "{S0hCRG.L69-\"KlgZW");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "#root");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("2JCL|v)!})MPb");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: 2JCL|v)!})MPb
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("j[J'4J~BY", "j[J'4J~BY");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parse("s!cV&2Kt", "79<z");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("'0A;%!|*Ax;q/k\n<html>\n <head></head>\n <body></body>\n</html>");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: '0A;%!|*Ax;q/k
//         // <html>
//         //  <head></head>
//         //  <body></body>
//         // </html>
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("|Z2?zhEq3W6_s`", "|Z2?zhEq3W6_s`");
      // Undeclared exception!
//      try { 
        document0.getElementsByTag((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = new Document("+wS3@'0T3");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("+wS3@'0T3", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("nGU5", "[)");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: [)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lt:F", "optgroup");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding("lt:F", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining((String) null, "iYeUjT%=z5)=dnL]`");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue((String) null, "{I0 9J-5<W");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeStarting("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      // Undeclared exception!
//      try { 
        document0.getElementById((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("of?rL2@)?&tGpz");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.empty();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.examples.HtmlToPlainText$FormattingVisitor", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", (Attributes) null);
      document0.appendTo(pseudoTextElement0);
      Element element0 = document0.toggleClass("!iFfGnxJZ(");
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '#root.java.lang.String@0000000112': unexpected token at '@0000000112'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*mmMaCDaP}LRMM;5h_:", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.parser.Parser", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.child((-4023));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.before("~qg9QZQs@bPC4");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("hU", "hU");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.attr("org.jsoup.select.Evaluator$AttributeWithValueStarting", "head");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Document.createShell("of?rL2@)?&tGpz");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = parser0.parseFragmentInput("org.jsoup.nodes.Element$1", document0, "org.jsoup.nodes.Element$1");
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.appendTo(document0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[rq<", "{I0 9J-[rq<");
      Document document1 = new Document("{I0 9J-[rq<");
      Element element0 = document0.doClone(document1);
      // Undeclared exception!
//      try { 
        element0.appendTo(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Element element0 = new Element(">U59Gv$!9yF@Vw*F");
      // Undeclared exception!
//      try { 
        element0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AHuYZ6{&%baN=h\"=u}S", "AHuYZ6{&%baN=h\"=u}S");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.appendElement("AHuYZ6{&%baN=h\"=u}S");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
//      try { 
        document0.appendElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = new Document(">U5v!9yFVw*F");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("Tse/ZH/-;jSdZ");
      TextNode textNode0 = new TextNode("CAZ^8EqG, (E&C@", "CAZ^8EqG, (E&C@");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
//      try { 
        element0.append("`,njx2?R>Jr[whm");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = new Document("*mmMaCDaP}LRMM;5h_:");
      document0.appendTo(document0);
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "Uef^R@GEM{", attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "acronym");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Tag tag0 = Tag.valueOf("YOA*S!s6Mq;xX*u");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "YOA*S!s6Mq;xX*u", attributes0);
      File file0 = MockFile.createTempFile("YOA*S!s6Mq;xX*u", "YOA*S!s6Mq;xX*u");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      formElement0.html(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",", ",");
      document0.addClass("n@3@OfVa!K^l\"=Ltr");
      document0.hasClass("org.jsoup.select.CombiningEvaluator$And");
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      document0.prepend("org.jsoup.nodes.Element$1");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[rq<", "{I0 9J-[rq<");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.prepend("org.jsoup.nodes.Element$1");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell("Te/ZH/-;jSdZ");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = new Document("*mmMaCDaP}LRMM;5h_:");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.prependElement("org.jsoup.nodes.Element$1");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      document0.toggleClass("{I0 9J-5<W");
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000124 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default tl]j-[t0x{:/n{3 iso646-us ibm367 646 us", "{I0 9J-[rq=<");
      Element element0 = document0.body();
      element0.html(":first-of-type");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("defer", "#root");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.attr("n@3@OfVa!K^l\"=Ltr", "n@3@OfVa!K^l\"=Ltr");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("{I0 9J-5<W", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", (Attributes) null);
      pseudoTextElement0.ownText();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Element element0 = new Element("html");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = new Document("n-H%\"lI?6<");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*mSMaCDaPF}LRMM;5h_:", "*mSMaCDaPF}LRMM;5h_:");
      DataNode dataNode0 = new DataNode("ScriptDataDoubleEscapeStart", "ScriptDataDoubleEscapeStart");
      document0.prependChild(dataNode0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "{I0 9J-5<W");
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("kY.%g-14wwFYP", "Qh=01k>tQvTU;vwRMPe");
      Pattern pattern0 = Pattern.compile("#root", 59);
      document0.getElementsByAttributeValueMatching("NFdUi;qV", pattern0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[rq<", "{I0 9J-[rq<");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"qz4,,n{n\"gd\u0006hmi", "");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Te/ZH/-;jSdZ", "Te/ZH/-;jSdZ");
      // Undeclared exception!
//      try { 
        document0.html((CharArrayWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charBuffer0, 1, document_OutputSettings1);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell("Te/ZH/-;jSdZ");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[r5<W", "{I0 9J-[r5<W");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(set0);
      document0.classNames((Set<String>) linkedHashSet0);
      document0.toggleClass("org.jsoup.internal.Normalizer");
      document0.hasClass("org.jsoup.internal.Normalizer");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[rq<", "{I0 9J-[rq<");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.hasClass("ascii");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000124 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default tl]j-[t0x{:/n{3 iso646-us ibm367 646 us", "w6=X9N3O");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      document0.addClass(" />");
      element0.hasClass(" />");
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000124 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default tl]j-[t0x{:/n{3 iso646-us ibm367 646 us", "DpLlmRx(BVWX$");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.hasClass("java.lang.string@0000000124 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default tl]j-[t0x{:/n{3 iso646-us ibm367 646 us");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[r5<W", "{I0 9J-[r5<W");
      document0.toggleClass("org.jsoup.Jsoup");
      document0.hasClass("{I0 9J-[r5<W");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Te/ZH/-;jSdZ", "Te/ZH/-;jSdZ");
      document0.hasClass("Te/ZH/-;jSdZ");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", "+AZXQx.'=;O'Z| w");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*mSMaCDaPF}LRMM;5h_:", "*mSMaCDaPF}LRMM;5h_:");
      document0.appendTo(document0);
      Element.preserveWhitespace(document0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("n@3@OfVa!K^l\"=Ltr", "Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.", "n@3@OfVa!K^l\"=Ltr", "Children collection to be inserted must not be null.");
      Element.preserveWhitespace(documentType0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.prepend("'0A;%!|*Ax;q/k");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gE", "TL]j-[T0X{:/N{3");
      document0.title("/;b}|wTYSU*KW^%C");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iX,", "iX,");
      Element element0 = new Element("i2");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      Element element1 = document0.insertChildren((-1), nodeArray0);
      element1.text();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[rq<", "{I0 9J-[rq<");
      DataNode dataNode0 = DataNode.createFromEncoded("", "");
      document0.appendChild(dataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~/kMr(+0+R&>", "~/kMr(+0+R&>");
      document0.getElementById("4I0]9`-[r5;W");
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("{I0 9J-5<W", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", (Attributes) null);
      document0.appendTo(pseudoTextElement0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "{I0 9J-5<W");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = new Document("");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("u", "u");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[r5<W", "{I0 9J-[r5<W");
      Document document1 = new Document("{I0 9J-[r5<W");
      document1.parentNode = (Node) document0;
      document1.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[rq<", "{I0 9J-[rq<");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
      assertEquals("{I0 9J-[rq<", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[r5<W", "{I0 9J-[r5<W");
      Element element0 = document0.appendTo(document0);
      Element element1 = element0.nextElementSibling();
      assertEquals("{I0 9J-[r5<W", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = new Document("*mmMaCDaP}LRMM;5h_:");
      document0.nextElementSibling();
      assertEquals("*mmMaCDaP}LRMM;5h_:", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tse/ZH/-;jSdZ", "Tse/ZH/-;jSdZ");
      DocumentType documentType0 = new DocumentType("CharacterReferenceInRcdata", "Tse/ZH/-;jSdZ", "_R}h~(<", "java.lang.string@0000000093 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
//      try { 
        element0.nextElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-5<W", "{I0 9J-5<W");
      document0.siblingElements();
      assertEquals("{I0 9J-5<W", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", ":nth-child(%d)");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals(":nth-child(%d)", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Te/ZH/-;jSdZ", "Te/ZH/-;jSdZ");
      document0.appendTo(document0);
      document0.cssSelector();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Element element0 = new Element(">U5v!9yFVw*F");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add(">U5v!9yFVw*F");
      element0.classNames((Set<String>) linkedHashSet0);
      Document document0 = Parser.parseBodyFragmentRelaxed(">U5v!9yFVw*F", ">U5v!9yFVw*F");
      document0.appendTo(element0);
      assertEquals(1, element0.childNodeSize());
      
      document0.cssSelector();
      assertEquals(">U5v!9yFVw*F", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
//      try { 
        document0.insertChildren(4527, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "#root");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1625949436), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "{I0 9J-5<W");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array must not contain any null objects
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      // Undeclared exception!
//      try { 
        document0.insertChildren(41, (Collection<? extends Node>) linkedHashSet0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "#root");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1983), (Collection<? extends Node>) linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*mmMaCDaP}LRMM;5h_:", "*mmMaCDaP}LRMM;5h_:");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("*mmMaCDaP}LRMM;5h_:", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(":matches(%s)", "value");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("value", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|Z2?zhEq3W6_s`", "textarea");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[rq<", "{I0 9J-[rq<");
      Element element0 = document0.appendTo(document0);
      DocumentType documentType0 = new DocumentType("{I0 9J-[rq<", "org.jsoup.parser.Tokeniser", "java.lang.string@0000000109 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us g?,%!mna7nnm? tl]j-[t0x{:/n{3");
      element0.after((Node) documentType0);
      element0.lastElementSibling();
      assertEquals(3, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[r5<W", "{I0 9J-[r5<W");
      document0.selectFirst("org.jsoup.Jsoup");
      assertEquals("{I0 9J-[r5<W", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = new Document("*mmMaCDaP}LRMM;5h_:");
      Elements elements0 = document0.getElementsMatchingText("bVq]&1E6*");
      assertEquals("*mmMaCDaP}LRMM;5h_:", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      document0.getAllElements();
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      // Undeclared exception!
//      try { 
        document0.before("~qg9QZQs@bPC4");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      document0.getElementsByAttribute("org.jsoup.nodes.Element$1");
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Element element0 = new Element("html");
      Element element1 = element0.shallowClone();
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      document0.doSetBaseUri(" No{wLUIs\"Cb");
      assertEquals(" No{wLUIs\"Cb", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = new Document("gi,");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("g[Yt#B6", "J(L6L.M#_UQnu5");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = new Document("*mmMaCDaP}LRMM;5h_:");
      document0.getElementsByAttributeValueContaining("6g!O?c=1[y[r", "K");
      assertEquals("*mmMaCDaP}LRMM;5h_:", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsContainingText("n@3@OfVa!K^l\"=Ltr");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("z.6p&pA#");
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Element element0 = new Element("gE");
      Elements elements0 = element0.getElementsByAttributeValueEnding("gE", "gE");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iX,", "iX,");
      document0.is(",Rwrl+K");
      assertEquals(1, document0.childNodeSize());
      assertEquals("iX,", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.examples.HtmlToPlainText$FormattingVisitor", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", (Attributes) null);
      Elements elements0 = pseudoTextElement0.getElementsByAttributeValueMatching("<html>\n <head></head>\n <body>\n  {I0 9J-5\n </body>\n</html>", "org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      Elements elements0 = document0.getElementsMatchingOwnText("org.jsoup.select.Evaluator$Id");
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("Te/ZH/-;jSdZ");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertEquals(3, elements0.size());
      assertEquals("Te/ZH/-;jSdZ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Te/ZH/-;jSdZ", "Te/ZH/-;jSdZ");
      document0.getElementsByAttributeStarting("3A;SEkXK9yUij");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Te/ZH/-;jSdZ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("defer", "#root");
      Elements elements0 = document0.getElementsByIndexLessThan(0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Te/ZH/-;jSdZ", "Te/ZH/-;jSdZ");
      // Undeclared exception!
//      try { 
        document0.after("Te/ZH/-;jSdZ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gE", "gE");
      Pattern pattern0 = Pattern.compile("gE", 2451);
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("gE", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", "+AZXQx.'=;O'Z| w");
      Element element0 = document0.prepend(" ");
      boolean boolean0 = element0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[r5<W", "{I0 9J-[r5<W");
      // Undeclared exception!
//      try { 
        document0.select("{I0 9J-[r5<W");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '{I0 9J-[r5<W': unexpected token at '{I0 9J-[r5<W'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting(";<MN5dI}%4:dd]FP?z", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("'}fOo6Zo1", "x>ZSr{_o1>7?e");
      document0.getElementsByAttributeValue("bC", "x>ZSr{_o1>7?e");
      assertEquals(1, document0.childNodeSize());
      assertEquals("x>ZSr{_o1>7?e", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.attr("Children collection to be inserted must not be null.", false);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*mmMaCDaP}LRMM;5h_:", "*mmMaCDaP}LRMM;5h_:");
      document0.wholeText();
      assertEquals("*mmMaCDaP}LRMM;5h_:", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~/kMr(+0+R&>", "~/kMr(+0+R&>");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iX,", "iX,");
      Elements elements0 = document0.getElementsContainingOwnText("iX,");
      assertEquals("iX,", document0.baseUri());
      assertEquals(1, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{I0 9J-5<W", "~qg9QZQs@bPC4");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZL=(", "ZL=(");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.child(55);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 55, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000124 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default tl]j-[t0x{:/n{3 iso646-us ibm367 646 us", "{I0 9J-[rq=<");
      document0.previousElementSiblings();
      assertEquals("{I0 9J-[rq=<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.prependElement("body");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Element element0 = new Element("html");
      Pattern pattern0 = Pattern.compile("html", 3);
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{I0 9J-[r5<W", "{I0 9J-[r5<W");
      // Undeclared exception!
//      try { 
        document0.wrap("body");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }
}
