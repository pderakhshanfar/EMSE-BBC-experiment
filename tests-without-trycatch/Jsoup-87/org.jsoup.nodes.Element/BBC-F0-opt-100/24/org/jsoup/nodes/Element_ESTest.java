/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:12:56 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseError;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("-]~X=$fbcPc");
      Element element0 = document0.body();
      document0.previousSibling();
      element0.setSiblingIndex((-1436010313));
      element0.data();
      document0.cssSelector();
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("noRu]rke", "noRu]rke");
      Element element0 = document0.appendElement("noRu]rke");
      element0.setSiblingIndex((-921));
      element0.val("noRu]rke");
      // Undeclared exception!
//      try { 
        element0.getElementsByIndexEquals((-921));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pc", "Pc");
      TextNode textNode0 = new TextNode("Pc");
      document0.parentNode = (Node) textNode0;
      document0.dataNodes();
      // Undeclared exception!
//      try { 
        document0.previousElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedEndTagOpen", "ScriptDataEscapedEndTagOpen");
      Element element0 = document0.head();
      LinkedList<XmlDeclaration> linkedList0 = new LinkedList<XmlDeclaration>();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      element1.id();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "CK<l";
      Document document0 = Parser.parse("CK<l", "CK<l");
      Elements elements0 = document0.getAllElements();
      Element element0 = document0.toggleClass("CK<l");
      // Undeclared exception!
//      try { 
        element0.insertChildren((-1), (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(":nth-child(%d)", parseSettings0);
      Tag.valueOf("l)dY!om A#]V[tg-zA", parseSettings0);
      parseSettings0.normalizeTag(":nth-child(%d)");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      attributes1.put(":nth-child(%d)", "MgfGa|");
      Element element0 = new Element(tag0, ":nth-child(%d)", attributes1);
      element0.getElementsByAttributeStarting(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("bv", "bv");
      document0.appendElement("bv");
      document0.getElementsContainingOwnText("bv");
      document0.child(1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "3&bx^w");
      DocumentType documentType0 = new DocumentType("3&bx^w", "!C;)}g$`Z", "NK,~B(em*-y'y{&p", "!C;)}g$`Z", "3&bx^w");
      document0.setParentNode(documentType0);
      Document document1 = document0.normalise();
      document1.ownText();
      document1.setSiblingIndex((-543));
      document1.attributes();
      document0.tagName("class");
      DocumentType documentType1 = new DocumentType("!C;)}g$`Z", "", "", "!C;)}g$`Z");
      document0.removeClass("class");
      Element element0 = document1.toggleClass("SYSTEM");
      element0.dataset();
      PipedWriter pipedWriter0 = new PipedWriter();
      documentType0.toString();
      document0.hasSameValue(pipedWriter0);
      document1.setSiblingIndex((-543));
      // Undeclared exception!
//      try { 
        element0.getElementsByAttributeValueContaining("eP7B;lr9", "eP7B;lr9");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: -542
//         //
//         verifyException("java.util.Collections$EmptyList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("noRu]rke", "noRu]rke");
      DocumentType documentType0 = new DocumentType("noRu]rke", "noRu]rke", (String) null, (String) null);
      document0.parentNode = (Node) documentType0;
      Element element0 = document0.appendElement("noRu]rke");
      element0.previousElementSiblings();
      // Undeclared exception!
//      try { 
        document0.wrap("(z;@C<367**.2");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "class";
      Document document0 = Parser.parseBodyFragment("class", "3&bx^w");
      DocumentType documentType0 = new DocumentType("class", "NK,~B(em*-y'}{&p", "!C;)}g$`Z");
      document0.setParentNode(documentType0);
      Document document1 = document0.normalise();
      document1.ownText();
      int int0 = (-543);
      document1.setSiblingIndex((-543));
      document1.attributes();
      document0.tagName("class");
      // Undeclared exception!
//      try { 
        documentType0.wrap("!C;)}g$`Z");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      document0.getElementsByAttributeValueNot("bv", " ");
      document0.appendElement("bv");
      document0.dataNodes();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = new Document("*ghyg7:j");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Children collection to be inserted must not be null.", true);
      document0.reparentChild(xmlDeclaration0);
      document0.previousElementSiblings();
      // Undeclared exception!
//      try { 
        document0.appendChild(xmlDeclaration0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("noRu]rke", "noRu]rke");
      Element element0 = document0.appendElement("noRu]rke");
      document0.childNodes = null;
      Element element1 = element0.val("noRu]rke");
      document0.previousElementSiblings();
      // Undeclared exception!
//      try { 
        element1.getAllElements();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("CK<l", "CK<l");
      Element element0 = document0.toggleClass("CK<l");
      Document document1 = new Document("CK<l");
      element0.toggleClass("CK<l");
      element0.hasClass("java.lang.string@0000000050");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "java.lang.string@0000000050");
      // Undeclared exception!
//      try { 
        element0.html(charBuffer0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("CK<l", "CK<l");
      Element element0 = document0.toggleClass("CK<l");
      document0.childNodes = null;
      Document document1 = new Document("CK<l");
      Element element1 = element0.toggleClass("CK<l");
      Document document2 = Parser.parseBodyFragment("fW!_QPu g3Z>mS)`MDu", "3(EL");
      document2.getElementById("java.lang.string@0000000050");
      // Undeclared exception!
//      try { 
        element1.getElementsByTag("Y^$W5H,m4");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Element element0 = new Element("h2");
      Document document0 = Document.createShell("h2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document1 = document0.clone();
      Charset charset0 = document1.charset();
      charset0.aliases();
      element0.selectFirst("h2");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("bv");
      document0.appendElement("bv");
      document0.getElementsContainingOwnText("bv");
      document0.getAllElements();
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute((String) null);
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) evaluator_Attribute0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("noRuirks", "noRuirks");
      document0.setSiblingIndex((-231));
      Element element0 = document0.appendElement("noRuirks");
      document0.prependChild(element0);
      element0.getElementsContainingText("noRuirks");
      document0.getElementsContainingText("noRuirks");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Parser.parse("CtG<l", "CtG<l");
      Document document0 = Parser.parseBodyFragment("CtG<l", "CtG<l");
      Document document1 = new Document("CtG<l");
      document0.siblingIndex = (-3167);
      document0.val("P+n[W:2\"&|:!#%XW");
      Element element0 = document0.toggleClass("CtG<l");
      document0.hasClass("java.1ang.string@0000000050");
      element0.append("java.1ang.string@0000000050");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("{P@FD@j]H})QCL7~;X", "{P@FD@j]H})QCL7~;X");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.getElementById("{P@FD@j]H})QCL7~;X");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Element element0 = new Element("wbr");
      Element element1 = element0.append("wbr");
      element1.toString();
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset((Charset) null);
//      try { 
        element0.outerHtmlTail(pipedWriter0, 1235, document_OutputSettings4);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bv", "bv");
      Element element0 = document0.appendElement("bv");
      document0.getElementsContainingOwnText("bv");
      document0.getElementsContainingText("textarea");
      // Undeclared exception!
//      try { 
        element0.wrap("<!doctype");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      Document document1 = (Document)document0.val("InColumnGroup");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(11);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append(':');
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(11);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      // Undeclared exception!
      document1.outerHtmlTail(charArrayWriter1, 1194, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ucBYP]t#", "ucBYP]t#");
      Element element0 = document0.appendElement("java.lang.string@0000000050");
      element0.hasText();
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.getElementsContainingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Element element0 = new Element("ScriptDataDoubleEscapeStart");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("a)b Uf[.H{ER", true);
      element0.parentNode = (Node) xmlDeclaration0;
      element0.doSetBaseUri("bv");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      element0.getElementsByAttributeValueEnding("org.jsoup.nodes.Document", "noquirks");
      String string0 = "java.lang.string@0000000069";
      // Undeclared exception!
//      try { 
        element0.html("java.lang.string@0000000069");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("SMwRMqF |", "SMwRMqF |");
      document0.previousElementSiblings();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "SMwRMqF |");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(stringBuilder0, (-7337), document_OutputSettings3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Element element0 = new Element("wbr");
      MockFile mockFile0 = new MockFile("VM8NJT(CX:>ch", "5lG");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('<');
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Entities.EscapeMode entities_EscapeMode1 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode1);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset(charset0);
      element0.outerHtmlHead(printStream0, 62, document_OutputSettings4);
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = new Element("wbr");
      element0.setSiblingIndex((-2251));
      Element element1 = element0.append("wbr");
      element1.toString();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("<ava.lang.string00000008O");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.dataNodes();
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bv", "noQuirks");
      Element element0 = document0.appendElement("noQuirks");
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`~UX)'\"<F\"PwZ");
      char[] charArray0 = new char[6];
      element0.getElementsByAttributeValueNot(" rp!", "bv");
      charArray0[0] = 'A';
      charArray0[1] = 'R';
      charArray0[2] = 'I';
      charArray0[3] = '9';
      charArray0[4] = 'i';
      charArray0[5] = '<';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      // Undeclared exception!
//      try { 
        element0.outerHtmlHead(charBuffer0, 8224, document_OutputSettings2);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = new Document("fqDBFH*/");
      Element element0 = document0.append("");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Tag tag0 = Tag.valueOf("java.lang.string@0000000050 c<l", parseSettings0);
      Tag.valueOf("org.jsoup.parser.Token");
      CDataNode cDataNode0 = new CDataNode("6C>yNf/(>l|");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("6C>yNf/(>l|", "ji,^,kQ/E}v@T_W)_");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "6C>yNf/(>l|", attributes1);
      Element element0 = pseudoTextElement0.appendText("org.jsoup.nodes.Element$2");
      element0.getElementsMatchingOwnText("java.lang.string@0000000050 c<l");
      pseudoTextElement0.attributes();
      Element element1 = element0.appendText("p");
      element1.setBaseUri("org.jsoup.helper.W3CDom$W3CBuilder");
      pseudoTextElement0.getElementsByAttribute("6C>yNf/(>l|");
      element1.toggleClass(" />");
      pseudoTextElement0.addClass("");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = new Document("bv");
      Element element0 = document0.appendElement("bv");
      element0.siblingIndex = (-2);
      // Undeclared exception!
//      try { 
        element0.getElementsContainingText("24>cB${w-[");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      boolean boolean0 = false;
      Parser.unescapeEntities("RJ:j.Fcv&", false);
      int int0 = (-3356);
      Parser parser1 = parser0.setTrackErrors((-3356));
      Document document0 = parser1.parseInput("</", "</");
      DataNode dataNode0 = DataNode.createFromEncoded("\"h$&3`%v#KNV{]`Bxz", "A");
      dataNode0.getWholeData();
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
//      try { 
        element0.getElementsByIndexGreaterThan((-3356));
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Element element0 = new Element("wbr");
      Element element1 = element0.append("wbr");
      element0.toString();
      element1.clearAttributes();
      element1.getElementsMatchingOwnText("<wbr>wbr</wbr>");
      element1.tag();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("{czfnbd^e", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put("html", "Z.hSMj`/As");
      Attributes attributes3 = attributes2.put("html", true);
      Element element0 = new Element(tag0, "java.lang.string@0000000076", attributes3);
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000076");
      TextNode textNode0 = cDataNode0.text("{czfnbd^e");
      Element element1 = element0.doClone(textNode0);
      element1.getElementsContainingOwnText("html");
      // Undeclared exception!
//      try { 
        element1.after("{czfnbd^e");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = new Document("i`d]gera");
      Document document1 = Document.createShell("L<JsSM3i,' 0XY3h{K");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Element element0 = document1.createElement("This is a searchable index. Enter search keywords: ");
      document0.getElementsByAttributeValue("h\"s:#iO!r7", "N/(");
      document0.prependElement("This is a searchable index. Enter search keywords: ");
      document1.children();
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.getElementsContainingText("1{R#&l@a>7*fj");
      document0.ensureChildNodes();
      document0.getElementsByTag("h\"s:#iO!r7");
      document0.parentNode = (Node) element0;
      document0.getElementsByIndexGreaterThan((-1756));
      document1.getElementsByIndexLessThan((-1756));
      Element element1 = document0.parent();
      Set<String> set0 = element1.classNames();
      Element element2 = element1.classNames(set0);
      element2.getElementsByIndexLessThan(58);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$NodeList");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jsoup.nodes.Element$NodeList");
      CDataNode cDataNode0 = new CDataNode("F");
      cDataNode0.toString();
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
//      try { 
        element0.prependChild(node0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wbr", "wbr");
      Document document1 = (Document)document0.toggleClass("wbr");
      document0.hasClass("encoding");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "wbr", 0, 0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document1.outerHtmlTail(charBuffer0, 663, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Element element0 = new Element("0i+er2gn~%):u]");
      element0.getElementsByAttributeValueContaining("Unexpectedly reached end of file (EOF) in input state [%s]", "Insert position out of bounds.");
      Node[] nodeArray0 = new Node[0];
      Element element1 = element0.insertChildren((-1), nodeArray0);
      element0.ownText();
      element0.dataset();
      element0.wholeText();
      element0.getElementsByIndexGreaterThan(21);
      Element element2 = element1.removeClass(".rxW`");
      element2.ensureChildNodes();
      element2.setSiblingIndex((-1950));
      element0.getElementsByIndexEquals(21);
      element0.ensureChildNodes();
      element1.children();
      // Undeclared exception!
//      try { 
        element1.getElementsByAttributeValueStarting("", "+gu");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      Element element0 = document0.appendElement("bv");
      element0.siblingIndex = (-1);
      // Undeclared exception!
      document0.getElementsContainingOwnText("bv");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.getElementsMatchingOwnText("");
      Element element0 = document0.toggleClass(";B1`hC;)G_%{<Yhz");
      document0.hasClass(";B1`hC;)G_%{<Yhz");
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      // Undeclared exception!
//      try { 
        element0.html(charBuffer0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.comment", "org.jsoup.nodes.comment");
      document0.reparentChild(document0);
      document0.hasClass(" @");
      document0.parents();
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(charBuffer0, 65, document_OutputSettings4);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      document0.hasClass("html");
      CDataNode cDataNode0 = new CDataNode("html");
      TextNode textNode0 = TextNode.createFromEncoded("5SN'y%* ", "5SN'y%* ");
      Node node0 = cDataNode0.doClone(textNode0);
      // Undeclared exception!
//      try { 
        document0.prependChild(node0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document("bv");
      String string0 = "java.lang.string@0000000076";
      DataNode dataNode0 = DataNode.createFromEncoded("java.lang.string@0000000076", "bv");
      DataNode dataNode1 = dataNode0.setWholeData("java.lang.string@0000000076");
      Element element0 = document0.appendChild(dataNode1);
      element0.hasText();
      document0.getElementsByIndexEquals(5712);
      document0.doSetBaseUri("</");
      TextNode textNode0 = TextNode.createFromEncoded("br", "org.jsoup.select.NodeFilter$FilterResult");
      // Undeclared exception!
//      try { 
        textNode0.childNode((-2588));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: -2588
//         //
//         verifyException("java.util.Collections$EmptyList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("C@H<l", "C@H<l");
      document0.toggleClass("C@H<l");
      document0.toggleClass(" ");
      document0.hasClass("C@H<l");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("bv", "bv", false);
      document0.prependChild(xmlDeclaration0);
      document0.appendElement("bv");
      document0.getElementsContainingText("bv");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("bv", "java.lang.string@0000000041");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Document document2 = document1.clone();
      document2.hasText();
      document2.parents();
      document0.html();
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.comment", "Initial");
      Element element0 = document0.toggleClass("org.jsoup.nodes.comment");
      Document document1 = new Document("p{y}H EA");
      element0.toggleClass("Initial");
      Element element1 = new Element("5nlm)cn'O8jE?");
      document0.hasClass("java.lang.string@0000000050");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "J");
      String string0 = "x7\\QSHus,Ka7[_)M2fB";
      TextNode textNode0 = new TextNode("", "x7QSHus,Ka7[_)M2fB");
      Element element0 = document0.appendChild(textNode0);
      element0.hasText();
      document0.getElementsByIndexEquals(5712);
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      textNode0.filter(nodeFilter0);
      document0.doSetBaseUri("");
      // Undeclared exception!
//      try { 
        textNode0.childNode(31);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 31
//         //
//         verifyException("java.util.Collections$EmptyList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "org.jsoup.nodes.comment";
      Document document0 = Parser.parse("org.jsoup.nodes.comment", "org.jsoup.nodes.comment");
      Element element0 = document0.body();
      element0.setSiblingIndex((-2070787801));
      element0.previousElementSiblings();
      // Undeclared exception!
//      try { 
        element0.getElementsByAttributeValueNot("vq0yCig", "org.jsoup.nodes.comment");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.comment", "org.jsoup.nodes.comment");
      document0.reparentChild(document0);
      document0.previousElementSibling();
      document0.getElementsByAttribute(":has(");
      document0.getElementsContainingOwnText("^");
      // Undeclared exception!
      document0.is("org.jsoup.nodes.comment");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.comment", "org.jsoup.nodes.comment");
      Element element0 = document0.body();
      element0.previousElementSiblings();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Element element0 = new Element("&5i*{5-k=TwG");
      element0.getElementsMatchingText("org.jsoup.parser.htmltreebuilderstate$constants");
      // Undeclared exception!
//      try { 
        element0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell("34");
      Element element0 = document0.head();
      Element element1 = element0.appendTo(document0);
      element1.addClass("");
      element0.className();
      element0.reparentChild(document0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P\"%6c$p6&O-", "P\"%6c$p6&O-");
      Parser parser0 = Parser.htmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("P\"%6c$p6&O-", (Element) document0, "P\"%6c$p6&O-", parseErrorList0);
      document0.childNodes = list0;
      document0.data();
      // Undeclared exception!
//      try { 
        document0.empty();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.comment", "org.jsoup.nodes.comment");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("org.jsoup.nodes.comment");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      Element element0 = document0.appendElement("bv");
      element0.childNodesAsArray();
      PipedWriter pipedWriter0 = new PipedWriter();
      element0.before((Node) document0);
      element0.html(pipedWriter0);
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("device", "device");
      document0.children();
      Tag tag0 = Tag.valueOf("device");
      Element element0 = new Element(tag0, "device");
      Element element1 = element0.prependChild(document0);
      element1.appendElement("device");
      element0.toString();
      document0.hasClass("java.lang.string@0000000050");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("device", "device");
      document0.children();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      Comment comment0 = new Comment("ukd~my))}iecc>", "ukd~my))}iecc>");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      nodeArray0[1] = (Node) xmlDeclaration0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      Tag tag0 = Tag.valueOf("device");
      Element element0 = new Element(tag0, "device");
      element0.prependChild(document0);
      document0.getElementsContainingOwnText("device");
      String string0 = Node.EmptyString;
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.comment", "org.jsoup.nodes.comment");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("org.jsoup.nodes.comment");
      document0.getElementsContainingText("MfA");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document("I`!]GErA");
      Element element0 = document0.tagName("I`!]GErA");
      document0.val();
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byte byte0 = (byte) (-97);
      byteArray0[1] = (byte) (-97);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("\"H 6]-o%sSA;rhR", "");
      document0.getElementsContainingOwnText("aZ5@iI:t0;hR%i~ig");
      TextNode textNode0 = new TextNode(":has(el) subselect must not be empty");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
//      try { 
        element0.append(";J{,fP;2`B}5b1=W");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rp#root", "rp#root");
      document0.reparentChild(document0);
      document0.getElementsContainingOwnText("s+");
      Document document1 = Parser.parseBodyFragment("s+", "rp#root");
      document0.after((Node) document1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      Document document1 = (Document)document0.text("param");
      document0.reparentChild(document1);
      document0.previousElementSiblings();
      // Undeclared exception!
//      try { 
        document1.after((Node) document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      document0.getElementsByIndexLessThan((-3188));
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("xbgU=+4=Saeh]");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      document0.hasClass("xbgU=+4=Saeh]");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      document0.insertChildren(0, nodeArray0);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_Id0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("device", "device");
      document0.children();
      Tag tag0 = Tag.valueOf("device");
      Element element0 = new Element(tag0, "device");
      element0.prependChild(document0);
      element0.toString();
      document0.dataNodes();
      element0.prependChild(document0);
      document0.prependElement("Could not parse attribute query '%s': unexpected token at '%s'");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.hasAttr("html");
      document0.children();
      Element element0 = document0.tagName("html");
      Element element1 = element0.removeClass("html");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("html", element1, "br", parseErrorList0);
      element1.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.appendChild(element0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      Element element0 = document0.appendElement("bv");
      document0.getElementsContainingOwnText("bv");
      Element element1 = element0.appendText("seamless");
      element1.is("bv");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yER 9kTM@", "yER 9kTM@");
      Tag tag0 = Tag.valueOf("V");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", false);
      document0.previousElementSibling();
      Attribute attribute0 = new Attribute("yER 9kTM@", "G:j~AUUIoy=i<T");
      Attributes attributes2 = attributes1.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "V", attributes2);
      document0.reparentChild(formElement0);
      document0.nextElementSibling();
      formElement0.before("yER 9kTM@");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";i7k");
      Document document0 = Parser.parseBodyFragmentRelaxed(";vjak#wsB.*i}@k8", ";vjak#wsB.*i}@k8");
      String string0 = "gUv}Q]A=rph:c*,";
      document0.getElementsByAttributeValueMatching(";i7k", "gUv}Q]A=rph:c*,");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, ";vjak#wsB.*i}@k8");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "$E@i!_";
      Document document0 = Document.createShell("$E@i!_");
      CDataNode cDataNode0 = new CDataNode("JBb,:`9\"");
      Node node0 = cDataNode0.clone();
      document0.setParentNode(node0);
      // Undeclared exception!
//      try { 
        document0.parent();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("RCDATAEndTagOpen", "RCDATAEndTagOpen");
      Element element0 = document0.appendElement("br");
      document0.getElementsContainingOwnText("EndTagOpen");
      element0.getElementsByAttributeValueMatching("RCDATAEndTagOpen", "br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wbr", "wbr");
      CDataNode cDataNode0 = new CDataNode("wbr");
      Node node0 = cDataNode0.shallowClone();
      document0.appendChild(node0);
      document0.getElementsContainingText("wbr");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      Element element0 = document0.appendElement("bv");
      document0.title("bv");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      element0.traverse(nodeVisitor0);
      document0.getElementsContainingOwnText("bv");
      document0.selectFirst("bv");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      document0.getElementsByAttributeValueMatching("`", "#root");
      document0.title("*!q\u0004W");
      document0.reparentChild(document0);
      document0.getElementsContainingText("#root");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "#root";
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Element element0 = document0.body();
      element0.childNodes();
      element0.wrap("#root");
      element0.cssSelector();
      StringBuilder stringBuilder0 = new StringBuilder("#root");
      StringBuilder stringBuilder1 = stringBuilder0.append((String) null);
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = '4';
      int int0 = (-1625949436);
      // Undeclared exception!
//      try { 
        stringBuilder1.append(charArray0, (-1625949436), (-1625949436));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      Element element0 = document0.appendElement("bv");
      Element element1 = element0.text("bv");
      document0.getElementsContainingText("bv");
      element1.tagName();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("s+", "java.lang.string@000000t048");
      Comment comment0 = new Comment("s+", "s+");
      document0.setParentNode(comment0);
      document0.toggleClass("java.lang.string@000000t048");
      // Undeclared exception!
//      try { 
        document0.getElementsContainingOwnText("XS\"}dm-N&P`.tu?");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document0 = Document.createShell("bv");
      Element element0 = document0.appendElement("bv");
      document0.getElementsContainingOwnText(" ");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" wa*J'Am", " wa*J'Am");
      Element element0 = document0.body();
      element0.before("</");
      document0.ownerDocument();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nyOER 9KT@", "nyOER 9KT@");
      DataNode dataNode0 = DataNode.createFromEncoded("nyOER 9KT@", "Eb~Q3IeWJR2U9*1rjf");
      document0.setParentNode(dataNode0);
      Element element0 = document0.toggleClass("java.lang.string@0000000011");
      String string0 = Node.EmptyString;
      element0.dataNodes();
      document0.getElementsByIndexLessThan(157);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
//      try { 
        element0.nextElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse(":matches(%s)", "*,$8");
      document0.selectFirst(":matches(%s)");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000048", "textarea");
      DataNode dataNode0 = DataNode.createFromEncoded("textarea", "X7]X");
      document0.parentNode = (Node) dataNode0;
      document0.appendElement("=#_[mu8v");
      // Undeclared exception!
//      try { 
        document0.getElementsContainingText("=#_[mu8v");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Node[] nodeArray0 = new Node[0];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-21);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document0.insertChildren(1, nodeArray0);
      MockFile mockFile0 = new MockFile("}'7^],NnA2fFTw", "4fpl,3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      document0.html(mockPrintStream0);
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sDan", "sDan");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse(":L{OPI5tfTw`K3Px@l", "java.lang.string@000000t048");
      Element element0 = document0.toggleClass("java.lang.string@000000t048");
      document0.hasClass("java.lang.string@000000t048");
      // Undeclared exception!
//      try { 
        element0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      Element element0 = document0.appendElement("bv");
      element0.after("bv");
      document0.getElementsContainingText("bv");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$";
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$", "org.jsoup.nodes.Element$");
      document0.getElementById("org.jsoup.nodes.Element$");
      String string1 = ",uh";
      document0.select(",uh");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("org.jsoup.nodes.Element$", "org.jsoup.nodes.Element$");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // org.jsoup.nodes.Element$
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      document0.appendElement("bv");
      document0.getElementsContainingOwnText("bv");
      document0.selectFirst("bv");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      document0.getElementsContainingText("bv");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("8YqFu018", "8YqFu018");
      Element element0 = document0.body();
      element0.previousElementSiblings();
      element0.previousElementSiblings();
      element0.val("8YqFu018");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.odes.Element$", "org.jsoup.odes.Element$");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Element element0 = document0.head();
      element0.cssSelector();
      document0.appendElement("ol");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Element element0 = document0.body();
      CDataNode cDataNode0 = new CDataNode("#root");
      Element element1 = element0.after((Node) cDataNode0);
      document0.reparentChild(element0);
      element0.getElementsContainingText("#root");
      document0.getElementsByClass("#root");
      element1.className();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Element element0 = new Element("WH1q\"Nf=v*WM");
      element0.html((MockFileWriter) null);
      element0.elementSiblingIndex();
      element0.val();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Element element0 = document0.appendElement(",uh");
      element0.attr("java.lang.string@0000000048", "Comment");
      document0.getElementsContainingText("#root");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)121;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = new Document("g{Gg:gJ\"");
      document0.tagName("menu");
      Document document1 = document0.ownerDocument();
      document1.getElementById("g{Gg:gJ\"");
      // Undeclared exception!
//      try { 
        Pattern.compile("g{Gg:gJ\"");
//        fail("Expecting exception: PatternSyntaxException");
      
//      } catch(PatternSyntaxException e) {
//         //
//         // Illegal repetition near index 0
//         // g{Gg:gJ\"
//         // ^
//         //
//         verifyException("java.util.regex.Pattern", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("javalang.string@0000128", "javalang.string@0000128");
      Element element0 = document0.body();
      element0.previousElementSiblings();
      element0.wrap("br");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)121;
      Element element0 = new Element("g{rg:gJ\"");
      element0.setSiblingIndex((byte) (-89));
      element0.attr("g{rg:gJ\"", "g{rg:gJ\"");
      Element element1 = new Element("g{rg:gJ\"");
      // Undeclared exception!
//      try { 
        element1.remove();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Document.createShell("=efo6eHtml");
      document0.toggleClass("s");
      Document.createShell("=efo6eHtml");
      Element element0 = document0.toggleClass("=efo6eHtml");
      document0.hasClass("java.lang.string@0000000050");
      element0.child(0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("javalang.string@0000128", "javalang.string@0000128");
      Element element0 = document0.body();
      element0.tagName("Insert position out of bounds.");
      document0.getElementsContainingText("javalang.string@0000128");
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("q))m!ruxy,ca!", "q))m!ruxy,ca!");
      document0.data();
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000048", "java.lang.string@0000000048");
      MockFile mockFile0 = new MockFile("java.lang.string@0000000048", "java.lang.string@0000000048");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings3.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(2679);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 77, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", " />");
      Element element0 = document0.head();
      element0.nextElementSibling();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element1 = element0.appendChild(document1);
      // Undeclared exception!
//      try { 
        element1.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-44);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Element element0 = new Element("\u0004$C]#.\"uD7%bov");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "iv";
      Document document0 = Parser.parseBodyFragment("iv", "iv");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.appendElement("iv");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)41;
      byteArray0[0] = (byte) (-113);
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("g{Gg:gJ\"", "{vz1;>K;O}3m(H-");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.reparentChild(document1);
      document1.appendText(",WxGQ/Aksp\":w[");
      document0.getElementsContainingText(",WxGQ/Aksp\":w[");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("javalang.string@00000128", "javalang.string@00000128");
      Element element0 = document0.body();
      element0.setSiblingIndex(20);
      element0.prependChild(document0);
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      Element element0 = document0.appendElement("bv");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Document document1 = document0.ownerDocument();
      document1.reparentChild(document0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "head");
      document1.getElementsByAttributeStarting(" > ");
      document0.textNodes();
      // Undeclared exception!
//      try { 
        document0.appendTo(document1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      document0.getElementsContainingText("s+");
      Pattern pattern0 = Pattern.compile("bv");
      document0.getElementsMatchingOwnText(pattern0);
      document0.textNodes();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)121;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Element element0 = new Element("g{Gg:gJ\"");
      element0.val("g{Gg:gJ\"");
      element0.val();
      element0.data();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Parser.parseBodyFragment("tag name must not be empty. xbgu=+4=saeh]", "tag name must not be empty. xbgu=+4=saeh]");
      document0.reparentChild(document0);
      Element element0 = document0.appendText("tag name must not be empty. xbgu=+4=saeh]");
      element0.getElementsContainingText("tag name must not be empty. xbgu=+4=saeh]");
      // Undeclared exception!
      document0.attr("tag name must not be empty. xbgu=+4=saeh]", "tag name must not be empty. xbgu=+4=saeh]");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell("BeforeHtml");
      document0.reparentChild(document0);
      Element element0 = document0.appendText("BeforeHtml");
      // Undeclared exception!
      element0.before("uc#&+ ]`Q+");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val();
      // Undeclared exception!
//      try { 
        element0.unwrap();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.removeClass("S&<");
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      document0.appendElement("bv");
      Parser parser0 = Parser.xmlParser();
      document0.appendText("[veB~");
      Parser parser1 = parser0.settings((ParseSettings) null);
      document0.parser(parser1);
      document0.text();
      // Undeclared exception!
//      try { 
        document0.val("bv");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.appendElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("/NgN>i<?j\"^U)?PsYt", " />");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Element element0 = document1.text("(k+ iIXJ\"aeq^kBeh{i");
      MockFile mockFile0 = new MockFile("(k+ iIXJ\"aeq^kBeh{i");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      element0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tag name must not be empty.xbgu=+4=sah]", "tag name must not be empty.xbgu=+4=sah]");
      Element element0 = document0.body();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      element0.html("4{^J0,$3B>");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o!G;G\"Uv'", "o!G;G\"Uv'");
      document0.dataNodes();
      Element element0 = document0.doClone((Node) null);
      element0.hasText();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell("-]~X=$fbcPc");
      Element element0 = document0.body();
      Element element1 = element0.toggleClass("-]~X=$fbcPc");
      document0.previousElementSiblings();
      element1.prepend("-]~X=$fbcPc");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "-]~X=$fbcPc";
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      String string1 = "\\s+";
      CDataNode cDataNode0 = new CDataNode("-]~X=$fbcPc");
      cDataNode0.parent();
      // Undeclared exception!
//      try { 
        document0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o!G;G\"Uv'", "o!G;G\"Uv'");
      Tag.valueOf("o!G;G\"Uv'");
      CDataNode cDataNode0 = new CDataNode("o!G;G\"Uv'");
      Node node0 = cDataNode0.doClone(document0);
      document0.reparentChild(node0);
      // Undeclared exception!
//      try { 
        document0.text("ZVt~*s]bv+ #\"");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#%s", "#%s");
      Document document1 = document0.normalise();
      document0.reparentChild(document1);
      Document document2 = document1.normalise();
      Document document3 = (Document)document2.appendText("w");
      document0.getElementsContainingText("ap/E$LiB1V$.]C]/7Cs");
      document1.getElementsByAttributeValueEnding("ap/E$LiB1V$.]C]/7Cs", "w");
      document3.doClone(document1);
      document2.getElementsByAttributeValueContaining("java.lang.string@0000000054", "ap/E$LiB1V$.]C]/7Cs");
      document2.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tag name must not be empty. xbgu=+4=saeh]", "tag name must not be empty. xbgu=+4=saeh]");
      document0.reparentChild(document0);
      Element element0 = document0.body();
      element0.previousElementSiblings();
      element0.attr("g_zoF05 ,H", false);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = new Document("fzx::FnOt+}");
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      document0.prependChild(cDataNode0);
      document0.previousSibling();
      document0.data();
      document0.cssSelector();
      String string0 = Node.EmptyString;
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.getElementsByAttributeValueStarting("textarea", "fzx::FnOt+}");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Tag tag0 = Tag.valueOf("QTwN~0");
      Element element0 = new Element(tag0, "");
      element0.tag();
      Element element1 = element0.prependElement("IhDXs,1_dxfTxjvI");
      element1.getElementsByTag(")\t;&aH>");
      Element element2 = element1.appendElement("org.jsoup.nodes.element$1");
      element2.getElementsByIndexEquals((-1));
      element2.toString();
      element0.getElementsContainingOwnText("OuTKBcwNpY@Tsuu%;at");
      element1.getElementById("org.jsoup.nodes.element$1");
      element0.baseUri();
      element1.parent();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tag name must not be empty. xbgu=+4=saeh]", "tag name must not be empty. xbgu=+4=saeh]");
      document0.reparentChild(document0);
      Element element0 = document0.appendText("tag name must not be empty. xbgu=+4=saeh]");
      document0.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tag name must not be empty. xbgu=+4=saeh]", "tag name must not be empty. xbgu=+4=saeh]");
      document0.reparentChild(document0);
      document0.childNodesCopy();
      Element element0 = document0.appendText("tag name must not be empty. xbgu=+4=saeh]");
      element0.getElementsContainingText("tag name must not be empty. xbgu=+4=saeh]");
      Pattern pattern0 = Pattern.compile("tag name must not be empty. xbgu=+4=saeh]", 22);
      element0.getElementsMatchingText(pattern0);
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("tag name must not be empty. xbgu=+4=saeh]", "tag name must not be empty. xbgu=+4=saeh]");
      // Undeclared exception!
      element0.is((Evaluator) evaluator_AttributeWithValueEnding0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tag name m[st net be empty. xbgu=B4=saeh]", "tag name m[st net be empty. xbgu=B4=saeh]");
      document0.reparentChild(document0);
      document0.absUrl("@g");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Element element0 = document0.body();
      element0.previousElementSiblings();
      // Undeclared exception!
      element0.wrap("tag name m[st net be empty. xbgu=B4=saeh]");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("c@sqUjS", "c@sqUjS");
      document0.classNames();
      document0.data();
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("34", "34");
      Element element0 = document0.toggleClass("");
      element0.appendText("34");
      document0.textNodes();
      element0.toggleClass("");
      document0.hasClass("br");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("java.lang.string@0000000076", "h2");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Element element0 = document0.body();
      Element element1 = element0.parent();
      element1.text();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell("-]~X=$fbcPc");
      Element element0 = document0.toggleClass("s+");
      String string0 = Node.EmptyString;
      Parser parser0 = Parser.xmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      parseErrorList0.add((ParseError) null);
      List<Node> list0 = Parser.parseFragment("HjQ9xysCoc7a3@3ojX", element0, "-]~X=$fbcPc", parseErrorList0);
      element0.childNodes = list0;
      element0.hasClass("_.");
      // Undeclared exception!
//      try { 
        element0.appendElement("org.jsoup.Jsoup");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Document.createShell("34");
      document0.prepend("1S#R3");
      document0.appendElement("Z6Bx");
      document0.text();
      document0.hasClass("Z{ExUpB*Bs+n");
      document0.val("34");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.toggleClass("-]~X=$fbcPc");
      document0.toggleClass("_.");
      Element element1 = element0.appendText("-]~X=$fbcPc");
      element0.textNodes();
      element1.toggleClass("_.");
      document0.hasClass("-]~X=$fbcPc");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("34");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      Element element1 = document0.body();
      element1.previousElementSiblings();
      element1.data();
      element0.text("");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Parser.parseBodyFragmentRelaxed("bv", "cP\"&sND :|-NkS");
      Document document0 = Parser.parseBodyFragmentRelaxed("cP\"&sND :|-NkS", "cP\"&sND :|-NkS");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
      document0.getElementsByAttributeValueStarting("cP\"&sND :|-NkS", "cP\"&sND :|-NkS");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = Document.createShell("-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.empty();
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.toggleClass("-]~X=$fbcPc");
      String string0 = Node.EmptyString;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      element0.hasClass("Tag name must not be empty.");
      element0.getElementsContainingText("Tag name must not be empty.");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      Document document1 = (Document)document0.toggleClass("s+");
      document1.setSiblingIndex((-1432352094));
      document0.nextElementSibling();
      document1.appendText("s+");
      document0.toggleClass("-]~X=$fbcPc");
      document0.hasClass("java.lang.string@0000000050");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell("34");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      document0.previousElementSiblings();
      element0.selectFirst("34");
      document0.hasText();
      // Undeclared exception!
      element0.prependElement("34");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bv", "bv");
      Element element0 = document0.appendElement("bv");
      document0.text();
      element0.getElementsByAttributeValueMatching("bv", (Pattern) null);
      document0.hasText();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("34");
      Parser.parseBodyFragment("34", "34");
      document0.data();
      document0.siblingIndex = 35;
      document0.getElementsByIndexGreaterThan((-1196));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      Element element0 = document0.head();
      document0.cssSelector();
      element0.attr("-]~X=$fbcPc", "#root");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.toggleClass("-]~X=$fbcPc");
      Element element1 = element0.toggleClass("-]~X=$fbcPc");
      document0.appendText("~y.`u(D^ou1#%Ir");
      element1.toggleClass("\"*t4tM~m");
      element0.hasClass("}lbZ;]8LM%H?hn;sv*");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("-]~X=$fbcPc");
      Element element0 = document0.head();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0, charsetEncoder0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      element0.outerHtmlTail(outputStreamWriter0, 37, document_OutputSettings3);
      element0.childNodesCopy();
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "tag name must not be empty. xbgu=+4=saeh]";
      Document document0 = Parser.parseBodyFragment("tag name must not be empty. xbgu=+4=saeh]", "tag name must not be empty. xbgu=+4=saeh]");
      Element element0 = document0.head();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.string@0000000091");
      // Undeclared exception!
//      try { 
        element0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "-]~X=$fbcPc";
      Tag tag0 = Tag.valueOf("-]~X=$fbcPc");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "-]~X=$fbcPc", attributes0);
      Attribute attribute0 = new Attribute("-]~X=$fbcPc", "r-@-[e#`r", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      attributes0.addAll(attributes1);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("-]~X=$fbcPc", parseSettings0);
      Element element0 = pseudoTextElement0.prependElement("java.lang.string@0000000050");
      element0.prependChild(pseudoTextElement0);
      ParseSettings parseSettings1 = new ParseSettings(false, false);
      Tag.valueOf("-]~X=$fbcPc", parseSettings1);
      pseudoTextElement0.dataNodes();
      // Undeclared exception!
//      try { 
        pseudoTextElement0.data();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element1 = document0.text("-]~X=$fbcPc");
      element1.lastElementSibling();
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      document0.appendText(";z#IW$}} ");
      document0.getElementsContainingText(";z#IW$}} ");
      String string0 = ".";
      // Undeclared exception!
      element0.after("[/D41?)lB[o}e!Q';8?");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("-]~X=fbcnPc");
      Element element0 = document0.head();
      element0.nextElementSibling();
      Document document1 = (Document)document0.val("-]~X=fbcnPc");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
//      try { 
        document1.outerHtmlTail((Appendable) null, 0, document_OutputSettings1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      Element element1 = document0.body();
      element1.previousElementSiblings();
      document0.dataNodes();
      element0.getElementsByIndexGreaterThan(465);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      document0.appendText(";z#IW$}} ");
      document0.getElementsContainingText(";z#IW$}} ");
      String string0 = ".";
      // Undeclared exception!
      document0.html("-]~X=$fbcPc");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/9m", "o!G;G\"Uv'");
      Element element0 = document0.head();
      CDataNode cDataNode0 = new CDataNode("/9m");
      TextNode textNode0 = new TextNode("o!G;G\"Uv'");
      element0.reparentChild(textNode0);
      document0.appendText(";z#IW$}} ");
      element0.getElementsContainingText("t)W}DP+");
      element0.getElementsByClass("/9m");
      document0.elementSiblingIndex();
      element0.addClass("th");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "\\s+";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document0 = new Document("s+");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document1 = document0.quirksMode(document_QuirksMode0);
      String string1 = "org.jsoup.nodes.Element$NodeList";
      Element element0 = document1.attr("s+", "org.jsoup.nodes.Element$NodeList");
      element0.val("org.jsoup.nodes.Element$NodeList");
      FileSystemHandling.shouldAllThrowIOExceptions();
      document1.elementSiblingIndex();
      document1.nextElementSiblings();
      String string2 = null;
      // Undeclared exception!
//      try { 
        document1.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = new Document("i^fgmt");
      Document document1 = document0.normalise();
      Parser parser0 = Parser.xmlParser();
      Document document2 = document1.parser(parser0);
      // Undeclared exception!
//      try { 
        document2.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      Document document1 = (Document)document0.toggleClass("-]~X=$fbcPc");
      document1.siblingElements();
      document0.getElementsMatchingText("-]~X=$fbcPc");
      CharBuffer charBuffer0 = CharBuffer.allocate(1651);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.outerHtmlHead(charBuffer0, 592, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Document document0 = parser0.parseInput(" />", ">");
      Document document1 = Document.createShell(" />");
      document0.dataNodes();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      document1.appendTo(document0);
      document1.wrap(">");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      document0.appendText("-]~X=$fbcPc");
      document0.getElementsContainingText("-]~X=$fbcPc");
      element0.getElementsByClass(".");
      document0.nextElementSiblings();
      document0.elementSiblingIndex();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      Element element1 = new Element("k$lS");
      String string0 = Node.EmptyString;
      String string1 = "&$}Q";
      document0.hasClass("&$}Q");
      // Undeclared exception!
      document0.append("k$lS");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      Element element0 = document0.toggleClass("-]~X=$fbcPc");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Element element1 = element0.appendText("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      element1.appendChild(document0);
      Element element2 = element1.toggleClass("org.jsoup.nodes.Element$1");
      element2.hasClass("java.lang.string@0000000050");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      document0.getElementsByAttributeValueMatching("^[.KImin}w3V", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.getElementsMatchingOwnText("device");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document0.reparentChild(document1);
      Element element0 = document1.appendText("br");
      document1.getElementsContainingText("-]~X=$fbcPc");
      document0.previousSibling();
      element0.cssSelector();
      // Undeclared exception!
//      try { 
        document1.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Document.createShell("-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      document0.appendText(";z#IW$}} ");
      document0.getElementsContainingText(";z#IW$}} ");
      String string0 = ".";
      element0.getElementsByClass(".");
      document0.nextElementSiblings();
      document0.elementSiblingIndex();
      document0.addClass("B?pT}");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("B?pT}", "lHG/*E2|fbFtSN");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // lHG/*E2|fbFtSN
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      Element element0 = document0.head();
      Document document1 = Document.createShell("!=");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      element0.is((Evaluator) evaluator_IsFirstChild0);
      document1.children();
      Tag tag0 = Tag.valueOf("body");
      Element element1 = new Element(tag0, "&h'-~uI:Z\"\"");
      element1.ownText();
      element1.parentNode = (Node) document0;
      element0.val();
      // Undeclared exception!
//      try { 
        element0.getElementsByAttributeValueMatching("org.jsoup.safety.Cleaner$CleaningVisitor", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      document0.appendText(";z#IW$}} ");
      document0.getElementsContainingText(";z#IW$}} ");
      element0.getElementsByClass(".");
      document0.textNodes();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      String string0 = ";z#IW$}} ";
      document0.appendText(";z#IW$}} ");
      // Undeclared exception!
      element0.val(".?k [J");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=fbcnPc", "-]~X=fbcnPc");
      document0.head();
      document0.textNodes();
      document0.selectFirst("AfterAfterFrameset");
      StringWriter stringWriter0 = new StringWriter();
      document0.hasClass("nth-last-child");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=fbcnPc", "-]~X=fbcnPc");
      Element element0 = document0.head();
      document0.previousSibling();
      element0.cssSelector();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$LfbcPc", "-]~X=$LfbcPc");
      Element element0 = document0.head();
      element0.after(",");
      element0.hasText();
      element0.lastElementSibling();
      element0.nextElementSiblings();
      element0.getElementsByIndexEquals(12);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nyOER 9KT@", "nyOER 9KT@");
      DataNode dataNode0 = DataNode.createFromEncoded("nyOER 9KT@", "Eb~Q3IeWJR2U9*1rjf");
      document0.setParentNode(dataNode0);
      document0.toggleClass("java.lang.string@0000000011");
      // Undeclared exception!
//      try { 
        document0.html();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.siblingElements();
      element0.reparentChild(document0);
      Element element1 = document0.appendText("tag name must not be empty. xbgu=+4=saeh]");
      document0.getElementsContainingText("tag name must not be empty. xbgu=+4=saeh]");
      element1.nextElementSiblings();
      element0.getElementsByClass(".");
      element0.getElementsContainingText((String) null);
      document0.getElementsByAttributeValueMatching("tag name must not be empty. xbgu=+4=saeh]", "BeforeDoctypeSystemIdentifier");
      element1.dataNodes();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=fbcPc", "-]~X=fbcPc");
      document0.val();
      // Undeclared exception!
//      try { 
        document0.child((-1028));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Parser parser1 = parser0.setTrackErrors(8);
      Document document0 = parser1.parseInput("]~X=fbcPc", "]~X=fbcPc");
      Document document1 = document0.clone();
      document1.hasText();
      document0.html();
      Element element0 = new Element("]~X=fbcPc");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nyOER 9KT@", "nyOER 9KT@");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("nyOER 9KT@");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.NodeTraversor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = Parser.parseBodyFragment("o!G;G\"Uv'", "o!G;G\"Uv'");
      Element element0 = document0.head();
      element0.nextElementSiblings();
      document0.siblingNodes();
      document0.getElementById("o!G;G\"Uv'");
      element0.wrap("o!G;G\"Uv'");
      element0.hasText();
      element0.lastElementSibling();
      document0.hasClass("o!G;G\"Uv'");
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      document0.appendText("tag name must not be empty. xbgu=+4=saeh]");
      // Undeclared exception!
//      try { 
        document0.siblingElements();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal Capacity: -1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      Tag tag0 = Tag.valueOf("fzx::FnOt+}");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("N30_pWdNj3ci", "N30_pWdNj3ci");
      Attributes attributes2 = attributes1.put("N30_pWdNj3ci", true);
      FormElement formElement0 = new FormElement(tag0, "N30_pWdNj3ci", attributes2);
      document0.prependChild(formElement0);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag1 = Tag.valueOf("fzx::FnOt+}", parseSettings0);
      Element element0 = new Element(tag1, "textarea");
      element0.cssSelector();
      Element element1 = document0.toggleClass("fzx::FnOt+}");
      element1.html();
      Element element2 = new Element(tag1, "fzx::FnOt+}");
      element2.getElementsByClass("4bjXIwzGI^ilEF>@-");
      element0.text();
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("device", "device");
      document0.children();
      Tag tag0 = Tag.valueOf("device");
      Element element0 = new Element(tag0, "device");
      element0.toString();
      element0.getElementsContainingText("tag name must not be empty.");
      document0.tagName("wE*Q_k^h8g");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Parser.parseBodyFragment("nyOER 9KT@", "nyOER 9KT@");
      document0.getElementsByClass("nyOER 9KT@");
      document0.dataNodes();
      document0.elementSiblingIndex();
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      document0.appendText("tag name must not be empty. xbgu=+4=saeh]");
      document0.getElementsContainingText("tag name must not be empty. xbgu=+4=saeh]");
      element0.getElementsByClass(".");
      element0.getElementsContainingText((String) null);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=fbcnPc", "-]~X=fbcnPc");
      Element element0 = document0.head();
      document0.previousSibling();
      element0.cssSelector();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      Document document1 = document0.clone();
      document1.appendChild(document0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      document1.textNodes();
      document1.cssSelector();
      document0.select("sortable");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.val("-]~X=$fbcPc");
      document0.previousElementSiblings();
      document0.siblingElements();
      // Undeclared exception!
//      try { 
        document0.before((Node) element0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Document document1 = (Document)document0.toggleClass("org.jsoup.nodes.Element$2");
      document0.wholeText();
      Document document2 = document0.normalise();
      document2.getElementById("<&%fJd#!kc`)/");
      Document document3 = Parser.parse("org.jsoup.nodes.Element$2", "<&%fJd#!kc`)/");
      document3.reparentChild(document2);
      document1.appendText("org.jsoup.nodes.Element$2");
      document1.getElementsContainingOwnText("br");
      document0.getElementsByClass("org.jsoup.nodes.Element$2");
      document0.getElementsContainingText("org.jsoup.nodes.Element$2");
      Document document4 = (Document)document0.tagName("a}s}ph");
      document2.nextElementSibling();
      document4.baseUri();
      document1.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!", "java.lang.string@0000000091");
      document0.previousSibling();
      document0.data();
      Element element0 = new Element("<!");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nyOER 9KT@", "nyOER 9KT@");
      document0.getElementsByClass("nyOER 9KT@");
      document0.dataNodes();
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Document document1 = (Document)document0.toggleClass("org.jsoup.nodes.Element$2");
      document0.wholeText();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      document2.getElementById("<&%fJd#!kc`)/");
      Document document3 = Parser.parse("org.jsoup.nodes.Element$2", "<&%fJd#!kc`)/");
      document3.reparentChild(document2);
      document1.appendText("org.jsoup.nodes.Element$2");
      document1.getElementsContainingOwnText("br");
      document0.getElementsByClass("org.jsoup.nodes.Element$2");
      document0.getElementsContainingText("org.jsoup.nodes.Element$2");
      document0.tagName("a}s}ph");
      document2.nextElementSibling();
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      Document document1 = document0.clone();
      Element element0 = document1.appendChild(document0);
      document1.siblingElements();
      document1.textNodes();
      String string0 = Node.EmptyString;
      element0.children();
      document0.after((Node) element0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("XxSX0GIaP");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "\"F@b!I%],Ot6m", attributes1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=fbcPc", "-]~X=fbcPc");
      Element element0 = document0.head();
      document0.previousSibling();
      Element element1 = document0.head();
      element1.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$2");
      document0.wholeText();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.getElementById("<&%fJd#!kc`)/");
      Document document2 = Parser.parse("org.jsoup.nodes.Element$2", "<&%fJd#!kc`)/");
      document2.reparentChild(document1);
      element0.appendText("org.jsoup.nodes.Element$2");
      element0.getElementsContainingOwnText("br");
      document0.getElementsByClass("org.jsoup.nodes.Element$2");
      document0.getElementsContainingText("org.jsoup.nodes.Element$2");
      document0.tagName("a}s}ph");
      document1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      document0.appendText("fzx::FnOt+}");
      document0.getElementsContainingOwnText("fzx::FnOt+}");
      element0.getElementsByClass(".");
      element0.getElementsContainingText((String) null);
      // Undeclared exception!
      document0.tagName("8^");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$2");
      document0.wholeText();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      element0.hasAttr("org.jsoup.nodes.Element$2");
      document1.getElementById("<&%fJd#!kc`)/");
      Document document2 = Parser.parse("org.jsoup.nodes.Element$2", "<&%fJd#!kc`)/");
      document2.reparentChild(document1);
      Element element1 = element0.appendText("org.jsoup.nodes.Element$2");
      element0.getElementsContainingOwnText("br");
      document0.getElementsByClass("org.jsoup.nodes.Element$2");
      element0.hasClass("tag name must not be empty.");
      element0.firstElementSibling();
      element1.getElementsByAttributeValueEnding("br", "tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$2");
      document0.wholeText();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.getElementById("<&%fJd#!kc`)/");
      Document document2 = Parser.parse("org.jsoup.nodes.Element$2", "<&%fJd#!kc`)/");
      document2.reparentChild(document1);
      element0.appendText("org.jsoup.nodes.Element$2");
      element0.getElementsContainingOwnText("br");
      document0.getElementsByClass("org.jsoup.nodes.Element$2");
      document0.getElementsContainingText("org.jsoup.nodes.Element$2");
      document0.tagName("a}s}ph");
      document2.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.toggleClass("");
      document0.getElementsByAttributeValueContaining("7Jvf`~Z7BohC", "Pattern syntax error: ");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      Element element0 = document0.head();
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      Element element1 = document0.toggleClass("xbgU=+4=Saeh]");
      document0.html();
      StringWriter stringWriter0 = new StringWriter();
      document0.hasClass("Tag name must not be empty.");
      element0.doClone(element1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Parser.parseBodyFragment("device", "org.jsoup.parser.ParseError");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.jsoup.parser.ParseError", "tag name must not be empty. <&%ojn!kc`)/");
      Element element0 = document0.toggleClass("w*v1r;?x~UE{;\"");
      element0.appendText("tag name must not be empty. org.jsoup.nodes.element$1");
      document0.toggleClass("Rx{");
      document0.html();
      document0.hasClass("Rx{");
      Document document1 = new Document("org.jsoup.parser.ParseError");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      Element element0 = document0.toggleClass(".;;3INKO1wh;1=+");
      element0.appendText("tag name must not be empty.");
      Element element1 = document0.toggleClass(".");
      element1.html();
      document0.hasClass(".;;3INKO1wh;1=+");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.head();
      Element element1 = element0.appendText("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      Element element2 = element1.toggleClass("iCHEt-?j5vp=*`");
      element2.html();
      document0.hasClass("org.jsoup.nodes.Element$1");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("fzx::FnOt+}", "fzx::FnOt+}");
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      Node node0 = cDataNode0.shallowClone();
      Document document1 = (Document)document0.doClone(node0);
      Element element0 = document0.head();
      Pattern pattern0 = Pattern.compile("1xkKtCBH$kA;f", 124);
      element0.getElementsMatchingOwnText(pattern0);
      Element element1 = document1.head();
      element1.hasClass("fzx::FnOt+}");
      element1.prependText("1xkKtCBH$kA;f");
      element1.remove();
      // Undeclared exception!
//      try { 
        element1.getElementsByAttributeValueMatching("fzx::FnOt+}", "{R)z*L](B&lYA0");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: {R)z*L](B&lYA0
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.previousElementSiblings();
      document0.siblingElements();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      document0.previousSibling();
      element0.cssSelector();
      element0.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 36);
      bufferedWriter0.write("k{el#>HQ!GI,");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(36);
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(bufferedWriter0, (-471), document_OutputSettings1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Document document0 = Parser.parse(" />", "mN+wf+@r|");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      document0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      document0.head();
      Document document1 = document0.clone();
      Element element0 = document0.appendTo(document1);
      element0.text("%B;;0>[cJZ)@R84@E");
      FileSystemHandling.shouldAllThrowIOExceptions();
      document1.head();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "<![CDATA[";
      Element element0 = new Element("<![CDATA[");
      Comment comment0 = new Comment("<![CDATA[", "<![CDATA[");
      comment0.asXmlDeclaration();
      // Undeclared exception!
//      try { 
        element0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      Document document1 = document0.clone();
      document1.clone();
      Element element0 = document1.body();
      document0.createElement("fzx::FnOt+}");
      Element element1 = document1.head();
      document1.val(":noP(");
      element1.tagName("65]9'");
      document1.tag();
      element0.after("sH$sZJ9g\t^Fm[f");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      DataNode dataNode0 = new DataNode("V", "br");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) dataNode0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) dataNode0;
      // Undeclared exception!
//      try { 
        document0.insertChildren((-2134), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Document document1 = (Document)document0.toggleClass("org.jsoup.nodes.Element$2");
      document1.clone();
      Document document2 = (Document)document0.appendTo(document1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      document1.firstElementSibling();
      document1.firstElementSibling();
      // Undeclared exception!
      document2.appendElement("YwB");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.hasClass("utf");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.previousElementSiblings();
      Parser parser0 = Parser.xmlParser();
      Document document2 = parser0.parseInput("", "java.lang.string@0000000136");
      document2.is("textarea");
      document2.getElementsMatchingOwnText("lhx%nn0rRw\u0001$lEV>qQ");
      document1.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$2");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      Element element1 = document1.toggleClass("<&%OJn!kc`)/");
      element1.html();
      StringWriter stringWriter0 = new StringWriter();
      document1.toggleClass("#root");
      element0.getElementsByClass("#root");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      int int0 = 0;
      DataNode dataNode0 = new DataNode("vSx@5At", "org.jsoup.parser.ParseError");
      Document document0 = Parser.parse("q,T]k0tCF", "org.jsoup.parser.ParseError");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) dataNode0;
      nodeArray0[2] = (Node) dataNode0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("device", "device");
      Document document1 = document0.clone();
      Document document2 = document1.clone();
      document1.textNodes();
      document1.toggleClass("?,#aF9QV");
      Document document3 = (Document)document1.val("device");
      document0.reparentChild(document2);
      document0.tagName();
      // Undeclared exception!
//      try { 
        document3.after("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      document0.getElementsByAttributeStarting("-]~X=$fbcPc");
      document0.getElementsMatchingOwnText("-]~X=$fbcPc");
      document0.nextElementSiblings();
      // Undeclared exception!
//      try { 
        document0.selectFirst("-]~X=$fbcPc");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '-]~X=$fbcPc': unexpected token at '-]~X=$fbcPc'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      document0.previousElementSiblings();
      Parser.xmlParser();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      element0.toggleClass("<&%OJn!kc`)/");
      document0.html();
      StringWriter stringWriter0 = new StringWriter();
      document1.hasClass("Tag name must not be empty.");
      Document document2 = document1.ownerDocument();
      document2.val("<&%OJn!kc`)/");
      document2.getElementsByIndexGreaterThan(15);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zx::FnOt+}", "zx::FnOt+}");
      Document document1 = document0.clone();
      document1.clone();
      document1.body();
      Element element0 = document0.val("org.jsoup.parser.Token$Tag");
      // Undeclared exception!
//      try { 
        element0.tagName("\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = new Document("-]~X=$fbcPc");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("f+RJ", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("0$ZB&fpeBn/", false);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "r`F#", attributes1);
      Element element0 = pseudoTextElement0.toggleClass("r`F#");
      element0.html();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      Document document1 = document0.clone();
      document1.clone();
      Element element0 = document1.body();
      element0.append("fzx::FnOt+}");
      Element element1 = document1.head();
      document1.val(":noP(");
      element1.tagName("65]9'");
      document1.tag();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "-]~X=$fbcPc";
      Document document0 = new Document("-]~X=$fbcPc");
      document0.body();
      // Undeclared exception!
//      try { 
        document0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.clone();
      document1.previousSibling();
      Document document2 = document1.clone();
      document2.getElementsByAttributeStarting(" > ");
      Tag tag0 = Tag.valueOf(" > ");
      Element element0 = new Element(tag0, "xbgU=+u=Saeh]");
      String string0 = "a$`z|Zt4f28Q~I~(SeS";
      DataNode dataNode0 = new DataNode("i", "a$`z|Zt4f28Q~I~(SeS");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = null;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document2;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) document2;
      nodeArray0[6] = (Node) document2;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) dataNode0;
      // Undeclared exception!
//      try { 
        document0.insertChildren(1, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array must not contain any null objects
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$2");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      Element element1 = document1.toggleClass("<&%OJn!kc`)/");
      element1.html();
      StringWriter stringWriter0 = new StringWriter();
      element0.hasClass("Tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document1.outerHtmlHead(stringWriter0, 11, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.previousElementSiblings();
      Parser parser0 = Parser.xmlParser();
      parser0.parseInput("-]~X=$fbcPc", "-]~X=$fbcPc");
      Document document1 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document1.getElementsByAttributeStarting("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      document0.head();
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("xbgU=+4=Saeh]");
      Document document1 = Document.createShell("xbgU=+4=Saeh]");
      Element element0 = document0.appendTo(document1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.getElementsByClass("xbgU=+4=Saeh]");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      String string0 = "yV9{p>a^1!>R%";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("an2R XwhN,DA?T^rH{", "yV9{p>a^1!>R%", true);
      nodeArray0[1] = (Node) xmlDeclaration0;
      element0.insertChildren(0, nodeArray0);
      // Undeclared exception!
//      try { 
        document1.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$2");
      document0.getElementById("<&%OJn!kc`)/");
      Document document1 = Parser.parse("org.jsoup.nodes.Element$2", "<&%OJn!kc`)/");
      document1.reparentChild(document0);
      element0.getElementsContainingOwnText("br");
      Element element1 = new Element("org.jsoup.nodes.Element$2");
      Element element2 = document0.val("PQ=z");
      element2.val("PQ=z");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = new Document("-]~X=$fbcPc");
      document0.body();
      Element element0 = new Element("-]~X=$fbcPc");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      Element element1 = document0.toggleClass("-]~X=$fbcPc");
      element1.html();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      document0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      Element element0 = document0.body();
      document0.previousSibling();
      document0.data();
      element0.parents();
      document0.getElementsByClass("fzx::FnOt+}");
      document0.getElementsByAttributeValueMatching("", "fzx::FnOt+}");
      element0.nextSibling();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Element element0 = new Element("h2");
      Tag tag0 = Tag.valueOf(" > ");
      Element element1 = new Element(tag0, " > ");
      Element element2 = element0.prependChild(element1);
      Document document0 = Document.createShell("h2");
      Document document1 = document0.clone();
      Charset charset0 = document1.charset();
      Set<String> set0 = charset0.aliases();
      element2.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("34");
      Element element0 = document0.head();
      element0.className();
      element0.reparentChild(document0);
      document0.previousElementSiblings();
      // Undeclared exception!
//      try { 
        document0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "xbgU=+4=Saeh]";
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      Element element0 = document0.head();
      DataNode dataNode0 = new DataNode("HB", "HB");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Node[] nodeArray0 = new Node[22];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document1;
      // Undeclared exception!
//      try { 
        document1.insertChildren(522, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      Element element0 = document0.head();
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("xbgU=+4=Saeh]");
      Document document1 = document0.clone();
      document0.appendTo(document1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      element0.nextElementSiblings();
      document0.firstElementSibling();
      element0.children();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = new Document("-]~X=$fbcPc");
      document0.body();
      Element element0 = new Element("-]~X=$fbcPc");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      document0.nextElementSibling();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      Element element0 = document0.head();
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Document document1 = document0.normalise();
      document1.getElementsByAttributeStarting("xbgU=+4=Saeh]");
      LinkedList<TextNode> linkedList1 = new LinkedList<TextNode>();
      element0.id();
      document0.toggleClass("fF");
      document0.wholeText();
      element0.html();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      document0.getElementsByClass("textarea");
      document1.hasClass("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.clone();
      document1.previousSibling();
      document1.clone();
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      document0.toggleClass("org.jsoup.nodes.Element$2");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.getElementById("<&%OJn!kc`)/");
      Document document2 = Parser.parse("org.jsoup.nodes.Element$2", "<&%OJn!kc`)/");
      document2.reparentChild(document1);
      Element element0 = document1.text("<&%OJn!kc`)/");
      element0.cssSelector();
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("<&%OJn!kc`)/");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: <&%OJn!kc`)/
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
      Parser.xmlParser();
      document0.dataNodes();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      Document document1 = (Document)document0.toggleClass("#root");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.createElement("#root");
      element0.html();
      document1.previousSibling();
      element0.data();
      document2.cssSelector();
      String string0 = Node.EmptyString;
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      Element element0 = document0.head();
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("xbgU=+4=Saeh]");
      CDataNode cDataNode0 = new CDataNode("xbgU=+4=Saeh]");
      linkedList0.add(cDataNode0);
      Document document1 = document0.clone();
      Element element1 = document0.appendTo(document1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      element0.nextElementSiblings();
      document0.nextElementSibling();
      element1.removeClass("K_V~5y`Ck9~%!=?25nq");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      element0.previousElementSiblings();
      Parser parser0 = Parser.xmlParser();
      Document document1 = parser0.parseInput("-]~X=$fbcPc", "");
      document1.getElementsByAttributeStarting("-]~X=$fbcPc");
      List<TextNode> list0 = new LinkedList<TextNode>();
      Element element1 = document1.toggleClass("type");
      element1.wholeText();
      document0.html();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      document0.getElementsByClass("-]~X=$fbcPc");
      document1.hasClass("gezhx.KG");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element0 = document0.attr("org.jsoup.nodes.Element$2", false);
      element0.hasSameValue("org.jsoup.nodes.Element$2");
      element0.hasText();
      Parser.parse("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      String string0 = Node.EmptyString;
      document0.nextElementSiblings();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.getElementsByIndexLessThan(13);
      document0.toggleClass("</");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "xbgU=+4=Saeh]";
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      Element element0 = document0.head();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      DataNode dataNode0 = new DataNode("xbgU=+4=Saeh]", "V");
      // Undeclared exception!
//      try { 
        element0.insertChildren((-2134), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ixA;6", "ixA;6");
      String string0 = ";guI(@9!Ah=NU#n,";
      File file0 = MockFile.createTempFile("ixA;6", ";guI(@9!Ah=NU#n,");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(94);
      Charset charset0 = document0.charset();
      mockPrintStream0.println((-1990L));
      document0.charset(charset0);
      document0.siblingIndex = 536;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.checkError();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ixA;6");
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(printWriter0, (-1408), (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      Element element0 = document0.head();
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("xbgU=+4=Saeh]");
      document0.appendTo(document0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      element0.nextElementSiblings();
      document0.nextElementSibling();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      document0.head();
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Document document1 = document0.clone();
      Element element0 = document0.appendTo(document1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      element0.getAllElements();
      document0.nextElementSibling();
      element0.appendText("xbgU=+4=Saeh]");
      document1.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("device", "device");
      Tag tag0 = Tag.valueOf("device");
      Element element0 = new Element(tag0, "device");
      element0.val();
      document0.cssSelector();
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("Z{lj4!7O$BSm");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: Z{lj4!7O$BSm
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "-]~X=$fbcPc";
      Document document0 = new Document("-]~X=$fbcPc");
      document0.body();
      Element element0 = new Element("-]~X=$fbcPc");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
//      try { 
        element0.insertChildren(19, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Tag.valueOf("br");
      Pattern.compile("br", (-323));
      document0.getElementsByAttributeStarting("3<");
      document0.textNodes();
      Element element0 = document0.toggleClass("3<");
      element0.html();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      document0.hasClass("<html>\n <head></head>\n <body>\n  br\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Document document1 = Parser.parseBodyFragmentRelaxed("br", "sk?_Qm*pKnrlh+*Y?");
      Element element0 = document0.attr("#D", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("br");
      document0.tagName(" > ");
      document1.hasSameValue(mockPrintStream0);
      element0.hasText();
      Document document2 = Parser.parse(";W2g9g", "#D");
      String string0 = Node.EmptyString;
      document2.nextElementSiblings();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document2.baseUri();
      document0.removeClass("#D");
      document0.getElementsByClass("#D");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = new Element("mbDtIA9%|8");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      element0.filter(nodeFilter0);
      element0.nextElementSiblings();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Pattern pattern0 = Pattern.compile("mbDtIA9%|8");
      pattern0.split((CharSequence) "mbDtIA9%|8");
      element0.getElementsMatchingOwnText(pattern0);
      String string0 = "}5Lb?6uw";
      element0.getElementsByAttributeValueEnding("}5Lb?6uw", "}5Lb?6uw");
      Element element1 = element0.appendText("&lt;");
      element1.shallowClone();
      Element element2 = element0.tagName("mbDtIA9%|8");
      element2.getElementsByAttribute("mbDtIA9%|8");
      element0.children();
      Element element3 = element1.append("menuitem");
      // Undeclared exception!
//      try { 
        element3.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      Element element0 = document0.head();
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("xbgU=+4=Saeh]");
      Document document1 = document0.clone();
      document0.appendTo(document1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      element0.nextElementSiblings();
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document document2 = document1.outputSettings(document_OutputSettings1);
      document2.body();
      Document document3 = Parser.parseBodyFragmentRelaxed("br", "s+");
      document3.previousSibling();
      document1.data();
      document1.cssSelector();
      document2.getElementsMatchingText("");
      document2.siblingElements();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      Element element0 = document0.head();
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("xbgU=+4=Saeh]");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document1 = (Document)document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      element0.nextElementSiblings();
      document1.createElement("xbgU=+4=Saeh]");
      // Undeclared exception!
//      try { 
        element0.getElementsByAttributeValueEnding(")E}JcMM;>", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      Node node0 = cDataNode0.shallowClone();
      Element element0 = document0.doClone(node0);
      document0.head();
      document0.hasText();
      Parser.parse("fzx::FnOt+}", "1xkKtCBH$kA;f");
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Element element0 = document0.toggleClass("fzx::FnOt+}");
      element0.wholeText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      element0.hasText();
      Parser.parse("textarea", ".mvbG?dy5?<:");
      document0.cssSelector();
      document0.nextElementSiblings();
      document0.classNames();
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Element element0 = document0.attr("org.jsoup.nodes.Element$2", false);
      document0.reparentChild(element0);
      element0.getElementsContainingOwnText("");
      element0.getElementsByClass("*t");
      element0.getElementsByAttributeValueMatching("device", "br");
      element0.nextSibling();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9OsW*#nGe0lAeF7ty", "9OsW*#nGe0lAeF7ty");
      Document document1 = document0.ownerDocument();
      Element element0 = document1.body();
      document0.title("I#=MzUiUC[s(K");
      element0.baseUri();
      document0.ensureChildNodes();
      document0.getElementsByIndexEquals(60);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "xbgU=+4=Saeh]";
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "xbgU=+4=Saeh]";
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      Element element0 = document0.head();
      element0.getElementsByIndexLessThan((-3188));
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) "xbgU=+4=Saeh]", 666, (-3188));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      Element element0 = document0.head();
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("xbgU=+4=Saeh]");
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      element0.nextElementSiblings();
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Document document0 = Parser.parseBodyFragment("br", "br");
      Tag tag0 = Tag.valueOf(" D/");
      Element element0 = new Element(tag0, "br");
      element0.appendTo(document0);
      element0.getElementsMatchingOwnText("");
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      document0.previousSibling();
      element0.cssSelector();
      document0.getElementsByClass("-]~X=$fbcPc");
      Parser.xmlParser();
      document0.dataNodes();
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      document0.head();
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      String string0 = null;
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element0 = document0.attr("org.jsoup.nodes.Element$2", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      element0.hasText();
      Parser.parse("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      document0.cssSelector();
      document0.nextElementSiblings();
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      document0.previousSibling();
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
      Element element1 = document0.head();
      element1.lastElementSibling();
      element1.hasClass("-]~X=$fbcPc");
      Document document1 = Document.createShell("-]~X=$fbcPc");
      document1.parentNode = null;
      document1.ensureChildNodes();
      element0.prepend("hO");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      document0.previousSibling();
      element0.cssSelector();
      document0.getElementsByClass("html > head");
      element0.toggleClass("KQ5UbI~+gG8M-E1#`Zt");
      element0.getElementsByClass("tFV8oQ's!&nM`^V$U3G");
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'head.java.lang.String@0000000170': unexpected token at '@0000000170'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Parser.xmlParser();
      Document document0 = new Document("");
      Document document1 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document2 = document1.outputSettings(document_OutputSettings1);
      document0.prependChild(document2);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Pattern pattern0 = Pattern.compile("FUIw2J4m',{OIr", 442);
      document1.getElementsByAttributeValueMatching("FUIw2J4m',{OIr", pattern0);
      Pattern pattern1 = Pattern.compile("textarea");
      document2.getElementsMatchingText(pattern1);
      document1.val("-]~X=$fbcPc");
      document1.dataNodes();
      Document document3 = document1.normalise();
      document3.getElementsByAttributeValueContaining("g5$B%|L;kr", "g5$B%|L;kr");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Element element0 = document0.head();
      StringWriter stringWriter0 = new StringWriter();
      Document document1 = new Document("IXV_S7`");
      document1.html(stringWriter0);
      document1.head();
      Element element1 = element0.lastElementSibling();
      element1.hasClass("br");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("#root");
      Parser.xmlParser();
      Tag tag0 = Tag.valueOf("-lLS;|:3wb");
      CDataNode cDataNode0 = new CDataNode("xbgU=+u=Saeh]");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute("#root", (String) null);
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.clone();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes2);
      pseudoTextElement0.append("#root");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Document document0 = Document.createShell("</");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      document0.hasText();
      document0.appendTo(document0);
      document0.siblingElements();
      document1.childNodes();
      document0.attr("%=a&:", true);
      StringWriter stringWriter0 = new StringWriter();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
      StringWriter stringWriter1 = new StringWriter();
      document1.toggleClass("]~=_[ >(\"BAifnk0/");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("{R)z*L](B&lYA0", "]~=_[ >(\"BAifnk0/");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: ]~=_[ >(\"BAifnk0/
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = new Document("-]~X=$fbcPc");
      document0.body();
      document0.previousSibling();
      Pattern pattern0 = Pattern.compile("-]~X=$fbcPc");
      document0.getElementsMatchingText(pattern0);
      document0.val("-]~X=$fbcPc");
      document0.dataNodes();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document0.data();
      document1.cssSelector();
      document1.html("XcV{i@R");
      document0.getElementsMatchingText("#root");
      document2.siblingElements();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.clone();
      Document document2 = document1.clone();
      Pattern pattern0 = Pattern.compile("xbgU=+u=Saeh]", 11);
      document2.getElementsByAttributeValueMatching("'j;", pattern0);
      document2.getElementsByAttributeStarting(" > ");
      document2.textNodes();
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      element0.html();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      element0.getElementsByClass("g2-_G!=Y8");
      document0.hasClass("X$M'J9vkVvq(w&cc}^");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.body();
      element0.ownText();
      document0.previousSibling();
      Element element1 = new Element("-]~X=$fbcPc");
      element1.dataset();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      CDataNode cDataNode0 = new CDataNode("-]~X=$fbcPc");
      document0.val();
      element0.ownerDocument();
      document0.body();
      // Undeclared exception!
//      try { 
        document0.selectFirst((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      Node node0 = cDataNode0.shallowClone();
      Document document1 = (Document)document0.doClone(node0);
      document1.ownerDocument();
      document1.body();
      String string0 = Node.EmptyString;
      // Undeclared exception!
//      try { 
        document1.firstElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Pattern pattern0 = Pattern.compile("xbgU=+u=Saeh]", 32);
      document2.getElementsByAttributeValueMatching("k", pattern0);
      Pattern pattern1 = Pattern.compile("k");
      document2.getElementsMatchingText(pattern1);
      document1.val("k");
      document1.dataNodes();
      // Undeclared exception!
//      try { 
        document1.getElementsByAttributeValueContaining("k", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("k65g(>`H)", "k65g(>`H)");
      Document document1 = document0.clone();
      String string0 = "Way1N~\\3zzx.-!f<O";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Way1N~\u0003zzx.-!f<O");
      Parser parser0 = Parser.htmlParser();
      String string1 = "#root";
      Document.createShell("#root");
      Parser parser1 = parser0.setTrackErrors(1074);
      Document document2 = document1.parser(parser1);
      document1.getElementsMatchingOwnText("br");
      document2.previousElementSibling();
      Element element0 = document2.val("W+lgX0.br0bs_");
      element0.classNames();
      // Undeclared exception!
//      try { 
        element0.is("k65g(>`H)");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'k65g(>`H)': unexpected token at '(>`H)'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tag name must not be empty. xbgu=+4=saeh]", "tag name must not be empty. xbgu=+4=saeh]");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("</");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      document0.hasText();
      document0.appendTo(document0);
      document0.siblingElements();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.clone();
      Document document2 = document1.clone();
      StringWriter stringWriter0 = new StringWriter();
      document1.doSetBaseUri("Ik'|L eS`8lww");
      Document document3 = document2.clone();
      document3.getAllElements();
      document0.normalise();
      Document document4 = new Document("body");
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn((Pattern) null);
      document4.setBaseUri("value");
      // Undeclared exception!
//      try { 
        document4.is((Evaluator) evaluator_MatchesOwn0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      document0.val();
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
      Document document1 = document0.clone();
      Element element0 = document0.val("a5U");
      element0.appendElement("org.jsoup.nodes.Document$OutputSettings$Syntax");
      document1.dataNodes();
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parseSettings0.normalizeTag("?MjNAfmNh");
      Tag tag0 = Tag.valueOf("fzx::FnOt+}", parseSettings0);
      Element element0 = new Element(tag0, "textarea");
      element0.cssSelector();
      Element element1 = document0.toggleClass("fzx::FnOt+}");
      element1.getElementsByAttribute("ascii");
      element1.html();
      document0.parents();
      Element element2 = new Element(tag0, "fzx::FnOt+}");
      document0.cssSelector();
      String string0 = Node.EmptyString;
      element2.hasAttributes();
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting("", "textarea");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      cDataNode0.nextSibling();
      Node node0 = cDataNode0.shallowClone();
      document0.doClone(node0);
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.remove();
      document0.val("1xkKtCBH$kA;f");
      element1.prependText("fzx::FnOt+}");
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = new Document("fzx::FnOt+}");
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      document0.previousSibling();
      document0.data();
      document0.cssSelector();
      String string0 = Node.EmptyString;
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.getElementsByAttributeValueStarting("textarea", "fzx::FnOt+}");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Pattern pattern0 = Pattern.compile("k");
      document2.getElementsMatchingText(pattern0);
      document1.val("k");
      document1.dataNodes();
      document1.getElementsByClass("xbgU=+u=Saeh]");
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Document document0 = Document.createShell("</");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      document0.hasText();
      document0.appendTo(document0);
      document0.siblingElements();
      document1.childNodes();
      StringWriter stringWriter0 = new StringWriter();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
      StringWriter stringWriter1 = new StringWriter();
      document1.toggleClass("]~=_[ >(\"BAifnk0/");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("{R)z*L](B&lYA0", "]~=_[ >(\"BAifnk0/");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: ]~=_[ >(\"BAifnk0/
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      document0.getElementsMatchingOwnText("hr7 IK6a");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element1 = new Element("#comment");
      element1.nextElementSiblings();
      element1.removeClass("#root");
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("fzx::FnOt+}", parseSettings0);
      Element element0 = new Element(tag0, "textarea");
      element0.cssSelector();
      Element element1 = document0.toggleClass("fzx::FnOt+}");
      element1.html();
      document0.parents();
      Element element2 = new Element(tag0, "fzx::FnOt+}");
      document0.cssSelector();
      String string0 = Node.EmptyString;
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting("", "textarea");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.clone();
      Document document2 = document1.clone();
      Element element0 = document1.prepend("org.jsoup.parser.Token$StartTag");
      element0.attr("org.jsoup.parser.Token$StartTag", "org.jsoup.parser.Token$StartTag");
      String string0 = null;
      Comment comment0 = new Comment((String) null);
      document2.doClone(comment0);
      document0.head();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      document0.quirksMode(document_QuirksMode0);
      document1.previousElementSibling();
      PipedWriter pipedWriter0 = null;
//      try {
        pipedWriter0 = new PipedWriter((PipedReader) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Document document1 = document0.ownerDocument();
      document1.reparentChild(document0);
      document1.getElementsByAttributeStarting(" > ");
      document0.textNodes();
      document0.toggleClass("b@");
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9OsW*#nGe0lAeF7ty", "9OsW*#nGe0lAeF7ty");
      Document document1 = document0.ownerDocument();
      Element element0 = document1.body();
      element0.baseUri();
      // Undeclared exception!
//      try { 
        document1.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("xbgU=+u=Saeh]", "xbgU=+u=Saeh]");
      document0.clone();
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      StringWriter stringWriter0 = new StringWriter();
      document2.html(stringWriter0);
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      document2.body();
      Parser parser0 = Parser.xmlParser();
      Document document3 = document2.parser(parser0);
      document2.html(stringWriter0);
      Element element0 = document3.body();
      Element element1 = element0.toggleClass("QiH]R3uH4d");
      element1.getElementsByClass("QiH]R3uH4d");
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("fzx::FnOt+}", parseSettings0);
      Element element0 = new Element(tag0, "textarea");
      element0.cssSelector();
      Element element1 = document0.toggleClass("fzx::FnOt+}");
      element1.html();
      Element element2 = new Element(tag0, "fzx::FnOt+}");
      document0.cssSelector();
      String string0 = Node.EmptyString;
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      document0.previousSibling();
      element0.cssSelector();
      document0.getElementsByClass("html > head");
      element0.text();
      document0.ensureChildNodes();
      document0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = "vSx@5At";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("vSx@5At", parseSettings0);
      Element element0 = new Element(tag0, "textarea");
      element0.cssSelector();
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("vSx@5At", "&u:pg");
      document0.toggleClass("SHbrvhr&*eR");
      // Undeclared exception!
//      try { 
        document0.getElementById("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.body();
      document0.previousSibling();
      element0.data();
      document0.cssSelector();
      String string0 = Node.EmptyString;
      // Undeclared exception!
//      try { 
        element0.getElementsByAttributeValueStarting("", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      document0.val();
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
      Document document1 = document0.clone();
      document1.doSetBaseUri("br");
      document0.getAllElements();
      document1.normalise();
      document0.childNodeSize();
      document1.getElementsContainingOwnText("#root");
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.clone();
      Document document2 = document1.clone();
      StringWriter stringWriter0 = new StringWriter();
      document2.html(stringWriter0);
      Element element0 = document1.toggleClass("xbgU=+u=Saeh]");
      document1.getElementsByClass("xbgU=+u=Saeh]");
      element0.removeClass("xbgU=+u=Saeh]");
      document0.ensureChildNodes();
      document2.data();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      cDataNode0.shallowClone();
      String string0 = "l4(@";
      document0.getElementsByAttributeValue("1xkKtCBH$kA;f", "l4(@");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("", "l4(@");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.clone();
      Document document2 = document0.normalise();
      Document document3 = document2.clone();
      StringWriter stringWriter0 = new StringWriter();
      Pattern pattern0 = Pattern.compile("Pattern syntax error: ");
      document0.getElementsMatchingOwnText(pattern0);
      document3.html(stringWriter0);
      Parser parser0 = Parser.xmlParser();
      Document document4 = document3.parser(parser0);
      document1.classNames();
      // Undeclared exception!
//      try { 
        document4.wrap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
//      try { 
        document0.html((CharArrayWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Document document1 = (Document)document0.toggleClass("org.jsoup.nodes.Element$2");
      document0.wholeText();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      document2.getElementById("<&%fJd#!kc`)/");
      Document document3 = Parser.parse("org.jsoup.nodes.Element$2", "<&%fJd#!kc`)/");
      document3.reparentChild(document2);
      Document document4 = (Document)document1.appendText("org.jsoup.nodes.Element$2");
      document4.siblingElements();
      // Undeclared exception!
//      try { 
        document1.before((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+4=Saeh]");
      document0.head();
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("xbgU=+4=Saeh]");
      Document document1 = new Document("xbgU=+4=Saeh]");
      document0.appendTo(document1);
      document0.siblingElements();
      document0.siblingElements();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Document.createShell("</");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      document0.hasText();
      Document document2 = (Document)document0.text("");
      document0.appendTo(document2);
      document0.siblingElements();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      document1.toggleClass("]~=_[ >(\"BAifnk0/");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("{R)z*L](B&lYA0", "]~=_[ >(\"BAifnk0/");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: ]~=_[ >(\"BAifnk0/
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.clone();
      Document document2 = document1.clone();
      document2.getElementsByAttributeStarting(" > ");
      document2.textNodes();
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      element0.html();
      Tag.valueOf("b@");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      Element element1 = new Element(tag0, "<html>\n <head></head>\n <body></body>\n</html>");
      Document document3 = element0.ownerDocument();
      document3.getElementsByClass("br");
      document0.text();
      document1.prependText("#root");
      document1.attr(" > ", true);
      document2.ownText();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Document document1 = document0.ownerDocument();
      document1.reparentChild(document0);
      // Undeclared exception!
      document1.prepend("");
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = Parser.parse("VCHQv|hFM%dJI3", "~#q\"?A<,iw");
      parseSettings0.normalizeAttribute("KU[XS{");
      Document document1 = document0.ownerDocument();
      Parser.parseFragment("head", (Element) document1, "VCHQv|hFM%dJI3");
      int int0 = 46;
      Parser parser2 = parser1.setTrackErrors(46);
      String string0 = "CC~Gx_9=kfxFh$m*L";
      // Undeclared exception!
//      try { 
        parser2.parseInput((Reader) null, "CC~Gx_9=kfxFh$m*L");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String input must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yf=", "Yf=");
      Element element0 = document0.shallowClone();
      Document document1 = document0.clone();
      document0.removeAttr("nJ#(MDlaDDsnH9w*qr");
      Document document2 = document1.normalise();
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.REMOVE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult1).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      document0.filter(nodeFilter0);
      document2.hasClass("Yf=");
      document0.previousElementSiblings();
      document0.val((String) null);
      element0.className();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.clone();
      Document document2 = document1.clone();
      document2.siblingElements();
      StringWriter stringWriter0 = new StringWriter();
      document2.html(stringWriter0);
      document1.toggleClass("xbgU=+u=Saeh]");
      // Undeclared exception!
//      try { 
        document1.getElementsByAttributeValueMatching("|^'$\"2N>", "{R)z*L](B&lYA0");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: {R)z*L](B&lYA0
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      Tag.valueOf("s+");
      TextNode textNode0 = new TextNode("hr7 IK6a");
      document0.setParentNode(element0);
      Element element1 = element0.prependElement("Pattern syntax error: ");
      document0.nodelistChanged();
      document0.doSetBaseUri("#root");
      Element element2 = element0.shallowClone();
      element1.prependElement("org.jsoup.select.CombiningEvaluator$And");
      element2.getElementsMatchingText("pubSysKey");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      // Undeclared exception!
//      try { 
        element1.getElementsByAttributeValueMatching((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Element element0 = new Element("fzx::FnOt+}");
      element0.appendText("fzx::FnOt+}");
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      Node node0 = cDataNode0.shallowClone();
      document0.doClone(node0);
      Element element0 = document0.head();
      Pattern pattern0 = Pattern.compile("1xkKtCBH$kA;f", 124);
      element0.getElementsMatchingOwnText(pattern0);
      Element element1 = element0.lastElementSibling();
      element1.hasClass("fzx::FnOt+}");
      element1.remove();
      // Undeclared exception!
//      try { 
        element1.getElementsByAttributeValueMatching("fzx::FnOt+}", "{R)z*L](B&lYA0");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: {R)z*L](B&lYA0
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      Node node0 = cDataNode0.shallowClone();
      Element element0 = document0.doClone(node0);
      Element element1 = document0.head();
      Element element2 = element1.lastElementSibling();
      element2.hasClass("fzx::FnOt+}");
      element0.getElementsByAttributeValueMatching(":nth-child(%d)", "T&\"TO|pc>");
      element0.shallowClone();
      element1.before(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = "fzx::FnOt+}";
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      Node node0 = cDataNode0.shallowClone();
      Element element0 = document0.doClone(node0);
      document0.head();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
//      try { 
        element0.previousElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Element element0 = new Element("E/eyJ_");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("fzx::FnOt+}", parseSettings0);
      Element element0 = new Element(tag0, "textarea");
      element0.cssSelector();
      Element element1 = document0.toggleClass("fzx::FnOt+}");
      element1.html();
      Element element2 = new Element(tag0, "fzx::FnOt+}");
      element2.getElementsByClass("4bjXIwzGI^ilEF>@-");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Element element0 = new Element("fzx::FnOt+}");
      element0.siblingNodes();
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Document.createShell("-]~X=$fbcPc");
      Element element0 = document0.body();
      document0.previousSibling();
      element0.data();
      document0.cssSelector();
      document0.text();
      // Undeclared exception!
//      try { 
        element0.getElementsByTag((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.clone();
      Document document2 = new Document("xbgU=+u=Saeh]");
      Document document3 = document2.clone();
      StringWriter stringWriter0 = new StringWriter();
      document3.html(stringWriter0);
      Pattern pattern0 = Pattern.compile("");
      document3.getElementsMatchingText(pattern0);
      document3.doSetBaseUri("");
      document1.getAllElements();
      document2.addClass("");
      document3.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      Node node0 = cDataNode0.shallowClone();
      Element element0 = document0.doClone(node0);
      document0.head();
      // Undeclared exception!
//      try { 
        element0.lastElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "br");
      Tag tag0 = Tag.valueOf("$x.rELem$Xx`]");
      Element element0 = new Element(tag0, "dK_b&0u>=r!+Q8;");
      document0.getElementsMatchingOwnText("8");
      String string0 = "\\s+";
      Tag.valueOf("dK_b&0u>=r!+Q8;");
      String string1 = ",";
      TextNode textNode0 = new TextNode("Pattern syntax error: ");
      document0.setParentNode(element0);
      Element element1 = document0.prependElement("html");
      element1.nodelistChanged();
      element0.doSetBaseUri(",");
      element1.shallowClone();
      // Undeclared exception!
//      try { 
        element1.prependElement((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("vSx@5At", parseSettings0);
      String string0 = "textarea";
      Element element0 = new Element(tag0, "textarea");
      element0.cssSelector();
      Element element1 = element0.toggleClass("textarea");
      element1.getElementById("textarea");
      // Undeclared exception!
//      try { 
        element1.reparentChild((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      document0.getElementsMatchingOwnText("hr7 IK6a");
      Tag.valueOf("s+");
      TextNode textNode0 = new TextNode(",");
      document0.setParentNode(element0);
      Element element1 = element0.prependElement("Pattern syntax error: ");
      document0.nodelistChanged();
      document0.doSetBaseUri("#root");
      Element element2 = element0.shallowClone();
      Element element3 = element1.prependElement("org.jsoup.select.CombiningEvaluator$And");
      element2.getElementsMatchingText("pubSysKey");
      Element element4 = element3.shallowClone();
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      element4.classNames(set0);
      element1.getElementsByAttributeValueMatching((String) null, "br");
      document0.nextSibling();
      element4.textNodes();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer.wrap(charArray0);
      Document document0 = Parser.parseBodyFragment("mebrs9rq${PbH2", "mebrs9rq${PbH2");
      Element element0 = document0.body();
      // Undeclared exception!
//      try { 
        element0.prependElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      document0.clone();
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      StringWriter stringWriter0 = new StringWriter();
      document2.html(stringWriter0);
      Pattern pattern0 = Pattern.compile("");
      document2.getElementsMatchingText(pattern0);
      document1.doSetBaseUri("");
      document2.getAllElements();
      document1.addClass("head");
      document0.childNodeSize();
      document0.getElementsContainingOwnText("*S+r}!1x/_]&}Yo+Jl|");
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.clone();
      Document document2 = document0.normalise();
      Document document3 = document2.clone();
      StringWriter stringWriter0 = new StringWriter();
      document3.html(stringWriter0);
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      // Undeclared exception!
//      try { 
        document1.insertChildren(32, (Collection<? extends Node>) linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Element element0 = document0.head();
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("#root");
      document0.is((Evaluator) evaluator_Id0);
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      Parser.xmlParser();
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("J", "");
      Document.createShell("SC/&r0}bG{:L");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.getElementsByAttributeStarting("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.head();
      element0.clone();
      document0.doClone(element0);
      document0.getElementsByAttributeValueMatching("truespeed", "truespeed");
      document0.id();
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("r'[,Xk");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: r'[,Xk
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      Document document1 = document0.clone();
      String string0 = "";
      // Undeclared exception!
//      try { 
        document1.getElementsByAttributeStarting("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = "</";
      Document document0 = Document.createShell("</");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      document0.hasText();
      Element element0 = document0.text("");
      Element element1 = document0.appendTo(element0);
      String string1 = "";
      // Undeclared exception!
//      try { 
        element1.getElementsByAttributeStarting("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '\"';
      charArray0[2] = '<';
      charArray0[3] = 'Z';
      Document document0 = Document.createShell("WK6^c!@*");
      Document document1 = document0.ownerDocument();
      Document document2 = document1.normalise();
      Document document3 = (Document)document2.text("org.jsoup.select.Evaluator$IsOnlyChild");
      document3.clone();
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      Node node0 = cDataNode0.shallowClone();
      document0.doClone(node0);
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.hasClass("fzx::FnOt+}");
      element1.remove();
      // Undeclared exception!
//      try { 
        element1.getElementsByAttributeValueMatching("fzx::FnOt+}", "{R)z*L](B&lYA0");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: {R)z*L](B&lYA0
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = "br";
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.shallowClone();
      Document document1 = document0.clone();
      String string1 = "nJ#(MDlaDDsnH9w*qr";
      document0.removeAttr("nJ#(MDlaDDsnH9w*qr");
      document1.normalise();
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
//      try { 
        document0.insertChildren((-2143), (Collection<? extends Node>) linkedHashSet0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.clone();
      Document document2 = document0.normalise();
      Document document3 = document2.clone();
      StringWriter stringWriter0 = new StringWriter();
      document3.html(stringWriter0);
      Pattern pattern0 = Pattern.compile("");
      document3.getElementsMatchingText(pattern0);
      document3.doSetBaseUri("");
      document1.getAllElements();
      document2.addClass("");
      document3.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("vSx@5At", parseSettings0);
      Element element0 = new Element(tag0, "textarea");
      element0.cssSelector();
      Element element1 = element0.toggleClass("textarea");
      element1.getElementsByAttributeValueNot("textarea", "vSx@5At");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("vS5At", parseSettings0);
      Element element0 = new Element(tag0, "");
      element0.cssSelector();
      element0.nextElementSiblings();
      element0.toggleClass("vS5At");
      element0.getElementsContainingText("");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors((-2220));
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser2 = parser1.settings(parseSettings0);
      Document document0 = parser2.parseInput("", "");
      Document document1 = document0.normalise();
      PipedReader pipedReader0 = new PipedReader(663);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      document1.html(pipedWriter0);
      document1.cssSelector();
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Tag.valueOf("</");
      Tag tag0 = Tag.valueOf("value");
      String string0 = "${(U?traL7qp%";
      Element element0 = new Element(tag0, "${(U?traL7qp%");
      // Undeclared exception!
//      try { 
        element0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = "*S,TX";
      Tag tag0 = Tag.valueOf("*S,TX");
      Tag.valueOf("F`SI\"v'/qR7Y");
      Element element0 = new Element(tag0, "value");
      Tag.valueOf("F`SI\"v'/qR7Y");
      TextNode textNode0 = new TextNode("org.jsoup.nodes.Element$1");
      element0.setParentNode(textNode0);
      Element element1 = element0.prependElement("Pattern syntax error: ");
      element1.nodelistChanged();
      element1.doSetBaseUri("");
      element1.shallowClone();
      element0.prependElement("^rp7E&KWKL2X,V");
      // Undeclared exception!
//      try { 
        element1.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors((-2220));
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser2 = parser1.settings(parseSettings0);
      Document document0 = parser2.parseInput("", "");
      Document document1 = document0.normalise();
      document1.getElementsMatchingText("html");
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '\"';
      charArray0[2] = '<';
      Document document0 = Parser.parseBodyFragment("", "");
      document0.children();
      Document document1 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
//      try { 
        document1.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '\"';
      charArray0[2] = '<';
      charArray0[2] = 'k';
      CharBuffer.wrap(charArray0);
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("y[AsXof", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.previousElementSibling();
      document1.attributes();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Element element0 = document0.attr("org.jsoup.nodes.Element$2", true);
      element0.hasText();
      document0.previousSibling();
      element0.data();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      String string0 = null;
      // Undeclared exception!
//      try { 
        Tag.valueOf((String) null, parseSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = "vS5At";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("vS5At");
      Document document0 = new Document("vS5At");
      String string1 = "                 ";
      Element element0 = document0.prependText("                 ");
      element0.children();
      document0.wholeText();
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
      document0.doSetBaseUri("textarea");
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("vSx@5At", parseSettings0);
      Element element0 = new Element(tag0, "textarea");
      element0.cssSelector();
      Element element1 = element0.toggleClass("textarea");
      element1.getElementsByClass("br");
      element0.text();
      parseSettings0.normalizeTag("textarea");
      // Undeclared exception!
//      try { 
        element0.wrap("}V:dI");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@$O?_l[`$");
      CDataNode cDataNode0 = new CDataNode("html");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "@$O?_l[`$", attributes0);
      element0.getElementsByTag("@$O?_l[`$");
      element0.text("L}wI~W]M");
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '\"';
      charArray0[2] = '<';
      charArray0[3] = 'k';
      CharBuffer.wrap(charArray0);
      Node[] nodeArray0 = new Node[0];
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("mebrs9rq${PbH2", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("label", parseSettings0);
      Element element0 = new Element(tag0, "label");
      element0.getElementsContainingText(":?ctS");
      // Undeclared exception!
//      try { 
        element0.select(":?ctS");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query ':?ctS': unexpected token at ':?ctS'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.body();
      document0.previousSibling();
      element0.data();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("`W?yf%xwv3D}h='t:", parseSettings0);
      Element element1 = new Element(tag0, "pre");
      document0.cssSelector();
      element1.getElementsByClass("#root");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.shallowClone();
      Document document1 = document0.clone();
      Document document2 = (Document)document0.removeAttr("nJ#(MDlaDDsnH9w*qr");
      document2.nodelistChanged();
      document1.normalise();
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        document2.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("vS5At", parseSettings0);
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("vS5At", "thead");
      Document document1 = document0.normalise();
      document0.clone();
      Pattern pattern0 = Pattern.compile("4<%n54yB/TxK/");
      document1.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.text("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = Parser.parse("Z;>dh,m|~n", "textarea");
      Document document1 = document0.clone();
      document1.normalise();
      Document document2 = document0.clone();
      Pattern pattern0 = Pattern.compile("Z;>dh,m|~n");
      pattern0.split((CharSequence) "textarea", 772);
      document2.getElementsMatchingText(pattern0);
      document0.getElementsContainingText("#root");
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      document0.clone();
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Pattern pattern0 = Pattern.compile("");
      document2.getElementsMatchingText(pattern0);
      document2.doSetBaseUri("");
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = "M,]4!)#2#aN1Z?Em";
      String string1 = ":nth-child(%d)";
      Document document0 = Parser.parseBodyFragmentRelaxed("M,]4!)#2#aN1Z?Em", ":nth-child(%d)");
      Parser parser0 = Parser.htmlParser();
      Document document1 = document0.parser(parser0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.createElement("M,]4!)#2#aN1Z?Em");
      element0.ownerDocument();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      // Undeclared exception!
//      try { 
        document_OutputSettings1.indentAmount((-1627));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.dataset();
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = "</";
      Document document0 = Document.createShell("</");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, ":contains(");
      document0.getElementsMatchingOwnText("hr7 IK6a");
      Tag.valueOf("s+");
      TextNode textNode0 = new TextNode(",");
      document0.setParentNode(element0);
      Element element1 = element0.prependElement("Pattern syntax error: ");
      document0.nodelistChanged();
      document0.doSetBaseUri("#root");
      Element element2 = element0.shallowClone();
      Element element3 = element1.prependElement("org.jsoup.select.CombiningEvaluator$And");
      element2.getElementsMatchingText("pubSysKey");
      element3.shallowClone();
      element1.getElementsByAttributeValueMatching((String) null, "br");
      document0.nextSibling();
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("vS5At", parseSettings0);
      Element element0 = new Element(tag0, "");
      element0.cssSelector();
      // Undeclared exception!
//      try { 
        element0.getElementsByClass("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Document document0 = new Document("class");
      document0.getElementsContainingOwnText((String) null);
      DocumentType documentType0 = new DocumentType("eh&`UkT>k~iC~kH", "", "Tag name must not be empty.", "Tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document0.after((Node) documentType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$IsOnlyChild";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$IsOnlyChild", parseSettings0);
      Tag.valueOf("W|zebP", parseSettings0);
      Element element0 = new Element(tag0, "org.jsoup.nodes.Document$OutputSettings", (Attributes) null);
      element0.childNodeSize();
      parseSettings0.normalizeTag("org.jsoup.select.Evaluator$IsOnlyChild");
      element0.hasText();
      // Undeclared exception!
//      try { 
        Tag.valueOf((String) null, parseSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Document document1 = document0.ownerDocument();
      // Undeclared exception!
//      try { 
        document0.before((Node) document1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("");
      element0.getElementsByAttributeStarting("RTU/?d<HY(`1qCvN%k");
      document0.className();
      Element element1 = document0.attr("", "#");
      element1.getElementsByAttributeValueMatching("", "#");
      // Undeclared exception!
//      try { 
        document0.before((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      document0.head();
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
      document0.textNodes();
      Element element0 = document0.toggleClass("xbgU=+u=Saeh]");
      element0.html();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      document0.getElementsByClass("<html>\n <head></head>\n <body></body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("xbgU=+u=Saeh]", parseSettings0);
      Element element0 = new Element(tag0, "xbgU=+u=Saeh]");
      element0.cssSelector();
      document0.getElementsByClass("br");
      element0.text();
      element0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fzx::FnOt+}", "fzx::FnOt+}");
      CDataNode cDataNode0 = new CDataNode("1xkKtCBH$kA;f");
      Node node0 = cDataNode0.shallowClone();
      document0.doClone(node0);
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.hasClass("fzx::FnOt+}");
      element1.remove();
      document0.val("1xkKtCBH$kA;f");
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Tag.valueOf("br");
      Pattern pattern0 = Pattern.compile("br", (-323));
      document0.getElementsByAttributeValueMatching("br", pattern0);
      document0.getElementsByAttributeStarting("br");
      document0.textNodes();
      Element element0 = document0.toggleClass("type");
      element0.html();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      document0.getElementsByClass("Tag name must not be empty.");
      document0.hasClass("g2-_G!=Y8");
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = "vS5At";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("vS5At", parseSettings0);
      Document document0 = new Document("vS5At");
      String string1 = "                 ";
      Element element0 = document0.prependText("                 ");
      element0.children();
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("C@H<l", "C@H<l");
      document0.appendElement("C@H<l");
      Element element0 = document0.tagName("textarea");
      element0.val("textarea");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.head();
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Parser.xmlParser();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.shallowClone();
      Document document1 = document0.clone();
      String string0 = "nJ#(MDlaDDsnH9w*qr";
      document1.attr("novalidate", true);
      element0.hasText();
      element0.removeAttr("   ");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
//      try { 
        document0.unwrap();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.nextElementSiblings();
      Document document1 = Parser.parse("Pattern syntax error: ", "");
      document1.cssSelector();
      document1.getElementsByClass("#root");
      document1.text();
      List<Node> list0 = document1.ensureChildNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.shallowClone();
      Document document1 = document0.clone();
      String string0 = "nJ#(MDlaDDsnH9w*qr";
      document0.removeAttr("nJ#(MDlaDDsnH9w*qr");
      Document document2 = document1.normalise();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document0.filter(nodeFilter0);
      document2.hasClass("br");
      document0.previousElementSiblings();
      String string1 = null;
      document0.val((String) null);
      // Undeclared exception!
//      try { 
        document2.wrap("xHEgV5AFou~v=\"/");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = "-]~X=$fbcPc";
      Document document0 = Parser.parseBodyFragment("-]~X=$fbcPc", "-]~X=$fbcPc");
      Element element0 = document0.body();
      document0.previousSibling();
      String string1 = "";
      element0.data();
      Appendable appendable0 = null;
      int int0 = (-1539);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      // Undeclared exception!
//      try { 
        document_OutputSettings1.indentAmount((-1539));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Element element0 = new Element("zlX<*]M@K2v,p?T8Q");
      element0.isBlock();
      // Undeclared exception!
//      try { 
        element0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*S,TX");
      String string0 = "F`SI\"v'/qR7Y";
      Tag.valueOf("F`SI\"v'/qR7Y");
      Element element0 = new Element(tag0, "value");
      // Undeclared exception!
//      try { 
        element0.getElementsMatchingOwnText("*S,TX");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: *S,TX
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("*", "*");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.clone();
      FormElement formElement0 = new FormElement(tag0, "", attributes2);
      attributes0.dataset();
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      formElement0.data();
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.classNames();
      // Undeclared exception!
//      try { 
        document0.replaceChild(formElement0, formElement1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = document0.clone();
      document1.attr("$VALUES", true);
      document1.getElementsByAttributeValueMatching("nav", "");
      document1.toggleClass("textarea");
      document0.childNode(0);
      Document document2 = (Document)document1.prependText("");
      // Undeclared exception!
//      try { 
        document2.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Document document0 = Parser.parse("ffiXu^<cr", "");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors((-332));
      Document document1 = document0.parser(parser1);
      document0.attr("dC^,u6C", "ffiXu^<cr");
      Document document2 = document1.normalise();
      document2.nodeName();
      Attributes attributes0 = document2.attributes();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Document document0 = new Document("pJ)P>#7[H*&m");
      String string0 = "";
      Element element0 = null;
//      try {
        element0 = new Element("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Document document0 = Document.createShell("%'4YV/FxXXHlC%");
      Document document1 = document0.clone();
      Pattern pattern0 = Pattern.compile("formnovalidate", 0);
      document1.getElementsByAttributeValueMatching("formnovalidate", pattern0);
      assertEquals(1, document0.childNodeSize());
      assertNotSame(document1, document0);
      assertEquals("%'4YV/FxXXHlC%", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      String string1 = "mV";
      // Undeclared exception!
//      try { 
        document0.after("mV");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Document document0 = Document.createShell("xbgU=+u=Saeh]");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Pattern pattern0 = Pattern.compile("");
      document2.getElementsMatchingText(pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("xbgU=+u=Saeh]", document2.baseUri());
      assertNotSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Element element0 = new Element("Pattern syntax error: ");
      Elements elements0 = element0.getElementsByAttributeValueMatching("Pattern syntax error: ", "");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", ":nth-child(%d)");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(4);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      Element element0 = document1.doClone(document0);
      element0.append("P0kz|RL^-1@;pi");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = "input";
      Document document0 = new Document("input");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      document1.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document_OutputSettings0.charset("input");
//        fail("Expecting exception: UnsupportedCharsetException");
      
//      } catch(UnsupportedCharsetException e) {
//         //
//         // input
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Parser.parseBodyFragment("6r?rCtFt9", "6r?rCtFt9");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = "";
      // Undeclared exception!
//      try { 
        Charset.forName("");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
//      try { 
        document0.child(249);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 249, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = "2ojH|[zAPvFn";
      Document document0 = new Document("2ojH|[zAPvFn");
      String string1 = "5";
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("A,u9VldX", parseSettings0);
      Element element0 = new Element(tag0, "A,u9VldX");
      element0.getElementsContainingText(":?ctS");
      // Undeclared exception!
//      try { 
        element0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = "";
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Element element0 = document0.attr("org.jsoup.nodes.Element$2", true);
      element0.hasText();
      element0.removeAttr("org.jsoup.nodes.Element$2");
      document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
//      try { 
        document0.unwrap();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(";7s3y`%c)=P_X", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ";7s3y`%c)=P_X", attributes0);
      pseudoTextElement0.appendElement("org.jsoup.nodes.Element");
      assertEquals(1, pseudoTextElement0.childNodeSize());
  }
}
