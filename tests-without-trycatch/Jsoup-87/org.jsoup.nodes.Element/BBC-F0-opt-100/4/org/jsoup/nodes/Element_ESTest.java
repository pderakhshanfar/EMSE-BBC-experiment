/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:13:56 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Document document0 = Document.createShell("-&sKC,x4ba} _4O=");
          Element element0 = document0.toggleClass("-&sKC,x4ba} _4O=");
          element0.addClass("-&sKC,x4ba} _4O=");
          element0.hasClass("-&sKC,x4ba} _4O=");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      Elements elements0 = document0.getElementsByAttributeValueContaining("*_KL9JH|L*Pv-", "script");
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parse(",_ O6{r4]$|M", "H1AX6<b4e}yU");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(charArrayWriter0, 8216, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Tag tag0 = Tag.valueOf("CBkxMj9@|qVp");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "7UCuW@U!", attributes0);
      pseudoTextElement0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("#d8cument");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("!V", "title");
      document0.wrap("@ih");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f}}C", "f}}C");
      Element element0 = document0.body();
      element0.wrap("A");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Element element0 = new Element("hr");
      element0.wholeText();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("marquee", "org.jsoup.helper.w3cdom$w3cbuilder");
      Element element0 = document0.head();
      element0.val("e=^*fw0J&Xr9");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Object must not be null", "org.jsoup.nodes.Element$1");
      Element element0 = document0.appendElement("<html>\n <head></head>\n <body>\n  Object must not be null\n </body>\n</html>");
      element0.val("N\"Dp~Aay");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D!4)CFS");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D!4)CFS", attributes0);
      Element element0 = formElement0.val("l[0lx#}");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Object must not be null", "Object must not be null");
      document0.setSiblingIndex((-216));
      document0.toggleClass("{4m': \u0002rjg.'hb8o");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell("5$3ulC|r]REZPIC");
      Element element0 = document0.head();
      element0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Object must not be null", "Object must not be null");
      document0.appendTo(document0);
      document0.toggleClass("{4m': \u0002rjg.'hb8o");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("5$3ulC|r]REZHPIC");
      document0.text("html");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("V~L-3^9v<");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      document0.tagName("script");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("j_dj8 ^w.;?yd:{kj", "SelfClosingStartTag");
      Element element0 = document0.body();
      element0.tagName("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D!4PCFzS`");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D!4PCFzS`", attributes0);
      formElement0.tagName("!-l.2@");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("style", "style");
      Element element0 = document0.createElement("style");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("style", "style");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$Class");
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$Class", attributes0);
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t>DJuM/~", "t>DJuM/~");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      document0.select("script");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = new Document("select");
      document0.select(",V2");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = new Document("_r0@");
      document0.removeClass("_r0@");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";Q3N1", "b?PDpltg|BE~J");
      Element element0 = document0.appendElement("b?PDpltg|BE~J");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element0;
      element0.addChildren(nodeArray0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("-&sKCx4ba} _4O=", "-&sKCx4ba} _4O=");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "['v,UV", attributes0);
      Element.preserveWhitespace(pseudoTextElement0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t>DJuM/~", "t>DJuM/~");
      Element element0 = document0.body();
      Element element1 = element0.removeClass("t>DJuM/~");
      element1.prependText("s;NWra{9x:;S}zAZ ,");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("style", "#");
      Element element0 = document0.appendTo(document0);
      element0.prependText("span");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Element element0 = new Element("hr");
      element0.prependElement("hr");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.appendElement("value");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";Q3N1", "#document");
      Element element0 = document0.appendElement(";Q3N1");
      Element element1 = element0.previousElementSibling();
      element1.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("D!4PCFzS`", "D!4PCFzS`");
      Element element0 = document0.appendElement("qod;%s");
      element0.prepend("qod;%s");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("marquee", "l[0lx#}");
      Element element0 = document0.head();
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("style", "#");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      CDataNode cDataNode0 = new CDataNode("class");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "<html>\n <head></head>\n <body>\n  {/7ew?&gt;rt*cy8{\n </body>\n</html>", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("<html>\n <head></head>\n <body>\n  {/7ew?&gt;rt*cy8{\n </body>\n</html>", "java.lang.string@0000000076");
      document0.appendTo(pseudoTextElement0);
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("style", "style");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("l[0lx#}", "l[0lx#}");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKT{b=EF+!Cb/");
      document0.appendTo(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = new Document("1p,00%-!)J<Z:1]c#vx");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("style", "style");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      Element element0 = document0.appendTo(document0);
      document0.siblingIndex = (-2539);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", "");
      Element element0 = document0.appendElement("br");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("l[0lx#}", "marquee");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("style", "#");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      document0.is((Evaluator) evaluator_AllElements0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("style", "#");
      document0.appendTo(document0);
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(":u2matces%s)", "");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      Elements elements0 = document0.getElementsByAttributeValueContaining("n7#_qKTb=EF+!Cb/", "&K6<ZnMMCd`82Kw(Da");
      document0.appendTo(document0);
      document0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Element element0 = new Element("tag name must not be empty.");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      element0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragment("style", "#");
      Document document1 = parser0.parseInput("style", "style");
      Element element0 = document1.appendTo(document0);
      element0.html("");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", "bdi");
      Element element0 = document0.createElement("bdi");
      Element element1 = document0.appendTo(element0);
      element1.html("bdi");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("style", "#");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("style", "style");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$AttributeKeyPair", parseSettings0);
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$AttributeKeyPair");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("stye", "#");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", "bdi");
      Pattern pattern0 = Pattern.compile("d!4pcfs`", 58);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("b8", "head");
      Pattern pattern0 = Pattern.compile("b8");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      Pattern pattern0 = Pattern.compile("", 4979);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("style", " />");
      document0.getElementsMatchingOwnText("HGTEu6WA:LV+:gM2");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";Q3N1", "b?PDpltg|BE~J");
      document0.getElementsByTag("th");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("body", "Tag name must not be empty.");
      Element element0 = document0.appendElement("&l;;");
      element0.getElementsByTag("&l;;");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Tag tag0 = Tag.valueOf("CBkxMj9@|qVp");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "7UCuW@U!", attributes0);
      pseudoTextElement0.getElementsByIndexLessThan(528);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("style", " />");
      document0.getElementsByIndexGreaterThan((-4535));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("</", "n7#_qKTb=EF+!Cb/");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Tag tag0 = Tag.valueOf("CBkxMj9@|qVp");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "7UCuW@U!", attributes0);
      Element element0 = pseudoTextElement0.attr("body", "&l;;");
      element0.getElementsByAttributeValueNot("body", "&l;;");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("style", "#");
      document0.getElementsByAttributeValueMatching("<html>\n <head></head>\n <body>\n  style\n </body>\n</html>", "B+psF%g}V:d9G7A1O:N");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "n7#_qKTb=EF+!Cb/");
      document0.getElementsByAttributeStarting("P;{y%?+c$");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Tag tag0 = Tag.valueOf("--!");
      CDataNode cDataNode0 = new CDataNode("[/,8FL");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("--!", "RawtextEndTagOpen");
      FormElement formElement0 = new FormElement(tag0, "#root", attributes1);
      formElement0.getElementsByAttribute("--!");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Element element0 = new Element("hr");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      Element element0 = document0.appendTo(document0);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("V~L-3^9v<");
      Element element0 = document0.body();
      element0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parse("l[0lx#}", "l[0lx#}");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Object must not be null", "Object must not be null");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      Element element0 = document0.appendTo(document0);
      Set<String> set0 = element0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Object must not be null", "Object must not be null");
      Element element0 = document0.head();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Element element0 = new Element("hr");
      element0.addClass(",OgM9Q2\"");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D!4PCFzS`");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D!4PCFzS`", attributes0);
      Document document0 = new Document("&gd7'W<:Rk)(RNY");
      document0.appendTo(formElement0);
      formElement0.children();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$AttributeKeyPair", parseSettings0);
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$AttributeKeyPair");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      Element element0 = document0.createElement("bdi");
      Element element1 = document0.appendTo(element0);
      document0.before((Node) element1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D!4PCFzS`");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D!4PCFzS`", attributes0);
      Document document0 = new Document("&gd7'W<:Rk)(RNY");
      document0.appendTo(formElement0);
      document0.before((Node) formElement0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragment("style", "#");
      Document document1 = parser0.parseInput("style", "style");
      document0.appendTo(document1);
      Element element0 = document0.firstElementSibling();
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("-&sKCx4ba} _4O=");
      Element element0 = document0.head();
      element0.before("h2");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragment("style", "#");
      Document document1 = parser0.parseInput("style", "style");
      Document document2 = (Document)document0.appendTo(document1);
      document2.before("");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("j_dj8 ^w.;?yd:{kj", "SelfClosingStartTag");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t>DJuM/~", "t>DJuM/~");
      Element element0 = document0.addClass("t>DJuM/~");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("l[0lx#}");
      Element element0 = document0.head();
      element0.attr("3%EbGa'_0.0", false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Object must not be null", "Object must not be null");
      Element element0 = document0.appendElement("`v");
      element0.attr("`v", true);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragment("style", "style");
      Document document1 = parser0.parseInput("style", "style");
      document0.appendTo(document1);
      Element element0 = document0.firstElementSibling();
      element0.attr("TmPWT~W3]l[XpEM", "3");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragment("style", "style");
      Document document1 = parser0.parseInput("style", "style");
      Element element0 = document0.appendTo(document1);
      element0.attr("TmPWT~W3]l[XpEM", "3");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t>DJuM/~", "t>DJuM/~");
      Element element0 = document0.body();
      element0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";Q3N1", "#document");
      Element element0 = document0.appendElement(";Q3N1");
      element0.appendText("LIPte^S~");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("5$3ulC|r]REZHPIC");
      Element element0 = document0.appendElement("math");
      element0.text("html");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      document0.appendTo(document0);
      DataNode dataNode0 = DataNode.createFromEncoded("", "RawtextEndTagOpen");
      document0.appendChild(dataNode0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("marquee", "l[0lx#}");
      Element element0 = document0.head();
      element0.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("body", "`~@S% /B[tTWtG");
      Element element0 = document0.appendElement("#");
      element0.append("V%qcf?MJ_eT7u0X78");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("mD;D");
      document0.siblingIndex = (-459);
      document0.append("mD;D");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Object must not be null", "Object must not be null");
      Element element0 = document0.head();
      element0.append("#");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", "bdi");
      Element element0 = document0.createElement("bdi");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("c{4A^^RPYL]\"]-gZ7");
      Element element0 = document0.head();
      CDataNode cDataNode0 = new CDataNode("c{4A^^RPYL]\"]-gZ7");
      element0.after((Node) cDataNode0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(":Ep]W=z7-REd1_n", "I@j,@");
      Element element0 = document0.body();
      DocumentType documentType0 = new DocumentType(":Ep]W=z7-REd1_n", "I@j,@", "^|^SIQ7at");
      element0.after((Node) documentType0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t>DJuM/~", "t>DJuM/~");
      Element element0 = document0.body();
      element0.after("s;NWra{9x:;S}zAZ ,t>DJuM/~");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = new Document("select");
      Element element0 = document0.appendElement("select");
      element0.after("!-l.2@");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t>DJuM/~", "t>DJuM/~");
      Element element0 = document0.body();
      element0.addClass("t>DJuM/~");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "html");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.wrap("`v");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document(" ");
      // Undeclared exception!
//      try { 
        document0.wrap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.val("class");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D!4PCFS`");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D!4PCFS`", attributes0);
      attributes0.keys = null;
      // Undeclared exception!
//      try { 
        formElement0.val("l[0l2x#}");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D!4PCFS`");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D!4PCFS`", attributes0);
      String[] stringArray0 = new String[8];
      attributes0.keys = stringArray0;
      // Undeclared exception!
//      try { 
        formElement0.val("pKmm{y");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D!4PCFzS`");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D!4PCFzS`", attributes0);
      attributes0.keys = null;
      // Undeclared exception!
//      try { 
        formElement0.toggleClass("!-l.2@");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
//      try { 
        document0.text("nav");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "zP#ee~o'?LfzU2");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-&sKCx4ba} _4O=", "-&sKCx4ba} _4O=");
      Element element0 = document0.appendElement("b");
      List<Node> list0 = Parser.parseXmlFragment("<]'d{+$#y", "5)^?evsn~weztlF q");
      element0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.NodeTraversor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DataNode dataNode0 = new DataNode("Tag name must not be empty.");
      Document document0 = Parser.parse("body", "Tag name must not be empty.");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.tagName("@]t,1V[");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("4ydB55r", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "!-l.2@", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.tagName("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("-&sKCx4ba} _4O=", "b");
      // Undeclared exception!
//      try { 
        document0.selectFirst("-&sKCx4ba} _4O=");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '-&sKCx4ba} _4O=': unexpected token at '-&sKCx4ba} _4O='
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("-&sKCx4ba} _4O=", "b");
      // Undeclared exception!
//      try { 
        document0.selectFirst("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      // Undeclared exception!
//      try { 
        document0.select((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bdi", "tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("-&sKCx4ba} _4O=", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("-&sKCx4ba} _4O=");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "url must be specified to connect", attributes0);
      formElement0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        formElement0.previousElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Object must not be null", "Object must not be null");
      CDataNode cDataNode0 = new CDataNode("Object must not be null");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
//      try { 
        Element.preserveWhitespace(document0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.prependElement("script");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("body", "Tag nae must not be empty.");
      // Undeclared exception!
//      try { 
        document0.prependElement((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Object must not be null", "Object must not be null");
      // Undeclared exception!
//      try { 
        document0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.prepend("=itHa@LE");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = new Document("value");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(353);
      MockPrintStream mockPrintStream0 = new MockPrintStream("value");
      Document document1 = document0.normalise();
      // Undeclared exception!
      document1.outerHtmlTail(mockPrintStream0, 353, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.jsoup.nodes.Element$2", "value");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(charArrayWriter0, 6, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("YZe,J1nVq,", "YZe,J1nVq,");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@{yKGNGwyxiH");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(outputStreamWriter0, (-1347), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead((Appendable) null, (-171), document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = new Document("e{8}_as{Vw2Nz(=y");
      MockFile mockFile0 = new MockFile("e{8}_as{Vw2Nz(=y", "e{8}_as{Vw2Nz(=y");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(mockFileWriter0, (-104), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("l[0lx#}", "marquee");
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#[TKTb=EF+!Cb/", "</");
      Element element0 = document0.appendTo(document0);
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("org.jsoup.safety.Cleaner$CleaningVisitor");
      // Undeclared exception!
      element0.is((Evaluator) evaluator_Class0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "&l;;");
      Evaluator.Class evaluator_Class0 = new Evaluator.Class((String) null);
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) evaluator_Class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      // Undeclared exception!
//      try { 
        document0.is("");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '': unexpected token at ''
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "br");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1), nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html("n7#_qKTb=EF+!Cb/");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("}zx", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "~/d3:eJBU", attributes0);
      // Undeclared exception!
//      try { 
        element0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Rcdata");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 1409);
      bufferedWriter0.close();
      // Undeclared exception!
//      try { 
        document0.html(bufferedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Stream closed
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Object must not be null", "Object must not be null");
      document0.appendTo(document0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      // Undeclared exception!
      document0.html(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.", attributes0);
      element0.appendTo(element0);
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",UZ+ivmEmN@", "textarea");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Object must not be null", "Object must not be null");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("style", "dl");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("'sP]T<7(v['>>Bczy,Z");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: 'sP]T<7(v['>>Bczy,Z
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("style", "#");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("8p!Za|{0&uTutAeB");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: 8p!Za|{0&uTutAeB
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", "bdi");
      // Undeclared exception!
//      try { 
        document0.getElementsByTag((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("class");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "<=", attributes0);
      // Undeclared exception!
//      try { 
        pseudoTextElement0.getElementsByClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute(":u2matces%s)", ":u2matces%s)");
      attributes0.put(attribute0);
      attributes0.put("class", "class");
      Tag tag0 = Tag.valueOf(":u2matces%s)");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      String[] stringArray0 = new String[1];
      attributes0.vals = stringArray0;
      // Undeclared exception!
//      try { 
        pseudoTextElement0.getElementsByClass("&l;;");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = new Document("class");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting((String) null, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("style", "#");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("<html>\n <head></head>\n <body>\n  style\n </body>\n</html>", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Object must not be null", "Object must not be null");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("!+tbP/\"", "2(");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: 2(
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding("", "textarea");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining(">-Dz(ZW", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("", "org.jsoup.select.CombiningEvaluator$Or");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("b8", "head");
      // Undeclared exception!
//      try { 
        document0.getElementById((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = new Document("n7#_qKTb=EF+!Cb/");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.empty();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D!4PCFS`");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D!4PCFS`", attributes0);
      FormElement formElement1 = new FormElement(tag0, "-M1$NDlk", attributes0);
      formElement1.parentNode = (Node) formElement0;
      // Undeclared exception!
//      try { 
        formElement1.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'D!4PCFS`': unexpected token at '!4PCFS`'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D!4PCFS`");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D!4PCFS`", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("_r0@");
      // Undeclared exception!
//      try { 
        document0.child(8205);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 8205, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Element element0 = new Element("EE$gV8MPB\"'R>Ux");
      // Undeclared exception!
//      try { 
        element0.child((-990));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      Document document1 = (Document)document0.appendTo(document0);
      // Undeclared exception!
      document1.before(")?c :^C]t^R2|n6Fn1");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.attr("script", "");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("5$3ulC|r]REZHPIC");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, "O");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Object must not be null", "Object must not be null");
      CDataNode cDataNode0 = new CDataNode("0.C85M");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
//      try { 
        document0.appendTo(document0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Object mustno be null", "Object mustno be null");
      Document document1 = new Document("Object mustno be null");
      Element element0 = document0.doClone(document1);
      // Undeclared exception!
//      try { 
        element0.appendTo(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("style", "style");
      // Undeclared exception!
//      try { 
        document0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";Q3N1", "b?PDpltg|BE~J");
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.appendElement("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("style", " />");
      // Undeclared exception!
//      try { 
        document0.appendElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      // Undeclared exception!
//      try { 
        document0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.append("&lt;");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D!4PC8FS`");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D!4PC8FS`", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
//      try { 
        document0.after((Node) element0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.after("Yy!s/v!O^)4'ZcN");
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D4$CFxS");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D4$CFxS", attributes0);
      FormElement formElement1 = new FormElement(tag0, "D4$CFxS", attributes0);
      formElement1.parentNode = (Node) formElement0;
      // Undeclared exception!
//      try { 
        formElement1.after(" > ");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("CBkxMj9@|qVp", "CBkxMj9@|qVp");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "", (Attributes) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Tag tag0 = Tag.valueOf("8B7aB7owI>z");
      Element element0 = null;
//      try {
        element0 = new Element(tag0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D4PCFxS");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D4PCFxS", attributes0);
      formElement0.html((CharBuffer) null);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "html");
      document0.hasClass(":J}0QXM5e");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      Element element0 = document0.toggleClass("");
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("#", "&l;;");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = new Document("select");
      Document document1 = document0.normalise();
      document1.hasText();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Tag tag0 = Tag.valueOf("CBkxMj9@|qVp");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "7UCuW@U!", attributes0);
      pseudoTextElement0.appendText("&l;;");
      pseudoTextElement0.hasText();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKT{b=EF+!Cb/");
      document0.appendTo(document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell("time");
      Element element0 = document0.body();
      element0.wrap("time");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("style", "#");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("l[0lx#}", "marquee");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";Q3N1", "#document");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#[TKTb=EF+!Cb/", "</");
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("org.jsoup.safety.Cleaner$CleaningVisitor");
      document0.is((Evaluator) evaluator_Class0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Tag tag0 = Tag.valueOf("sl[W");
      Element element0 = new Element(tag0, "sl[W", (Attributes) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("sl[W");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlHead(mockPrintStream0, 0, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      Element element0 = document0.createElement("bdi");
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      // Undeclared exception!
//      try { 
        element0.outerHtml((Appendable) mockPrintStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Element element0 = new Element("hr");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("<:v:kke+{-tzy", "hr");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.toString();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("stye", "#");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("hr");
      Element element0 = document0.toggleClass("hr");
      Element element1 = element0.addClass("");
      element1.hasClass("");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = new Document("-&sKC,x4ba} _4O=");
      document0.toggleClass("-&sKC,x4ba} _4O=");
      document0.addClass("-&sKC,x4ba} _4O=");
      document0.hasClass("!AS0`z%t7Kt");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("D4$CFxS", "#");
      document0.toggleClass("#");
      Element element0 = document0.addClass(" />");
      element0.hasClass("*|GXOf2xwx4-b+[");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Element element0 = new Element("hr");
      Element element1 = element0.addClass("hr");
      element1.addClass("hr");
      element1.hasClass("hr");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-&sKCx4ba} _4O=", "-&sKCx4ba} _4O=");
      document0.toggleClass("-&sKCx4ba} _4O=");
      document0.hasClass("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Element element0 = new Element("hio,g");
      element0.addClass("hio,g");
      element0.hasClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Element element0 = new Element("hr");
      Element element1 = element0.addClass("hr");
      element1.hasClass("hr");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("n_h-aast-of-ty6e", "n_h-aast-of-ty6e");
      DataNode dataNode0 = new DataNode("n_h-aast-of-ty6e", "n_h-aast-of-ty6e");
      Element element0 = document0.appendChild(dataNode0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("-&sKCx4ba} _4O=", "b");
      Element element0 = document0.prependText("");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Object must not be null", "Object must not be null");
      Element element0 = document0.appendTo(document0);
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("n7#_qKTb=EF+!Cb/", "n7#_qKTb=EF+!Cb/");
      Element.preserveWhitespace(dataNode0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3a[0", "a]3y[^5Q]&|");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      CDataNode cDataNode0 = new CDataNode("Tag name must not be empty.");
      element0.prependChild(cDataNode0);
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell("#d8cument");
      document0.title("#d8cument");
      document0.getElementsContainingOwnText("#d8cument");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nth-last-of-type", "nth-last-of-type");
      DataNode dataNode0 = new DataNode("nth-last-of-type", "nth-last-of-type");
      Element element0 = document0.appendChild(dataNode0);
      Pattern pattern0 = Pattern.compile("kulh`]~/a^5*lwwp");
      element0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Object must not be null", "Object must not be null");
      document0.appendElement("`v");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n <head></head>\n <body>\n  Object must not be null\n </body>\n</html>", "Object must not be null");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3a[0", "a]3y[^5Q]&|");
      document0.appendElement("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nth-last-of-type", "nth-last-of-type");
      DataNode dataNode0 = new DataNode("nth-last-of-type", "nth-last-of-type");
      document0.appendChild(dataNode0);
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000010");
      document0.getElementById("{Mdjp[-I");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      Element element0 = document0.createElement("bdi");
      Element element1 = document0.appendTo(element0);
      element1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("I");
      Element element0 = document0.body();
      document0.appendTo(element0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", "bdi");
      document0.appendTo(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D4$CFxS");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D4$CFxS", attributes0);
      FormElement formElement1 = new FormElement(tag0, "D4$CFxS", attributes0);
      formElement1.parentNode = (Node) formElement0;
      formElement1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";Q3N1", "#document");
      Element element0 = document0.appendElement(";Q3N1");
      Element element1 = element0.previousElementSibling();
      element1.appendText("#document");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$2", "Insert position out of bounds.");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKUTb=EF+!Cb/");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("n7#_qKUTb=EF+!Cb/", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      document0.appendTo(document0);
      document0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      document0.siblingElements();
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKT{b=EF+!Cb/");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("n7#_qKT{b=EF+!Cb/", element0.baseUri());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKT{b=EF+!Cb/");
      document0.appendTo(document0);
      document0.cssSelector();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKT{b=EF+!Cb/");
      String string0 = document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("n7#_qKT{b=EF+!Cb/", document0.baseUri());
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Elements", "org.jsoup.select.Elements");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
//      try { 
        document0.insertChildren(2358, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("_r0@", "_r0@");
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1879), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";Q3N1", "#document");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren((-1), nodeArray0);
      assertEquals("#document", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("_r0@");
      List<TextNode> list0 = document0.textNodes();
      // Undeclared exception!
//      try { 
        document0.insertChildren((-2809), (Collection<? extends Node>) list0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("!-l.2@");
      Elements elements0 = document0.getElementsByIndexLessThan(2182);
      // Undeclared exception!
//      try { 
        document0.insertChildren(46, (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nth-last-of-type", "nth-last-of-type");
      DataNode dataNode0 = new DataNode("nth-last-of-type", "nth-last-of-type");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("nth-last-of-type", document0.baseUri());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("_r0@");
      Element element0 = document0.prependText("");
      element0.textNodes();
      assertEquals(2, document0.childNodeSize());
      assertEquals("_r0@", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n <head></head>\n <body>\n  Object must not be null\n </body>\n</html>", "Object must not be null");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals("Object must not be null", element1.baseUri());
      assertEquals("body", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      Elements elements0 = document0.getElementsByIndexGreaterThan(268);
      assertEquals("</", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      document0.selectFirst("bdi");
      assertEquals(";Q3N1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$Class");
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$Class", attributes0);
      element0.getAllElements();
      assertEquals("org.jsoup.select.Evaluator$Class", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell("-&sKCx4ba} _4O=");
      // Undeclared exception!
//      try { 
        document0.before("h2");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("&#x", "body");
      document0.getElementsByAttribute("kulh`]~/a^5*lwwp");
      assertEquals("body", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", "bdi");
      document0.getElementsByAttributeValueNot("bdi", "bdi");
      assertEquals("bdi", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      document0.appendTo(document0);
      document0.siblingElements();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Tag tag0 = Tag.valueOf("CBkxMj9@|qVp");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "7UCuW@U!", attributes0);
      Element element0 = pseudoTextElement0.shallowClone();
      assertEquals("7UCuW@U!", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Tag tag0 = Tag.valueOf("sl[W");
      Element element0 = new Element(tag0, "sl[W", (Attributes) null);
      element0.doSetBaseUri("M1)6je*o(");
      assertEquals("M1)6je*o(", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";Q3N1", "#document");
      document0.title("av'7,");
      String string0 = document0.toString();
      assertEquals("<html>\n <head>\n  <title>av'7,</title>\n </head>\n <body>\n  ;Q3N1\n </body>\n</html>", string0);
      assertEquals("#document", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n7#_qKTb=EF+!Cb/", "</");
      document0.getElementsByAttributeValueContaining("s+", "script");
      boolean boolean0 = document0.hasAttributes();
      assertEquals("</", document0.baseUri());
      assertTrue(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1/R", "1/R");
      Pattern pattern0 = Pattern.compile("1/R", (-3629));
      document0.getElementsByAttributeValueMatching("id", pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("1/R", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "v<u|j|P8N ");
      Elements elements0 = document0.getElementsContainingText("JFH[?s2!dfrL!(M");
      assertEquals("v<u|j|P8N ", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Object must not be null", "Object must not be null");
      Elements elements0 = document0.getElementsByClass("Children collection to be inserted must not be null.");
      assertEquals("Object must not be null", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("-&sKCx4ba} _4O=", "-&sKCx4ba} _4O=");
      document0.getElementsByAttributeValueEnding("Q(`moi4>GP0P1XI#H", "kuLH`]~/A^5*lWWp");
      assertEquals("-&sKCx4ba} _4O=", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("style", "style");
      document0.is("style");
      assertEquals("style", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      Element element0 = document0.val("class");
      assertEquals(1, element0.childNodeSize());
      assertEquals("n7#_qKTb=EF+!Cb/", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "html");
      // Undeclared exception!
//      try { 
        document0.wrap("`v");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("style", "#");
      document0.getElementsMatchingOwnText("");
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      Elements elements0 = document0.getElementsByIndexEquals(32);
      assertEquals(";Q3N1", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Element element0 = new Element("time");
      // Undeclared exception!
//      try { 
        element0.getElementsByAttributeStarting(" ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D4$CFxS");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D4$CFxS", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.after(" > ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      document0.prepend("=itHa@LE");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("(Q{7IX{hkWh&By", "");
      // Undeclared exception!
//      try { 
        document0.select("V2>&!tui");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '&!tui': unexpected token at '&!tui'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000010");
      Elements elements0 = document0.getElementsByAttributeValueStarting("java.lang.string@0000000010", "+J`VFk0ZlQTh_");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "&l;;");
      document0.getElementsByAttributeValue("&l;;", "Ao?*PctG>*");
      assertEquals("&l;;", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Object must not be null", "Object must not be null");
      Element element0 = document0.attr("`v", true);
      assertEquals("Object must not be null", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Object must not be null", "Object must not be null");
      document0.wholeText();
      assertEquals("Object must not be null", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", ";Q3N1");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("sl[W", ",K0R{*zQK=nDTImOyQ");
      document0.dataset();
      assertEquals(",K0R{*zQK=nDTImOyQ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Element element0 = new Element("hr");
      element0.html("OfNz<h$|U9:");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      Element element0 = document0.child(0);
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      assertEquals("n7#_qKTb=EF+!Cb/", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bdi", "bdi");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("bdi", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("Object must not e null");
      Element element0 = document0.prependElement("Object must not e null");
      element0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D!4PCFzS`");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "D!4PCFzS`", attributes0);
      Elements elements0 = formElement0.getElementsMatchingText("!-l.2@");
      assertEquals("D!4PCFzS`", formElement0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Element element0 = new Element("hr");
      Element element1 = element0.addClass("hr");
      String string0 = element1.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.children();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$2", "Insert position out of bounds.");
      document0.nextElementSiblings();
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Document.createShell("n7#_qKTb=EF+!Cb/");
      document0.id();
      assertEquals("n7#_qKTb=EF+!Cb/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }
}
