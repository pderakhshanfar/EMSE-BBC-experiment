/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:05:48 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", "");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("Mo8dy");
      Element element0 = document0.toggleClass("Mo8dy");
      element0.hasClass("Mo8dy");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parse("*g6", "*g6");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("Xu4Clu.&aIDQA:b',.", "*g6");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: *g6
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63w~9,vxt", "P63w~9,vxt");
      Element element0 = document0.body();
      document0.setParentNode(element0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w]\"uVS\"kU11jctw7+'", ":nth8child%)");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(charArrayWriter0, 3019, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Element element0 = new Element("noresize");
      StringWriter stringWriter0 = new StringWriter(512);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlHead(stringWriter0, 0, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("[%s$=%s]", parseSettings0);
      Element element0 = new Element(tag0, "=jklhj$vfi");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Element element0 = new Element(" ?");
      element0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = new Document("py\"Ak9");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("body");
      Element element0 = document0.appendElement("@DY@S!");
      element0.wrap("Z$Q]q;wLJ]$8Afy^F");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.StructuralEvaluator$ImmediatePreiousSibing");
      Element element0 = document0.head();
      element0.wrap("C-HPQ;}_N>");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("fexS");
      Document document0 = parser0.parseInput((Reader) stringReader0, "({h+X");
      Element element0 = document0.body();
      element0.wrap("bo@*");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell("$3 `6MT<)w~WI");
      document0.siblingIndex = (-2387);
      document0.val("$3 `6MT<)w~WI");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("publicId", "publicId");
      Element element0 = document0.val("publicId");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("publicId", "publicId");
      Element element0 = document0.appendElement("publicId");
      element0.toggleClass("Y7IRef9");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      CDataNode cDataNode0 = new CDataNode("FCS@6");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "t'fNq3L;T/:*pYT", attributes0);
      pseudoTextElement0.toggleClass("t'fNq3L;T/:*pYT");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = new Document("6v|`TnGp4V#:(MZZd|j7");
      CDataNode cDataNode0 = new CDataNode(" XBDTt*I.");
      document0.prependChild(cDataNode0);
      Element element0 = document0.appendElement("Bq");
      element0.text(" XBDTt*I.");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>NM&AwI*", "Db>NM&AwI*");
      document0.setSiblingIndex((-3208));
      document0.text("H\"doNNe'I!CdQeQ)n");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^", "^");
      document0.text("^");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = new Document("org.jsoup.UncheckedIOException");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      document0.tagName("head");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", "");
      Element element0 = new Element("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling");
      document0.appendChild(element0);
      element0.tagName("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b,$J{", "Db>NM&AwI*");
      Element element0 = document0.appendElement("hr");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b,$J{", "Db>NM&AwI*");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63w~9,vWt", "P63w~9,vWt");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fgerdset", "fgerdset");
      Element element0 = document0.createElement("fgerdset");
      element0.selectFirst("fgerdset");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("pubQcId", "pubQcId");
      Element element0 = document0.appendElement("Bq");
      element0.selectFirst("Bq");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R", "R");
      document0.select("code");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("publicId", "publicId");
      Element element0 = document0.appendElement("Y7IRef9");
      element0.select("Y7IRef9");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b/r^u!~CU", " P;: o9");
      Element element0 = document0.appendElement("b/r^u!~CU");
      element0.removeClass("@_~wzf4cWM;J3");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "l");
      Element element0 = document0.appendElement("l");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63w~9,vWt", "P63w~9,vWt");
      document0.appendElement("Rv");
      Element element0 = document0.appendElement("P63w~9,vWt");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'(:Un~", "'(:Un~");
      Element element0 = document0.body();
      element0.prependText(":nth-child(");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6v|`TnG4V#:(MZd|j7", "6v|`TnG4V#:(MZd|j7");
      document0.setParentNode(document0);
      document0.prependText("6v|`TnG4V#:(MZd|j7");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R", "R");
      document0.prependElement("html");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R", "R");
      Element element0 = document0.body();
      element0.prepend("c9qXw6~|:");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Mo8dy", "(6T[sx.{`[");
      Element element0 = document0.appendElement("c[o9-");
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R", "R");
      document0.prepend("c9qXw6~|:");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", ".");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("_");
      document0.appendChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("body", "body");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Tag name must not be empty.", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("=");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "=", attributes0);
      document0.setParentNode(pseudoTextElement0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("),?+xhd u!{vK", "),?+xhd u!{vK");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'(:Un~", "'(:Un~");
      Element element0 = document0.body();
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("publicId", "publicId");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("publicId", "publicId");
      Element element0 = document0.appendElement("publicId");
      document0.appendElement("0ybQ.b{|SI7hxi");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!hxp>cemn)@", "!hxp>cemn)@");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "$3 `6MT<ew~W4sJI");
      Element element0 = document0.appendElement("u^@&HNa:7hnSzEZ4_L");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("pubQicId");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      document0.is((Evaluator) evaluator_AllElements0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'(:Un~", "'(:Un~");
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("html");
      document0.is((Evaluator) evaluator_AttributeStarting0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("pubQicId", "pubQicId");
      Element element0 = document0.appendElement("pubQicId");
      element0.is("pubqicid");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      document0.appendChild(document0);
      Node[] nodeArray0 = document0.childNodesAsArray();
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("P63w~9,vWt", "P63w~9,vWt");
      Document document1 = Document.createShell("=jklhj$vfi");
      Node[] nodeArray0 = document1.childNodesAsArray();
      document0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6v|`TnGp4V#:(MZd|j7", "6v|`TnGp4V#:(MZd|j7");
      Elements elements0 = document0.getElementsByAttribute("6v|`TnGp4V#:(MZd|j7");
      document0.siblingIndex = 1;
      document0.insertChildren(1, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6v|`TnG4V#:(MZd|j7", "6v|`TnG4V#:(MZd|j7");
      document0.setParentNode(document0);
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = new Document("");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "$3 `6MT<ew~W4sJI");
      Element element0 = document0.appendElement("u^@&HNa:7hnSzEZ4_L");
      element0.html("BetweenDoctypePublicAndSystemIdentifiers");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Document.createShell("`\"-HU7%vOfX");
      document0.siblingIndex = (-1436010313);
      document0.html(":%s(%dn%+d)");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("", "ZlL)C[!V?J^");
      MockFileWriter mockFileWriter0 = new MockFileWriter("ZlL)C[!V?J^", true);
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Element element0 = new Element(" 8:-m");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("figcaption", "figcaption");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63w~9,vxt", "P63w~9,vxt");
      document0.getElementsMatchingText("P63w~9,vxt");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      Pattern pattern0 = Pattern.compile("Children collection to be inserted must not be null.", (-1910));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Pattern pattern0 = Pattern.compile("Children collection to be inserted must not be null.", (-1910));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>NM&AwI*", "Db>NM&AwI*");
      document0.getElementsContainingOwnText("Db>NM&AwI*");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R", "R");
      document0.getElementsByTag("y7iref9");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63w~9,vWt", "P63w~9,vWt");
      Element element0 = document0.appendElement("Rv");
      element0.getElementsByTag("Rv");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$Attribute", "org.jsoup.select.Evaluator$Attribute");
      document0.getElementsByIndexLessThan(17353);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      document0.getElementsByIndexGreaterThan(2147483645);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("pubQicId", "pubQicId");
      document0.appendElement("Bq");
      document0.appendElement("Bq");
      document0.appendElement("k");
      document0.getElementsByIndexEquals(3);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pubQicId", "pubQicId");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      element0.addClass("pubQicId");
      element0.getElementsByClass("pubQicId");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", "");
      document0.getElementsByAttributeValueNot(":eq(", "Y%k>v,/M{/FKsuI:");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("'V}Fu{6E@");
      document0.getElementsByAttributeValueMatching("'V}Fu{6E@", "c");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Element$2", "kNm@");
      Element element0 = new Element(tag0, "option", attributes1);
      element0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$2", "kNm@");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@0000000076 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us prompt 646 us");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("NJ(}HIb')4TcU!I", "java.lang.string@0000000076 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us prompt 646 us");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000076 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us prompt 646 us", attributes1);
      formElement0.getElementsByAttributeValueEnding("NJ(}HIb')4TcU!I", "java.lang.string@0000000076 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us prompt 646 us");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Element element0 = new Element("fgerdseo");
      Element element1 = element0.val("fgerdseo");
      element1.getElementsByAttributeValueContaining("value", "fgerdseo");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      document0.attr("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.getElementsByAttributeValue("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("readonly", "o|gVw`]K<");
      Attributes attributes1 = attributes0.put(attribute0);
      Element element0 = new Element(tag0, "readonly", attributes1);
      element0.getElementsByAttribute("readonly");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6v|`TnGphV#s(MZ7|j7", "6v|`TnGphV#s(MZ7|j7");
      Element element0 = document0.appendElement("0r?p4g%dj");
      document0.prependElement("java.lang.string@0000000076 cp367 ww`u~i' iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6v|`TnGfsV#s(MZ7|}7", "6v|`TnGfsV#s(MZ7|}7");
      document0.setSiblingIndex((-449));
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      Element element0 = document0.appendChild(document0);
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Queue did not match expected sequence", "publicId");
      Document document1 = (Document)document0.appendTo(document0);
      CDataNode cDataNode0 = new CDataNode("Queue did not match expected sequence");
      document1.doClone(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>NM&AwI*", "Db>NM&AwI*");
      document0.setSiblingIndex((-3208));
      DataNode dataNode0 = new DataNode(".8r''MZ", ".8r''MZ");
      document0.doClone(dataNode0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("p63w~9,vxt");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("`\"-HU7%vOfX");
      document0.siblingIndex = (-1436010313);
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      Element element0 = document0.body();
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Element element0 = new Element(" 8:-m");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add(" 8:-m");
      element0.classNames((Set<String>) linkedHashSet0);
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("org.jsoup.UncheckedIOException");
      document0.toggleClass("org.jsoup.UncheckedIOException");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>NM&AwI*", "Db>NM&AwI*");
      Element element0 = document0.head();
      element0.children();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Element element0 = new Element("noresize");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>NM&AwI*", "Db>NM&AwI*");
      document0.appendElement("h");
      document0.child(1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.safety.Cleaner$CleaningVisitor", "org.jsoup.safety.Cleaner$CleaningVisitor");
      Element element0 = document0.child(0);
      element0.removeClass("JAZ!jP5}.P-dO");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("*u_DfMa3", "Q N9");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("Pw9,vW");
      document0.setParentNode(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|ccOj4.L.>@c", "|ccOj4.L.>@c");
      Document document1 = Parser.parse("|ccOj4.L.>@c", ":nth-child(%d)");
      document0.appendChild(document1);
      document1.before("");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@)m\"^x4JRvMknQ", "noresize");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@)m\"^x4JRvMknQ", "noresize");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Element element0 = new Element("head");
      Element element1 = element0.val("head");
      element1.attributes();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$Attribute", "org.jsoup.select.Evaluator$Attribute");
      document0.appendChild(document0);
      document0.attr("org.jsoup.select.Evaluator$Attribute", true);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";lWc<_|A", "body");
      Element element0 = document0.head();
      element0.attr("org.jsoup.parser.Token$Doctype", false);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("pM@j+^", "tL>0Wu?z}");
      document0.attr("jt", false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'(:Un~", "'(:Un~");
      Element element0 = document0.body();
      element0.attr(":nth-child(", "yEBONi!BAe:'r==");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R", "R");
      Element element0 = document0.head();
      element0.attr("R", "R");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("c<i}$_vqs", "c<i}$_vqs");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document(" 8:-m");
      Document document1 = new Document(" 8:-m");
      document0.appendTo(document1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6v|`TnGp4V#:(MZd|j7", "6v|`TnGp4V#:(MZd|j7");
      document0.siblingIndex = 1;
      document0.appendText("textarea");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("`\"-HU7%vOfX");
      document0.siblingIndex = (-1436010313);
      document0.appendText("J`6L{S,N>JG7&\"-B");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parse("P63w~9,vWt", "P63w~9,vWt");
      Element element0 = document0.head();
      element0.appendText("P63w~9,vWt");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("body", "body");
      document0.setSiblingIndex(1100);
      document0.append("body");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>NM&AwI*", "Db>NM&AwI*");
      Element element0 = document0.head();
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "l");
      Element element0 = document0.appendElement("l");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^", "^");
      Element element0 = document0.head();
      Element element1 = element0.after((Node) document0);
      element1.text("^");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63w~9,vxt", "P63w~9,vxt");
      Element element0 = document0.body();
      document0.setParentNode(element0);
      document0.after((Node) element0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Document.createShell("publicId");
      Element element0 = document0.head();
      element0.after("e9");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      Element element0 = document0.body();
      element0.after("(([+-])?(d+)?)n(s*([+-])?s*d+)?");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("`\"-HU7%vOfX");
      document0.siblingIndex = (-1436010313);
      document0.addClass("`\"-HU7%vOfX");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63w~9,vxt", "P63w~9,vxt");
      Element element0 = document0.appendElement("8:-m");
      Element element1 = element0.previousElementSibling();
      element1.addClass("$=");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("publicId");
      Element element0 = document0.appendElement("publicId");
      element0.addClass("publicId");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*pt<\"L,Wtq[t*R", "*pt<\"L,Wtq[t*R");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.wrap("p&*b4icid");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Element element0 = new Element(" 8:-m");
      // Undeclared exception!
//      try { 
        element0.wrap("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]6fM7{sI?sO7dvKShs", "]6fM7{sI?sO7dvKShs");
      DocumentType documentType0 = new DocumentType("", "", "", "small");
      document0.setParentNode(documentType0);
      // Undeclared exception!
//      try { 
        document0.wrap("<_eEBVJ_I");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Element element0 = new Element(" 8:-m");
      element0.appendTo(element0);
      // Undeclared exception!
      element0.val(" 8:-m");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("fgerdset", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("fgerdset", "fgerdset", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "fgerdset", attributes1);
      // Undeclared exception!
//      try { 
        formElement0.val();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("details");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.StructuralEvaluator$ImmediatePreiousSibing");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.tagName("t");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Element element0 = new Element(" 8:-m");
      // Undeclared exception!
//      try { 
        element0.tagName("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      Tag tag0 = Tag.valueOf("z<$o2={8_@~c");
      FormElement formElement0 = new FormElement(tag0, "z<$o2={8_@~c", (Attributes) null);
      document0.setParentNode(formElement0);
      // Undeclared exception!
//      try { 
        document0.siblingElements();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal Capacity: -1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";.J6", "rZ1B$Co-e9{o:_");
      // Undeclared exception!
//      try { 
        document0.selectFirst(" 8:-m");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query ' 8:-m': unexpected token at ':-m'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = new Document("nth-last-child");
      // Undeclared exception!
//      try { 
        document0.selectFirst("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w]\"uVS\"U11jctw7+h", "");
      // Undeclared exception!
//      try { 
        document0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b/r^u!~CU", " P;: o9");
      // Undeclared exception!
//      try { 
        document0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>NM&AwI*", "Db>NM&AwI*");
      DataNode dataNode0 = new DataNode(".8r''MZ", ".8r''MZ");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
//      try { 
        element0.previousElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.select.StructuralEvaluator$ImmediatePreiousSibing", "org.jsoup.select.StructuralEvaluator$ImmediatePreiousSibing", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
//      try { 
        document0.previousElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("body", "body");
      DocumentType documentType0 = new DocumentType("body", "body", "0", "0");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
//      try { 
        Element.preserveWhitespace(document0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("publicId", "publicId");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Element element0 = new Element(" 8:-m");
      element0.appendTo(element0);
      // Undeclared exception!
      element0.prependElement("");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Element element0 = new Element(" 8:-m");
      element0.appendTo(element0);
      // Undeclared exception!
      element0.prepend("q");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parse("P63w~9,vWt", "P63w~9,vWt");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(754);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 1357, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000049 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      Element element0 = document0.createElement("^%M}&T{g(,");
      Charset charset0 = document0.charset();
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        element0.outerHtmlTail(charBuffer0, (-784), document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Element element0 = new Element("{3(wvNwAhV(A");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        element0.outerHtmlTail((Appendable) null, 3088, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Document.createShell("D>NM&AwI*");
      MockFile mockFile0 = new MockFile("S&>2xhoQ", "java.lang.string@0000000094 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367  >  us pubqicid");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(mockPrintStream0, (-1432352094), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7'1i8ZNPvsFd", "7'1i8ZNPvsFd");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p}cb94@0");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(1241);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 1241, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = new Document("fgeldset");
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charBuffer0, 3106, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = new Document("org.jsoup.UncheckedIOException");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(mockFileWriter0, (-1493), document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("figcaption", "figcaption");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(outputStreamWriter0, (-2491), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("og", "og");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
//      try { 
        document0.outerHtmlHead(pipedWriter0, 134, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bo@*", "bo@*");
      document0.childNodes = null;
      document0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.nextElementSiblings();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Db>NM&AwI*", "Db>NM&AwI*");
      CDataNode cDataNode0 = new CDataNode("Db>NM&AwI*");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.nextElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("c<i}$_vqs", "c<i}$_vqs");
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("z}4ig`", "hp]a");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Children collection to be inserted must not be null.", "hp]a", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>NMN&AwI*", "Db>NMN&AwI*");
      document0.setParentNode(document0);
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      // Undeclared exception!
      document0.is((Evaluator) evaluator_MatchText0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("),?+xhd u!{vK", "),?+xhd u!{vK");
      // Undeclared exception!
//      try { 
        document0.is("),?+xhd u!{vK");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '),?+xhd u!{vK': unexpected token at '),?+xhd u!{vK'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6v|`TnGphV#s(MZ7|j7", "6v|`TnGphV#s(MZ7|j7");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("href");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("($3U:z", "($3U:z");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1), nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$Attribute", "org.jsoup.select.Evaluator$Attribute");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html("org.jsoup.select.Evaluator$Attribute");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("#", "6ATs");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>NM&AwI*", "Db>NM&AwI*");
      document0.setParentNode(document0);
      MockFile mockFile0 = new MockFile("reversed", "reversed");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      // Undeclared exception!
      document0.html(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      Charset charset0 = document0.charset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(13);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
//      try { 
        document0.html(charBuffer0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      // Undeclared exception!
//      try { 
        document0.html((BufferedWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Element element0 = new Element(" 8:-m");
      // Undeclared exception!
//      try { 
        element0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("QYDW^Q/g[", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "_<CK<3QRe$M9VP", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parse("k", "k");
      document0.setParentNode(document0);
      document0.siblingIndex = (-1673);
      Pattern pattern0 = Pattern.compile("head", (-1914));
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText(pattern0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "publicId");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Element element0 = new Element("head");
      // Undeclared exception!
//      try { 
        element0.getElementsMatchingText("Y{_TC");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: Y{_TC
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("pubQicId", "pubQicId");
      DataNode dataNode0 = DataNode.createFromEncoded("pubQicId", "pubQicId");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("--");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(" 8:-m", "N#ve5mTy}liK-_<[s");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("[TD,X_sWj1$kO?I");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: [TD,X_sWj1$kO?I
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("wgwmou~I3'", "wgwmou~I3'");
      Element element0 = document0.appendElement("Bq");
      List<Node> list0 = Parser.parseXmlFragment("Bq", "Bq");
      element0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.getElementsContainingText("wgwmou~I3'");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.NodeTraversor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":containsOwn", "seamless");
      Comment comment0 = new Comment("seamless");
      document0.setParentNode(comment0);
      // Undeclared exception!
//      try { 
        document0.getElementsContainingText(";k[<");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("body", "body");
      document0.siblingIndex = (-1024);
      document0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.getElementsContainingText((String) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("og", "og");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.getElementsContainingOwnText("og");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("pubQicId", "pubQicId");
      DataNode dataNode0 = DataNode.createFromEncoded("pubQicId", "pubQicId");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
//      try { 
        document0.getElementsContainingOwnText("pubQicId");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Element element0 = new Element("{3(wvNwAhV(A");
      // Undeclared exception!
//      try { 
        element0.getElementsByTag((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Document document0 = Document.createShell("java.lang.string@0000000038");
      Element element0 = document0.classNames(set0);
      element0.childNodes = null;
      // Undeclared exception!
//      try { 
        element0.getElementsByIndexLessThan(8224);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Data value must not be null", "Data value must not be null");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexEquals((-2248));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.NodeTraversor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Element element0 = new Element("class");
      TextNode textNode0 = new TextNode("class");
      element0.parentNode = (Node) textNode0;
      // Undeclared exception!
//      try { 
        element0.getElementsByIndexEquals((-2238));
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Document.createShell("'V}Fu{6E@");
      // Undeclared exception!
//      try { 
        document0.getElementsByClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("( 69~qZ}={i/", "( 69~qZ}={i/");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting("", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("html", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6v|`TnGfsV#s(MZ7|}7", "6v|`TnGfsV#s(MZ7|}7");
      document0.setParentNode(document0);
      document0.setSiblingIndex((-449));
      Pattern pattern0 = Pattern.compile("\"ohSdJ");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("6v|`TnGfsV#s(MZ7|}7", pattern0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("open", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "open", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.getElementsByAttributeValueEnding("open", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("publicId", "publicId");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining((String) null, "{3y0f}!zz^");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("XD", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeStarting("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("publicId", "publicId");
      // Undeclared exception!
//      try { 
        document0.getElementById("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "3u6ow+D$XFnYHC");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]og", "]og");
      List<Node> list0 = Parser.parseFragment("TfT[9xNP9", (Element) document0, "TfT[9xNP9");
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.empty();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Document.createShell("Db>NM&AwI*");
      Comment comment0 = new Comment("V+)RC!");
      document0.setParentNode(comment0);
      // Undeclared exception!
//      try { 
        document0.elementSiblingIndex();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Element element0 = new Element(" 8:-m");
      Element element1 = element0.appendTo(element0);
      element1.toggleClass(" 8:-m");
      // Undeclared exception!
//      try { 
        element1.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '8|-m.java.lang.String@0000000018': unexpected token at '@0000000018'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/N^bIA4D(%\"/F-", "Wv#");
      // Undeclared exception!
//      try { 
        document0.child((-2418));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before(" ");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell(" 8:-m");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, "width must be > 0");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse("F1|k[ObR", "pubQcId");
      Tag tag0 = Tag.valueOf("52?w@RzE#{X#X>1");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "textarea", attributes0);
      document0.setParentNode(element0);
      // Undeclared exception!
//      try { 
        document0.appendTo(element0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Element element0 = new Element(" 8:-m");
      // Undeclared exception!
//      try { 
        element0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("r/7]2;:YK^f)5", "r/7]2;:YK^f)5");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.appendText("r/7]2;:YK^f)5");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>NM&AwI*", "Db>NM&AwI*");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.appendText("t");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Element element0 = new Element("@.E}8j");
      // Undeclared exception!
//      try { 
        element0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$Attribute", "org.jsoup.select.Evaluator$Attribute");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.appendElement("");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'(:Un~", "'(:Un~");
      // Undeclared exception!
//      try { 
        document0.appendElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63w~9,vxt", "P63w~9,vxt");
      document0.appendChild(document0);
      document0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.appendChild(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
//      try { 
        document0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = new Document(" 8:-m");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.append(" 8:-m");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$Attribute", "org.jsoup.select.Evaluator$Attribute");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>NM&AwI*", "Db>NM&AwI*");
      Comment comment0 = new Comment("Db>NM&AwI*");
      document0.setParentNode(comment0);
      // Undeclared exception!
//      try { 
        document0.append("Db>NM&AwI*");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63w~9,vxt", "P63w~9,vxt");
      document0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63w~9,vxt", "P63w~9,vxt");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("(#hV+{$#(4!\"Uo(,l&q");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("e\u0003", "e\u0003");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Object must not be null", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$2");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "Object must not be null", attributes0);
      document0.setParentNode(element0);
      // Undeclared exception!
//      try { 
        document0.after("D-Pm");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("4SO=aU%h>=8y{DW-X");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("1Za");
      Element element0 = null;
//      try {
        element0 = new Element(tag0, (String) null, attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Tag tag0 = Tag.valueOf(",NLL+Do2Q@+yqOJlV");
      Element element0 = null;
//      try {
        element0 = new Element(tag0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Document.createShell("Mo8dy");
      document0.empty();
      document0.html((PipedWriter) null);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("pubQcId", "pubQcId");
      document0.hasClass("Bq");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      Element element0 = document0.body();
      element0.data();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("$3 `6MT<ew~WI");
      document0.prependText("f");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b/r^u!~CU", " P;: o9");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("body");
      Element element0 = document0.body();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parse("pubQicId", "pubQicId");
      Element element0 = document0.appendElement("pubQicId");
      Element element1 = element0.val("pubQicId");
      element1.cssSelector();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63w~9,vWt", "P63w~9,vWt");
      Element element0 = document0.head();
      element0.html("P63w~9,vWt");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", "");
      document0.clearAttributes();
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>NM&AwI*", "Db>NM&AwI*");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w]\"uVS\"U11jctw7+h", ":nth-child(%d)");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63w~9,vWt", "P63w~9,vWt");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("pubQicId");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!hxp>cemn)@", "!hxp>cemn)@");
      document0.getElementsByIndexLessThan((-1));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("a?y][-3VXH!j5");
      Element element0 = document0.createElement("-=xaX895)q!t");
      document0.setParentNode(element0);
      // Undeclared exception!
//      try { 
        element0.prependChild(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("p63w~9,vxt");
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w]\"uVS\"U11jctw7+h", ":nth-child(%d)");
      // Undeclared exception!
//      try { 
        document0.select("VSZsc Wj>T9-:f");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'T9-:f': unexpected token at ':f'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!hxp>cemn)@", "!hxp>cemn)@");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Element element0 = new Element(" 8:-m");
      element0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Tag tag0 = Tag.valueOf("bgsound");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "bgsound", attributes0);
      formElement0.appendElement("bgsound");
      formElement0.outerHtml((Appendable) stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("d?EDv%fOq^68");
      StringBuilder stringBuilder0 = new StringBuilder(4);
      document0.title("olo.#");
      document0.outerHtml((Appendable) stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fgerdset", "fgerdset");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "fgerdset");
      // Undeclared exception!
//      try { 
        document0.html(charBuffer0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("wgwm`u~I3'", "Pattern syntax error: ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parse(":Pw9,vW", ":Pw9,vW");
      Element element0 = document0.appendElement("textarea");
      element0.val("vxd^;:'?q");
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.tagName("textarea");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Document document0 = Document.createShell("us");
      document0.classNames(set0);
      document0.toggleClass("us");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Document.createShell("pubQicId");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      document0.toggleClass("pubQicId");
      element0.hasClass("pubQicId");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DsNM&Aw*", "iso-ir-6");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      element0.hasClass("iso-ir-6");
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Document.createShell("P63w~9,vWt");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.hasClass("prompt");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Document document0 = Document.createShell("us");
      document0.classNames(set0);
      document0.hasClass("java.lang.string@0000000038 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default sebs4 ?kkc82$l<] iso646-us ibm367 646 us");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("Mo8k0y", "Mo8k0y");
      document0.toggleClass("[|a4.oo#VT7TtD");
      document0.hasClass("org.jsoup.select.evaluator$matchtext");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R", "R");
      CDataNode cDataNode0 = new CDataNode("Tag name must not be empty.");
      document0.appendChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("L$lv", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "L$lv", attributes0);
      DocumentType documentType0 = new DocumentType("L$lv", "L$lv", "java.lang.string@0000000076 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      formElement0.appendChild(documentType0);
      formElement0.hasText();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Document.createShell("           ");
      document0.append("           ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("Mo8k0y", "Mo8k0y");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("body", "body");
      document0.setParentNode(document0);
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("-C.`uO%{C@Q7SH");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("wgwmou~I3'", "wgwmou~I3'");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("Bq");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = new Document("6v|`TnGp4V#:(MZZd|j7");
      CDataNode cDataNode0 = new CDataNode(" XBDTt*I.");
      document0.prependChild(cDataNode0);
      document0.getElementsContainingOwnText("6v|`TnGp4V#:(MZZd|j7");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("d?EDv%fOq^68");
      document0.title("olo.#");
      document0.getElementsContainingText("d?EDv%fOq^68");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63u~9,vWt", "P63u~9,vWt");
      DocumentType documentType0 = new DocumentType("P63u~9,vWt", "Rv", "P63u~9,vWt", "Rv");
      document0.appendChild(documentType0);
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&$!h*+A", "4tqm6@8");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("$3 `6MT<ew~WI");
      document0.prependText("f");
      document0.append("$3 `6MT<ew~WI");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell("$3 `6MT<ew~WI");
      document0.append("$3 `6MT<ew~WI");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "fgerdset");
      document0.appendElement("br");
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fgeldset", "fgeldset");
      Element element0 = document0.appendElement("fgeldset");
      DataNode dataNode0 = new DataNode("fgeldset");
      element0.before((Node) dataNode0);
      document0.getElementsContainingText("fgeldset");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      document0.getElementById("v/YD\":MX5$'t`Mss");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>,M&AwI*", "Db>,M&AwI*");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      document0.setParentNode(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6v|`TnGphV#s(MZ7|j7", "6v|`TnGphV#s(MZ7|j7");
      Element element0 = document0.appendElement("0r?p4g%dj");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.StructuralEvaluator$ImmediatePreiousSibing");
      document0.setParentNode(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6v|`TnG4V#:(MZd|j7", "6v|`TnG4V#:(MZd|j7");
      document0.setParentNode(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("p63w~9,vxt");
      document0.setParentNode(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("a?y][-3VXH!j5");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("publicId", "publicId");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertFalse(elements0.isEmpty());
      assertEquals("publicId", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63w~9,vWt", "P63w~9,vWt");
      document0.nextElementSibling();
      assertEquals("P63w~9,vWt", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bo@*", "bo@*");
      document0.setParentNode(document0);
      document0.nextElementSiblings();
      assertEquals("bo@*", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      document0.siblingElements();
      assertEquals("#", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      document0.appendChild(document0);
      Elements elements0 = document0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("'(:Un~", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>,M&AwI*", "Db>,M&AwI*");
      Element element0 = document0.head();
      element0.before(" > ");
      String string0 = element0.cssSelector();
      assertEquals("Db>,M&AwI*", element0.baseUri());
      assertEquals("html > head:nth-child(3)", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = new Document("org.jsoup.UncheckedIOException");
      Element element0 = document0.toggleClass("org.jsoup.UncheckedIOException");
      element0.cssSelector();
      assertEquals("org.jsoup.UncheckedIOException", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b/r^u!~CU", " P;: o9");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1625949436), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Node[] nodeArray0 = document0.childNodesAsArray();
      // Undeclared exception!
//      try { 
        document0.insertChildren(6, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("'V}Fu{6E@");
      Elements elements0 = document0.getElementsContainingText("'V}Fu{6E@");
      // Undeclared exception!
//      try { 
        document0.insertChildren(59, (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", "body");
      List<TextNode> list0 = document0.textNodes();
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1800), (Collection<? extends Node>) list0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w]\"uVS\"U11jctw7+h", ":nth-child(%d)");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
      assertEquals(":nth-child(%d)", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fgeldset", "fgeldset");
      Element element0 = document0.appendElement("fgeldset");
      DataNode dataNode0 = new DataNode("fgeldset");
      element0.before((Node) dataNode0);
      assertTrue(dataNode0.hasParent());
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.prependText("org.jsoup.parser.Token$Comment");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("SYSTEM", "SYSTEM");
      Element element0 = document0.appendElement(";Z");
      element0.after("org.jsoup.uncheckedioexception");
      Element element1 = element0.previousElementSibling();
      assertEquals(3, document0.childNodeSize());
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", "");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-2888));
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parse("pubQcId", "pubQcId");
      document0.selectFirst("Bq");
      assertEquals("pubQcId", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("fexS");
      Document document0 = parser0.parseInput((Reader) stringReader0, "({h+X");
      Elements elements0 = document0.getElementsMatchingText("    ");
      assertEquals("({h+X", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Element element0 = new Element("noresize");
      Elements elements0 = element0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6v|`TnGp4V#:(MZd|j7", "6v|`TnGp4V#:(MZd|j7");
      Element element0 = document0.removeClass("6v|`TnGp4V#:(MZd|j7");
      assertEquals("6v|`TnGp4V#:(MZd|j7", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bo@*", "bo@*");
      // Undeclared exception!
//      try { 
        document0.before("bo@*");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'(:Un~", "'(:Un~");
      Elements elements0 = document0.getElementsByAttributeValueNot("'(:Un~", " ");
      assertEquals("'(:Un~", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Element element0 = new Element(" 8:-m");
      Element element1 = element0.appendTo(element0);
      // Undeclared exception!
      element1.attr("tt", "tt");
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      Element element0 = document0.shallowClone();
      assertEquals("#", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Document.createShell("p63w~9,vxt");
      Element element0 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(element0, document0);
      assertEquals("p63w~9,vxt", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w]\"uVS\"U11jctw7+h", ":nth-child(%d)");
      document0.doSetBaseUri("N#ve5mTy}liK-_<[s");
      assertEquals("N#ve5mTy}liK-_<[s", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^", "^");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Element element0 = new Element("fgerdseo");
      Elements elements0 = element0.getElementsByAttributeValueContaining("value", "fgerdseo");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6v|`TnGfsV#s(MZ7|}7", "6v|`TnGfsV#s(MZ7|}7");
      Pattern pattern0 = Pattern.compile("\"ohSdJ");
      document0.getElementsByAttributeValueMatching("6v|`TnGfsV#s(MZ7|}7", pattern0);
      assertEquals("6v|`TnGfsV#s(MZ7|}7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Document.createShell("body");
      Elements elements0 = document0.getElementsByClass("'(:un~");
      assertEquals("body", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P63w~9,vWt", "P63w~9,vWt");
      document0.getElementsByAttributeValueEnding("Rv", "P63w~9,vWt");
      assertEquals("P63w~9,vWt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse("pubQicId", "pubQicId");
      document0.is("pubqicid");
      assertEquals("pubQicId", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parse("pub<ic2,d", "pub<ic2,d");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("pub<ic2,d", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fgerdset", "fgerdset");
      // Undeclared exception!
//      try { 
        document0.wrap("fgerdset");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("N}]C^mmd", "N}]C^mmd");
      Elements elements0 = document0.getElementsByIndexEquals(1200);
      assertEquals("N}]C^mmd", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = new Document(" 8:-m");
      document0.getElementsByAttributeStarting(" 8:-m");
      assertEquals(" 8:-m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Element element0 = new Element(" 8:-m");
      // Undeclared exception!
//      try { 
        element0.prependElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Document.createShell("publicId");
      // Undeclared exception!
//      try { 
        document0.after("e9");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsMatchingOwnText("8:-m");
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Document.createShell("$3 `6MT<ew~WI");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>,M&AwI*", "Db>,M&AwI*");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("Db>,M&AwI*", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@)m\"^x4JRvMknQ", "noresize");
      document0.getElementsByAttributeValueStarting("Insert position out of bounds.", "value");
      assertEquals(1, document0.childNodeSize());
      assertEquals("noresize", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$Attribute", "org.jsoup.select.Evaluator$Attribute");
      document0.getElementsByAttributeValue("XD", "XD");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parse("body", "body");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bo@P", "bo@P");
      // Undeclared exception!
//      try { 
        document0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell("Pw9,vW");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Document.createShell("value");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("pM@j+^", "tL>0Wu?z}");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("tL>0Wu?z}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Db>NM&AwI*", "Db>NM&AwI*");
      // Undeclared exception!
//      try { 
        document0.child(1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6v|`TnG4V#:(MZd|j7", "6v|`TnG4V#:(MZd|j7");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("6v|`TnG4V#:(MZd|j7", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Element element0 = new Element("publicId");
      // Undeclared exception!
//      try { 
        element0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parse("k", "k");
      Pattern pattern0 = Pattern.compile("head", (-1914));
      document0.getElementsMatchingText(pattern0);
  }
}
