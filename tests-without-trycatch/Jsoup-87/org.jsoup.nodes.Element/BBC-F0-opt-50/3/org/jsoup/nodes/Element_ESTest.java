/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:13:16 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      Document document1 = (Document)document0.addClass("org.jsoup.nodes.Element");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document1.addChildren(nodeArray0);
      document0.hasClass("org.jsoup.parser.Tokeniser");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("gf_M<S1G|fDeY$1Y");
      Element element0 = document0.doClone(document0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array must not contain any null objects
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = new Document("vU");
      Document document1 = Parser.parse("action", "vU");
      Elements elements0 = document0.getElementsByIndexLessThan(22);
      // Undeclared exception!
//      try { 
        document1.insertChildren((-226), (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("]+FK0*nRw0mx2L<");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.", attributes0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlTail(outputStreamWriter0, 49, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("value");
      StringBuilder stringBuilder0 = new StringBuilder("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(stringBuilder0, 0, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rqot", "rqot");
      Element element0 = document0.prependElement("rqot");
      element0.wrap("60|@_brRsmj3{T<CPx~");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parse("\"K", "\"K");
      Element element0 = document0.head();
      element0.wrap("#root");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\"s.^ AdF'6G");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "\"s.^ AdF'6G", attributes0);
      formElement0.wholeText();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*", "*");
      document0.setSiblingIndex((-2));
      document0.val("*");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      Element element0 = document0.head();
      element0.val("Bjc=Mnt9");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.val("rg.jsoup.nodes.Element");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("gf_M<S1G|fDeY$1Y");
      document0.appendChild(document0);
      document0.toggleClass(" > ");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("xLC");
      Element element0 = document0.head();
      element0.toggleClass("D}E##2v{%$/Cc+E");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      Element element0 = document0.body();
      element0.text("rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.text("rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Tag tag0 = Tag.valueOf("encoding");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "encoding", attributes0);
      formElement0.text();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("H4", "H4");
      document0.tagName("H4");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("pbyJ2h%Z;+{J");
      Element element0 = document0.appendElement("pbyJ2h%Z;+{J");
      element0.tagName("tAJ}ex^");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = new Document("D~1()NT");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r}um", "r}um");
      Element element0 = document0.appendElement("textarea");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"K", "\"K");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r}um", "r}um");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.selectFirst("rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("b", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("b");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "b", attributes0);
      formElement0.selectFirst("b");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("*", "*");
      document0.selectFirst("*");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.select("rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("X", "X");
      document0.select("head");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("value");
      Element element0 = document0.appendElement("value");
      element0.removeClass("value");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("tetar");
      Element element0 = document0.head();
      element0.removeClass("tetar");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.appendChild(document0);
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("#Z)'gyu8ngw!H");
      Document document1 = parser0.parseInput((Reader) stringReader0, "rg.jsoup.nodes.Element");
      document1.appendTo(document0);
      document1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.appendTo(document0);
      document0.prependText("rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.EleAent");
      Element element0 = document0.head();
      element0.prependText("org.jsoup.helper.Validate");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.doClone(document0);
      element0.prependText("");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("VoJPHY\"h>h5#iMX");
      document0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      Element element0 = document0.appendElement("rg.jsoup.nodes.Element");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Element element0 = document0.head();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      Element element0 = document0.head();
      element0.prepend("rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Tag tag0 = Tag.valueOf("encoding");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "encoding", attributes0);
      formElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell("pbyJ2h%Z;+{J");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document("head");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.El?men", "rg.jsoup.nodes.El?men");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      Element element0 = document0.appendElement("org.jsoup.helper.Validate");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*]XBXxJlJ", "\"K");
      document0.appendChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("<![CDATA[");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      Element element0 = document0.head();
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("QA&Z0W!8zWu3$,5");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "lctop2<+8");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("value", "value");
      Element element0 = document0.body();
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      element0.is((Evaluator) evaluator_IsLastChild0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "B}D.9M9");
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild((-1), 1883);
      document0.is((Evaluator) evaluator_IsNthLastChild0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("value", "value");
      document0.is("value");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K", "K");
      Element element0 = document0.body();
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Document.createShell("org.jsup.helper.Validate");
      document0.appendChild(document0);
      LinkedHashSet<Element> linkedHashSet0 = new LinkedHashSet<Element>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("?1x@d%^K`");
      Element element0 = document0.createElement("body");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "B}D.9M9");
      Element element0 = document0.appendElement("B}D.9M9");
      element0.html("value");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      Element element0 = document0.head();
      element0.html("rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Document.createShell(">");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Element element0 = document0.appendElement("org.jsoup.select.Evaluator$ContainsText");
      element0.html((PipedWriter) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("vU");
      document0.getElementsByAttributeValueStarting("vU", "vU");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell(">");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Pattern pattern0 = Pattern.compile("#root", 65);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      Document document1 = Parser.parse("org.jsoup.seKect.Evalu`tor$ContainsText", "rg.jsoup.nodes.Element");
      document1.appendChild(document0);
      Pattern pattern0 = Pattern.compile("rg.jsoup.nodes.Element");
      document1.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.getElementsMatchingText("}V`^2V<WR<uxe");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("YSO", "ai]PR;-5]s&");
      Pattern pattern0 = Pattern.compile("ai]PR;-5]s&", 44);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Pattern pattern0 = Pattern.compile("", (-226));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.getElementsMatchingOwnText("rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Elements elements0 = document0.getElementsContainingText("Children collection to be inserted must not be null.");
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      Element element0 = document0.appendElement("rg.jsoup.nodes.Element");
      element0.getElementsContainingOwnText("rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.getElementsByTag("rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.appendElement("rg.jsoup.nodes.Element");
      document0.getElementsByTag("rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("--!", "--!");
      document0.getElementsByIndexGreaterThan(3213227);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell("value");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.getElementsByAttributeValueNot("`f", "rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = new Document("#z!");
      document0.attr("#z!", "#z!");
      document0.getElementsByAttributeStarting("#z!");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rg.jsoup.nodes.element", "rg.jsoup.nodes.element");
      document0.prependElement("rg.jsoup.nodes.element");
      Element element0 = document0.appendChild(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      document0.appendChild(document0);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.setSiblingIndex((-2860));
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r}um", "r}um");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("))6 {");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", "children collection to be inserted must not be null.");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("R.s0u@aBJ qss#c/>5j", "R.s0u@aBJ qss#c/>5j");
      Element element0 = document0.shallowClone();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("gf_M<S1G|fDeY$1Y");
      document0.appendChild(document0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.EleAent");
      Element element0 = document0.head();
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      document0.addClass("org.jsoup.nodes.Element");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("orgjsop.helper.Validate", "org.jsoup.nodes.Element");
      document0.addClass("org.jsoup.nodes.Element");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = new Document("gf_M<S1G|fDeY$1Y");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = new Document("org.jsoup.helper.Validate");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parse("selected", "G/+0NUL`ZklW");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("?1x@d%^K`");
      document0.appendElement("HUDh^");
      document0.child(1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "!4:Srm<A}dg>b");
      Element element0 = document0.head();
      element0.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K", "K");
      Element element0 = document0.doClone(document0);
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("\"K", "\"K");
      Tag tag0 = Tag.valueOf("id");
      Element element0 = new Element(tag0, "\"K");
      document0.appendChild(element0);
      element0.before("\"K");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "jF");
      Element element0 = document0.body();
      element0.before("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]FPhQP}Y$x<", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("--!", "--!");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.val("rg.jsoup.nodes.Element");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("pbyJ2h%Z;+{J");
      Element element0 = document0.appendElement("pbyJ2h%Z;+{J");
      element0.attr("", true);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k'c%>u}S.Zb=6G", "3BE-}f^D bH:\"");
      Element element0 = document0.head();
      element0.attr("3BE-}f^D bH:\"", false);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      Element element0 = document0.head();
      element0.attr("CM&&d`Zj^7/ap+%u,", "CM&&d`Zj^7/ap+%u,");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r}um", "r}um");
      Element element0 = document0.appendElement("=SVoe|>{");
      Element element1 = element0.val("r}um");
      element1.attr("r}um", "nullChar");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K", "K");
      document0.attr("K", "id");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("Y tM}a+~E-gAQ^`");
      Document document0 = parser0.parseInput((Reader) stringReader0, ")OJFv>!}d");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Element element0 = document0.head();
      element0.appendText("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = new Document("D~1()NT");
      document0.appendElement("D~1()NT");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"K", "\"K");
      Tag tag0 = Tag.valueOf("dl");
      Element element0 = new Element(tag0, "id");
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("<![CDATA[");
      Element element0 = document0.body();
      element0.append("P*z8.");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell("org.jsup.helper.Validate");
      document0.setSiblingIndex((-1792432568));
      document0.append("org.jsup.helper.Validate");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = new Document("");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r}um", "r}um");
      Element element0 = document0.appendElement("=SVoe|>{");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"K", "\"K");
      Element element0 = document0.doClone(document0);
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Document.createShell("?1x@d%^K`");
      Element element0 = document0.appendElement("head");
      element0.after("!");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      Element element0 = document0.appendElement("rot");
      element0.after("");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parse("value", "mtFr");
      Element element0 = document0.createElement("?1x@d%^K`");
      element0.appendChild(document0);
      document0.after("e*");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("gf_M<S1G|fDeY$1Y");
      Element element0 = document0.appendElement("gf_M<S1G|fDeY$1Y");
      element0.addClass("gf_M<S1G|fDeY$1Y");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.wrap("textarea");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Document.createShell("lctop 2<+8");
      // Undeclared exception!
//      try { 
        document0.wrap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f}m", "f}m");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.val("doctypepublicidentifier_doublequoted");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Tag tag0 = Tag.valueOf("encoding");
      Attributes attributes0 = new Attributes();
      attributes0.vals = null;
      FormElement formElement0 = new FormElement(tag0, "encoding", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.val("encoding");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Tag tag0 = Tag.valueOf("encoding");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("T6i9pd]]3 vdkx{POur", "T6i9pd]]3 vdkx{POur");
      attributes0.put(attribute0);
      attributes0.keys = null;
      FormElement formElement0 = new FormElement(tag0, "encoding", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.val();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      document0.empty();
      // Undeclared exception!
//      try { 
        document0.text("z");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("\"K", "\"K");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("\"K", "\"K");
      CDataNode cDataNode0 = new CDataNode("adg");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.El?men", "rg.jsoup.nodes.El?men");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.tagName("rg.jsoup.nodes.El?men");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.tagName("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.selectFirst("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.helper.Validate");
      // Undeclared exception!
//      try { 
        document0.select("FgHr{");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'FgHr{': unexpected token at '{'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("+lU>y%qVM#t", "r[uY8*^dI,BP*__x)");
      // Undeclared exception!
//      try { 
        document0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^za| 1-4hx|l", "");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.prependElement("");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      // Undeclared exception!
//      try { 
        document0.prependElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r}um", "r}um");
      Element element0 = document0.appendElement("textarea");
      Element element1 = element0.prepend("rt");
      element1.setSiblingIndex(58);
      // Undeclared exception!
//      try { 
        document0.prependChild(element0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 58, Size: 2
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = new Document("<yQSJ");
      // Undeclared exception!
//      try { 
        document0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.El?men", "rg.jsoup.nodes.El?men");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.prepend("fS;");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"K", "\"K");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("org.soup.helper.Validate", "org.jsoup.nodes.EleAent");
      CDataNode cDataNode0 = new CDataNode("dir");
      Element element0 = document0.doClone(cDataNode0);
      Element element1 = element0.appendChild(cDataNode0);
      // Undeclared exception!
//      try { 
        element1.ownText();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("--!", "--!");
      MockPrintStream mockPrintStream0 = new MockPrintStream("D}E##2v{%$/Cc+E");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 3213227, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail((Appendable) null, 21, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Tag tag0 = Tag.valueOf("lctop 2<+8");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "async", attributes0);
      DocumentType documentType0 = new DocumentType("lctop 2<+8", "lctop 2<+8", "F");
      Element element1 = element0.appendChild(documentType0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "PUBLIC");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        element1.outerHtmlTail(stringBuilder0, (-2838), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      StringBuilder stringBuilder0 = new StringBuilder("]*|@m<");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(5100);
      // Undeclared exception!
      document0.outerHtmlHead(stringBuilder0, 5100, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("value");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead((Appendable) null, 0, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("encoding", "encoding");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("MJx@kPo\"&05(_KZpU");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-363305640), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      Element element0 = document0.appendChild(document0);
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      // Undeclared exception!
      element0.is((Evaluator) evaluator_IsEmpty0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      // Undeclared exception!
//      try { 
        document0.is("Ib;1}t@};e*");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'Ib;1}t@};e*': unexpected token at ';1}t@};e*'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Node[] nodeArray0 = new Node[5];
      DataNode dataNode0 = new DataNode("SYSTEM");
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1), nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html("#root");
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String input must not be null", "value");
      // Undeclared exception!
//      try { 
        document0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = new Document("Le0{Tx}KWr`@b");
      DataNode dataNode0 = new DataNode("Le0{Tx}KWr`@b");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
//      try { 
        element0.html("4eimzyb1CQ");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.appendChild(document0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      document0.html(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("gf_M<S1G|fDeY$1Y");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      // Undeclared exception!
//      try { 
        document0.html(mockFileWriter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("<![CDATA[");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("<![CDATA[");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: <![CDATA[
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "B}D.9M9");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("}E[pen#.ZX");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: }E[pen#.ZX
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("g2F9dXv", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "d'kF,=wjN,-lD/S", attributes0);
      // Undeclared exception!
//      try { 
        pseudoTextElement0.getElementsByTag("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Document.createShell("6Kw,yt(I:qd{#2~ Me:");
      CDataNode cDataNode0 = new CDataNode("#root");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexGreaterThan((-1));
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = new Document("rg.jsoup.nodes.Element");
      CDataNode cDataNode0 = new CDataNode("rg.jsoup.nodes.Element");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexEquals(51);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pQN\"o", "pQN\"o");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("pQN\"o");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Document.createShell("9X}8s)|Lt%1c``-!w= ");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting(".%s", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("", "tP");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("b", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("Z~oc;h_^b=", "[X8O`,");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: [X8O`,
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "ul|s");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding((String) null, "MO");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining((String) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("", "J!p/");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("rot");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeStarting((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      // Undeclared exception!
//      try { 
        document0.getElementById((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell("wZ^g.:@ehFi");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.dataNodes();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.Validate", "org.jsoup.helper.Validate");
      Element element0 = document0.head();
      element0.addClass("\"IP1E@\"G8?-(");
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'head.java.lang.String@0000000088': unexpected token at '@0000000088'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset((Charset) null);
      document0.outputSettings(document_OutputSettings1);
      // Undeclared exception!
//      try { 
        document0.clone();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      // Undeclared exception!
//      try { 
        document0.child(22);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 22, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Document.createShell("pbyJ2h%Z;+{J");
      Element element0 = document0.appendElement("pbyJ2h%Z;+{J");
      TextNode textNode0 = TextNode.createFromEncoded("'z");
      element0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        element0.before((Node) textNode0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("gQ(v,?;6b", "th");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.before("c$]:n(");
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("rg.jsoup.nodes.El?men", "rg.jsoup.nodes.El?men");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.attr("rg.jsoup.nodes.El?men", "?1x@ zd%^Kz");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parse("\"K", "\"K");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$AttributeWithValue", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$AttributeWithValue", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("c9,tL", "c9,tL");
      Element element0 = document0.removeClass("c9,tL");
      element0.childNodes = null;
      // Undeclared exception!
//      try { 
        element0.appendText("rg.jsoup.nodes.element");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      Element element0 = document0.addClass("org.jsoup.nodes.Element");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.appendElement("textarea");
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthOfType", "rg.jsoup.nodes.Element");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      document0.parser(parser1);
      // Undeclared exception!
//      try { 
        document0.appendElement("<html>\n <head></head>\n <body>\n  4lctop 2&lt;+8\n </body>\n</html>");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.Tag", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      // Undeclared exception!
//      try { 
        document0.appendElement((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      CDataNode cDataNode0 = new CDataNode("");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.appendChild(element0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Tag tag0 = Tag.valueOf("X_mDPwlXD[{7Myjb");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "X_mDPwlXD[{7Myjb", attributes0);
      Element element1 = element0.doClone(element0);
      // Undeclared exception!
//      try { 
        element0.appendChild(element1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      // Undeclared exception!
//      try { 
        document0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      CDataNode cDataNode0 = new CDataNode("rg.jsoup.nodes.Element");
      Node node0 = cDataNode0.doClone(document0);
      document0.parentNode = node0;
      // Undeclared exception!
      document0.append("rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.El?men", "rg.jsoup.nodes.El?men");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = new Document("rg.jsoup.nodes.Element");
      CDataNode cDataNode0 = new CDataNode("rg.jsoup.nodes.Element");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
//      try { 
        document0.append("rg.jsoup.nodes.Element");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("lctop 2<+8", "lctop 2<+8");
      Element element0 = document0.appendElement("textarea");
      Element element1 = element0.prepend("ea],N");
      // Undeclared exception!
//      try { 
        element0.after((Node) element1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.after("                   ");
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r}um", "r}um");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("Y_/", parseSettings0);
      Element element0 = new Element(tag0, "h,a");
      document0.parentNode = (Node) element0;
      // Undeclared exception!
//      try { 
        document0.after("html > head");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("Attributes incorrectly present on end tag", "+7c}6QH.'YTkNYv9<");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Insert position out of bounds.", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "Insert position out of bounds.", attributes1);
      String[] stringArray0 = new String[2];
      attributes1.keys = stringArray0;
      // Undeclared exception!
//      try { 
        formElement0.addClass("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("VoJPHY\"h>h5#iMX", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("textarea");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
//      try {
        element0 = new Element(tag0, (String) null, attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell("gf_M<S1G|fDeY$1Y");
      MockFileWriter mockFileWriter0 = new MockFileWriter("0nw!SB%#m)dmH");
      document0.html((OutputStreamWriter) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.hasClass("rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("d1oT>^EH^");
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = new Document("vU");
      document0.html("action");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = new Document("org.jsoup.helper.Validate");
      document0.html("org.jsoup.helper.Validate");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("value");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("B}D.9M9", "B}D.9M9");
      document0.appendTo(document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.El?men", "rg.jsoup.nodes.El?men");
      document0.appendChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse("orgjsop.helper.Validate", "org.jsoup.nodes.Element");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "lctop2<+8");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Document.createShell("lctop 2<+8");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "");
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", "/.l'lHp%^78r:\"!|");
      document0.getElementsByAttributeValueMatching("</", (Pattern) null);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("c ", "c ");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("lctop 2<+8", "lctop 2<+8");
      Element element0 = document0.appendElement("textarea");
      element0.prepend("ea],N");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("\"K", "\"K");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?L", "?L");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r}um", "r}um");
      Element element0 = document0.appendElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("xLC");
      document0.toggleClass("D}E##2v{%$/Cc+E");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("value", "value");
      Element element0 = document0.addClass("value");
      element0.hasClass("<html>\n <head></head>\n <body>\n  value\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*", "*");
      CDataNode cDataNode0 = new CDataNode((String) null);
      document0.prependChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      DocumentType documentType0 = new DocumentType("", "/.l'lhp%^78r:\"!|", "id");
      document0.appendChild(documentType0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.prependText("");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell("org.jsup.helper.Validate");
      Element element0 = document0.append("org.jsup.helper.Validate");
      document0.appendChild(element0);
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.EleAent");
      CDataNode cDataNode0 = new CDataNode("dir");
      document0.appendChild(cDataNode0);
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("lctop 2<+8", "lctop 2<+8");
      Element element0 = document0.appendElement("textarea");
      Element element1 = element0.prepend("ea],N");
      element1.ownText();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Tag tag0 = Tag.valueOf("encoding");
      Element element0 = new Element(tag0, "encoding");
      DataNode dataNode0 = DataNode.createFromEncoded("encoding", "@pm8HN=#g#I64Z");
      element0.appendChild(dataNode0);
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("c ", "c ");
      document0.append("ul");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      Element element0 = document0.append("rg.jsoup.nodes.Element");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.prependText(")&PN<XZ<]");
      document0.getElementsMatchingText("rg.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$ContainsText");
      Comment comment0 = new Comment("#root", ":nth-child(%d)");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.prependChild(xmlDeclaration0);
      document0.getElementsContainingText(">-");
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("*", "*");
      document0.getElementById("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rg.jsoup.nodes.element", "rg.jsoup.nodes.element");
      document0.appendChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Document.createShell("gf_M<S1G|fDeY$1Y");
      Element element0 = document0.html("0nw!SB%#m)dmH");
      element0.appendChild(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = new Document("gf_M<S1G|fDeY$1Y");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("?1x@d%^K`");
      document0.appendTo(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K", "K");
      Element element0 = document0.doClone(document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = new Document("Le0{Tx}KWr`@b");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      Element element0 = document0.appendElement("#root");
      element0.nextElementSiblings();
      assertEquals(2, document0.childNodeSize());
      assertEquals("rg.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("rg.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*]XBXxJlJ", "\"K");
      document0.appendChild(document0);
      Elements elements0 = document0.siblingElements();
      assertEquals("\"K", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("r}um", "r}um");
      Element element0 = document0.head();
      element0.before("r}um");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(3)", string0);
      assertEquals("r}um", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.Validate", "org.jsoup.helper.Validate");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("org.jsoup.helper.Validate", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Document.createShell("iYW;6");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
//      try { 
        document0.insertChildren((int) (byte)16, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parse("value", "value");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1384), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("9X}8s)|Lt%1c``-!w= ");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren((-2), nodeArray0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("9X}8s)|Lt%1c``-!w= ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Elements elements0 = document0.getElementsByIndexLessThan(22);
      // Undeclared exception!
//      try { 
        document0.insertChildren(22, (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Tag tag0 = Tag.valueOf("encoding");
      Element element0 = new Element(tag0, "encoding");
      DataNode dataNode0 = DataNode.createFromEncoded("encoding", "@pm8HN=#g#I64Z");
      Element element1 = element0.appendChild(dataNode0);
      List<DataNode> list0 = element1.dataNodes();
      assertEquals(1, element0.childNodeSize());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("encoding", "encoding");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("encoding", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = new Document("org.jsoup.helper.Validate");
      document0.html("org.jsoup.helper.Validate");
      document0.textNodes();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.El?men", "rg.jsoup.nodes.El?men");
      document0.appendChild(document0);
      document0.appendText("");
      document0.previousElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("6Kw,yt(I:qd{#2~ Me:");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1));
      assertEquals(1, document0.childNodeSize());
      assertEquals(4, elements0.size());
      assertEquals("6Kw,yt(I:qd{#2~ Me:", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = new Document("|)&#k~;]a-#B");
      // Undeclared exception!
//      try { 
        document0.selectFirst("|)&#k~;]a-#B");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '|)&#k~;]a-#B': unexpected token at '|)&#k~;]a-#B'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("))6 {");
      document0.getAllElements();
      assertEquals("))6 {", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "jF");
      // Undeclared exception!
//      try { 
        document0.before("org.jsoup.nodes.Element$2");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("YSO", "ai]PR;-5]s&");
      document0.getElementsByAttribute("ai]PR;-5]s&");
      assertEquals(1, document0.childNodeSize());
      assertEquals("ai]PR;-5]s&", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("encoding", "encoding");
      Elements elements0 = document0.getElementsByAttributeValueNot("encoding", " ");
      assertEquals("encoding", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.doSetBaseUri("VluTMhP");
      assertEquals("VluTMhP", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r}um", "r}um");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.getElementsByAttributeValueContaining("org.jsoup.select.Evaluator$IsNthLastOfType", "org.jsoup.select.Evaluator$IsNthLastOfType");
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pQN\"o", "pQN\"o");
      Elements elements0 = document0.getElementsByClass("pQN\"o");
      assertEquals(1, document0.childNodeSize());
      assertEquals("pQN\"o", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Document.createShell("wZ^g.:@ehFi");
      document0.getElementsByAttributeValueEnding("%t(}zxJ,*ocw|y%", "wZ^g.:@ehFi");
      assertEquals("wZ^g.:@ehFi", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Tag tag0 = Tag.valueOf("encoding");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "encoding", attributes0);
      formElement0.is("encoding");
      assertEquals("encoding", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("B}D.9M9", "B}D.9M9");
      document0.getElementsByAttributeValueMatching("&OZ v`7FQOS", " ");
      assertEquals("B}D.9M9", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("\"K", "\"K");
      // Undeclared exception!
//      try { 
        document0.wrap("#root");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "org.jsoup.nodes.Element");
      Elements elements0 = document0.getElementsMatchingOwnText("#root");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("\"K", "\"K");
      Elements elements0 = document0.getElementsByIndexEquals(46);
      assertEquals(1, document0.childNodeSize());
      assertEquals("\"K", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell("?1x@d%^K`");
      document0.getElementsByAttributeStarting("X)t^ZtjKL)F");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      // Undeclared exception!
//      try { 
        document0.after("                   ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", "/.l'lHp%^78r:\"!|");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
//      try { 
        document0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", "/.l'lHp%^78r:\"!|");
      document0.getElementsByAttributeValue(" />", "/.l'lHp%^78r:\"!|");
      assertEquals("/.l'lHp%^78r:\"!|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k'c%>u}S.Zb=6G", "3BE-}f^D bH:\"");
      Element element0 = document0.attr("3BE-}f^D bH:\"", false);
      assertEquals("3BE-}f^D bH:\"", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "jF");
      String string0 = document0.wholeText();
      assertEquals("jF", document0.baseUri());
      assertEquals("Tag name must not be empty.", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "!4:Srm<A}dg>b");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Element element0 = new Element("id");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.Validate", "org.jsoup.helper.Validate");
      document0.addClass("\"IP1E@\"G8?-(");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.helper.Validate", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.Element", "rg.jsoup.nodes.Element");
      document0.getElementsContainingOwnText("");
      assertEquals(1, document0.childNodeSize());
      assertEquals("rg.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Document.createShell("9X}8s)|Lt%1c``-!w= ");
      document0.dataset();
      assertEquals("9X}8s)|Lt%1c``-!w= ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r}um", "r}um");
      Element element0 = document0.appendElement("textarea");
      element0.val("textarea");
      assertEquals(2, document0.childNodeSize());
      assertEquals("r}um", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?L", "?L");
      Element element0 = document0.prependText("InHead");
      element0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.getElementById("?L");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r}um", "r}um");
      // Undeclared exception!
//      try { 
        document0.child((-670));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = new Document("ul|s");
      document0.previousElementSiblings();
      assertEquals("ul|s", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.nodes.El?men", "rg.jsoup.nodes.El?men");
      document0.appendText("");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("wZ^g.:@ehFi");
      Elements elements0 = document0.children();
      assertEquals("wZ^g.:@ehFi", document0.baseUri());
      assertEquals(1, elements0.size());
  }
}
