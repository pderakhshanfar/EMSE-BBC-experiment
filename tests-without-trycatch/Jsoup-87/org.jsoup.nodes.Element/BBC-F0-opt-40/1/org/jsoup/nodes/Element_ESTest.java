/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:05:47 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "br");
      Elements elements0 = document0.nextElementSiblings();
      document0.insertChildren(1, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.wrap("#");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      Element element0 = document0.head();
      element0.wrap("x.$_XKCr'v5}U");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.val((String) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = new Document("T[]eZ&,xa0{dZO9");
      document0.val("#root");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.toggleClass("9EiaPT$Z:-cAi\",");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("y~@/RLDnSY.9Z$", "CONTINUE");
      Element element0 = document0.body();
      element0.text("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "c R!P'{oToSFv}{");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("*9Mb0 SKls");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ht`ml", "ht`ml");
      Document document1 = Parser.parseBodyFragment("ht`ml", "ht`ml");
      document1.appendChild(document0);
      document0.tagName("TagOpen");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      document0.tagName("html");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("JAm']>O'2rH/Nj8Y@", "Tag name must not be empty.");
      Element element0 = document0.head();
      element0.tagName("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "br");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      Element element0 = document0.createElement("html");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!D,L/5o!PD5FRvpa,E1k", "!D,L/5o!PD5FRvpa,E1k");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("y~@/RLDnSY.9Z$", "CONTINUE");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse(" ", "ycg;2M>_JqvoI@vD");
      document0.selectFirst("selectdMed");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Tag tag0 = Tag.valueOf("3");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "3", attributes0);
      formElement0.selectFirst("3");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Element element0 = new Element("br");
      element0.select("br");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.removeClass("9EiaPT$Z:-cAi\",");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ht`ml", "ht`ml");
      Document document1 = Parser.parseBodyFragment("ht`ml", "ht`ml");
      Element element0 = document1.appendChild(document0);
      element0.appendChild(document1);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.prependText("K^\"uqdVvnsCH ");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("string input must not be null");
      Element element0 = document0.body();
      element0.prepend("string input must not be null");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("0{", "br");
      Element element0 = document0.createElement("br");
      document0.appendChild(element0);
      element0.prepend("h-yNPS U&M");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("#declaration", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("'Y01BU8$-L(E\"z");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "/^(}gCg`kj`", attributes0);
      pseudoTextElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = new Document("class");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("", "oE}n");
      Element element0 = document0.appendTo(document0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("</");
      Document document0 = parser0.parseInput((Reader) stringReader0, "</");
      Element element0 = document0.html("</");
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9m\u0007@st6", "9m\u0007@st6");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell("sg:Mk$`Oo-U-G>P1T:");
      document0.appendTo(document0);
      Document document1 = new Document("sg:Mk$`Oo-U-G>P1T:");
      document0.appendChild(document1);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.appendChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("5>U:)Ie");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.createElement("br");
      Element element1 = element0.appendTo(document0);
      element1.is("br");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Document document1 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "`\"F*fo9:<mAwx'");
      TextNode textNode0 = new TextNode("`\"F*fo9:<mAwx'", "x.$_XKCr'v5}U");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      document1.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", ".C");
      Element element0 = document0.body();
      Elements elements0 = element0.nextElementSiblings();
      element0.insertChildren(1, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Element element0 = new Element("br");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", ".C");
      Element element0 = document0.body();
      element0.html("i}X&fR\"i#pCP3@Q)v#/");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("", "oE}n");
      document0.html("<Nsc^tE5");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("4tSAu", "4tSAu");
      File file0 = MockFile.createTempFile("}BAq*Db{fm]-[kn", "xjw#_{Zzlq%^,", (File) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      document0.html((OutputStreamWriter) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.html();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "br");
      document0.cssSelector();
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      Pattern pattern0 = Pattern.compile("#");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5>U:)Ie", ",r7");
      Pattern pattern0 = Pattern.compile("5>U:)Ie", (-167));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9m\u0007@st6", "9m\u0007@st6");
      document0.getElementsMatchingText("9m\u0007@st6");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Sq1kdchAs");
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput((Reader) stringReader0, "Sq1kdchAs");
      Pattern pattern0 = Pattern.compile("^,:Wn", 0);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("</");
      Document document0 = parser0.parseInput((Reader) stringReader0, "</");
      Pattern pattern0 = Pattern.compile("</", 0);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell("+q|+-74JH");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Document.createShell("5>U:)Ie");
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.getElementsByTag("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("4tSAu", "4tSAu");
      document0.getElementsByIndexLessThan(1415);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse("", "oE}n");
      document0.getElementsByIndexGreaterThan(58);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!D,L/5o!PD5FRvpa,E1k", "!D,L/5o!PD5FRvpa,E1k");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("selected");
      Element element0 = document0.toggleClass("selected");
      document0.addClass("selected");
      element0.getElementsByClass("selected");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ins", " ");
      document0.getElementsByAttributeValueStarting("ins", "ins");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      document0.getElementsByAttributeValueNot("qjfaY", ".C");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      document0.getElementsByAttributeValueMatching("#root", ".c");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("</");
      Document document0 = parser0.parseInput((Reader) stringReader0, "</");
      document0.getElementsByAttributeValue("</", "</");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Tag tag0 = Tag.valueOf("|F/3mz");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("|F/3mz", true);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "|F/3mz", attributes1);
      pseudoTextElement0.getElementsByAttribute("|F/3mz");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("", "oE}n");
      Element element0 = document0.prependElement("q");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5>U:)Ie", ",r7");
      document0.appendTo(document0);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("Ua_lLTuiE", "Ua_lLTuiE");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "br");
      Element element0 = document0.appendChild(document0);
      document0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      Element element0 = document0.createElement("html");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = new Document("VJMV`'JSZwXWM");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      Element element0 = document0.appendTo(document0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      Element element0 = document0.head();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell("");
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell(":,5#");
      document0.toggleClass("#root");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("a8'%3S@d", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "M/V|v:qc\"", attributes0);
      pseudoTextElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("AttributeValue_doubleQuoted", "Pattern syntax error: ");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("sgOMk$`Oo-U-G>Pi>:");
      Element element0 = new Element("br");
      Element element1 = document0.appendTo(element0);
      element1.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      CDataNode cDataNode0 = new CDataNode("Ylq");
      Element element0 = document0.head();
      element0.before((Node) cDataNode0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.before("b {)ph0s{LhiB");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      Element element0 = document0.createElement("1`");
      Element element1 = element0.appendTo(document0);
      element1.before("children");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Element element0 = new Element(" />");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("XfT@hI", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("x1Aoed");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "XfT@hI", attributes0);
      formElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.attr("+ 1rCgpG", true);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      document0.attr("+ 1rCgpG", true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("AttributeValue_doubleQuoted", "Pattern syntax error: ");
      Document document1 = Document.createShell("nVYr");
      Document document2 = (Document)document0.appendTo(document1);
      document2.attr("AttributeValue_doubleQuoted", "nVYr");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("", "oE}n");
      CDataNode cDataNode0 = new CDataNode("Ylq");
      Node node0 = cDataNode0.doClone(document0);
      document0.reparentChild(node0);
      document0.attr("ScriptDataEscapedEndTagOpen", "q");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      document0.appendTo(document0);
      document0.appendText("#root");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w?", "w?");
      Element element0 = document0.head();
      element0.appendText("w?");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("RCDATAEndTagName", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Array must not contain any null objects");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "RCDATAEndTagName", attributes0);
      formElement0.appendElement("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "br");
      document0.appendElement("br");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.createElement("br");
      Element element1 = element0.appendTo(document0);
      element1.append("");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XHCr'v5}9", "x.$_XHCr'v5}9");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000072");
      Element element0 = document0.prependElement("java.lang.string@0000000072");
      element0.after("java.lang.string@0000000072");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      Element element0 = document0.body();
      element0.after("LK1-W");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendTo(document0);
      document0.addClass("<html>\n <head></head>\n <body>\n  br\n </body>\n</html>\n<br>");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "org-jsoup.srlect.ENaluator$MatchesOwJ");
      Element element0 = document0.head();
      element0.addClass("*w{ti");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("Wz>bCU4CnpFX)");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.wrap("AQ+3ZmzEv+KRWi9TKyC");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.wrap("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.val("#root");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "br");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document("T[]eZ&,xa0{dZO9");
      // Undeclared exception!
//      try { 
        document0.text("1z[h+i|a?h:");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "br");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.tagName("5T^.?m/!ecw");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      // Undeclared exception!
//      try { 
        document0.tagName("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      // Undeclared exception!
//      try { 
        document0.selectFirst("org.jsoup.nodes.Element$2");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'org.jsoup.nodes.Element$2': unexpected token at '$2'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = new Document("VJMV`'JSZwXWM");
      // Undeclared exception!
//      try { 
        document0.selectFirst("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(^%", "(^%");
      // Undeclared exception!
//      try { 
        document0.select("(^%");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '(^%': unexpected token at '(^%'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("", "oE}n");
      // Undeclared exception!
//      try { 
        document0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      // Undeclared exception!
//      try { 
        document0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "");
      TextNode textNode0 = new TextNode("x.$_XKCr'v5}U", "");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
//      try { 
        document0.previousElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("</");
      Document document0 = parser0.parseInput((Reader) stringReader0, "</");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("5>U:)Ie", "5>U:)Ie");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.prependElement("W#V|FzU");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("fa");
      Document document0 = parser0.parseInput((Reader) stringReader0, "fa");
      // Undeclared exception!
//      try { 
        document0.prependElement((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("5>U:)Ie", "5>U:)Ie");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.prepend("5>U:)Ie");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$IsLastChild", "selected");
      TextNode textNode0 = new TextNode((String) null, (String) null);
      document0.appendChild(textNode0);
      // Undeclared exception!
//      try { 
        document0.ownText();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail((Appendable) null, 44, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("oLDBMh'fFv[Z1;[cq");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
//      try { 
        document0.outerHtmlTail(pipedWriter0, 1622, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!D,L/5o!PD5FRvpa,E1k", "!D,L/5o!PD5FRvpa,E1k");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "!D,L/5o!PD5FRvpa,E1k");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(98688);
      // Undeclared exception!
      document0.outerHtmlHead(stringBuilder0, 6, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead((Appendable) null, (-1937241834), (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "x.$_XKCr'v5}U");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(stringBuilder0, (-407), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "5>U:)Ie");
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("5>U:)Ie", "5>U:)Ie");
      document0.appendTo(document0);
      Pattern pattern0 = Pattern.compile("Oy [", (-1775));
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_Matches0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("</");
      Document document0 = parser0.parseInput((Reader) stringReader0, "</");
      // Undeclared exception!
//      try { 
        document0.is("</");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '</': unexpected token at '</'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ua_lLTuiE", "Ua_lLTuiE");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.is("org.jsoup.internal.Normalizer");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Document.createShell("Wz>bCU4CnpFX)");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.html("Wz>bCU4CnpFX)");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("sgOMk$`Oo-U-G>Pi>:");
      Document document1 = (Document)document0.appendTo(document0);
      Charset charset0 = document1.charset();
      ByteBuffer byteBuffer0 = charset0.encode("S_F9rNEKA$4K(%");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      document1.html(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", ".C");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("4tSAu", "4tSAu");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "br");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("L5aC4|;Sot[-  c7pU");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: L5aC4|;Sot[-  c7pU
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("", "oE}n");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5>U:)Ie", "5>U:)Ie");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("5>U:)Ie");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: 5>U:)Ie
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("4tSAu", "4tSAu");
      // Undeclared exception!
//      try { 
        document0.getElementsByTag((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$XKCr'v5}U", "x.$XKCr'v5}U");
      Element element0 = document0.body();
      element0.setSiblingIndex((-478884939));
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("x.$XKCr'v5}U");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching(".c", "1z[h+i|a?h:");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: 1z[h+i|a?h:
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding("html > body:nth-child(2)", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "br");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("br", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("</");
      Document document0 = parser0.parseInput((Reader) stringReader0, "</");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeStarting("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Document.createShell("]\"Of_3%*7fEW7-:1)EN");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      // Undeclared exception!
//      try { 
        document0.getElementById("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Element element0 = new Element("b");
      // Undeclared exception!
//      try { 
        element0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ua_lLTuiE", "Ua_lLTuiE");
      Element element0 = document0.addClass("Ua_lLTuiE");
      Element element1 = document0.createElement("J1w");
      element0.appendTo(element1);
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '#root.java.lang.String@0000000099': unexpected token at '@0000000099'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.setSiblingIndex((-478884939));
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      // Undeclared exception!
//      try { 
        document0.child(2230);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2230, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      // Undeclared exception!
//      try { 
        document0.child((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9m\u0007@st6", "9m\u0007@st6");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!D,L/5o!PD5FRvpa,E1k", "!D,L/5o!PD5FRvpa,E1k");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.attr("", "\"");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0{", "br");
      DataNode dataNode0 = new DataNode("U|{w^kAc,M3~kL%e", "p~");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
//      try { 
        document0.appendTo(document0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vz", "br");
      Element element0 = document0.head();
      document0.parentNode = (Node) element0;
      // Undeclared exception!
//      try { 
        document0.appendTo(element0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = new Document("T[]eZ&,xa0{dZO9");
      // Undeclared exception!
//      try { 
        document0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("5>U:)Ie", "5>U:)Ie");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.appendElement("5>U:)Ie");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.appendElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      CDataNode cDataNode0 = new CDataNode("html");
      Node node0 = cDataNode0.doClone(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.appendChild(node0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = new Document("html");
      CDataNode cDataNode0 = new CDataNode("ScriptDataDoubleEscapeEnd");
      Node node0 = cDataNode0.doClone(document0);
      // Undeclared exception!
//      try { 
        document0.appendChild(node0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = new Document("T[]eZ&,xa0{dZO9");
      // Undeclared exception!
//      try { 
        document0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/h", ":%s(%dn%+d)");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.append("nzdx(0");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = new Document("class");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("5>U:)Ie", "5>U:)Ie");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.after("/(8Z_3");
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = new Document("Ua_lLTuiE");
      Document document1 = Parser.parse("Ua_lLTuiE", "Ua_lLTuiE");
      document1.parentNode = (Node) document0;
      // Undeclared exception!
//      try { 
        document1.after("RawtextEndTagOpen");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, ".[<~tf<7", attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Tag tag0 = Tag.valueOf("v+4wVD");
      Element element0 = null;
//      try {
        element0 = new Element(tag0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Element element0 = new Element("br");
      element0.html((CharBuffer) null);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.hasClass("9m?");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Tag tag0 = Tag.valueOf("q~i$lr?");
      CDataNode cDataNode0 = new CDataNode("Insert position out of bounds.");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "x.$_XKCr'v5}U", attributes0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      pseudoTextElement0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("4tSAu", "4tSAu");
      document0.prependText("(G");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "br");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell("sgOMk$`Oo-U-G>Pi>:");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("", "oE}n");
      Element element0 = document0.appendTo(document0);
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Document.createShell("sgOMk$`Oo-U-G>Pi>:");
      document0.appendChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Element element0 = document0.body();
      element0.append("#");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Element element0 = new Element("br");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell(":}635x");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "`\"F*fo9:<mAwx'");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "br");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Element element0 = new Element("b");
      element0.select("org.jsoup.parser.HtmlTreeBuilderState");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Tag tag0 = Tag.valueOf("DM#g");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "DM#g", attributes0);
      pseudoTextElement0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0{", "br");
      Element element0 = new Element("br");
      document0.appendTo(element0);
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Attribute", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "br", attributes0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      element0.outerHtmlTail(mockPrintWriter0, 39, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      // Undeclared exception!
//      try { 
        document0.html((OutputStreamWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.createElement("br");
      element0.appendTo(document0);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Tag tag0 = Tag.valueOf("A");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "A", attributes0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      formElement0.outerHtmlHead(charArrayWriter0, (-1247), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Element element0 = new Element(tag0, ")KfEuB=AW>z:E");
      element0.val("br");
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      document0.val("4mbv#@5N1z:bA{s");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("F]FK_P;!;RfH*z");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "$N gLZ=afz6", attributes0);
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "c R!P'{oToSFv}{");
      Element element0 = document0.toggleClass("x.$_XKCr'v5}U");
      Element element1 = element0.addClass("VDpx|W@!Qj");
      element1.hasClass("VDpx|W@!Qj");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Document.createShell("Wz>bCU4CnpFX)");
      document0.toggleClass("Wz>bCU4CnpFX)");
      document0.addClass("Children collection to be inserted must not be null.");
      document0.hasClass("silYcEO=");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000072");
      document0.addClass("java.lang.string@0000000072");
      document0.hasClass("@mK");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      document0.addClass("Tag name must not be empty.");
      document0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ua_lLTuiE", "Ua_lLTuiE");
      document0.addClass("Ua_lLTuiE");
      document0.hasClass("org.jsoup.internal.Normalizer");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("<!,N\u0003?tP^kh;8\"", "<!,N\u0003?tP^kh;8\"");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("JAm']>O'2rH/Nj8Y@", "Tag name must not be empty.");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("header");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.createElement("br");
      element0.appendTo(document0);
      document0.getElementsContainingOwnText("#root");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      CDataNode cDataNode0 = new CDataNode("`\"F*fo9:<mAwx'");
      document0.appendChild(cDataNode0);
      Pattern pattern0 = Pattern.compile("qjfaY", (-1));
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      document0.is((Evaluator) evaluator_Matches0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("+q|+-74JH", "+q|+-74JH");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("+q|+-74JH", "+q|+-74JH", true);
      document0.prependChild(xmlDeclaration0);
      document0.getElementsContainingOwnText("+q|+-74JH");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("selected", "selected");
      document0.append("h-!WZ|6FTDgnFF7S*/m");
      document0.getElementsMatchingText("String input must not be null");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      Document document1 = Parser.parseBodyFragment("html", "html");
      document1.appendChild(document0);
      Pattern pattern0 = Pattern.compile("html", (-1663));
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      document1.is((Evaluator) evaluator_Matches0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("0{", "br");
      Element element0 = document0.createElement("br");
      document0.appendChild(element0);
      document0.getElementsMatchingText("h-yNPS U&M");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5>U:)Ie", "5>U:)Ie");
      document0.title("5>U:)Ie");
      document0.getElementsContainingText("~3zg*b?W_P");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Comment comment0 = new Comment("br", "org.jsoup.nodes.Element$2");
      document0.appendChild(comment0);
      Pattern pattern0 = Pattern.compile("s+", (-439));
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      document0.is((Evaluator) evaluator_Matches0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Element element0 = new Element("b");
      element0.getElementById("y@AKrx1");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "5>U:)Ie");
      Tag tag0 = Tag.valueOf("5>U:)Ie");
      CDataNode cDataNode0 = new CDataNode(" ");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Insert position out of bounds.", attributes0);
      Element element0 = document0.appendTo(formElement0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      document0.appendChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("", "oE}n");
      CDataNode cDataNode0 = new CDataNode("Ylq");
      Node node0 = cDataNode0.doClone(document0);
      document0.reparentChild(node0);
      Element element0 = document0.prependElement("q");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      document0.appendChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = new Document("Ua_lLTuiE");
      Document document1 = Parser.parse("Ua_lLTuiE", "Ua_lLTuiE");
      document1.parentNode = (Node) document0;
      document1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("Ua_lLTuiE", "Ua_lLTuiE");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("Ua_lLTuiE", element0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell("Wz>bCU4CnpFX)");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Wz>bCU4CnpFX)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!D,L/5o!PD5FRvpa,E1k", "!D,L/5o!PD5FRvpa,E1k");
      document0.siblingElements();
      assertEquals("!D,L/5o!PD5FRvpa,E1k", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell("string input must not be null");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals("string input must not be null", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Element element0 = document0.body();
      element0.after("x.$_XKCr'v5}U");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(2)", string0);
      assertEquals("x.$_XKCr'v5}U", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("", "oE}n");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
//      try { 
        document0.insertChildren(58, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-2458), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000015 textarea collection to be inserted must not be null.");
      Node[] nodeArray0 = new Node[0];
      Element element1 = element0.insertChildren((-1), nodeArray0);
      assertEquals("", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "br");
      Elements elements0 = document0.nextElementSiblings();
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1916), (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Must be true", "#");
      Elements elements0 = document0.nextElementSiblings();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertEquals("#", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("5>U:)Ie");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("5>U:)Ie", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("</");
      Document document0 = parser0.parseInput((Reader) stringReader0, "</");
      Element element0 = document0.html("</");
      List<TextNode> list0 = element0.textNodes();
      assertEquals("</", element0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".C", "T[]eZ&,xa0{dZO9");
      List<TextNode> list0 = document0.textNodes();
      // Undeclared exception!
//      try { 
        document0.insertChildren(5198, (Collection<? extends Node>) list0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      Element element0 = document0.append("x.$_XKCr'v5}U");
      element0.appendChild(document0);
      element0.nextElementSibling();
      assertEquals(2, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("", "oE}n");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      assertEquals(1, elements0.size());
      assertEquals("oE}n", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      Element element0 = document0.selectFirst("body");
      assertEquals("x.$_XKCr'v5}U", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ua_lLTuiE", "Ua_lLTuiE");
      document0.is("org.jsoup.internal.Normalizer");
      assertEquals("Ua_lLTuiE", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      Element element0 = document0.removeClass("N,");
      assertEquals("html", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      // Undeclared exception!
//      try { 
        document0.before("children");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0{", "br");
      document0.getElementsByAttribute("F&fz3V]K6\"");
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m;\u0007}2~+", "m;\u0007}2~+");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("xmlns", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse("5>U:)Ie", "5>U:)Ie");
      document0.appendTo(document0);
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertEquals("5>U:)Ie", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("y~@/RLDnSY.9Z$", "CONTINUE");
      Element element0 = document0.shallowClone();
      assertEquals("CONTINUE", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.doSetBaseUri("#");
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$_XKCr'v5}U", "x.$_XKCr'v5}U");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parse("y~@/RLDnSY.9Z$", "CONTINUE");
      Element element0 = document0.text("Insert position out of bounds.");
      assertEquals("CONTINUE", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      document0.getElementsByAttributeValueContaining("id", "c/pz6fNO");
      assertEquals("x.$_XKCr'v5}U", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Pattern pattern0 = Pattern.compile("", 0);
      document0.getElementsByAttributeValueMatching("comment", pattern0);
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x.$XKCr'v5}U", "x.$XKCr'v5}U");
      Elements elements0 = document0.getElementsByClass("x.$XKCr'v5}U");
      assertEquals("x.$XKCr'v5}U", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!D,L/5o!PD5FRvpa,E1k", "!D,L/5o!PD5FRvpa,E1k");
      document0.getElementsByAttributeValueEnding("!D,L/5o!PD5FRvpa,E1k", "!D,L/5o!PD5FRvpa,E1k");
      assertEquals(1, document0.childNodeSize());
      assertEquals("!D,L/5o!PD5FRvpa,E1k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("!D,L/5o!PD5FRvpa,E1k", "!D,L/5o!PD5FRvpa,E1k");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("4tsau", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell("Wz>bCU4CnpFX)");
      // Undeclared exception!
//      try { 
        document0.wrap("AQ+3ZmzEv+KRWi9TKyC");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Elements elements0 = document0.getElementsByIndexEquals(46);
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.getElementsByAttributeStarting("(");
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Sq1kdchAs");
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput((Reader) stringReader0, "Sq1kdchAs");
      Elements elements0 = document0.getElementsByIndexLessThan(0);
      assertEquals("Sq1kdchAs", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = new Document("Ua_lLTuiE");
      // Undeclared exception!
//      try { 
        document0.after("RawtextEndTagOpen");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Element element0 = new Element("b");
      Elements elements0 = element0.getElementsMatchingOwnText("b");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Document.createShell("x.$_XKCr'v5}U");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals(1, element0.siblingIndex());
      assertEquals("html > body", string0);
      assertEquals("x.$_XKCr'v5}U", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("string input must not be null");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting("org.jsoup.select.Evaluator$IndexLessThan", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("#");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("'R!L$a93GSQxRX", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$2");
      Element element1 = element0.attr("org.jsoup.nodes.Element$2", false);
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("selected", "selected");
      // Undeclared exception!
//      try { 
        document0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Tag tag0 = Tag.valueOf(" t?vqL_]SpAaT^L?4");
      Element element0 = new Element(tag0, "textarea");
      element0.wholeText();
      assertEquals("textarea", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.addClass("3}fo=by");
      String string0 = element1.className();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("+q|+-74JH", "+q|+-74JH");
      document0.dataset();
      assertEquals("+q|+-74JH", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("Ua_lLTuiE", "Ua_lLTuiE");
      Element element0 = document0.empty();
      assertEquals("Ua_lLTuiE", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse(" ", "ycg;2M>_JqvoI@vD");
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.child(0);
      assertNotNull(element0);
      assertEquals("ycg;2M>_JqvoI@vD", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w?", "w?");
      document0.appendText("w?");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$2");
      Elements elements0 = element0.children();
      assertEquals(0, elements0.size());
  }
}
