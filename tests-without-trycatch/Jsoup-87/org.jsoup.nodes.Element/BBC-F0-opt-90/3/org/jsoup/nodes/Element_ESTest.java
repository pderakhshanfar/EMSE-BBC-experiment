/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:13:10 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("Cx_L\":,'jy@-TWo", "x+JlaT|d*K");
      document0.prepend("Bes06:-=@,");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("L~^tL.eOMn;I", "L~^tL.eOMn;I");
      document0.toggleClass("'X.KGb-Z/mMaH}Bh");
      document0.getElementsByClass("2bd5<,c");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parse("Bes06:-=@,", "Bes06:-=@,");
      Element element0 = document0.addClass("Bes06:-=@,");
      element0.toggleClass("2EGLn31N:&");
      document0.addClass("Bes06:-=@,");
      element0.getElementsByClass("2EGLn31N:&");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("<ojFA@*a;-<(", "<ojFA@*a;-<(");
      document0.toggleClass("x+JlaT|d*K");
      document0.setSiblingIndex(6);
      document0.addClass("iw)c<8$bx");
      document0.getElementsByClass("java.lang.string@0000000060");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[wv hfl$=8f6*ci* vqu]");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "d~tO|&|YJVL#C0|", attributes0);
      formElement0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$2", "d~tO|&|YJVL#C0|");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$2", attributes0);
      Document document0 = Parser.parseBodyFragment("i{!J$^\"EfM&X}(!", "#root");
      document0.parentNode = (Node) formElement0;
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.StructuralEvaluator$Not", "?m-4G~");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1017), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      Element element0 = document0.head();
      StringWriter stringWriter0 = new StringWriter(2053);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlTail(stringWriter0, (-1112), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bdy", "+");
      MockPrintStream mockPrintStream0 = new MockPrintStream("?rdn<4XJ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(mockPrintStream0, (-2967), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Tag tag0 = Tag.valueOf("8T");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "f5^", attributes0);
      formElement0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",qd*}m", "character outside of valid range");
      Document document1 = document0.clone();
      document1.setParentNode(document0);
      document1.wrap("Ql!tiEYxGaLg0J`");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      Element element0 = document0.head();
      element0.wrap("d+peJR;AR-gMW JE");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("A^ct>]e*1g3q", "id");
      Element element0 = document0.body();
      element0.wrap("id");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("8g?zZ/xz~%;b2 (+");
      document0.siblingIndex = 3188;
      document0.val("");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell(",qdzm");
      Element element0 = document0.head();
      element0.val("ze&/gs=$#ah~\"rin");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("V Hfl", "br");
      document0.val("bV3@Ki*^9\u0004OD");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse(",qd*}m", ",qd*}m");
      Document document1 = Parser.parse(",qd*}m", ",qd*}m");
      document0.setParentNode(document1);
      document0.after((Node) document1);
      document1.toggleClass("CharacterReferenceInData");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("3p$-");
      Element element0 = document0.head();
      element0.toggleClass("3p$-");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "head", attributes0);
      Element element1 = element0.appendElement("br");
      element1.after((Node) element0);
      element0.text("6^n:n5O%t}r9\"rK");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.text("FB`y^a}");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f1!m<|:~/]", "f1!m<|:~/]");
      Element element0 = document0.prependElement("aN");
      document0.prependText("f1!m<|:~/]");
      element0.tagName("a");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f1!m<|:~/]", "f1!m<|:~/]");
      Element element0 = document0.prependElement("aN");
      element0.tagName("a");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("F q594N/}w`eRH", "F q594N/}w`eRH");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wv hfl", "");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Element element0 = new Element("font");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("OM`kG1}g.I", "OM`kG1}g.I");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", "`");
      document0.selectFirst("rFAs");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!2pwa~bsh#", "!2pwa~bsh#");
      Element element0 = document0.prependElement("aN");
      document0.prependText("!2pwa~bsh#");
      element0.selectFirst("aN");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000038", "java.lang.string@0000000038");
      Element element0 = document0.createElement("ascii");
      element0.selectFirst("ascii");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$2", attributes0);
      formElement0.select("typemustmatch");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell(",qdz}m");
      document0.select("*");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      Element element0 = document0.prependText(",qd*}m");
      document0.setParentNode(element0);
      element0.after((Node) document0);
      document0.removeClass(",qd*}m");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("F &q594N/}w`eRH", "F &q594N/}w`eRH");
      document0.tagName("body");
      document0.removeClass("F &q594N/}w`eRH");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = new Document("body");
      document0.removeClass("br");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("8ZM@|y", "/&]S");
      Element element0 = document0.head();
      element0.before("/");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "head", attributes0);
      Element element1 = element0.appendElement("br");
      element1.after((Node) element0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("yoot", "yoot");
      Element element0 = document0.body();
      element0.prependText("yoot");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("wV Hfl", "wV Hfl");
      document0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell("Xg+f8<.)rYG{f");
      document0.setSiblingIndex(7);
      DataNode dataNode0 = DataNode.createFromEncoded("Xg+f8<.)rYG{f", "Xg+f8<.)rYG{f");
      document0.prependChild(dataNode0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("attributeDoubleValueCharsSorted", "attributeDoubleValueCharsSorted");
      Element element0 = document0.head();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("InSelectInTable", "InSelectInTable");
      Element element0 = document0.body();
      element0.prepend("InSelectInTable");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Element element0 = new Element("Xuqb>RdW;09");
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("3^@o(tX#IY/yr0mPC");
      Element element0 = document0.prepend("?sXtgOOwex");
      element0.siblingIndex = (-1381);
      document0.val("3^@o(tX#IY/yr0mPC");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("7|L03Wk+SJA", "7|L03Wk+SJA");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("mqsn^jhb$i", "org.jsoup.nodes.Element");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse(",qd*}m", ",qd*}m");
      Document document1 = Parser.parse(",qd*}m", ",qd*}m");
      document0.setParentNode(document1);
      document0.after((Node) document1);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",qd*}m", "character outside of valid range");
      Document document1 = document0.clone();
      document1.setParentNode(document0);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("_q}", "EIVV[ynJ");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      document0.prependText(",qd*}m");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("wV Hfl", "wV Hfl");
      Element element0 = document0.prependElement("y,nndzA");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = new Document(",qd*}m");
      Element element0 = document0.prependElement("aN");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(",qd*}m", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("aN");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "aN", attributes0);
      element0.after((Node) formElement0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}qsj9jHI", "}qsj9jHI");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ScriptDataEscapeStartDash", "ScriptDataEscapeStartDash");
      Pattern pattern0 = Pattern.compile("ScriptDataEscapeStartDash", 60);
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      document0.is((Evaluator) evaluator_Matches0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "s+");
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("s+", "s+");
      document0.is((Evaluator) evaluator_AttributeWithValueEnding0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Element element0 = new Element("encoding");
      element0.is("encoding");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "id", attributes0);
      Node[] nodeArray0 = new Node[0];
      formElement0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      Element element0 = document0.head();
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      element0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("");
      document0.setSiblingIndex((-850));
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "html", attributes0);
      formElement0.html("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse(".", "Index must be numeric");
      Document document1 = Parser.parseBodyFragmentRelaxed("Bzh ma^!U*7#5N1Y-_", "rea");
      Element element0 = document0.appendTo(document1);
      element0.html("qc4Th)ZC+MM>E*QN");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}qsj9jHI", "}qsj9jHI");
      File file0 = MockFile.createTempFile("X|g[lL(';P0;", "X|g[lL(';P0;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      document0.html(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("}T!0}B4mJY<7~AB<");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "ScriptDataEscapedDash", attributes0);
      formElement0.html();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.id();
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = new Document("body");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      Pattern pattern0 = Pattern.compile("#document", (-719));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      Pattern pattern0 = Pattern.compile("", (-719));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      Pattern pattern0 = Pattern.compile("#root", (-2472));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("OM`kG1}glPI", "OM`kG1}glPI");
      document0.getElementsMatchingOwnText("OM`kG1}glPI");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = new Document("");
      document0.getElementsContainingOwnText("+}");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$2", attributes0);
      formElement0.getElementsByTag("HxZnBwQ}Mi$j)-z");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Tag tag0 = Tag.valueOf("^,}jOEZGYVV3eu*");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "j'in;n", (Attributes) null);
      pseudoTextElement0.getElementsByTag("^,}jOEZGYVV3eu*");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("cHt.+k|q_", "f2Yd");
      document0.getElementsByIndexLessThan((-377));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("X4U'_5]:");
      document0.getElementsByIndexGreaterThan(49);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "s+");
      document0.getElementsByAttributeValueStarting("_t%0&<(zB/0c:", "textarea");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("TYqo", "TYqo");
      document0.getElementsByAttributeValueNot("|<;'7q81", "textarea");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      Element element0 = document0.attr("q<", "#root");
      Pattern pattern0 = Pattern.compile("", (-719));
      element0.getElementsByAttributeValueMatching("q<", pattern0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(".G.Y]Pc3I", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(".G.Y]Pc3I");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, ".G.Y]Pc3I", attributes0);
      formElement0.getElementsByAttributeValueEnding("#root", "V4s{2H0j.");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",qd*0", ",qd*0");
      document0.getElementsByAttributeValue("aN", "org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      Element element0 = document0.attr("q<", "#root");
      element0.getElementsByAttribute("q<");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("F q594N/}w`eRH", "F q594N/}w`eRH");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("TYqo", "TYqo");
      document0.siblingIndex = 15;
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Element element0 = new Element("blockquote");
      element0.setSiblingIndex((-992));
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Element element0 = new Element("blockquote");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("I=N.", "I=N.");
      Element element0 = document0.doClone(document0);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("}qsj9jHI");
      Document document1 = document0.clone();
      document1.setParentNode(document0);
      Element element0 = document1.after((Node) document0);
      document0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("footer", parseSettings0);
      Element element0 = new Element(tag0, "footer");
      DataNode dataNode0 = new DataNode(":nth-child(%d)");
      element0.doClone(dataNode0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = new Document("wV Hfl");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f1!m<|:~/]", "f1!m<|:~/]");
      Element element0 = document0.prependElement("aN");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      Element element0 = document0.head();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse(",qd*}m", ",qd*}m");
      Document document1 = Parser.parse(",qd*}m", ",qd*}m");
      document0.setParentNode(document1);
      document0.after((Node) document1);
      Set<String> set0 = document0.classNames();
      document1.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.toggleClass("n\"FK|v@#=emBbzOM");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}<q5M4N/}`eRH", ":nth-child(%d)");
      document0.toggleClass("Children collection to be inserted must not be null.");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("V Hfl", "br");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("KDJ)&\"xgXc?.Lva]PO", "wv hfl");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("\"4{\"8<fB-`;5L@", "\"kyxelwm#{c/d");
      Element element0 = document0.doClone(document0);
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mqsN^jHI", "mqsN^jHI");
      Element element0 = document0.prependElement("aN");
      DocumentType documentType0 = new DocumentType("", "", "", "aN");
      element0.before((Node) documentType0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = Parser.parse("", "");
      document1.setParentNode(document0);
      document1.before("j'in;n");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&uoes~x", "&uoes~x");
      document0.attr("&uoes~x", "&uoes~x");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F &q594N/}w`eRH", "F &q594N/}w`eRH");
      document0.prependText("F &q594N/}w`eRH");
      document0.setParentNode(document0);
      document0.after((Node) document0);
      document0.attr("#root", false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wv hfl", "");
      Element element0 = document0.head();
      element0.attr("LLW!`zN%VL]0Bq.-", false);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "n^[rX]2LHe(h=m\u0002SG{");
      document0.attr(":matchText", false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      document0.setSiblingIndex(4);
      document0.attr("#root", "#root");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document("*OS&(llDiz-CX >/");
      document0.setSiblingIndex((-850));
      document0.attr("b!r", "*OS&(llDiz-CX >/");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("s*.");
      Element element0 = document0.head();
      element0.attr("s*.", "s*.");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("n");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("TYqo", "TYqo");
      document0.siblingIndex = 15;
      document0.appendText("textarea");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("F &q594N/}w`eRH", "F &q594N/}w`eRH");
      document0.appendElement("F &q594N/}w`eRH");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "id", attributes0);
      formElement0.appendElement("menu");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("8%ih", "ScriptDataEscapedEndTagName");
      Element element0 = document0.selectFirst("html");
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("}<q5M4N/}`eRH", "}<q5M4N/}`eRH");
      DataNode dataNode0 = new DataNode("}<q5M4N/}`eRH", ",Ym%Z*Yj9");
      document0.appendChild(dataNode0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("8%ih", "ScriptDataEscapedEndTagName");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("r2");
      Element element0 = document0.body();
      element0.append("Vp`JKPt!Gv");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document("");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Bes06:-=@,", "Bes06:-=@,");
      Element element0 = document0.body();
      document0.setParentNode(element0);
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!2pwa~bsh#", "!2pwa~bsh#");
      Element element0 = document0.prependElement("aN");
      document0.prependText("!2pwa~bsh#");
      element0.after("an");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}qsj9jHI", "}qsj9jHI");
      Element element0 = document0.head();
      element0.after("}qsj9jHI");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse(",qd*}m", ",qd*}m");
      Document document1 = document0.clone();
      document0.setParentNode(document1);
      document0.after("1>ci#z::f");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("ScriptDataDoubleEscaped", "textarea");
      Element element0 = document0.body();
      element0.addClass("#root");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell("^%");
      document0.siblingIndex = (-1982);
      document0.addClass("^%");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("3p$-");
      Element element0 = document0.head();
      element0.addClass("3p$-");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" <%s>", " <%s>");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.wrap("wv hfl");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$2", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.wrap("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Bes06:-=@,", "Bes06:-=@,");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.val("Bes06:-=@,");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("uF", "uF");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = new Document("area");
      // Undeclared exception!
//      try { 
        document0.text("<fBVF");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("F &q594N/}w`eRH");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(" <%s>", parseSettings0);
      Element element0 = new Element(tag0, "\"kyxelwm#{c/d", attributes0);
      // Undeclared exception!
//      try { 
        element0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f2Yd", "bI/g9ZTHNX4)4]~");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.tagName("443");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("cHt.+k|q_", "f2Yd");
      // Undeclared exception!
//      try { 
        document0.tagName("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "id", attributes0);
      Document document0 = Parser.parseBodyFragment("id", "#root");
      document0.parentNode = (Node) formElement0;
      // Undeclared exception!
//      try { 
        document0.siblingElements();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal Capacity: -1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "#root");
      // Undeclared exception!
//      try { 
        document0.selectFirst("3^xtL`m(@p)B'");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '3^xtL`m(@p)B'': unexpected token at '^xtL`m(@p)B''
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$2", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("$* P&xw,PbpEa-");
      TextNode textNode0 = new TextNode("[[qJ3J2vOVL&bvfpRdW");
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.previousElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      DocumentType documentType0 = new DocumentType("n\"FK|v@#=emBbzOM", " `kn.J#!`pCJu(*6", " `kn.J#!`pCJu(*6");
      document0.setParentNode(documentType0);
      // Undeclared exception!
//      try { 
        document0.previousElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("f1!m<|:p?/]");
      List<Node> list0 = Parser.parseFragment("Pattern syntax error: ", (Element) document0, "Pattern syntax error: ");
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.prependText("f1!m<|:p?/]");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("wv hfl");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prependElement("h'^HU>U~(eOa");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("f1!m<|:p?/]");
      List<Node> list0 = Parser.parseFragment("Pattern syntax error: ", (Element) document0, "Pattern syntax error: ");
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.prependElement("aN");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell(".%s");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
//      try { 
        document1.prependElement("aN");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.Tag", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "F");
      // Undeclared exception!
//      try { 
        document0.prependElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Tag tag0 = Tag.valueOf("wv hfl");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "lTF@~2", attributes0);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("\"<d4?W", true);
      Element element0 = formElement0.doClone(xmlDeclaration0);
      // Undeclared exception!
//      try { 
        formElement0.prependChild(element0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$2", attributes0);
      Document document0 = Parser.parseBodyFragment("id", "#root");
      CDataNode cDataNode0 = new CDataNode("2z@V5Pz");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
//      try { 
        document0.prependChild(node0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse(",qd*}m", ",qd*}m");
      Document document1 = document0.clone();
      document0.setParentNode(document1);
      Element element0 = document0.after((Node) document1);
      // Undeclared exception!
      element0.prepend(",qd*}m");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("iCA=78", parseSettings0);
      Element element0 = new Element(tag0, "java.lang.string@0000000054");
      TextNode textNode0 = TextNode.createFromEncoded("iCA=78");
      element0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        element0.prepend("java.lang.string@0000000054");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell("[8");
      MockFile mockFile0 = new MockFile("WJL~(@2o");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1080);
      // Undeclared exception!
      document0.outerHtmlTail(mockFileWriter0, 24, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse("F &q594N/}w`eRH", "F &q594N/}w`eRH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[f &q594n/}w`erh$=f &q594n/}w`erh]");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(bufferedWriter0, 1008, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("character is ntavaid unicode code point", "character is ntavaid unicode code point");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(stringWriter0, (-2522), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":aret%s", ":aret%s");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
//      try { 
        document0.outerHtmlTail(pipedWriter0, 0, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parse("L~^tL.eOMn;I", "L~^tL.eOMn;I");
      MockFileWriter mockFileWriter0 = new MockFileWriter("p@b^5a6#ko7#lh,knb");
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(mockFileWriter0, 8482, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Document.createShell("bdy");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("bdy");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(57343);
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(mockPrintWriter0, 57343, document_OutputSettings1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("ML", "ML");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
//      try { 
        document0.outerHtmlHead(pipedWriter0, 13, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("2", "2");
      DataNode dataNode0 = DataNode.createFromEncoded("0&={@# X=A9:iXK", "</");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
//      try { 
        document0.nextElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("OM`kG1}g.I", parseSettings0);
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$AllElements");
      // Undeclared exception!
//      try { 
        element0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("{K9TNZBza+e@ALQP=", "5");
      Comment comment0 = new Comment("value");
      document0.setParentNode(comment0);
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" <%s>", " <%s>");
      document0.setParentNode(document0);
      Pattern pattern0 = Pattern.compile("m}KfWeEs<v6.]", 3);
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_Matches0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = new Document(",eE5");
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Document.createShell("P@B^5a6#ko7#LH,KNB");
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute((String) null);
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) evaluator_Attribute0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthLastChild", "org.jsoup.select.Evaluator$IsNthLastChild");
      CDataNode cDataNode0 = new CDataNode(":parent%s");
      document0.parentNode = (Node) cDataNode0;
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "#root");
      // Undeclared exception!
//      try { 
        document0.is("");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '': unexpected token at ''
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = new Document("character is ntavaid unicode code point");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("character is ntavaid unicode code point");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("O.0nP(lGkb{d");
      CDataNode cDataNode0 = new CDataNode("w-Ty]qftO}wMV4M!");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.is("ScriptDataEscapedDash");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("InSelectInTable", "InSelectInTable");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f2Yd", "bI/g9ZTHNX4)4]~");
      Elements elements0 = document0.getElementsMatchingText("f2Yd");
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = new Document(".Mi");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2;1(#X3>xb&", " <%s>");
      // Undeclared exception!
//      try { 
        document0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000060 ", "ZmE\"^7yp&7N$");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html((StringWriter) null);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("L[#f#A$");
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
//      try { 
        document0.html(charBuffer0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" <%s>", " <%s>");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$2", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<!--", "<!--");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("{eU8EU&DD(&F0U`");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: {eU8EU&DD(&F0U`
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parse("F q594N/}w`eRH", "F q594N/}w`eRH");
      DataNode dataNode0 = new DataNode(".Mi");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("Unexpected token type: ");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("id", "f A)g{V");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = new Document("*OS&(llDiz-CX >/");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("*OS&(llDiz-CX >/");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: *OS&(llDiz-CX >/
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!2pwa~bsh#", "!2pwa~bsh#");
      Element element0 = document0.attr("aN", "!2pwa~bsh#");
      element0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.getElementsContainingText("!2pwa~bsh#");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell("Y(^|Y");
      Element element0 = document0.prependText("");
      Comment comment0 = new Comment("Y(^|Y");
      document0.setParentNode(comment0);
      // Undeclared exception!
//      try { 
        element0.getElementsContainingText("(G@,u96G");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("character is nta4aid unicode code point", "character is nta4aid unicode code point");
      document0.siblingIndex = (-230305542);
      document0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.getElementsContainingText("character is nta4aid unicode code point");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$2", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.getElementsByTag("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("-e{t", "-e{t");
      Element element0 = document0.head();
      element0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexEquals(50);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("vftay6x", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("vftay6x");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "vftay6x", attributes0);
      cDataNode0.reparentChild(formElement0);
      // Undeclared exception!
//      try { 
        formElement0.getElementsByIndexEquals(2073);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("x+JlaT|d*K", "x+JlaT|d*K");
      Element element0 = document0.addClass("Jw)L<8$bx");
      element0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("java.lang.string@0000000060");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("object", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "s+");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("", "\"<d4?W");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "id", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.getElementsByAttributeValueMatching("", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f2Yd", "bI/g9ZTHNX4)4]~");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("bI/g9ZTHNX4)4]~", "bI/g9ZTHNX4)4]~");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: bI/g9ZTHNX4)4]~
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("id", "id");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("&u=C'3'oN_cIV~Ett", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(" <%s>");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(" |<;'7q81", parseSettings0);
      Element element0 = new Element(tag0, "ScriptDataEscapeStartDash", attributes0);
      // Undeclared exception!
//      try { 
        element0.getElementsByAttributeStarting((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("F q594N/}w`eRH", "F q594N/}w`eRH");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{+K($<q,|z7|^2", "{+K($<q,|z7|^2");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.getElementById("{+K($<q,|z7|^2");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.NodeTraversor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Element element0 = new Element("wV Hfl");
      // Undeclared exception!
//      try { 
        element0.getElementById((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("dNHpnR\"RnV+$.*%", "dNHpnR\"RnV+$.*%");
      CDataNode cDataNode0 = new CDataNode("caption");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("Bes06:-=@,", "Bes06:-=@,");
      document0.addClass("Bes06:-=@,");
      Element element0 = new Element("]Q");
      Element element1 = document0.appendTo(element0);
      // Undeclared exception!
//      try { 
        element1.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '#root.java.lang.String@0000000062': unexpected token at '@0000000062'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" <%s>", " <%s>");
      DocumentType documentType0 = new DocumentType(" <%s>", "<!DOCTYPE", "<!DOCTYPE", "eu}", "<!DOCTYPE");
      document0.setParentNode(documentType0);
      // Undeclared exception!
//      try { 
        document0.cssSelector();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parse("c}<JqJ8T", "c}<JqJ8T");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) linkedHashSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")", "+");
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("H<$2m", "H<$2m");
      // Undeclared exception!
//      try { 
        document0.child((-1996));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      DataNode dataNode0 = new DataNode("n\"FK|v@#=emBbzOM", "$W5Mm&yTYF=-<fq=");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Document document1 = Parser.parse("#root", "#root");
      document0.setParentNode(document1);
      document0.after((Node) document1);
      // Undeclared exception!
      document1.before("");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("L~^tL.eOMn;I", "L~^tL.eOMn;I");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.attr(",qd*}m", ",qd*}m");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, "Z0u+UH#Pacuh2");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
//      try { 
        document0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":ImmediateParent%s");
      CDataNode cDataNode0 = new CDataNode("h*b=pq{!'7Hg&g");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "h*b=pq{!'7Hg&g", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bdy", "");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.appendElement("04!t&c`c<<wJ)J>w");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wv hfl", "wv hfl");
      // Undeclared exception!
//      try { 
        document0.appendElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("P@B6^5a6#koH,KNB");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      // Undeclared exception!
//      try { 
        element0.appendChild(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wV *Hl", "wV *Hl");
      // Undeclared exception!
//      try { 
        document0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" <%s>", " <%s>");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.append("|r$u");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`0e#ndg2", " > ");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Document.createShell("Xg+f8<.)rYG{f");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("Xg+f8<.)rYG{f");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pdsI^vbZE", "mqsN^jHI");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("s+");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
//      try {
        element0 = new Element(tag0, (String) null, attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "#root");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = new Document("_y&$V");
      document0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("N+lNaB%#qgz:iF-w&_", "mqsN^jHI");
      document0.toggleClass("mqsN^jHI");
      document0.addClass("mqsN^jHI");
      document0.hasClass("mqsN^jHI");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = new Document("_y&$V");
      document0.hasClass("_y&$V");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("image", "image");
      document0.toggleClass("param");
      document0.hasClass("<html>\n <head></head>\n <body>\n  image\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Element element0 = new Element("Xuqb>RdW;09");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      Element element0 = document0.prependText(",qd*}m");
      element0.data();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Document.createShell(",qdz}m");
      document0.prependText(",qdz}m");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = new Document("wV Hfl");
      document0.getElementById("XnihtGY3dq}n");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("TYqo", "TYqo");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell(",kp?e+j_<[104b");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      document0.setParentNode(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Document.createShell("X4U'_5]:");
      document0.prependElement("VFtay6X");
      document0.setParentNode(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F &q594N/}w`eRH", "F &q594N/}w`eRH");
      document0.setParentNode(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      Element element0 = document0.head();
      document0.appendTo(element0);
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("ScriptDataDoubleEscaped", "textarea");
      document0.hasAttr("");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}<q5M4N/}`eRH", ":nth-child(%d)");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("F &q594N/}w`eRH", "F &q594N/}w`eRH");
      // Undeclared exception!
//      try { 
        document0.child(673);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 673, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("OM`kG1}g.I", parseSettings0);
      Element element0 = new Element(tag0, "OM`kG1}g.I");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("2", "2");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("OM`kG1}glPI", parseSettings0);
      Element element0 = new Element(tag0, "OM`kG1}glPI");
      element0.getElementsByAttributeValueMatching("OM`kG1}glPI", (Pattern) null);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("8%ih", "ScriptDataEscapedEndTagName");
      // Undeclared exception!
//      try { 
        document0.select("8%ih");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '8%ih': unexpected token at '%ih'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("dy", "+");
      document0.title("+");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Element element0 = new Element("font");
      element0.appendElement("font");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("wV.Hf");
      // Undeclared exception!
//      try { 
        document0.html((CharArrayWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Element element0 = new Element(tag0, "textarea", (Attributes) null);
      element0.val();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.toggleClass("");
      document0.addClass("");
      document0.hasClass("java.lang.string@0000000060");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parse("WqsN6jHI", "WqsN6jHI");
      document0.toggleClass("#root");
      document0.dataset();
      document0.addClass("Jw)L<8$bx");
      document0.hasClass("java.lang.string@0000000055");
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse("mqsn^jhb$i", "org.jsoup.nodes.Element");
      document0.toggleClass("org.jsoup.nodes.Element");
      document0.addClass("@  XeYdHt");
      document0.hasClass("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("^%");
      document0.addClass("^%");
      document0.hasClass("java.lang.string@0000000081");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<!--", "<!--");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "#root");
      document0.prependText("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("character is nta4aid unicode code point", "character is nta4aid unicode code point");
      document0.setParentNode(document0);
      document0.getElementsContainingText("character is nta4aid unicode code point");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("{.MP|Oy}");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(".G.Y]Pc3I", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(".G.Y]Pc3I");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, ".G.Y]Pc3I", attributes0);
      Element element0 = formElement0.prependChild(cDataNode0);
      element0.text();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bdy", "");
      document0.title("+");
      Pattern pattern0 = Pattern.compile(" > ", 409);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      Element element0 = document0.prependText(",qd*}m");
      element0.getElementsContainingOwnText((String) null);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("F &q594N/}w`eRH", "F &q594N/}w`eRH");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      Element element0 = document0.prependText(",qd*}m");
      element0.append(",qd*}m");
      element0.getElementsMatchingText("form");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("+,Ir8@@a", "ngX;fX8zf");
      document0.prependElement("br");
      Element element0 = document0.prependText("br");
      element0.getElementsContainingText("+,Ir8@@a");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("<<!U69+", "data");
      document0.prependElement("AC^WG;%a}Lc\"(k|2");
      Element element0 = document0.prependText("pnLrTyK'>)'W}}1P");
      element0.getElementsContainingText("[DRcL6H7U$25K5N2");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Tag tag0 = Tag.valueOf("aN");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Evaluator$ContainsText");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = Attribute.createFromEncoded("id", "id");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "ScriptDataDoubleEscapedLessthanSign", attributes1);
      formElement0.getElementById("id");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("+,Ir8@@a", "ngX;fX8zf");
      document0.setParentNode(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",qd*0", ",qd*0");
      Element element0 = document0.prependElement("aN");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = new Document("body");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      Element element0 = document0.prependText(",qd*}m");
      document0.setParentNode(element0);
      Element element1 = element0.after((Node) document0);
      element1.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("2", "2");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      document0.setParentNode(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("wV Hfl", "wV Hfl");
      Element element0 = document0.prependElement("y,nndzA");
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
      assertEquals("wV Hfl", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("object", "");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[8", "[8");
      document0.siblingElements();
      assertEquals("[8", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("P@B6^5a6#koH,KNB");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals("P@B6^5a6#koH,KNB", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wv hfl", "wv hfl");
      Element element0 = document0.head();
      Element element1 = element0.appendText("");
      element1.before("wv hfl");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(3)", string0);
      assertEquals("wv hfl", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.toggleClass("n\"FK|v@#=emBbzOM");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      attributes0.put("id", "id");
      FormElement formElement0 = new FormElement(tag0, "id", attributes0);
      String string0 = formElement0.cssSelector();
      assertEquals("#id", string0);
      assertEquals("id", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Tag tag0 = Tag.valueOf("8T");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "f5^", attributes0);
      Node[] nodeArray0 = new Node[7];
      // Undeclared exception!
//      try { 
        formElement0.insertChildren(58, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("character is not a valid unicode code point", "character is not a valid unicode code point");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(1, nodeArray0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("character is not a valid unicode code point", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("F &q594N/}w`eRH", "F &q594N/}w`eRH");
      Elements elements0 = document0.getElementsMatchingText("Gh&P>EXO3v");
      // Undeclared exception!
//      try { 
        document0.insertChildren(69, (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("V Hfl", "br");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1926), (Collection<? extends Node>) linkedHashSet0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
      assertEquals(1, element0.childNodeSize());
      assertEquals(",qd*}m", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals(",qd*}m", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("F<q594N/}`eRH", "F<q594N/}`eRH");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("F<q594N/}`eRH", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("F<q594N/}`eRH", "F<q594N/}`eRH");
      document0.append("F<q594N/}`eRH");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Document document0 = Parser.parseBodyFragmentRelaxed(" <%s>", " <%s>");
      Element element0 = document0.prependText("->%_M:Fu!w:1ko");
      Element element1 = document0.attr(" <%s>", "c_LM[-l;Hzt!3ICe%D");
      document0.setParentNode(element1);
      document0.nodeName();
      Elements elements0 = element0.getElementsByIndexEquals(8);
      assertTrue(elements0.isEmpty());
      assertEquals(" <%s>", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("Xg+f8<.)rYG{f");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1433506051));
      assertEquals("Xg+f8<.)rYG{f", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = new Document("2");
      // Undeclared exception!
//      try { 
        document0.selectFirst("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Document.createShell("O.0nP(lGkb{d");
      document0.is("ScriptDataEscapedDash");
      assertEquals(1, document0.childNodeSize());
      assertEquals("O.0nP(lGkb{d", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(" <%s>");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(" |<;'7q81", parseSettings0);
      Element element0 = new Element(tag0, "ScriptDataEscapeStartDash", attributes0);
      element0.getAllElements();
      assertEquals("ScriptDataEscapeStartDash", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse(",root", ",root");
      // Undeclared exception!
//      try { 
        document0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("eK@", "eK@");
      // Undeclared exception!
//      try { 
        document0.before("eK@");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parse("TYqo", "TYqo");
      document0.getElementsByAttribute("eu}");
      document0.attributes();
      assertEquals("TYqo", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WqsN^jHI", "WqsN^jHI");
      Elements elements0 = document0.getElementsByAttributeValueNot("WqsN^jHI", "                   ");
      assertEquals("WqsN^jHI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*PL!1gF", "*PL!1gF");
      Element element0 = document0.shallowClone();
      element0.childNodeSize();
      assertEquals("*PL!1gF", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("dy", "+");
      document0.doSetBaseUri("hcmJ");
      assertEquals("hcmJ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      document0.getElementsByAttributeValueContaining("#root", " > ");
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parse("7|L03Wk+SJA", "7|L03Wk+SJA");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding("", "h6");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      document0.attr("#root", "#root");
      Elements elements0 = document0.getElementsByAttributeValueEnding("#root", "#root");
      assertEquals("#root", document0.baseUri());
      assertEquals(1, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("A^ct>]e*1g3q", "id");
      // Undeclared exception!
//      try { 
        document0.wrap("id");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Document.createShell("wV.Hf");
      Elements elements0 = document0.getElementsMatchingOwnText("wV.Hf");
      assertEquals("wV.Hf", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", "`");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertEquals(1, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse(".", "Index must be numeric");
      document0.getElementsByAttributeStarting(".");
      assertEquals("Index must be numeric", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!2pwa~b(sh#", "!2pwa~b(sh#");
      Element element0 = document0.prependElement("br");
      assertEquals(0, element0.siblingIndex());
      
      document0.ownText();
      assertEquals("!2pwa~b(sh#", document0.baseUri());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parse("Bes06:-=@,", "Bes06:-=@,");
      Elements elements0 = document0.getElementsByIndexLessThan(1123);
      assertEquals("Bes06:-=@,", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wV Hfl", "wV Hfl");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wv hfl", "wv hfl");
      Element element0 = document0.head();
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("wv hfl", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "s+");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting("_t%0&<(zB/0c:", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#&F6w", "         ");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue((String) null, "head");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Element element0 = new Element("encoding");
      String string0 = element0.wholeText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse("eK@", "eK@");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Element element0 = new Element("textarea");
      // Undeclared exception!
//      try { 
        element0.after((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element$2");
      element0.val("Fu?9");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = new Document("rot");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Document.createShell(",qd*}m");
      document0.previousElementSiblings();
      assertEquals(",qd*}m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Document.createShell("8g?zZ/xz~%;b2 (+");
      // Undeclared exception!
//      try { 
        document0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("OM`kG1}g.I", parseSettings0);
      Element element0 = new Element(tag0, "OM`kG1}g.I");
      element0.children();
      assertEquals("OM`kG1}g.I", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("wV Hfl", "wV Hfl");
      document0.nextElementSiblings();
  }
}
